/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.ra.process;

import com.fasterxml.jackson.databind.ObjectMapper;
import vn.ra.object.MENULINK;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.log4j.Logger;
import vn.ra.object.ATTRIBUTE_VALUES;
import vn.ra.object.BRANCH;
import vn.ra.object.CITY_PROVINCE;
import vn.ra.object.CONFIG_EMAIL;
import vn.ra.object.ROLE;
import vn.ra.object.BACKOFFICE_USER;
import vn.ra.object.BRANCH_ROLE;
import vn.ra.object.BRANCH_STATE;
import vn.ra.object.BranchInfo;
import vn.ra.object.CERTIFICATION;
import vn.ra.object.CERTIFICATION_ALGORITHM;
import vn.ra.object.CERTIFICATION_ATTR_STATE;
import vn.ra.object.CERTIFICATION_ATTR_TYPE;
import vn.ra.object.CERTIFICATION_AUTHORITY;
import vn.ra.object.CERTIFICATION_AUTHORITY_ATTR;
import vn.ra.object.CERTIFICATION_CONTACT;
import vn.ra.object.CERTIFICATION_CONTROL_REPORT;
import vn.ra.object.CERTIFICATION_OWNER;
import vn.ra.object.CERTIFICATION_OWNER_STATE;
import vn.ra.object.CERTIFICATION_OWNER_TYPE;
import vn.ra.object.CERTIFICATION_POLICY_DATA;
import vn.ra.object.CERTIFICATION_PROFILE;
import vn.ra.object.CERTIFICATION_PROFILE_ATTR;
import vn.ra.object.CERTIFICATION_PURPOSE;
import vn.ra.object.SERVICE_TYPE;
import vn.ra.object.CERTIFICATION_REPORT_SUMMARY;
import vn.ra.object.CERTIFICATION_REVOCATION_REASON;
import vn.ra.object.CERTIFICATION_STATE;
import vn.ra.object.CertificateBriefInfo;
import vn.ra.object.CertificateAuthorityInfo;
import vn.ra.object.CertificateInfo;
import vn.ra.object.CertificateNEACReportInfo;
import vn.ra.object.CertificateOwnerInfo;
import vn.ra.object.CertificateOwnerStateInfo;
import vn.ra.object.CertificateOwnerTypeInfo;
import vn.ra.object.CertificateProfileInfo;
import vn.ra.object.CertificatePurposeInfo;
import vn.ra.object.CertificateReportInfo;
import vn.ra.object.CertificateRevocationReasonInfo;
import vn.ra.object.CertificateExpireSoonInfo;
import vn.ra.object.CertificateStateInfo;
import vn.ra.object.CityProvinceInfo;
import vn.ra.object.DISCOUNT_RATE_PROFILE;
import vn.ra.object.FILE_MANAGER;
import vn.ra.object.FILE_MANAGER_STATE;
import vn.ra.object.FILE_PROFILE;
import vn.ra.object.FUNCTIONALITY;
import vn.ra.object.FileTypeInfo;
import vn.ra.object.FormFactorTokenInfo;
import vn.ra.object.FormFactorUnblockInfo;
import vn.ra.object.GENERAL_POLICY;
import vn.ra.object.MENULINK_TOKEN;
import vn.ra.object.PAYMENT;
import vn.ra.object.FormfactorInfo;
import vn.ra.object.MESSAGING_QUEUE_FUNCTION;
import vn.ra.object.MESSAGING_QUEUE_STATE;
import vn.ra.object.NEAC_LOG;
import vn.ra.object.NEAC_SYNC_STATE;
import vn.ra.object.PKI_FORMFACTOR;
import vn.ra.object.RESPONSE_CODE;
import vn.ra.object.SERVER_ENTITY;
import vn.ra.object.SMART_SYSTEM_LOG;
import vn.ra.object.PUSH_TOKEN;
import vn.ra.object.PeriodicReportInfo;
import vn.ra.object.ProObj;
import vn.ra.object.QueueStateInfo;
import vn.ra.object.QueueTypeInfo;
import vn.ra.object.REPORT_CONTROL_NEAC;
import vn.ra.object.REPORT_PER_MONTH;
import vn.ra.object.REPORT_QUICK_BRANCH;
import vn.ra.object.REPORT_RECURRING_NEAC;
import vn.ra.object.ReconciliationReportInfo;
import vn.ra.object.SYSTEM_LOG;
import vn.ra.object.TOKEN;
import vn.ra.object.TOKEN_ATTR_STATE;
import vn.ra.object.TOKEN_ATTR_TYPE;
import vn.ra.object.TOKEN_IMPORT;
import vn.ra.object.TOKEN_STATE;
import vn.ra.object.TOKEN_VERSION;
import vn.ra.object.USER_STATE;
import vn.ra.object.UserInfo;
import vn.ra.object.UserRoleInfo;
import vn.ra.utility.Config;
import vn.ra.utility.Definitions;
import vn.ra.utility.EscapeUtils;
import vn.ra.utility.LoadParamSystem;
import vn.ra.utility.PropertiesContent;

/**
 *
 * @author THANH-PC
 */
public class ConnectDatabase_bk220104 {

    private static int COUNT_CONNECTIONS = 0;
    CallableStatement proc_stmt = null;
    ObjectMapper oMapperParse;
    String Choise_TypeDB;
    String Driver_Sql;
    String Driver_Oracle;
    String Url_Sql;
    String Url_Oracle;
    String UserName_SQL;
    String Password_SQL;
    String Password_ORACLE;
    String UserName_ORACLE;
    String DBConnect_Timeout = "120";
    private static final Logger log = Logger.getLogger(ConnectDatabase.class);

    public ConnectDatabase_bk220104() {
        Config conf = new Config();
        Choise_TypeDB = conf.GetPropertybyCode(Definitions.CONFIG_CHOISEDB);
        Driver_Sql = conf.GetPropertybyCode(Definitions.CONFIG_DBDRIVER_SQL);
        Driver_Oracle = conf.GetPropertybyCode(Definitions.CONFIG_DBDRIVER_ORACLE);
        Url_Sql = conf.GetPropertybyCode(Definitions.CONFIG_DBCONNECTION_SQL);
        Url_Oracle = conf.GetPropertybyCode(Definitions.CONFIG_DBCONNECTION_ORACLE);
        UserName_SQL = conf.GetPropertybyCode(Definitions.CONFIG_DBUSER_SQL);
        Password_SQL = conf.GetPropertybyCode(Definitions.CONFIG_DBPASS_SQL);
        UserName_ORACLE = conf.GetPropertybyCode(Definitions.CONFIG_DBUSER_ORACLE);
        Password_ORACLE = conf.GetPropertybyCode(Definitions.CONFIG_DBPASS_ORACLE);
        DBConnect_Timeout = conf.GetPropertybyCode(Definitions.CONFIG_DATABASE_CONNECT_TIMEOUT_SECOND);
    }

    public Connection OpenDatabase() throws Exception {
        Connection connInner = null;
        if (null != Choise_TypeDB.trim()) {
            switch (Choise_TypeDB.trim()) {
                case "1":
                    Class.forName(Driver_Sql);
                    DriverManager.setLoginTimeout(Integer.parseInt(DBConnect_Timeout));
                    connInner = DriverManager.getConnection(Url_Sql, UserName_SQL, Password_SQL);
                    break;
                case "2":
                    Class.forName(Driver_Oracle);
                    DriverManager.setLoginTimeout(Integer.parseInt(DBConnect_Timeout));
                    connInner = DriverManager.getConnection(Url_Oracle, UserName_ORACLE, Password_ORACLE);
                    break;
                default:
                    break;
            }
        }
        COUNT_CONNECTIONS++;
        return connInner;
    }

    public void CloseDatabase(Connection[] temp) throws Exception {
        if (temp[0] != null) {
            temp[0].close();
            COUNT_CONNECTIONS--;
        }
    }

    public static int getCount() {
        return COUNT_CONNECTIONS;
    }

    //<editor-fold defaultstate="collapsed" desc="BO_USER_LOGIN">
    public String S_BO_LOGIN_USER(String strUser, String strPass, String sSessID, String sIP)
            throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_LOGIN_USER(?,?,?,?,?) }");
                        proc_stmt.setString(1, strUser);
                        proc_stmt.setString(2, strPass);
                        proc_stmt.setString(3, sSessID);
                        proc_stmt.setString(4, sIP);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BE_LOGIN_USER">
    public String S_BO_BE_LOGIN_USER(String strUser, String strPass, String sSessID, String sIP)
            throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BE_LOGIN_USER(?,?,?,?,?) }");
                        proc_stmt.setString(1, strUser);
                        proc_stmt.setString(2, strPass);
                        proc_stmt.setString(3, sSessID);
                        proc_stmt.setString(4, sIP);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_FE_LOGIN_USER">
    public String S_BO_FE_LOGIN_USER(String strUser, String strPass, String sSessID, String sIP)
            throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FE_LOGIN_USER(?,?,?,?,?) }");
                        proc_stmt.setString(1, strUser);
                        proc_stmt.setString(2, strPass);
                        proc_stmt.setString(3, sSessID);
                        proc_stmt.setString(4, sIP);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_LOGIN_USER_LIST">
    public void S_BO_LOGIN_USER_LIST(String strUser, String strPass, String pLanguage,
            BACKOFFICE_USER[][] response) throws Exception {
        Connection conns = null;
        ArrayList<BACKOFFICE_USER> tempList = new ArrayList<>();
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_LOGIN_USER_LIST(?,?,?) }");
                        proc_stmt.setString(1, strUser);
                        proc_stmt.setString(2, strPass);
                        proc_stmt.setInt(3, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BACKOFFICE_USER tempItem = new BACKOFFICE_USER();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.BRANCH_LEVEL_ID = EscapeUtils.CheckTextNull(rs.getString("BRANCH_LEVEL"));
                            tempItem.USERNAME = rs.getString("USERNAME");
                            tempItem.FULL_NAME = rs.getString("FULL_NAME");
                            tempItem.ROLE_ID = rs.getInt("ROLE_ID");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.BRANCH_PARENT_ID = rs.getInt("BRANCH_PARENT_ID");
                            tempItem.ROLE_NAME = rs.getString("ROLE_NAME");
                            tempItem.BRANCH_REMARK = rs.getString("BRANCH_DESC");
                            tempItem.ROLE_REMARK = rs.getString("ROLE_DESC");
                            tempItem.PROPERTIES = rs.getString("PROPERTIES");
                            tempItem.CHANGE_PASS_ENABLED = rs.getBoolean("DEFAULT_PASSWORD_ENABLED");
                            tempList.add(tempItem);
                        }
                        response[0] = new BACKOFFICE_USER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="CheckIsURL">
    public int CheckIsURL(String pLINK_URI, String pROLE_CODE) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_CHECK_URI_ENABLED(?,?,?) }");
                        if (!"".equals(pLINK_URI)) {
                            proc_stmt.setString(1, pLINK_URI);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(pROLE_CODE)) {
                            proc_stmt.setString(2, pROLE_CODE);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.registerOutParameter(3, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(3);
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = -1;
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="CheckIsURLRelated">
    public int CheckIsURLRelated(String str1, String strRole) throws Exception {
        int convrtr;
        if ("../Admin/Home.jsp".equals(str1) || "../Admin/UserChangePass.jsp".equals(str1)) {
            convrtr = 1;
        } else {
            CommonFunction com = new CommonFunction();
            String sURLChecked = com.LinkGroup(str1);
            int isURL = CheckIsURL(sURLChecked, strRole);
            if (isURL == 0) {
                convrtr = 0;
            } else if (isURL == 1) {
                convrtr = 1;
            } else {
                convrtr = -1;
            }
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="CheckIsLoginOnline">
    public int CheckIsLoginOnline(String strUser, String strSessKey) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_CHECK_SESSION(?,?,?) }");
                        proc_stmt.setString(1, strUser);
                        proc_stmt.setString(2, strSessKey);
                        proc_stmt.registerOutParameter(3, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(3);
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = -1;
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_RESET_PASSWORD">
    public String S_BO_USER_RESET_PASSWORD(String strUserName, String pUserID, String strPassOld,
            String strPassNew) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_RESET_PASSWORD(?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pUserID));
                        proc_stmt.setString(2, strUserName);
                        proc_stmt.setString(3, strPassOld);
                        proc_stmt.setString(4, strPassNew);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_GET_USER_FORGOT_MAIL">
    public void S_BO_GET_USER_FORGOT_MAIL(String strGroup, String strEmail, BACKOFFICE_USER[][] response)
            throws Exception {
        ArrayList<BACKOFFICE_USER> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GET_USER_FORGOT_MAIL(?,?) }");
                        if (!"".equals(strGroup)) {
                            proc_stmt.setString(1, strGroup);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strEmail)) {
                            proc_stmt.setString(2, strEmail);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BACKOFFICE_USER tempItem = new BACKOFFICE_USER();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.USERNAME = rs.getString("USERNAME");
                            tempItem.EMAIL = rs.getString("EMAIL");
                            tempItem.ROLE_ID = rs.getInt("ROLE_ID");
                            tempList.add(tempItem);
                        }
                        response[0] = new BACKOFFICE_USER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_URI_PARENT_LIST">
    public void S_BO_URI_PARENT_LIST(String strRoleID, String strAgency, MENULINK[][] response, String sLanguage)
        throws Exception {
        Connection conns = null;
        ResultSet rs = null;
        ArrayList<MENULINK> tempList = new ArrayList<>();
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_URI_PARENT_LIST(?,?) }");
                        proc_stmt.setString(1, strRoleID);
                        proc_stmt.setInt(2, Integer.parseInt(sLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            if (!strAgency.equals(Definitions.CONFIG_AGENT_ROOT)) {
                                //if (rs.getInt("ID") != Definitions.CONFIG_MENULINK_GROUP_ID_COMMON) {
                                    MENULINK tempItem = new MENULINK();
                                    tempItem.ID = rs.getInt("ID");
                                    tempItem.REMARK = rs.getString("URI_DESC");
                                    tempItem.LINKURL = rs.getString("URI");
                                    tempList.add(tempItem);
                                //}
                            } else {
                                MENULINK tempItem = new MENULINK();
                                tempItem.ID = rs.getInt("ID");
                                tempItem.REMARK = rs.getString("URI_DESC");
                                tempItem.LINKURL = rs.getString("URI");
                                tempList.add(tempItem);
                            }
                        }
                        response[0] = new MENULINK[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="BO_MENULINK_CHILREN_LIST">
    public void S_BO_URI_CHILDRENT_LIST(String strMenuLinkID, String strGroupCode, String strAgency,
            MENULINK[][] response, String sLanguage)
            throws Exception {
        Connection conns = null;
        ResultSet rs = null;
        ArrayList<MENULINK> tempList = new ArrayList<>();
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_URI_CHILDRENT_LIST(?,?,?) }");
                        if (!"".equals(strMenuLinkID)) {
                            proc_stmt.setString(1, strMenuLinkID);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strGroupCode)) {
                            proc_stmt.setString(2, strGroupCode);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setInt(3, Integer.parseInt(sLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            if (!strAgency.equals(Definitions.CONFIG_AGENT_ROOT)) {
                                if (!EscapeUtils.CheckTextNull(rs.getString("URI")).equals(Definitions.CONFIG_MENULINK_MENU_URL_MENULINK)
                                        && !EscapeUtils.CheckTextNull(rs.getString("URI")).equals(Definitions.CONFIG_MENULINK_MENU_URL_ROLE)
                                        && !EscapeUtils.CheckTextNull(rs.getString("URI")).equals(Definitions.CONFIG_MENULINK_MENU_URL_MENUSCREEN)) {
                                    MENULINK tempItem = new MENULINK();
                                    tempItem.ID = rs.getInt("ID");
                                    tempItem.LINKURL = rs.getString("URI");
                                    tempItem.REMARK = rs.getString("URI_DESC");
                                    tempList.add(tempItem);
                                }
                            } else {
                                MENULINK tempItem = new MENULINK();
                                tempItem.ID = rs.getInt("ID");
                                tempItem.LINKURL = rs.getString("URI");
                                tempItem.REMARK = rs.getString("URI_DESC");
                                tempList.add(tempItem);
                            }
                        }
                        response[0] = new MENULINK[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_URI_CHILDRENT_LIST_OUTID">
    public void S_BO_URI_CHILDRENT_LIST_INID(String strMenuLinkID, String strGroupCode, String strAgency,
            MENULINK[][] response, String sLanguage)
            throws Exception {
        Connection conns = null;
        ResultSet rs = null;
        ArrayList<MENULINK> tempList = new ArrayList<>();
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_URI_CHILDRENT_LIST(?,?,?) }");
                        if (!"".equals(strMenuLinkID)) {
                            proc_stmt.setString(1, strMenuLinkID);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strGroupCode)) {
                            proc_stmt.setString(2, strGroupCode);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setInt(3, Integer.parseInt(sLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            if (!strAgency.equals(Definitions.CONFIG_AGENT_ROOT)) {
                                if (!EscapeUtils.CheckTextNull(rs.getString("URI")).equals(Definitions.CONFIG_MENULINK_MENU_URL_MENULINK)
                                        && !EscapeUtils.CheckTextNull(rs.getString("URI")).equals(Definitions.CONFIG_MENULINK_MENU_URL_ROLE)
                                        && !EscapeUtils.CheckTextNull(rs.getString("URI")).equals(Definitions.CONFIG_MENULINK_MENU_URL_MENUSCREEN)) {
                                    if(strMenuLinkID.equals(String.valueOf(Definitions.CONFIG_MENULINK_GROUP_ID_COMMON))) {
                                        if(CommonFunction.checkAgencyAccessMenuID(rs.getInt("ID")) == true)
                                        {
                                            MENULINK tempItem = new MENULINK();
                                            tempItem.ID = rs.getInt("ID");
                                            tempItem.LINKURL = rs.getString("URI");
                                            tempItem.REMARK = rs.getString("URI_DESC");
                                            tempList.add(tempItem);
                                        }
                                    } else {
                                        MENULINK tempItem = new MENULINK();
                                        tempItem.ID = rs.getInt("ID");
                                        tempItem.LINKURL = rs.getString("URI");
                                        tempItem.REMARK = rs.getString("URI_DESC");
                                        tempList.add(tempItem);
                                    }
                                }
                            } else {
                                MENULINK tempItem = new MENULINK();
                                tempItem.ID = rs.getInt("ID");
                                tempItem.LINKURL = rs.getString("URI");
                                tempItem.REMARK = rs.getString("URI_DESC");
                                tempList.add(tempItem);
                            }
                        }
                        response[0] = new MENULINK[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_RESET_PASSWORD_DEFAULT">
    public String S_BO_USER_RESET_PASSWORD_DEFAULT(String pUser, String pPass, String updateUID)
            throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_RESET_PASSWORD_DEFAULT(?,?,?,?) }");
                        proc_stmt.setString(1, pUser);
                        proc_stmt.setString(2, pPass);
                        proc_stmt.setString(3, updateUID);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        //CommonFunction.LogDebugString(log, "S_BO_USER_RESET_PASSWORD_DEFAULT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

// FUNC: MENULINK_ROLE    
    //<editor-fold defaultstate="collapsed" desc="S_BO_URI_NOT_ROLE_LIST">
    public MENULINK[] S_BO_URI_NOT_ROLE_LIST(String pGroup, String pLanguage)
            throws Exception {
        ResultSet rs = null;
        Connection conns = null;
        MENULINK[] temp = null;
        ArrayList<MENULINK> tempList = new ArrayList<>();
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_URI_NOT_ROLE_LIST(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pGroup));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            MENULINK tempItem = new MENULINK();
                            tempItem.ID = rs.getInt("ID");
//                            tempItem.MENULINK_ROLE_ID = rs.getInt("MENULINK_ROLE_ID");
                            tempItem.REMARK = rs.getString("URI_DESC");
                            tempItem.PARENTLINK_REMARK = rs.getString("PARENT_URI_DESC");
                            tempList.add(tempItem);
                        }
                        temp = new MENULINK[tempList.size()];
                        temp = tempList.toArray(temp);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return temp;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="BO_MENULINK_ROLE_TOTAL">
    public int BO_MENULINK_ROLE_TOTAL(String strRole)
            throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call Back_MenuLinkRoleTotal(?) }");
                        if (!"".equals(strRole)) {
                            proc_stmt.setInt(1, Integer.parseInt(strRole));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.registerOutParameter(2, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(2);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_URI_ROLE_LIST">
    public MENULINK[] S_BO_URI_ROLE_LIST(String strGroup, String pLanguage) throws Exception {
        ResultSet rs = null;
        MENULINK[] temp = null;
        ArrayList<MENULINK> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_URI_ROLE_LIST(?,?) }");
                        proc_stmt.setString(1, strGroup);
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            MENULINK tempItem = new MENULINK();
                            tempItem.ID = rs.getInt("URI_ID");
                            tempItem.MENULINK_ROLE_ID = rs.getInt("URI_ROLE_ACCESS_MANAGEMENT_ID");
                            tempItem.REMARK = rs.getString("URI_DESC");
                            tempItem.PARENTLINK_REMARK = rs.getString("PARENT_URI_DESC");
                            tempItem.LINKURL = rs.getString("URI");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempList.add(tempItem);
                        }
                        temp = new MENULINK[tempList.size()];
                        temp = tempList.toArray(temp);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return temp;
    }
     //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_URI_ROLE_DELETE">
    public String S_BO_URI_ROLE_DELETE(String strID, String updateUID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_URI_ROLE_DELETE(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(strID));
                        proc_stmt.setString(2, updateUID);
                        proc_stmt.registerOutParameter(3, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(3));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_URI_ROLE_INSERT">
    public String S_BO_URI_ROLE_INSERT(String strURIID, String strRoleID, String pUser_UID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_URI_ROLE_INSERT(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(strURIID));
                        proc_stmt.setInt(2, Integer.parseInt(strRoleID));
                        proc_stmt.setString(3, pUser_UID);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_URI_ROLE_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_GENERAL_POLICY_ALL">
    public void S_BO_GENERAL_POLICY_ALL(String sLanguage, GENERAL_POLICY[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<GENERAL_POLICY> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GENERAL_POLICY_LIST(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(sLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            if(!EscapeUtils.CheckTextNull(rs.getString("MIMETYPE")).equals(Definitions.CONFIG_POLICY_MINETYPE_SYS_DISALLOWANCE_LIST))
                            {
                                GENERAL_POLICY tempItem = new GENERAL_POLICY();
                                tempItem.ID = rs.getInt("ID");
                                tempItem.NAME = rs.getString("GENERAL_POLICY_ATTR_TYPE_NAME");
                                tempItem.REMARK = rs.getString("GENERAL_POLICY_ATTR_TYPE_DESC");
                                tempItem.MIMETYPE = rs.getString("MIMETYPE");
                                tempItem.REQUIRED = rs.getBoolean("REQUIRED");
                                tempItem.FRONT_OFFICE_ENABLED = rs.getBoolean("FRONT_OFFICE_ENABLED");
                                tempItem.VALUE = EscapeUtils.CheckTextNull(rs.getString("VALUE"));
//                                tempItem.BLOB = EscapeUtils.CheckTextNull(rs.getString("BLOB"));
//                                if(EscapeUtils.CheckTextNull(tempItem.NAME).equals(Definitions.CONFIG_POLICY_BO_WEBSITE_PRIVACY_POLICY)
//                                    || EscapeUtils.CheckTextNull(tempItem.NAME).equals(Definitions.CONFIG_POLICY_BO_WEBSITE_TERMS_CONDITIONS)){
//                                    tempItem.VALUE = tempItem.BLOB;
//                                }
                                tempList.add(tempItem);
                            }
                        }
                        response[0] = new GENERAL_POLICY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_GENERAL_POLICY_LIST">
    public void S_BO_GENERAL_POLICY_LIST(String sLanguage, GENERAL_POLICY[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<GENERAL_POLICY> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GENERAL_POLICY_ALL(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(sLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            if(!EscapeUtils.CheckTextNull(rs.getString("MIMETYPE")).equals(Definitions.CONFIG_POLICY_MINETYPE_SYS_DISALLOWANCE_LIST))
                            {
                                GENERAL_POLICY tempItem = new GENERAL_POLICY();
                                tempItem.ID = rs.getInt("ID");
                                tempItem.NAME = rs.getString("GENERAL_POLICY_ATTR_TYPE_NAME");
                                tempItem.REMARK = rs.getString("GENERAL_POLICY_ATTR_TYPE_DESC");
                                tempItem.MIMETYPE = rs.getString("MIMETYPE");
                                tempItem.REQUIRED = rs.getBoolean("REQUIRED");
                                tempItem.FRONT_OFFICE_ENABLED = rs.getBoolean("FRONT_OFFICE_ENABLED");
                                tempItem.VALUE = EscapeUtils.CheckTextNull(rs.getString("VALUE"));
//                                tempItem.BLOB = EscapeUtils.CheckTextNull(rs.getString("BLOB"));
//                                if(EscapeUtils.CheckTextNull(tempItem.NAME).equals(Definitions.CONFIG_POLICY_BO_WEBSITE_PRIVACY_POLICY)
//                                    || EscapeUtils.CheckTextNull(tempItem.NAME).equals(Definitions.CONFIG_POLICY_BO_WEBSITE_TERMS_CONDITIONS)){
//                                    tempItem.VALUE = tempItem.BLOB;
//                                }
                                tempList.add(tempItem);
                            }
                        }
                        response[0] = new GENERAL_POLICY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_DISALLOWANCE_LIST_GET">
    public void S_BO_DISALLOWANCE_LIST_GET(String sLanguage, GENERAL_POLICY[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<GENERAL_POLICY> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_DISALLOWANCE_LIST_GET(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(sLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            GENERAL_POLICY tempItem = new GENERAL_POLICY();
                            tempItem.BLOB = EscapeUtils.CheckTextNull(rs.getString("BLOB"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("GENERAL_POLICY_ATTR_TYPE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new GENERAL_POLICY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_GENERAL_POLICY_ATTR_TYPE_TOTAL">
    public int S_BO_GENERAL_POLICY_ATTR_TYPE_TOTAL()
            throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GENERAL_POLICY_ATTR_TYPE_TOTAL(?) }");
                        proc_stmt.registerOutParameter(1, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(1);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_GENERAL_POLICY_ATTR_TYPE_LIST">
    public void S_BO_GENERAL_POLICY_ATTR_TYPE_LIST(String pLanguage, int isPage, int isSum,
            GENERAL_POLICY[][] response) throws Exception {
        ResultSet rs = null;
        ArrayList<GENERAL_POLICY> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GENERAL_POLICY_ATTR_TYPE_LIST(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(2, isPage);
                        proc_stmt.setInt(3, isSum);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            GENERAL_POLICY tempItem = new GENERAL_POLICY();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.NAME = rs.getString("GENERAL_POLICY_ATTR_TYPE_NAME");
                            tempItem.REMARK = rs.getString("GENERAL_POLICY_ATTR_TYPE_DESC");
                            tempItem.REQUIRED = rs.getBoolean("REQUIRED");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new GENERAL_POLICY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_GENERAL_POLICY_ATTR_TYPE_DETAIL">
    public void S_BO_GENERAL_POLICY_ATTR_TYPE_DETAIL(String pID,
            GENERAL_POLICY[][] response) throws Exception {
        ResultSet rs = null;
        ArrayList<GENERAL_POLICY> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GENERAL_POLICY_ATTR_TYPE_DETAIL(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            GENERAL_POLICY tempItem = new GENERAL_POLICY();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.NAME = rs.getString("GENERAL_POLICY_ATTR_TYPE_NAME");
                            tempItem.REMARK = rs.getString("REMARK");
                            tempItem.REMARK_EN = rs.getString("REMARK_EN");
                            tempItem.MIMETYPE = rs.getString("MIMETYPE");
                            tempItem.REQUIRED = rs.getBoolean("REQUIRED");
                            tempItem.FRONT_OFFICE_ENABLED = rs.getBoolean("FRONT_OFFICE_ENABLED");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempList.add(tempItem);
                        }
                        response[0] = new GENERAL_POLICY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_GENERAL_POLICY_ATTR_TYPE_UPDATE">
    public String S_BO_GENERAL_POLICY_ATTR_TYPE_UPDATE(String pID, String pEnable, String pRequired,
            String pName, String pRemark, String pRemark_EN, String pFRONT_OFFICE_ENABLED,
            String pMIMETYPE, String pUID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GENERAL_POLICY_ATTR_TYPE_UPDATE(?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setInt(2, Integer.parseInt(pEnable));
                        proc_stmt.setInt(3, Integer.parseInt(pRequired));
                        proc_stmt.setString(4, pName);
                        proc_stmt.setString(5, pMIMETYPE);
                        proc_stmt.setInt(6, Integer.parseInt(pFRONT_OFFICE_ENABLED));
                        proc_stmt.setString(7, pRemark_EN);
                        proc_stmt.setString(8, pRemark);
                        proc_stmt.setString(9, pUID);
                        proc_stmt.registerOutParameter(10, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(10));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_GENERAL_POLICY_ATTR_TYPE_INSERT">
    public String S_BO_GENERAL_POLICY_ATTR_TYPE_INSERT(String pRequired, String pName, String pRemark,
            String pValue, String pRemark_EN, String pFRONT_OFFICE_ENABLED, String pMIMETYPE, String pUID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GENERAL_POLICY_ATTR_TYPE_INSERT(?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pRequired));
                        proc_stmt.setString(2, pName);
                        proc_stmt.setString(3, pMIMETYPE);
                        proc_stmt.setInt(4, Integer.parseInt(pFRONT_OFFICE_ENABLED));
                        proc_stmt.setString(5, pRemark_EN);
                        proc_stmt.setString(6, pRemark);
                        proc_stmt.setString(7, pValue);
                        proc_stmt.setString(8, pUID);
                        proc_stmt.registerOutParameter(9, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_GENERAL_POLICY_ATTR_TYPE_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(9));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_GENERAL_POLICY_UPDATE">
    public String S_BO_GENERAL_POLICY_UPDATE(String pID, String pValue, String pUID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GENERAL_POLICY_UPDATE(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setString(2, pValue);
                        proc_stmt.setString(3, pUID);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        if(pID.equals("95")){
                            CommonFunction.LogDebugString(log, "S_BO_GENERAL_POLICY_UPDATE", proc_stmt.toString());
                        }
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_GENERAL_POLICY_UPDATE_BLOB">
    public String S_BO_GENERAL_POLICY_UPDATE_BLOB(String pID, String pBlob, String pUID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GENERAL_POLICY_UPDATE_BLOB(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setString(2, pBlob);
                        proc_stmt.setString(3, pUID);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_DISALLOWANCE_LIST_UPDATE">
    public String S_BO_DISALLOWANCE_LIST_UPDATE(String pValue, String pUID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_DISALLOWANCE_LIST_UPDATE(?,?,?) }");
                        proc_stmt.setString(1, pValue);
                        proc_stmt.setString(2, pUID);
                        proc_stmt.registerOutParameter(3, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(3));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="BO_CONFIGEMAIL_LIST">
    public void BO_CONFIGEMAIL_LIST(String strID, CONFIG_EMAIL[][] response) throws Exception {
        Connection conns = null;
        ResultSet rs = null;
        ArrayList<CONFIG_EMAIL> tempList = new ArrayList<>();
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call BO_CONFIGEMAIL_LIST(?) }");
                        proc_stmt.setString(1, strID);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CONFIG_EMAIL tempItem = new CONFIG_EMAIL();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.EMAILADDRESS = rs.getString("EMAILADDRESS");
                            tempItem.IPMAILSERVER = rs.getString("IPMAILSERVER");
                            tempItem.PASSWORDS = rs.getString("PASSWORDS");
                            tempItem.PORT = rs.getString("PORT");
                            tempItem.ISCLIENT = rs.getBoolean("ISCLIENT");
                            tempList.add(tempItem);
                        }
                        response[0] = new CONFIG_EMAIL[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="BO_CONFIGEMAIL_UPDATE">
    public String BO_CONFIGEMAIL_UPDATE(int strID, String strServer, String strPort, String strEmail, String strPass,
            String strSubject, String strTemplate, int intClient) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call BO_CONFIGEMAIL_UPDATE(?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, strID);
                        proc_stmt.setString(2, strServer);
                        proc_stmt.setString(3, strPort);
                        proc_stmt.setString(4, strEmail);
                        if ("".equals(strPass)) {
                            proc_stmt.setString(5, null);
                        } else {
                            proc_stmt.setString(5, strPass);
                        }
                        proc_stmt.setString(6, strSubject);
                        proc_stmt.setString(7, strTemplate);
                        proc_stmt.setInt(8, intClient);
                        proc_stmt.registerOutParameter(9, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(9));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_ROLE_TOTAL">
    public int S_BO_ROLE_TOTAL()
            throws Exception {
        Connection conns = null;
        int ss = 0;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_ROLE_TOTAL(?) }");
                        proc_stmt.registerOutParameter(1, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(1);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_ROLE_LIST">
    public void S_BO_ROLE_LIST(ROLE[][] response, int iPagNo, int iSwRws, String pLanguage)
            throws Exception {
        Connection conns = null;
        ResultSet rs = null;
        ArrayList<ROLE> tempList = new ArrayList<>();
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_ROLE_LIST(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(2, iPagNo);
                        proc_stmt.setInt(3, iSwRws);
                        CommonFunction.LogDebugString(log, "S_BO_ROLE_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            ROLE tempItem = new ROLE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.REMARK = rs.getString("ROLE_DESC");
                            tempItem.NAME = rs.getString("ROLE_NAME");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempList.add(tempItem);
                        }
                        response[0] = new ROLE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_ROLE_COMBOBOX">
    public void S_BO_ROLE_COMBOBOX(String pLanguage, ROLE[][] response) throws Exception {
        Connection conns = null;
        ResultSet rs = null;
        ArrayList<ROLE> tempList = new ArrayList<>();
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_ROLE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            ROLE tempItem = new ROLE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.CA_ENABLED = rs.getBoolean("CA_ENABLED");
                            tempItem.REMARK = rs.getString("ROLE_DESC");
                            tempItem.NAME = rs.getString("ROLE_NAME");
                            tempList.add(tempItem);
                        }
                        response[0] = new ROLE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_ROLE_DETAIL">
    public void S_BO_ROLE_DETAIL(String sID, ROLE[][] response) throws Exception {
        Connection conns = null;
        ResultSet rs = null;
        ArrayList<ROLE> tempList = new ArrayList<>();
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_ROLE_DETAIL(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(sID));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            ROLE tempItem = new ROLE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.PROPERTIES = rs.getString("PROPERTIES");
                            tempItem.REMARK = rs.getString("REMARK");
                            tempItem.REMARK_EN = rs.getString("REMARK_EN");
                            tempItem.NAME = rs.getString("ROLE_NAME");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempList.add(tempItem);
                        }
                        response[0] = new ROLE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_ROLE_UPDATE">
    public String S_BO_ROLE_UPDATE(String strID, String strActi, String pName, String pRemark, String pRemark_EN,
            String pRole_Set, String updateUID, String checkUserAll) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_ROLE_UPDATE(?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(strID));
                        proc_stmt.setInt(2, Integer.parseInt(strActi));
                        proc_stmt.setString(3, pName);
                        proc_stmt.setString(4, pRemark);
                        proc_stmt.setString(5, pRemark_EN);
                        if (!"".equals(pRole_Set)) {
                            proc_stmt.setString(6, pRole_Set);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        proc_stmt.setString(7, updateUID);
                        proc_stmt.setInt(8, Integer.parseInt(checkUserAll));
                        proc_stmt.registerOutParameter(9, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(9));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_ROLE_INSERT">
    public String S_BO_ROLE_INSERT(String pName, String pRemark, String pRemark_EN, String pRole_Set, String pCA_ENABLED,
            String createUID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_ROLE_INSERT(?,?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pName);
                        proc_stmt.setString(2, pRemark);
                        proc_stmt.setString(3, pRemark_EN);
                        if (!"".equals(pRole_Set)) {
                            proc_stmt.setString(4, pRole_Set);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.setInt(5, Integer.parseInt(pCA_ENABLED));
                        if (!"".equals(createUID)) {
                            proc_stmt.setString(6, createUID);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(7));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_PKI_FORMFACTOR_TOTAL">
    public int S_BO_PKI_FORMFACTOR_TOTAL()
            throws Exception {
        Connection conns = null;
        int ss = 0;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PKI_FORMFACTOR_TOTAL(?) }");
                        proc_stmt.registerOutParameter(1, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(1);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_PKI_FORMFACTOR_LIST">
    public void S_BO_PKI_FORMFACTOR_LIST(PKI_FORMFACTOR[][] response, int iPagNo, int iSwRws, String pLanguage)
            throws Exception {
        Connection conns = null;
        ResultSet rs = null;
        ArrayList<PKI_FORMFACTOR> tempList = new ArrayList<>();
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PKI_FORMFACTOR_LIST(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(2, iPagNo);
                        proc_stmt.setInt(3, iSwRws);
                        CommonFunction.LogDebugString(log, "S_BO_PKI_FORMFACTOR_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            PKI_FORMFACTOR tempItem = new PKI_FORMFACTOR();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.REMARK = rs.getString("PKI_FORMFACTOR_DESC");
                            tempItem.NAME = rs.getString("NAME");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempList.add(tempItem);
                        }
                        response[0] = new PKI_FORMFACTOR[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_LIST">
    public void S_BO_USER_LIST(String strFrom, String strTo, String strEmail, String strGroup,
            String strBranch, String strUsername, String pUSER_STATE_ID,
            String pLanguage, String pLIST_BRANCH_ID, BACKOFFICE_USER[][] response, int sPage, int sSum)
            throws Exception {
        ResultSet rs = null;
        ArrayList<BACKOFFICE_USER> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_LIST(?,?,?,?,?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(strEmail)) {
                            proc_stmt.setString(3, strEmail);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(strGroup)) {
                            proc_stmt.setString(4, strGroup);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(strBranch)) {
                            proc_stmt.setString(5, strBranch);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(strUsername)) {
                            proc_stmt.setString(6, strUsername);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pUSER_STATE_ID)) {
                            proc_stmt.setInt(7, Integer.parseInt(pUSER_STATE_ID));
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        proc_stmt.setInt(8, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(9, sPage);
                        proc_stmt.setInt(10, sSum);
                        if (!"".equals(pLIST_BRANCH_ID)) {
                            proc_stmt.setString(11, pLIST_BRANCH_ID);
                        } else {
                            proc_stmt.setString(11, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_USER_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BACKOFFICE_USER tempItem = new BACKOFFICE_USER();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.USERNAME = rs.getString("USERNAME");
                            tempItem.FULL_NAME = rs.getString("FULL_NAME");
                            tempItem.MSISDN = EscapeUtils.CheckTextNull(rs.getString("MSISDN"));
                            tempItem.ROLE_REMARK = rs.getString("ROLE_DESC");
                            tempItem.USER_STATE_DESC = rs.getString("USER_STATE_DESC");
                            tempItem.BRANCH_REMARK = rs.getString("BRANCH_DESC");
                            tempItem.BRANCH_NAME = EscapeUtils.CheckTextNull(rs.getString("BRANCH_NAME"));
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempList.add(tempItem);
                        }
                        response[0] = new BACKOFFICE_USER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_TOTAL">
    public int S_BO_USER_TOTAL(String strFrom, String strTo, String strEmail,
            String strGroup, String strBranch, String strUsername, String pUSER_STATE_ID,
            String pLIST_BRANCH_ID) throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_TOTAL(?,?,?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(strEmail)) {
                            proc_stmt.setString(3, strEmail);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(strGroup)) {
                            proc_stmt.setInt(4, Integer.parseInt(strGroup));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(strBranch)) {
                            proc_stmt.setInt(5, Integer.parseInt(strBranch));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(strUsername)) {
                            proc_stmt.setString(6, strUsername);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pUSER_STATE_ID)) {
                            proc_stmt.setInt(7, Integer.parseInt(pUSER_STATE_ID));
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pLIST_BRANCH_ID)) {
                            proc_stmt.setString(8, pLIST_BRANCH_ID);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        proc_stmt.registerOutParameter(9, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_USER_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(9);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_DETAIL">
    public void S_BO_USER_DETAIL(String pID, String pLanguage, BACKOFFICE_USER[][] response) throws Exception {
        ResultSet rs = null;
        ArrayList<BACKOFFICE_USER> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_DETAIL(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BACKOFFICE_USER tempItem = new BACKOFFICE_USER();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.USERNAME = rs.getString("USERNAME");
                            tempItem.BRANCH_LEVEL_ID = EscapeUtils.CheckTextNull(rs.getString("BRANCH_LEVEL"));
                            tempItem.FULL_NAME = rs.getString("FULL_NAME");
                            tempItem.USER_STATE_ID = rs.getInt("USER_STATE_ID");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.BRANCH_REMARK = rs.getString("BRANCH_DESC");
                            tempItem.ROLE_ID = rs.getInt("ROLE_ID");
                            tempItem.ROLE_NAME = rs.getString("ROLE_NAME");
                            tempItem.EMAIL = rs.getString("EMAIL");
                            tempItem.MSISDN = rs.getString("MSISDN");
                            tempItem.CERTIFICATION = rs.getString("CERTIFICATION");
                            tempItem.CERTIFICATION_HASH = rs.getString("CERTIFICATION_HASH");
                            tempItem.PROPERTIES = rs.getString("PROPERTIES");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempList.add(tempItem);
                        }
                        response[0] = new BACKOFFICE_USER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_UPDATE">
    public String S_BO_USER_UPDATE(int strID, int strActi, String strFull, String strGroup, String strBranch,
            String strEmail, String strState, String strMobile, String strROLE_SET, String updateUID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_UPDATE(?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, strID);
                        proc_stmt.setInt(2, strActi);
                        proc_stmt.setString(3, strFull);
                        proc_stmt.setInt(4, Integer.parseInt(strGroup));
                        if (!"".equals(strBranch)) {
                            proc_stmt.setInt(5, Integer.parseInt(strBranch));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.setString(6, strEmail);
                        if (!"".equals(strState)) {
                            proc_stmt.setInt(7, Integer.parseInt(strState));
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        proc_stmt.setString(8, strMobile);
                        if (!"".equals(strROLE_SET)) {
                            proc_stmt.setString(9, strROLE_SET);
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        if (!"".equals(updateUID)) {
                            proc_stmt.setString(10, updateUID);
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        proc_stmt.registerOutParameter(11, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_USER_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(11));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_INSERT">
    public String S_BO_USER_INSERT(String strUser, String strPass, String strFull,
            String strGroup, String pBranch, String strEmail, String strMobile,String strROLE_SET,
            String createUID, int[] pUSER_ID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_INSERT(?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setString(1, strUser);
                        proc_stmt.setString(2, strPass);
                        proc_stmt.setString(3, strFull);
                        proc_stmt.setInt(4, Integer.parseInt(strGroup));
                        proc_stmt.setInt(5, Integer.parseInt(pBranch));
                        proc_stmt.setString(6, strEmail);
                        proc_stmt.setString(7, strMobile);
                        if (!"".equals(strROLE_SET)) {
                            proc_stmt.setString(8, strROLE_SET);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if (!"".equals(createUID)) {
                            proc_stmt.setString(9, createUID);
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        proc_stmt.registerOutParameter(10, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(11, java.sql.Types.INTEGER);
                        //CommonFunction.LogDebugString(log, "S_BO_USER_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(10));
                        pUSER_ID[0] = proc_stmt.getInt(11);
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_UPDATE_CERTIFICATION">
    public String S_BO_USER_UPDATE_CERTIFICATION(int pUSER_ID , String pCERTIFICATION,
            String pCERTIFICATION_HASH, String createUID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_UPDATE_CERTIFICATION(?,?,?,?,?) }");
                        proc_stmt.setInt(1, pUSER_ID);
                        if(!"".equals(pCERTIFICATION))
                        {
                            proc_stmt.setString(2, pCERTIFICATION);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if(!"".equals(pCERTIFICATION_HASH))
                        {
                            proc_stmt.setString(3, pCERTIFICATION_HASH);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(createUID)) {
                            proc_stmt.setString(4, createUID);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_USER_UPDATE_CERTIFICATION", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_GET_BY_USERNAME">
    public void S_BO_USER_GET_BY_USERNAME(String pUsername, BACKOFFICE_USER[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<BACKOFFICE_USER> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_GET_BY_USERNAME(?) }");
                        if (!"".equals(pUsername)) {
                            proc_stmt.setString(1, pUsername);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BACKOFFICE_USER tempItem = new BACKOFFICE_USER();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.ROLE_ID = rs.getInt("ROLE_ID");
                            tempItem.FULL_NAME = rs.getString("FULL_NAME");
                            tempItem.USERNAME = rs.getString("USERNAME");
                            tempList.add(tempItem);
                        }
                        response[0] = new BACKOFFICE_USER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_STATE_COMBOBOX">
    public void S_BO_USER_STATE_COMBOBOX(String pLanguage, USER_STATE[][] response) throws Exception {
        ArrayList<USER_STATE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_STATE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            USER_STATE tempItem = new USER_STATE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("USER_STATE_NAME");
                            tempItem.REMARK = rs.getString("USER_STATE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new USER_STATE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_ADD_APPROVER">
    public String S_BO_USER_ADD_APPROVER(String pUSER_ID, String pAPPROVER_ID, String updateUID)
            throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_ADD_APPROVER(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pUSER_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pAPPROVER_ID));
                        proc_stmt.setString(3, updateUID);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_USER_ADD_APPROVER", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_REMOVE_APPROVER">
    public String S_BO_USER_REMOVE_APPROVER(String pUSER_ID, String pAPPROVER_ID, String updateUID)
            throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_REMOVE_APPROVER(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pUSER_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pAPPROVER_ID));
                        proc_stmt.setString(3, updateUID);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_USER_REMOVE_APPROVER", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_GET_USER_SURVEYOR">
    public void S_BO_GET_USER_SURVEYOR(String sBranchID, BACKOFFICE_USER[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<BACKOFFICE_USER> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GET_USER_SURVEYOR(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(sBranchID));
                        CommonFunction.LogDebugString(log, "S_BO_GET_USER_SURVEYOR", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BACKOFFICE_USER tempItem = new BACKOFFICE_USER();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.USERNAME = rs.getString("USERNAME");
                            tempItem.FULL_NAME = rs.getString("FULL_NAME");
                            tempItem.MSISDN = rs.getString("MSISDN");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new BACKOFFICE_USER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_GET_APPROVER">
    public void S_BO_USER_GET_APPROVER(String pUSER_ID, BACKOFFICE_USER[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<BACKOFFICE_USER> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_GET_APPROVER(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pUSER_ID));
                        CommonFunction.LogDebugString(log, "S_BO_USER_GET_APPROVER", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BACKOFFICE_USER tempItem = new BACKOFFICE_USER();
                            tempItem.APPROVED = rs.getString("APPROVER_ID");
                            tempList.add(tempItem);
                        }
                        response[0] = new BACKOFFICE_USER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_URI_LIST">
    public void S_BO_URI_LIST(int iPagNo, int iSwRws, String pLanguage, MENULINK[][] response)
            throws Exception {
        ArrayList<MENULINK> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_URI_LIST(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(2, iPagNo);
                        proc_stmt.setInt(3, iSwRws);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            MENULINK tempItem = new MENULINK();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.REMARK = rs.getString("URI_DESC");
                            tempItem.PARENTLINK_REMARK = rs.getString("PARENT_URI_DESC");
                            tempItem.LINKURL = rs.getString("URI");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempList.add(tempItem);
                        }
                        response[0] = new MENULINK[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_URI_TOTAL">
    public int S_BO_URI_TOTAL() throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_URI_TOTAL(?) }");
                        proc_stmt.registerOutParameter(1, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(1);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_URI_DETAIL">
    public void S_BO_URI_DETAIL(String strID, MENULINK[][] response)
            throws Exception {
        ArrayList<MENULINK> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_URI_DETAIL(?) }");
                        if (!"".equals(strID)) {
                            proc_stmt.setInt(1, Integer.parseInt(strID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            MENULINK tempItem = new MENULINK();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("URI_NAME");
                            tempItem.REMARK = rs.getString("REMARK");
                            tempItem.REMARK_EN = rs.getString("REMARK_EN");
                            tempItem.LINKURL = rs.getString("URI");
                            tempItem.PARENT_ID = rs.getInt("PARENT_ID");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempList.add(tempItem);
                        }
                        response[0] = new MENULINK[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_URI_PARENT_COMBOBOX">
    public void S_BO_URI_PARENT_COMBOBOX(MENULINK[][] response, String sLanguage)
            throws Exception {
        ArrayList<MENULINK> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_URI_PARENT_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(sLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            MENULINK tempItem = new MENULINK();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.PARENTLINK_REMARK = rs.getString("URI_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new MENULINK[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_URI_INSERT">
    public int S_BO_URI_INSERT(String pName, String pParentLinkId, String pRemark,
            String pRemark_EN, String pURI, String updateUID) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_URI_INSERT(?,?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pName);
                        proc_stmt.setString(2, pParentLinkId);
                        proc_stmt.setString(3, pRemark);
                        proc_stmt.setString(4, pRemark_EN);
                        proc_stmt.setString(5, pURI);
                        proc_stmt.setString(6, updateUID);
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_URI_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(7);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_URI_UPDATE">
    public int S_BO_URI_UPDATE(String pURI_ID, String pENABLED, String pURI_NAME, String pPARENT_ID,
            String pREMARK, String pREMARK_EN, String pURI, String updateUID)
            throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_URI_UPDATE(?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pURI_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pENABLED));
                        proc_stmt.setString(3, pURI_NAME);
                        proc_stmt.setInt(4, Integer.parseInt(pPARENT_ID));
                        proc_stmt.setString(5, pREMARK);
                        proc_stmt.setString(6, pREMARK_EN);
                        proc_stmt.setString(7, pURI);
                        proc_stmt.setString(8, updateUID);
                        proc_stmt.registerOutParameter(9, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_URI_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(9);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_COMBOBOX">
    public void S_BO_BRANCH_COMBOBOX(String pLanguage, BRANCH[][] response) throws Exception {
        ArrayList<BRANCH> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BRANCH tempItem = new BRANCH();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.PARENT_ID = rs.getInt("PARENT_ID");
                            tempItem.NAME = rs.getString("BRANCH_NAME");
                            tempItem.REMARK = rs.getString("BRANCH_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new BRANCH[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_PARENT_BRANCH_COMBOBOX">
    public void S_BO_PARENT_BRANCH_COMBOBOX(String pLanguage, BRANCH[][] response) throws Exception {
        ArrayList<BRANCH> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PARENT_BRANCH_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BRANCH tempItem = new BRANCH();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("BRANCH_NAME");
                            tempItem.REMARK = rs.getString("BRANCH_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new BRANCH[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_GET_BRANCH_COMBOBOX_BY_BRANCH_ID">
    public void S_BO_GET_BRANCH_COMBOBOX_BY_BRANCH_ID(String pBRANCH_ID, String pLanguage, BRANCH[][] response)
        throws Exception {
        ArrayList<BRANCH> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GET_BRANCH_COMBOBOX_BY_BRANCH_ID(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BRANCH tempItem = new BRANCH();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("BRANCH_NAME");
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("BRANCH_DESC"));
                            tempItem.LEVEL_ID = rs.getInt("BRANCH_LEVEL");
                            tempList.add(tempItem);
                        }
                        List<Integer> list = new ArrayList<>();
                        for(int i=0; i<tempList.size(); i++) {
                            list.add(tempList.get(i).LEVEL_ID);
                        }
                        int iCountParent = CommonFunction.findMaxList(list);
                        String sPrefix = "";
                        if(iCountParent > 1) {
                            int n = 2;
//                            if(sLevelBranch.equals("")) {
//                                n = 4;
//                            } else if(sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CA)) {
//                                n = 3;
//                            } else if(sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CHILREN_ONE)) {
//                                n = 2;
//                            } else {
//                                n = 2;
//                            }
                            for(int i=n; i<=iCountParent; i++)
                            {
                                sPrefix = sPrefix + "&nbsp;&nbsp;&nbsp;";
                                for(int j=0; j<tempList.size(); j++)
                                {
                                    if(tempList.get(j).LEVEL_ID == i)
                                    {
                                        tempList.get(j).NAME = sPrefix +"+ "+tempList.get(j).NAME;
                                    }
                                }
                            }
                        }
                        response[0] = new BRANCH[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_DETAIL">
    public void S_BO_BRANCH_DETAIL(String strID, BRANCH[][] response)
            throws Exception {
        ArrayList<BRANCH> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_DETAIL(?) }");
                        if (!"".equals(strID)) {
                            proc_stmt.setString(1, strID);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BRANCH tempItem = new BRANCH();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.PROVINCE_ID = rs.getInt("PROVINCE_ID");
                            tempItem.DISCOUNT_RATE_PROFILE_ID = rs.getInt("DISCOUNT_RATE_PROFILE_ID");
                            tempItem.BRANCH_ROLE_ID = rs.getInt("BRANCH_ROLE_ID");
                            tempItem.BRANCH_STATE_ID = rs.getInt("BRANCH_STATE_ID");
                            tempItem.PARENT_ID = rs.getInt("PARENT_ID");
                            tempItem.NAME = rs.getString("BRANCH_NAME");
                            tempItem.REMARK = rs.getString("REMARK");
                            tempItem.REMARK_EN = rs.getString("REMARK_EN");
                            tempItem.MSISDN = rs.getString("MSISDN");
                            tempItem.ADDRESS = rs.getString("ADDRESS");
                            tempItem.EMAIL = rs.getString("EMAIL");
                            tempItem.REPRESENTATIVE = rs.getString("REPRESENTATIVE");
                            tempItem.REPRESENTATIVE_POSITION = rs.getString("REPRESENTATIVE_POSITION");
                            tempItem.CERTIFICATION_PROFILE_PROPERTIES = rs.getString("CERTIFICATION_PROFILE_PROPERTIES");
                            tempItem.CERTIFICATION_POLICY_PROPERTIES = rs.getString("CERTIFICATION_POLICY_PROPERTIES");
                            tempItem.SOAP_SECURITY_PROPERTIES = rs.getString("SOAP_SECURITY_PROPERTIES");
                            tempItem.IP_ADDRESS_PROPERTIES = rs.getString("IP_ADDRESS_PROPERTIES");
                            tempItem.FUNCTIONALTITY_PROPERTIES = rs.getString("FUNCTIONALITY_PROPERTIES");
                            tempItem.REST_JWT_PROPERTIES = rs.getString("REST_JWT_PROPERTIES");
                            tempItem.TAX_CODE = rs.getString("TAX_CODE");
                            tempItem.LOGO = rs.getString("LOGO");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempItem.CALLBACK_URL_NOTICE = EscapeUtils.CheckTextNull(rs.getString("CALLBACK_URL"));
                            tempItem.LIMIT_REVOKE = EscapeUtils.CheckTextNull(rs.getString("LIMIT_REVOKE"));
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempList.add(tempItem);
                        }
                        response[0] = new BRANCH[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_TOTAL">
    public int S_BO_BRANCH_TOTAL(String strFrom, String strTo, String pName, String pCity, String pLIST_BRANCH_ID)
            throws Exception {
        Connection conns = null;
        int ss = 0;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_TOTAL(?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pName)) {
                            proc_stmt.setString(3, pName);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pCity)) {
                            proc_stmt.setInt(4, Integer.parseInt(pCity));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pLIST_BRANCH_ID)) {
                            proc_stmt.setString(5, pLIST_BRANCH_ID);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(6);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_LIST">
    public void S_BO_BRANCH_LIST(String strFrom, String strTo,
        String pName, String pCity, String pLanguage, String pLIST_BRANCH_ID, BRANCH[][] response, int sPage, int sSum)
        throws Exception {
        ArrayList<BRANCH> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_LIST(?,?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pName)) {
                            proc_stmt.setString(3, pName);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pCity)) {
                            proc_stmt.setInt(4, Integer.parseInt(pCity));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.setInt(5, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(6, sPage);
                        proc_stmt.setInt(7, sSum);
                        if (!"".equals(pLIST_BRANCH_ID)) {
                            proc_stmt.setString(8, pLIST_BRANCH_ID);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BRANCH tempItem = new BRANCH();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.PARENT_NAME = rs.getString("BRANCH_PARENT_DESC");
                            tempItem.BRANCH_STATE_DESC = rs.getString("BRANCH_STATE_DESC");
                            tempItem.PROVINCE_REMARK = rs.getString("PROVINCE_DESC");
                            tempItem.REMARK = rs.getString("BRANCH_DESC");
                            tempItem.NAME = rs.getString("BRANCH_NAME");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new BRANCH[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_UPDATE">
    public String S_BO_BRANCH_UPDATE(int strID, String strName, String strCity,
            String strRemark_EN, String strRemark, String strParent, String strPhone, String strAdress,
            String pUserUID, String sEmail, String pREPRESENTATIVE, String pREPRESENTATIVE_POSITION,
            String pTAX_CODE, String pDISCOUNT_RATE_PROFILE_ID, String pBRANCH_ROLE_ID,
            String pCERTIFICATION_PROFILE_PROPERTIES, String pBRANCH_STATE_ID, String pCALLBACK_URL)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_UPDATE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, strID);
                        proc_stmt.setString(2, strName);
                        proc_stmt.setString(3, strPhone);
                        proc_stmt.setString(4, strAdress);
                        proc_stmt.setString(5, sEmail);
                        proc_stmt.setString(6, pREPRESENTATIVE);
                        proc_stmt.setString(7, pREPRESENTATIVE_POSITION);
                        proc_stmt.setString(8, pTAX_CODE);
                        proc_stmt.setInt(9, Integer.parseInt(strCity));
                        proc_stmt.setString(10, strRemark_EN);
                        proc_stmt.setString(11, strRemark);
                        if(!"".equals(pDISCOUNT_RATE_PROFILE_ID)) {
                            proc_stmt.setInt(12, Integer.parseInt(pDISCOUNT_RATE_PROFILE_ID));
                        } else {
                            proc_stmt.setString(12, null);
                        }
                        if (!"".equals(strParent)) {
                            proc_stmt.setInt(13, Integer.parseInt(strParent));
                        } else {
                            proc_stmt.setString(13, null);
                        }
                        proc_stmt.setString(14, pUserUID);
                        if (!"".equals(pBRANCH_ROLE_ID)) {
                            proc_stmt.setInt(15, Integer.parseInt(pBRANCH_ROLE_ID));
                        } else {
                            proc_stmt.setString(15, null);
                        }
                        if (!"".equals(pCERTIFICATION_PROFILE_PROPERTIES)) {
                            proc_stmt.setString(16, pCERTIFICATION_PROFILE_PROPERTIES);
                        } else {
                            proc_stmt.setString(16, null);
                        }
                        if (!"".equals(pBRANCH_STATE_ID)) {
                            proc_stmt.setInt(17, Integer.parseInt(pBRANCH_STATE_ID));
                        } else {
                            proc_stmt.setString(17, null);
                        }
                        if (!Definitions.CONFIG_REQUEST_VALUE_NULL.equals(pCALLBACK_URL)) {
                            proc_stmt.setString(18, pCALLBACK_URL);
                        } else {
                            proc_stmt.setString(18, null);
                        }
                        proc_stmt.registerOutParameter(19, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(19));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_CHANGE_PARENT_ID">
    public String S_BO_BRANCH_CHANGE_PARENT_ID(int pBRANCH_ID, int pOLD_PARENT_ID, int pNEW_PARENT_ID, String pUserUID)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_CHANGE_PARENT_ID(?,?,?,?,?) }");
                        proc_stmt.setInt(1, pBRANCH_ID);
                        proc_stmt.setInt(2, pOLD_PARENT_ID);
                        proc_stmt.setInt(3, pNEW_PARENT_ID);
                        proc_stmt.setString(4, pUserUID);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_CHANGE_PARENT_ID", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_UPDATE_PROPERTIES">
    public String S_BO_BRANCH_UPDATE_PROPERTIES(int strID, String pSOAP_SECURITY_PROPERTIES, String pCERTIFICATION_POLICY_PROPERTIES,
            String pIP_ADDRESS_PROPERTIES, String pFUNCTIONALTITY_PROPERTIES, String pUSERNAME_BY, String pREST_JWT_PROPERTIES)
            throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_UPDATE_PROPERTIES(?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, strID);
                        if(!"".equals(pSOAP_SECURITY_PROPERTIES))
                        {
                            proc_stmt.setString(2, pSOAP_SECURITY_PROPERTIES.trim());
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if(!"".equals(pCERTIFICATION_POLICY_PROPERTIES))
                        {
                            proc_stmt.setString(3, pCERTIFICATION_POLICY_PROPERTIES);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if(!"".equals(pIP_ADDRESS_PROPERTIES)) {
                            proc_stmt.setString(4, pIP_ADDRESS_PROPERTIES);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if(!"".equals(pFUNCTIONALTITY_PROPERTIES))
                        {
                            proc_stmt.setString(5, pFUNCTIONALTITY_PROPERTIES);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if(!"".equals(pUSERNAME_BY)) {
                            proc_stmt.setString(6, pUSERNAME_BY);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if(!"".equals(pREST_JWT_PROPERTIES)) {
                            proc_stmt.setString(7, pREST_JWT_PROPERTIES);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_UPDATE_PROPERTIES", proc_stmt.toString());
                        proc_stmt.execute();
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_CANCEL">
    public String S_BO_BRANCH_CANCEL(int pBRANCH_ID, String pUSERNAME_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_CANCEL(?,?,?) }");
                        proc_stmt.setInt(1, pBRANCH_ID);
                        proc_stmt.setString(2, pUSERNAME_BY);
                        proc_stmt.registerOutParameter(3, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_CANCEL", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(3));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_UPDATE">
    public String S_BO_BRANCH_UPDATE_LOGO(int strID, byte[] pLOGO, String pUserUID)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_UPDATE_LOGO(?,?,?,?) }");
                        proc_stmt.setInt(1, strID);
                        proc_stmt.setBytes(2, pLOGO);
                        proc_stmt.setString(3, pUserUID);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_UPDATE_LOGO", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_INSERT">
    public String S_BO_BRANCH_INSERT(String pNAME, String pPROVINCE_ID, String pREMARK_EN, String pREMARK,
            String pPARENT_ID, String pUSER_BY, String strPhone, String strAddress, String pEMAIL, String pREPRESENTATIVE,
            String pREPRESENTATIVE_POSITION, String pTAX_CODE, byte[] pLOGO, String pDISCOUNT_RATE_PROFILE_ID,
            String pCERTIFICATION_POLICY_PROPERTIES, String pBRANCH_ROLE_ID, int[] pBRANCH_ID, String pCALLBACK_URL) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_INSERT(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pNAME);
                        proc_stmt.setString(2, strPhone);
                        proc_stmt.setString(3, strAddress);
                        proc_stmt.setString(4, pEMAIL);
                        proc_stmt.setString(5, pREPRESENTATIVE);
                        proc_stmt.setString(6, pREPRESENTATIVE_POSITION);
                        proc_stmt.setString(7, pTAX_CODE);
                        proc_stmt.setBytes(8, pLOGO);
                        proc_stmt.setInt(9, Integer.parseInt(pPROVINCE_ID));
                        if(!"".equals(pDISCOUNT_RATE_PROFILE_ID)) {
                            proc_stmt.setInt(10, Integer.parseInt(pDISCOUNT_RATE_PROFILE_ID));
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        proc_stmt.setString(11, pREMARK_EN);
                        proc_stmt.setString(12, pREMARK);
                        proc_stmt.setInt(13, Integer.parseInt(pPARENT_ID));
                        proc_stmt.setString(14, pUSER_BY);
                        proc_stmt.setString(15, pCERTIFICATION_POLICY_PROPERTIES);
                        proc_stmt.setInt(16, Integer.parseInt(pBRANCH_ROLE_ID));
                        proc_stmt.setString(17, pCALLBACK_URL);
                        proc_stmt.registerOutParameter(18, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(19, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(18));
                        pBRANCH_ID[0] = proc_stmt.getInt(19);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_PROVINCE_LIST">
    public void S_BO_PROVINCE_LIST(String pLanguage, int sPage, int sSum,
            CITY_PROVINCE[][] response) throws Exception {
        ArrayList<CITY_PROVINCE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PROVINCE_LIST(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(2, sPage);
                        proc_stmt.setInt(3, sSum);
                        CommonFunction.LogDebugString(log, "S_BO_PROVINCE_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CITY_PROVINCE tempItem = new CITY_PROVINCE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.NAME = rs.getString("NAME");
                            tempItem.REMARK = rs.getString("PROVINCE_DESC");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new CITY_PROVINCE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_PROVINCE_TOTAL">
    public int S_BO_PROVINCE_TOTAL() throws Exception {
        Connection conns = null;
        int ss = 0;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PROVINCE_TOTAL(?) }");
                        proc_stmt.registerOutParameter(1, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(1);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_API_PROVINCE_LIST_BY_NAME">
    public void S_BO_API_PROVINCE_LIST_BY_NAME(String str1, int pLANGUAGE, CITY_PROVINCE[][] response) throws Exception {
        ArrayList<CITY_PROVINCE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_PROVINCE_LIST(?,?) }");
                        if (!"".equals(str1)) {
                            proc_stmt.setString(1, str1);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CITY_PROVINCE tempItem = new CITY_PROVINCE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("PROVINCE_NAME");
                            tempItem.REMARK = rs.getString("PROVINCE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CITY_PROVINCE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_PROVINCE_DETAIL">
    public void S_BO_PROVINCE_DETAIL(String str1, CITY_PROVINCE[][] response) throws Exception {
        ArrayList<CITY_PROVINCE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PROVINCE_DETAIL(?) }");
                        if (!"".equals(str1)) {
                            proc_stmt.setString(1, str1);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CITY_PROVINCE tempItem = new CITY_PROVINCE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.NAME = rs.getString("PROVINCE_NAME");
                            tempItem.REMARK = rs.getString("REMARK");
                            tempItem.REMARK_EN = rs.getString("REMARK_EN");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempList.add(tempItem);
                        }
                        response[0] = new CITY_PROVINCE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_PROVINCE_COMBOBOX">
    public void S_BO_PROVINCE_COMBOBOX(String pLanguage, CITY_PROVINCE[][] response) throws Exception {
        ArrayList<CITY_PROVINCE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PROVINCE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CITY_PROVINCE tempItem = new CITY_PROVINCE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.REMARK = rs.getString("PROVINCE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CITY_PROVINCE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_PROVINCE_UPDATE">
    public String S_BO_PROVINCE_UPDATE(int pPROVINCE_ID, String pENABLED, String pPROVINCE_NAME,
            String pREMARK_EN, String pREMARK, String pUSER_BY) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PROVINCE_UPDATE(?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pPROVINCE_ID);
                        proc_stmt.setInt(2, Integer.parseInt(pENABLED));
                        proc_stmt.setString(3, pPROVINCE_NAME);
                        proc_stmt.setString(4, pREMARK_EN);
                        proc_stmt.setString(5, pREMARK);
                        proc_stmt.setString(6, pUSER_BY);
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_PROVINCE_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(7));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_PROVINCE_INSERT">
    public String S_BO_PROVINCE_INSERT(String pPROVINCE_NAME, String pREMARK_EN, String pREMARK, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PROVINCE_INSERT(?,?,?,?,?) }");
                        proc_stmt.setString(1, pPROVINCE_NAME);
                        proc_stmt.setString(2, pREMARK_EN);
                        proc_stmt.setString(3, pREMARK);
                        proc_stmt.setString(4, pUSER_BY);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_PROVINCE_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_RESPONSE_CODE_LIST">
    public void S_BO_RESPONSE_CODE_LIST(String pLanguage, int sPage, int sSum,
            RESPONSE_CODE[][] response) throws Exception {
        ArrayList<RESPONSE_CODE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_RESPONSE_CODE_LIST(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(2, sPage);
                        proc_stmt.setInt(3, sSum);
                        CommonFunction.LogDebugString(log, "S_BO_RESPONSE_CODE_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            RESPONSE_CODE tempItem = new RESPONSE_CODE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.NAME = rs.getString("NAME");
                            tempItem.REMARK = rs.getString("RESPONSE_CODE_DESC");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new RESPONSE_CODE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_RESPONSE_CODE_TOTAL">
    public int S_BO_RESPONSE_CODE_TOTAL() throws Exception {
        Connection conns = null;
        int ss = 0;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_RESPONSE_CODE_TOTAL(?) }");
                        proc_stmt.registerOutParameter(1, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(1);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_RESPONSE_CODE_DETAIL">
    public void S_BO_RESPONSE_CODE_DETAIL(String str1, RESPONSE_CODE[][] response) throws Exception {
        ArrayList<RESPONSE_CODE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_RESPONSE_CODE_DETAIL(?) }");
                        if (!"".equals(str1)) {
                            proc_stmt.setString(1, str1);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            RESPONSE_CODE tempItem = new RESPONSE_CODE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.NAME = rs.getString("RESPONSE_CODE_NAME");
                            tempItem.REMARK = rs.getString("REMARK");
                            tempItem.REMARK_EN = rs.getString("REMARK_EN");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempList.add(tempItem);
                        }
                        response[0] = new RESPONSE_CODE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_RESPONSE_CODE_COMBOBOX">
    public void S_BO_RESPONSE_CODE_COMBOBOX(String pLanguage, RESPONSE_CODE[][] response) throws Exception {
        ArrayList<RESPONSE_CODE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_RESPONSE_CODE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            RESPONSE_CODE tempItem = new RESPONSE_CODE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("RESPONSE_CODE_NAME");
                            tempItem.REMARK = rs.getString("RESPONSE_CODE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new RESPONSE_CODE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_RESPONSE_CODE_UPDATE">
    public String S_BO_RESPONSE_CODE_UPDATE(int pPROVINCE_ID, String pENABLED, String pPROVINCE_NAME,
            String pREMARK_EN, String pREMARK, String pUSER_BY) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_RESPONSE_CODE_UPDATE(?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pPROVINCE_ID);
                        proc_stmt.setInt(2, Integer.parseInt(pENABLED));
                        proc_stmt.setString(3, pPROVINCE_NAME);
                        proc_stmt.setString(4, pREMARK_EN);
                        proc_stmt.setString(5, pREMARK);
                        proc_stmt.setString(6, pUSER_BY);
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_RESPONSE_CODE_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(7));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_RESPONSE_CODE_INSERT">
    public String S_BO_RESPONSE_CODE_INSERT(String pPROVINCE_NAME, String pREMARK_EN, String pREMARK, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_RESPONSE_CODE_INSERT(?,?,?,?,?) }");
                        proc_stmt.setString(1, pPROVINCE_NAME);
                        proc_stmt.setString(2, pREMARK_EN);
                        proc_stmt.setString(3, pREMARK);
                        proc_stmt.setString(4, pUSER_BY);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_RESPONSE_CODE_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_FUNCTIONALITY_LIST">
    public void S_BO_FUNCTIONALITY_LIST(String pLanguage, int sPage, int sSum,
            FUNCTIONALITY[][] response) throws Exception {
        ArrayList<FUNCTIONALITY> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FUNCTIONALITY_LIST(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(2, sPage);
                        proc_stmt.setInt(3, sSum);
                        CommonFunction.LogDebugString(log, "S_BO_FUNCTIONALITY_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            FUNCTIONALITY tempItem = new FUNCTIONALITY();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.NAME = rs.getString("FUNCTIONALITY_NAME");
                            tempItem.REMARK = rs.getString("FUNCTIONALITY_DESC");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new FUNCTIONALITY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_FUNCTIONALITY_TOTAL">
    public int S_BO_FUNCTIONALITY_TOTAL() throws Exception {
        Connection conns = null;
        int ss = 0;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FUNCTIONALITY_TOTAL(?) }");
                        proc_stmt.registerOutParameter(1, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(1);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_FUNCTIONALITY_DETAIL">
    public void S_BO_FUNCTIONALITY_DETAIL(String str1, FUNCTIONALITY[][] response) throws Exception {
        ArrayList<FUNCTIONALITY> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FUNCTIONALITY_DETAIL(?) }");
                        if (!"".equals(str1)) {
                            proc_stmt.setString(1, str1);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            FUNCTIONALITY tempItem = new FUNCTIONALITY();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.NAME = rs.getString("FUNCTIONALITY_NAME");
                            tempItem.REMARK = rs.getString("REMARK");
                            tempItem.REMARK_EN = rs.getString("REMARK_EN");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempList.add(tempItem);
                        }
                        response[0] = new FUNCTIONALITY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_FUNCTIONALITY_COMBOBOX">
    public void S_BO_FUNCTIONALITY_COMBOBOX(String pLanguage, FUNCTIONALITY[][] response) throws Exception {
        ArrayList<FUNCTIONALITY> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FUNCTIONALITY_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            FUNCTIONALITY tempItem = new FUNCTIONALITY();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("FUNCTIONALITY_NAME");
                            tempItem.REMARK = rs.getString("FUNCTIONALITY_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new FUNCTIONALITY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_FUNCTIONALITY_UPDATE">
    public String S_BO_FUNCTIONALITY_UPDATE(int pID, String pENABLED, String pFUNCTIONALITY_NAME,
            String pREMARK_EN, String pREMARK, String pUSER_BY) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FUNCTIONALITY_UPDATE(?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pID);
                        proc_stmt.setInt(2, Integer.parseInt(pENABLED));
                        proc_stmt.setString(3, pFUNCTIONALITY_NAME);
                        proc_stmt.setString(4, pREMARK_EN);
                        proc_stmt.setString(5, pREMARK);
                        proc_stmt.setString(6, pUSER_BY);
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_FUNCTIONALITY_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(7));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_FUNCTIONALITY_INSERT">
    public String S_BO_FUNCTIONALITY_INSERT(String pFUNCTIONALITY_NAME, String pREMARK_EN, String pREMARK, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FUNCTIONALITY_INSERT(?,?,?,?,?) }");
                        proc_stmt.setString(1, pFUNCTIONALITY_NAME);
                        proc_stmt.setString(2, pREMARK_EN);
                        proc_stmt.setString(3, pREMARK);
                        proc_stmt.setString(4, pUSER_BY);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_FUNCTIONALITY_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_AUTHORITY_LIST">
    public void S_BO_CERTIFICATION_AUTHORITY_LIST(String pLanguage, int sPage, int sSum,
            CERTIFICATION_AUTHORITY[][] response) throws Exception {
        ArrayList<CERTIFICATION_AUTHORITY> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_AUTHORITY_LIST(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(2, sPage);
                        proc_stmt.setInt(3, sSum);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_AUTHORITY_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_AUTHORITY tempItem = new CERTIFICATION_AUTHORITY();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.NAME = rs.getString("CERTIFICATION_AUTHORITY_NAME");
                            tempItem.REMARK = rs.getString("CERTIFICATION_AUTHORITY_DESC");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_AUTHORITY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_AUTHORITY_TOTAL">
    public int S_BO_CERTIFICATION_AUTHORITY_TOTAL() throws Exception {
        Connection conns = null;
        int ss = 0;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_AUTHORITY_TOTAL(?) }");
                        proc_stmt.registerOutParameter(1, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(1);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_AUTHORITY_DETAIL">
    public void S_BO_CERTIFICATION_AUTHORITY_DETAIL(String str1, CERTIFICATION_AUTHORITY[][] response) throws Exception {
        ArrayList<CERTIFICATION_AUTHORITY> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_AUTHORITY_DETAIL(?) }");
                        if (!"".equals(str1)) {
                            proc_stmt.setString(1, str1);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_AUTHORITY tempItem = new CERTIFICATION_AUTHORITY();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.OCSP_PRIORITY_ENABLED = rs.getBoolean("OCSP_PRIORITY_ENABLED");
                            tempItem.NAME = rs.getString("CERTIFICATION_AUTHORITY_NAME");
                            tempItem.PROPERTIES = rs.getString("PROPERTIES");
                            tempItem.CRL_URI = rs.getString("CRL_URI");
                            tempItem.OCSP_URI = rs.getString("OCSP_URI");
                            tempItem.CA_URI = rs.getString("CA_URI");
                            tempItem.CERTIFICATE = rs.getString("CERTIFICATION_AUTHORITY_BLOB");
                            tempItem.REMARK = rs.getString("REMARK");
                            tempItem.REMARK_EN = rs.getString("REMARK_EN");
                            tempItem.CRL_BLOB = rs.getBytes("CERTIFICATION_AUTHORITY_CRLDATA_BLOB");
                            tempItem.LAST_UPDATED_DT = rs.getString("LAST_UPDATED_DT");
                            tempItem.NEXT_UPDATED_DT = rs.getString("NEXT_UPDATED_DT");
                            tempItem.ISSUER_SUBJECT = rs.getString("ISSUER_SUBJECT");
                            tempItem.URI = rs.getString("URI");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempItem.ENFORCE_UNIQUE_DN = EscapeUtils.CheckTextNull(rs.getString("ENFORCE_UNIQUE_DN"));
                            // template
                            tempItem.TEMPLATE_PERSONAL_REGISTRATION_PAPER = rs.getString("TEMPLATE_PERSONAL_REGISTRATION_PAPER");
                            tempItem.TEMPLATE_ENTERPRISE_REGISTRATION_PAPER = rs.getString("TEMPLATE_ENTERPRISE_REGISTRATION_PAPER");
                            tempItem.TEMPLATE_DELIVERY_PAPER = rs.getString("TEMPLATE_DELIVERY_PAPER");
                            tempItem.TEMPLATE_CERTIFICATE_REVISION_PAPER = rs.getString("TEMPLATE_CERTIFICATE_REVISION_PAPER");
                            tempItem.TEMPLATE_CERTIFICATE_REVOCATION_REISSUE_PAPER = rs.getString("TEMPLATE_CERTIFICATE_REVOCATION_REISSUE_PAPER");
                            tempItem.TEMPLATE_LICENSE_CERTIFICATION = rs.getString("TEMPLATE_LICENSE_CERTIFICATION");
                            tempItem.TEMPLATE_REPORT_DEBT_CONTROL = rs.getString("TEMPLATE_REPORT_DEBT_CONTROL");
                            tempItem.TEMPLATE_CONFIRMATION_PAPER = rs.getString("TEMPLATE_CONFIRMATION_PAPER");
//                            tempItem.TEMPLATE_LICENSE_CERTIFICATION_DIGITAL = rs.getString("TEMPLATE_LICENSE_CERTIFICATION_DIGITAL");
//                            CommonFunction.LogDebugString(log, "CERTIFICATION_AUTHORITY_DETAIL", tempItem.URI);
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_AUTHORITY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_AUTHORITY_LIST_BY_NAME">
    public void S_BO_API_CERTIFICATION_AUTHORITY_LIST_BY_NAME(String str1, int pLANGUAGE, CERTIFICATION_AUTHORITY[][] response)
        throws Exception {
        ArrayList<CERTIFICATION_AUTHORITY> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_AUTHORITY_LIST_BY_NAME(?,?) }");
                        if (!"".equals(str1)) {
                            proc_stmt.setString(1, str1);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_AUTHORITY tempItem = new CERTIFICATION_AUTHORITY();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("CERTIFICATION_AUTHORITY_NAME");
                            tempItem.REMARK = rs.getString("CERTIFICATION_AUTHORITY_DESC");
                            String sCERTIFICATION_AUTHORITY_CORECA_SUBJECT = "";
                            ArrayList<ProObj> list = PropertiesContent.getPropertiesContent(EscapeUtils.CheckTextNull(rs.getString("PROPERTIES")));
                            for (ProObj list1 : list) {
                                if (list1.getKey().trim().equals(Definitions.CONFIG_PROPERTIES_CA_SUBJECTDN)) {
                                    sCERTIFICATION_AUTHORITY_CORECA_SUBJECT = list1.getValue().trim();
                                    break;
                                }
                            }
                            tempItem.CERTIFICATION_AUTHORITY_CORECA_SUBJECT = sCERTIFICATION_AUTHORITY_CORECA_SUBJECT;
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_AUTHORITY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_AUTHORITY_ATTR_GET">
    public void S_BO_CERTIFICATION_AUTHORITY_ATTR_GET(String str1, CERTIFICATION_AUTHORITY_ATTR[][] response) throws Exception {
        ArrayList<CERTIFICATION_AUTHORITY_ATTR> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_AUTHORITY_ATTR_GET(?) }");
                        proc_stmt.setString(1, str1);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_AUTHORITY_ATTR tempItem = new CERTIFICATION_AUTHORITY_ATTR();
                            tempItem.CERTIFICATION_AUTHORITY_ID = rs.getInt("CERTIFICATION_AUTHORITY_ID");
                            tempItem.CERTIFICATION_AUTHORITY_ATTR_TYPE_NAME = rs.getString("CERTIFICATION_AUTHORITY_ATTR_TYPE_NAME");
                            tempItem.VALUE = rs.getString("VALUE");
                            tempItem.BLOB = rs.getString("BLOB");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_AUTHORITY_ATTR[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_AUTHORITY_COMBOBOX">
    public void S_BO_CERTIFICATION_AUTHORITY_COMBOBOX(String pLanguage, CERTIFICATION_AUTHORITY[][] response) throws Exception {
        ArrayList<CERTIFICATION_AUTHORITY> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_AUTHORITY_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_AUTHORITY tempItem = new CERTIFICATION_AUTHORITY();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_DESC"));
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_NAME"));
                            tempItem.PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("PROPERTIES"));
                            String sCERTIFICATION_AUTHORITY_CORECA_SUBJECT = "";
                            ArrayList<ProObj> list = PropertiesContent.getPropertiesContent(EscapeUtils.CheckTextNull(rs.getString("PROPERTIES")));
                            for (ProObj list1 : list) {
                                if (list1.getKey().trim().equals(Definitions.CONFIG_PROPERTIES_CA_SUBJECTDN)) {
                                    sCERTIFICATION_AUTHORITY_CORECA_SUBJECT = list1.getValue().trim();
                                    break;
                                }
                            }
                            tempItem.CERTIFICATION_AUTHORITY_CORECA_SUBJECT = sCERTIFICATION_AUTHORITY_CORECA_SUBJECT;
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_AUTHORITY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_AUTHORITY_UPDATE">
    public String S_BO_CERTIFICATION_AUTHORITY_UPDATE(String pID, String pENABLED, String pNAME,
            String pCA_URI, String pOCSP_URI, String pOCSP_PRIORITY_ENABLED, String pCRL_URI, String pCERT_BLOB,
            String pREMARK_EN, String pREMARK, byte[] pCRLDATA_BLOB, java.sql.Timestamp pCRLDATA_LAST_UPDATED_DT,
            java.sql.Timestamp pCRLDATA_NEXT_UPDATED_DT, String pCRLDATA_ISSUER_SUBJECT, String pCRLDATA_AUTHORITY_KEY_ID,
            String pCRLDATA_URI, String pPROPERTIES, String pUSER_BY, String pENFORCE_UNIQUE_DN) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        CommonFunction comP = new CommonFunction();
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_AUTHORITY_UPDATE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        if (!"".equals(pENABLED)) {
                            proc_stmt.setInt(2, Integer.parseInt(pENABLED));
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pNAME)) {
                            proc_stmt.setString(3, pNAME);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pCA_URI)) {
                            proc_stmt.setString(4, pCA_URI);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pOCSP_URI)) {
                            proc_stmt.setString(5, pOCSP_URI);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pOCSP_PRIORITY_ENABLED)) {
                            proc_stmt.setInt(6, Integer.parseInt(pOCSP_PRIORITY_ENABLED));
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pCRL_URI)) {
                            proc_stmt.setString(7, pCRL_URI);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pCERT_BLOB)) {
                            proc_stmt.setString(8, pCERT_BLOB);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if (!"".equals(pPROPERTIES)) {
                            proc_stmt.setString(9, pPROPERTIES);
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        java.util.Date pEFFECTIVE_DT = null;
                        java.util.Date pEXPIRATION_DT = null;
                        Date[] dateVa = new Date[1];
                        Date[] dateEx = new Date[1];
                        String[] strParseCert = new String[3];
                        comP.getCertificateComponentsDatabase(pCERT_BLOB, strParseCert, dateVa, dateEx);
                        pEFFECTIVE_DT = dateVa[0];
                        pEXPIRATION_DT = dateEx[0];
                        if (pEFFECTIVE_DT != null) {
                            Object paramValid = new java.sql.Timestamp(pEFFECTIVE_DT.getTime());
                            proc_stmt.setObject(10, paramValid);
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        if (pEXPIRATION_DT != null) {
                            Object paramExpire = new java.sql.Timestamp(pEXPIRATION_DT.getTime());
                            proc_stmt.setObject(11, paramExpire);
                        } else {
                            proc_stmt.setString(11, null);
                        }
                        if (!"".equals(pREMARK_EN)) {
                            proc_stmt.setString(12, pREMARK_EN);
                        } else {
                            proc_stmt.setString(12, null);
                        }
                        if (!"".equals(pREMARK)) {
                            proc_stmt.setString(13, pREMARK);
                        } else {
                            proc_stmt.setString(13, null);
                        }
                        if (pCRLDATA_BLOB != null) {
                            proc_stmt.setBytes(14, pCRLDATA_BLOB);
                        } else {
                            proc_stmt.setString(14, null);
                        }
                        if (pCRLDATA_BLOB != null) {
                            proc_stmt.setObject(15, pCRLDATA_LAST_UPDATED_DT);
                        } else {
                            proc_stmt.setString(15, null);
                        }
                        if (pCRLDATA_BLOB != null) {
                            proc_stmt.setObject(16, pCRLDATA_NEXT_UPDATED_DT);
                        } else {
                            proc_stmt.setString(16, null);
                        }
                        if (pCRLDATA_BLOB != null) {
                            proc_stmt.setString(17, pCRLDATA_ISSUER_SUBJECT);
                        } else {
                            proc_stmt.setString(17, null);
                        }
                        proc_stmt.setString(18, pCRLDATA_AUTHORITY_KEY_ID);
                        if(!"".equals(pCRLDATA_URI))
                        {
                            proc_stmt.setString(19, pCRLDATA_URI);
                        } else {
                            proc_stmt.setString(19, null);
                        }
                        proc_stmt.setString(20, pUSER_BY);
                        if (!"".equals(pENFORCE_UNIQUE_DN)) {
                            proc_stmt.setInt(21, Integer.parseInt(pENFORCE_UNIQUE_DN));
                        } else {
                            proc_stmt.setString(21, null);
                        }
                        proc_stmt.registerOutParameter(22, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_AUTHORITY_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(22));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_AUTHORITY_INSERT">
    public String S_BO_CERTIFICATION_AUTHORITY_INSERT(String pNAME, String pCA_URI,
            String pOCSP_URI, String pOCSP_PRIORITY_ENABLED, String pCRL_URI, String pCERT_BLOB,
            String pREMARK_EN, String pREMARK, byte[] pCRLDATA_BLOB, java.sql.Timestamp pCRLDATA_LAST_UPDATED_DT,
            java.sql.Timestamp pCRLDATA_NEXT_UPDATED_DT, String pCRLDATA_ISSUER_SUBJECT, String pCRLDATA_AUTHORITY_KEY_ID,
            String pCRLDATA_URI, String pUSER_BY, String pENFORCE_UNIQUE_DN)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        CommonFunction comP = new CommonFunction();
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_AUTHORITY_INSERT(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pNAME);
                        proc_stmt.setString(2, pCA_URI);
                        proc_stmt.setString(3, pOCSP_URI);
                        proc_stmt.setInt(4, Integer.parseInt(pOCSP_PRIORITY_ENABLED));
                        proc_stmt.setString(5, pCRL_URI);
                        proc_stmt.setString(6, pCERT_BLOB);
                        java.util.Date pEFFECTIVE_DT = null;
                        java.util.Date pEXPIRATION_DT = null;
                        Date[] dateVa = new Date[1];
                        Date[] dateEx = new Date[1];
                        String[] strParseCert = new String[3];
                        comP.getCertificateComponentsDatabase(pCERT_BLOB, strParseCert, dateVa, dateEx);
                        pEFFECTIVE_DT = dateVa[0];
                        pEXPIRATION_DT = dateEx[0];
                        if (pEFFECTIVE_DT != null) {
                            Object paramValid = new java.sql.Timestamp(pEFFECTIVE_DT.getTime());
                            proc_stmt.setObject(7, paramValid);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (pEXPIRATION_DT != null) {
                            Object paramExpire = new java.sql.Timestamp(pEXPIRATION_DT.getTime());
                            proc_stmt.setObject(8, paramExpire);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        proc_stmt.setString(9, pREMARK_EN);
                        proc_stmt.setString(10, pREMARK);
                        proc_stmt.setBytes(11, pCRLDATA_BLOB);
                        proc_stmt.setObject(12, pCRLDATA_LAST_UPDATED_DT);
                        proc_stmt.setObject(13, pCRLDATA_NEXT_UPDATED_DT);
                        proc_stmt.setString(14, pCRLDATA_ISSUER_SUBJECT);
                        proc_stmt.setString(15, pCRLDATA_AUTHORITY_KEY_ID);
                        proc_stmt.setString(16, pCRLDATA_URI);
                        proc_stmt.setString(17, pUSER_BY);
                        proc_stmt.setString(18, pENFORCE_UNIQUE_DN);
                        proc_stmt.registerOutParameter(19, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_AUTHORITY_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(19));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_AUTHORITY_CRLDATA_IMPORT">
    public String S_BO_CERTIFICATION_AUTHORITY_CRLDATA_IMPORT(int pCERTIFICATION_AUTHORITY_ID, String pENABLED,
            byte[] pBLOB, java.sql.Timestamp pCRLDATA_LAST_UPDATED_DT, java.sql.Timestamp pCRLDATA_NEXT_UPDATED_DT,
            String pCRLDATA_ISSUER_SUBJECT, String pCRLDATA_URI, String pCRLDATA_AUTHORITY_KEY_ID,
            String pUSER_BY) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_AUTHORITY_CRLDATA_IMPORT(?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_AUTHORITY_ID);
                        proc_stmt.setInt(2, Integer.parseInt(pENABLED));
                        proc_stmt.setBytes(3, pBLOB);
                        proc_stmt.setObject(4, pCRLDATA_LAST_UPDATED_DT);
                        proc_stmt.setObject(5, pCRLDATA_NEXT_UPDATED_DT);
                        proc_stmt.setString(6, pCRLDATA_ISSUER_SUBJECT);
                        if (!"".equals(pCRLDATA_URI)) {
                            proc_stmt.setString(7, pCRLDATA_URI);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pCRLDATA_AUTHORITY_KEY_ID)) {
                            proc_stmt.setString(8, pCRLDATA_AUTHORITY_KEY_ID);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        proc_stmt.setString(9, pUSER_BY);
                        proc_stmt.registerOutParameter(10, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_AUTHORITY_CRLDATA_IMPORT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(10));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_ALGORITHM_COMBOBOX">
    public void S_BO_CERTIFICATION_ALGORITHM_COMBOBOX(String pLanguage, CERTIFICATION_ALGORITHM[][] response)
            throws Exception {
        ArrayList<CERTIFICATION_ALGORITHM> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_ALGORITHM_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_ALGORITHM tempItem = new CERTIFICATION_ALGORITHM();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.REMARK = rs.getString("CERTIFICATION_ALGORITHM_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_ALGORITHM[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_LIST">
    public void S_BO_CERTIFICATION_PROFILE_LIST(String pCERTIFICATION_AUTHORITY_ID, String pCERTIFICATION_PURPOSE_ID,
            String pENABLED, String pRENEWAL_ENABLED, String pLanguage, int sPage, int sSum,
            CERTIFICATION_PROFILE[][] response) throws Exception {
        ArrayList<CERTIFICATION_PROFILE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_LIST(?,?,?,?,?,?,?) }");
                        if (!"".equals(pCERTIFICATION_AUTHORITY_ID)) {
                            proc_stmt.setString(1, pCERTIFICATION_AUTHORITY_ID);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(pCERTIFICATION_PURPOSE_ID)) {
                            proc_stmt.setString(2, pCERTIFICATION_PURPOSE_ID);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pENABLED)) {
                            proc_stmt.setInt(3, Integer.parseInt(pENABLED));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setInt(4, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(5, sPage);
                        proc_stmt.setInt(6, sSum);
                        if (!"".equals(pRENEWAL_ENABLED)) {
                            proc_stmt.setInt(7, Integer.parseInt(pRENEWAL_ENABLED));
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_PROFILE_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PROFILE tempItem = new CERTIFICATION_PROFILE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.REMARK = rs.getString("CERTIFICATION_PROFILE_DESC");
                            tempItem.CERTIFICATION_PURPOSE_DESC = rs.getString("CERTIFICATION_PURPOSE_DESC");
                            tempItem.CERTIFICATION_AUTHORITY_DESC = rs.getString("CERTIFICATION_AUTHORITY_DESC");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PROFILE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_TOTAL">
    public int S_BO_CERTIFICATION_PROFILE_TOTAL(String pCERTIFICATION_AUTHORITY_ID,
            String pCERTIFICATION_PURPOSE_ID, String pENABLED, String pRENEWAL_ENABLED)
            throws Exception {
        Connection conns = null;
        int ss = 0;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_TOTAL(?,?,?,?,?) }");
                        if (!"".equals(pCERTIFICATION_AUTHORITY_ID)) {
                            proc_stmt.setString(1, pCERTIFICATION_AUTHORITY_ID);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(pCERTIFICATION_PURPOSE_ID)) {
                            proc_stmt.setString(2, pCERTIFICATION_PURPOSE_ID);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pENABLED)) {
                            proc_stmt.setInt(3, Integer.parseInt(pENABLED));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pRENEWAL_ENABLED)) {
                            proc_stmt.setInt(4, Integer.parseInt(pRENEWAL_ENABLED));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_PROFILE_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(5);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_DETAIL">
    public void S_BO_CERTIFICATION_PROFILE_DETAIL(String strID, CERTIFICATION_PROFILE[][] response)
            throws Exception {
        ArrayList<CERTIFICATION_PROFILE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_DETAIL(?) }");
                        if (!"".equals(strID)) {
                            proc_stmt.setString(1, strID);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PROFILE tempItem = new CERTIFICATION_PROFILE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.CERTIFICATION_ALGORITHM_ID = rs.getInt("CERTIFICATION_ALGORITHM_ID");
                            tempItem.CERTIFICATION_AUTHORITY_ID = rs.getInt("CERTIFICATION_AUTHORITY_ID");
                            tempItem.CERTIFICATION_PURPOSE_ID = rs.getInt("CERTIFICATION_PURPOSE_ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
//                            tempItem.ISSUE_ENABLED = rs.getBoolean("ISSUE_ENABLED");
                            tempItem.NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.PROPERTIES = rs.getString("PROPERTIES");
                            tempItem.DURATION_FREE = rs.getInt("PROMOTION_DURATION");
                            tempItem.AMOUNT = rs.getInt("AMOUNT");
                            String sTokenAmount = EscapeUtils.CheckTextNull(rs.getString("TOKEN_AMOUNT"));
                            tempItem.TOKEN_AMOUNT = "".equals(sTokenAmount) ? 0 : Integer.parseInt(sTokenAmount);
                            tempItem.RENEWAL_AMOUNT = rs.getInt("RENEWAL_AMOUNT");
                            tempItem.REISSUE_AMOUNT = rs.getInt("REISSUE_AMOUNT");
                            tempItem.CHANGE_AMOUNT = rs.getInt("CHANGE_AMOUNT");
                            tempItem.GOVERNMENT_AMOUNT = rs.getInt("GOVERNMENT_AMOUNT");
                            tempItem.DURATION = rs.getInt("DURATION");
                            tempItem.ENTITY_EJBCA = rs.getString("EJBCA_ENTITY_NAME");
                            tempItem.REMARK = rs.getString("REMARK");
                            tempItem.REMARK_EN = rs.getString("REMARK_EN");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempItem.ONLY_ISSUE = EscapeUtils.CheckTextNull(rs.getString("ONLY_ISSUE"));
                            tempItem.ONLY_RENEWAL = EscapeUtils.CheckTextNull(rs.getString("ONLY_RENEWAL"));
                            tempItem.AUTO_ASYNC = EscapeUtils.CheckTextNull(rs.getString("AUTO_ASYNC"));
//                            tempItem.UNDISPLAY_RENEWAL_ENABLED = "1".equals(EscapeUtils.CheckTextNull(rs.getString("UNDISPLAY_RENEWAL_ENABLED")));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PROFILE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_COMBOBOX">
    public void S_BO_CERTIFICATION_PROFILE_COMBOBOX(String pLanguage, CERTIFICATION_PROFILE[][] response) throws Exception {
        ArrayList<CERTIFICATION_PROFILE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PROFILE tempItem = new CERTIFICATION_PROFILE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.REMARK = rs.getString("CERTIFICATION_PROFILE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PROFILE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_UPDATE">
    public String S_BO_CERTIFICATION_PROFILE_UPDATE(int pID, String pENABLED, String pNAME,
            String pCERTIFICATION_PURPOSE_ID, String pCERTIFICATION_ALGORITHM_ID, String pCERTIFICATION_AUTHORITY_ID,
            String pFEE_AMOUNT, String pRENEWAL_AMOUNT, String pCHANGE_AMOUNT, String pREISSUE_AMOUNT, String pGOVERNMENT_AMOUNT,
            String pDURATION, String pPROMOTION_DURATION, String pPROPERTIES, String pREMARK_EN, String pREMARK, String pUSER_BY,
            String pENTITY_EJBCA, String pTOKEN_AMOUNT) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_UPDATE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pID);
                        proc_stmt.setInt(2, Integer.parseInt(pENABLED));
                        proc_stmt.setString(3, pNAME);
                        proc_stmt.setInt(4, Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        proc_stmt.setInt(5, Integer.parseInt(pCERTIFICATION_ALGORITHM_ID));
                        proc_stmt.setInt(6, Integer.parseInt(pCERTIFICATION_AUTHORITY_ID));
                        proc_stmt.setDouble(7, Double.parseDouble(pFEE_AMOUNT));
                        proc_stmt.setDouble(8, Double.parseDouble(pRENEWAL_AMOUNT));
                        proc_stmt.setDouble(9, Double.parseDouble(pCHANGE_AMOUNT));
                        proc_stmt.setDouble(10, Double.parseDouble(pREISSUE_AMOUNT));
                        if(!"".equals(pGOVERNMENT_AMOUNT))
                        {
                            proc_stmt.setDouble(11, Double.parseDouble(pGOVERNMENT_AMOUNT));
                        } else {
                            proc_stmt.setString(11, null);
                        }
                        proc_stmt.setInt(12, Integer.parseInt(pDURATION));
                        proc_stmt.setInt(13, Integer.parseInt(pPROMOTION_DURATION));
                        if (!"".equals(pPROPERTIES)) {
                            proc_stmt.setString(14, pPROPERTIES);
                        } else {
                            proc_stmt.setString(14, null);
                        }
                        proc_stmt.setString(15, pENTITY_EJBCA);
                        proc_stmt.setString(16, pREMARK_EN);
                        proc_stmt.setString(17, pREMARK);
                        proc_stmt.setString(18, pUSER_BY);
                        proc_stmt.setString(19, pTOKEN_AMOUNT);
                        proc_stmt.registerOutParameter(20, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_PROFILE_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(20));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_INSERT">
    public String S_BO_CERTIFICATION_PROFILE_INSERT(String pNAME, String pCERTIFICATION_PURPOSE_ID,
            String pCERTIFICATION_ALGORITHM_ID, String pCERTIFICATION_AUTHORITY_ID, String pFEE_AMOUNT,
            String pRENEWAL_AMOUNT, String pCHANGE_AMOUNT,String pREISSUE_AMOUNT, String pGOVERNMENT_AMOUNT,
            String pDURATION, String pPROMOTION_DURATION, String pPROPERTIES,
            String pREMARK_EN, String pREMARK, String pUSER_BY, String pENTITY_EJBCA,
            int[] pPROFILE_ID, String pTOKEN_AMOUNT) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_INSERT(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pNAME);
                        proc_stmt.setInt(2, Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        proc_stmt.setInt(3, Integer.parseInt(pCERTIFICATION_ALGORITHM_ID));
                        proc_stmt.setInt(4, Integer.parseInt(pCERTIFICATION_AUTHORITY_ID));
                        proc_stmt.setDouble(5, Double.parseDouble(pFEE_AMOUNT));
                        proc_stmt.setDouble(6, Double.parseDouble(pRENEWAL_AMOUNT));
                        proc_stmt.setDouble(7, Double.parseDouble(pCHANGE_AMOUNT));
                        proc_stmt.setDouble(8, Double.parseDouble(pREISSUE_AMOUNT));
                        if(!"".equals(pGOVERNMENT_AMOUNT))
                        {
                            proc_stmt.setDouble(9, Double.parseDouble(pGOVERNMENT_AMOUNT));
                        } else{
                            proc_stmt.setString(9, null);
                        }
                        proc_stmt.setInt(10, Integer.parseInt(pDURATION));
                        proc_stmt.setInt(11, Integer.parseInt(pPROMOTION_DURATION));
                        proc_stmt.setString(12, pPROPERTIES);
                        proc_stmt.setString(13, pREMARK_EN);
                        proc_stmt.setString(14, pREMARK);
                        proc_stmt.setString(15, pENTITY_EJBCA);
                        proc_stmt.setString(16, pUSER_BY);
                        proc_stmt.setString(17, pTOKEN_AMOUNT);
                        proc_stmt.registerOutParameter(18, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(19, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_PROFILE_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(18));
                        pPROFILE_ID[0] = proc_stmt.getInt(19);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_ATTR_UPDATEOLD">
    public String S_BO_CERTIFICATION_PROFILE_ATTR_UPDATE_OLD(int pID, String pREQUIRED, String pENABLED,
            String pUSER_BY) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_ATTR_UPDATE(?,?,?,?,?) }");
                        proc_stmt.setInt(1, pID);
                        proc_stmt.setInt(2, Integer.parseInt(pENABLED));
                        proc_stmt.setInt(3, Integer.parseInt(pREQUIRED));
                        proc_stmt.setString(4, pUSER_BY);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_PROFILE_ATTR_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_ATTR_INSERT">
    public String S_BO_CERTIFICATION_PROFILE_ATTR_INSERT(String pCertProfile, String pCERTIFICATION_PROFILE_ATTR_TYPE_ID,
            String pUSER_BY) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_ATTR_INSERT(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCertProfile));
                        proc_stmt.setInt(2, Integer.parseInt(pCERTIFICATION_PROFILE_ATTR_TYPE_ID));
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_PROFILE_ATTR_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_ATTR_NOT_ASSIGN">
    public void S_BO_CERTIFICATION_PROFILE_ATTR_NOT_ASSIGN(String pID, String pLanguage,
            CERTIFICATION_PROFILE_ATTR[][] response) throws Exception {
        ArrayList<CERTIFICATION_PROFILE_ATTR> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_ATTR_NOT_ASSIGN(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PROFILE_ATTR tempItem = new CERTIFICATION_PROFILE_ATTR();
                            tempItem.CERTIFICATION_PROFILE_ATTR_TYPE_ID = rs.getInt("CERTIFICATION_PROFILE_ATTR_TYPE_ID");
                            tempItem.NAME = rs.getString("CERTIFICATION_PROFILE_ATTR_TYPE_NAME");
                            tempItem.REMARK = rs.getString("CERTIFICATION_PROFILE_ATTR_TYPE_DESC");
                            tempItem.PRE_FIX = rs.getString("PRE_FIX");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PROFILE_ATTR[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_ATTR_ASSIGN">
    public void S_BO_CERTIFICATION_PROFILE_ATTR_ASSIGN(String pID, String pLanguage,
            CERTIFICATION_PROFILE_ATTR[][] response) throws Exception {
        ArrayList<CERTIFICATION_PROFILE_ATTR> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_ATTR_ASSIGN(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PROFILE_ATTR tempItem = new CERTIFICATION_PROFILE_ATTR();
                            tempItem.CERTIFICATION_PROFILE_ATTR_ID = rs.getInt("CERTIFICATION_PROFILE_ATTR_ID");
                            tempItem.REQUIRED = rs.getBoolean("REQUIRED");
                            tempItem.NAME = rs.getString("CERTIFICATION_PROFILE_ATTR_TYPE_NAME");
                            tempItem.REMARK = rs.getString("CERTIFICATION_PROFILE_ATTR_TYPE_DESC");
                            tempItem.PRE_FIX = rs.getString("PRE_FIX");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PROFILE_ATTR[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_SMART_SYSTEM_LOG_LIST">
    public void S_BO_SMART_SYSTEM_LOG_LIST(String pIa, String pIb, String pBillCode, String pPhone,
            String pFUNCTION, String pRESPONSECODE, String pFROM_SERVER, String pTO_SERVER,
            String pLanguage, SMART_SYSTEM_LOG[][] response, int sPage, int sSum) throws Exception {
        ResultSet rs = null;
        ArrayList<SMART_SYSTEM_LOG> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_SMART_SYSTEM_LOG_LIST(?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pIa));
                        proc_stmt.setInt(2, Integer.parseInt(pIb));
                        if (!"".equals(pBillCode)) {
                            proc_stmt.setString(3, pBillCode);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pPhone)) {
                            proc_stmt.setString(4, pPhone);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pFUNCTION)) {
                            proc_stmt.setInt(5, Integer.parseInt(pFUNCTION));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pRESPONSECODE)) {
                            proc_stmt.setInt(6, Integer.parseInt(pRESPONSECODE));
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pFROM_SERVER)) {
                            proc_stmt.setInt(7, Integer.parseInt(pFROM_SERVER));
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pTO_SERVER)) {
                            proc_stmt.setInt(8, Integer.parseInt(pTO_SERVER));
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        proc_stmt.setInt(9, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(10, sPage);
                        proc_stmt.setInt(11, sSum);
                        CommonFunction.LogDebugString(log, "S_BO_SMART_SYSTEM_LOG_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            SMART_SYSTEM_LOG tempItem = new SMART_SYSTEM_LOG();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.FUNCTIONALITY_NAME = rs.getString("FUNCTIONALITY_NAME");
                            tempItem.FUNCTIONALITY_DESC = rs.getString("FUNCTIONALITY_DESC");
                            tempItem.BILLCODE = rs.getString("BILLCODE");
                            tempItem.MSISDN = rs.getString("MSISDN");
                            tempItem.RESPONSE_CODE_NAME = rs.getString("RESPONSE_CODE_NAME");
                            tempItem.RESPONSE_CODE_DESC = rs.getString("RESPONSE_CODE_DESC");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new SMART_SYSTEM_LOG[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_SMART_SYSTEM_LOG_TOTAL">
    public int S_BO_SMART_SYSTEM_LOG_TOTAL(String strFrom, String strTo, String pBillCode, String pPhone,
            String pFUNCTION, String pRESPONSECODE, String pFROM_SERVER, String pTO_SERVER,
            int[] pIa, int[] pIb) throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_SMART_SYSTEM_LOG_TOTAL(?,?,?,?,?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pBillCode)) {
                            proc_stmt.setString(3, pBillCode);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pPhone)) {
                            proc_stmt.setString(4, pPhone);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pFUNCTION)) {
                            proc_stmt.setInt(5, Integer.parseInt(pFUNCTION));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pRESPONSECODE)) {
                            proc_stmt.setInt(6, Integer.parseInt(pRESPONSECODE));
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pFROM_SERVER)) {
                            proc_stmt.setInt(7, Integer.parseInt(pFROM_SERVER));
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pTO_SERVER)) {
                            proc_stmt.setInt(8, Integer.parseInt(pTO_SERVER));
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        proc_stmt.registerOutParameter(9, java.sql.Types.INTEGER);
                        if (pIa[0] != 0) {
                            proc_stmt.setInt(10, pIa[0]);
                            proc_stmt.setInt(11, pIb[0]);
                        } else {
                            proc_stmt.registerOutParameter(10, java.sql.Types.INTEGER);
                            proc_stmt.registerOutParameter(11, java.sql.Types.INTEGER);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_USER_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(9);
                        pIa[0] = proc_stmt.getInt(10);
                        pIb[0] = proc_stmt.getInt(11);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_SMART_SYSTEM_LOG_DETAIL">
    public void S_BO_SMART_SYSTEM_LOG_DETAIL(String pID, String pLanguage, SMART_SYSTEM_LOG[][] response) throws Exception {
        ResultSet rs = null;
        ArrayList<SMART_SYSTEM_LOG> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_SMART_SYSTEM_LOG_DETAIL(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            SMART_SYSTEM_LOG tempItem = new SMART_SYSTEM_LOG();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.BODY_DATA = rs.getString("BODY_DATA");
                            tempItem.DESTINATION_URI = rs.getString("DESTINATION_URI");
                            tempItem.SOURCE_URI = rs.getString("SOURCE_URI");
                            tempItem.BILLCODE = rs.getString("BILLCODE");
                            tempItem.HEADER_DATA = rs.getString("HEADER_DATA");
                            tempItem.RESPONSE_CODE_DESC = rs.getString("RESPONSE_CODE_DESC");
                            tempItem.RESPONSE_CODE_NAME = rs.getString("RESPONSE_CODE_NAME");
                            tempItem.SOURCE_SERVER_ENTITY_DESC = rs.getString("SOURCE_SERVER_ENTITY_DESC");
                            tempItem.DESTINATION_SERVER_ENTITY_DESC = rs.getString("DESTINATION_SERVER_ENTITY_DESC");
                            tempItem.FUNCTIONALITY_NAME = rs.getString("FUNCTIONALITY_NAME");
                            tempItem.FUNCTIONALITY_DESC = rs.getString("FUNCTIONALITY_DESC");
                            tempItem.MSISDN = rs.getString("MSISDN");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempList.add(tempItem);
                        }
                        response[0] = new SMART_SYSTEM_LOG[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_SERVER_ENTITY_LIST">
    public void S_BO_SERVER_ENTITY_LIST(String pLanguage, int sPage, int sSum,
            SERVER_ENTITY[][] response) throws Exception {
        ArrayList<SERVER_ENTITY> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_SERVER_ENTITY_LIST(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(2, sPage);
                        proc_stmt.setInt(3, sSum);
                        CommonFunction.LogDebugString(log, "S_BO_SERVER_ENTITY_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            SERVER_ENTITY tempItem = new SERVER_ENTITY();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.NAME = rs.getString("SERVER_ENTITY_NAME");
                            tempItem.REMARK = rs.getString("SERVER_ENTITY_DESC");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new SERVER_ENTITY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_SERVER_ENTITY_TOTAL">
    public int S_BO_SERVER_ENTITY_TOTAL() throws Exception {
        Connection conns = null;
        int ss = 0;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_SERVER_ENTITY_TOTAL(?) }");
                        proc_stmt.registerOutParameter(1, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(1);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_SERVER_ENTITY_DETAIL">
    public void S_BO_SERVER_ENTITY_DETAIL(String str1, SERVER_ENTITY[][] response) throws Exception {
        ArrayList<SERVER_ENTITY> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_SERVER_ENTITY_DETAIL(?) }");
                        if (!"".equals(str1)) {
                            proc_stmt.setString(1, str1);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            SERVER_ENTITY tempItem = new SERVER_ENTITY();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.NAME = rs.getString("SERVER_ENTITY_NAME");
                            tempItem.REMARK = rs.getString("REMARK");
                            tempItem.REMARK_EN = rs.getString("REMARK_EN");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempList.add(tempItem);
                        }
                        response[0] = new SERVER_ENTITY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_SERVER_ENTITY_UPDATE">
    public String S_BO_SERVER_ENTITY_UPDATE(int pID, String pENABLED, String pNAME,
            String pREMARK_EN, String pREMARK, String pUSER_BY) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_SERVER_ENTITY_UPDATE(?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pID);
                        proc_stmt.setInt(2, Integer.parseInt(pENABLED));
                        proc_stmt.setString(3, pNAME);
                        proc_stmt.setString(4, pREMARK_EN);
                        proc_stmt.setString(5, pREMARK);
                        proc_stmt.setString(6, pUSER_BY);
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_SERVER_ENTITY_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(7));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_SERVER_ENTITY_INSERT">
    public String S_BO_SERVER_ENTITY_INSERT(String pNAME, String pREMARK_EN, String pREMARK, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_SERVER_ENTITY_INSERT(?,?,?,?,?) }");
                        proc_stmt.setString(1, pNAME);
                        proc_stmt.setString(2, pREMARK_EN);
                        proc_stmt.setString(3, pREMARK);
                        proc_stmt.setString(4, pUSER_BY);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_SERVER_ENTITY_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_STATE_COMBOBOX">
    public void S_BO_CERTIFICATION_STATE_COMBOBOX(String pLanguage, CERTIFICATION_STATE[][] response)
            throws Exception {
        ArrayList<CERTIFICATION_STATE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_STATE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_STATE tempItem = new CERTIFICATION_STATE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.REMARK = rs.getString("CERTIFICATION_STATE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_STATE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_FILE_MANAGER_STATE_COMBOBOX">
    public void S_BO_FILE_MANAGER_STATE_COMBOBOX(String pLanguage, FILE_MANAGER_STATE[][] response)
            throws Exception {
        ArrayList<FILE_MANAGER_STATE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FILE_MANAGER_STATE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            FILE_MANAGER_STATE tempItem = new FILE_MANAGER_STATE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.REMARK = rs.getString("FILE_MANAGER_STATE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new FILE_MANAGER_STATE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_ATTR_STATE_COMBOBOX">
    public void S_BO_CERTIFICATION_ATTR_STATE_COMBOBOX(String pLanguage, CERTIFICATION_ATTR_STATE[][] response)
            throws Exception {
        ArrayList<CERTIFICATION_ATTR_STATE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_ATTR_STATE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_ATTR_STATE tempItem = new CERTIFICATION_ATTR_STATE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("CERTIFICATION_ATTR_STATE_NAME");
                            tempItem.REMARK = rs.getString("CERTIFICATION_ATTR_STATE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_ATTR_STATE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_ATTR_TYPE_COMBOBOX">
    public void S_BO_CERTIFICATION_ATTR_TYPE_COMBOBOX(String pLanguage, CERTIFICATION_ATTR_TYPE[][] response)
            throws Exception {
        ArrayList<CERTIFICATION_ATTR_TYPE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_ATTR_TYPE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_ATTR_TYPE tempItem = new CERTIFICATION_ATTR_TYPE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_ATTR_TYPE_NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_ATTR_TYPE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_ATTR_TYPE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_SERVICE_TYPE_COMBOBOX">
    public void S_BO_SERVICE_TYPE_COMBOBOX(String pLanguage, SERVICE_TYPE[][] response)
            throws Exception {
        ArrayList<SERVICE_TYPE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_SERVICE_TYPE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            SERVICE_TYPE tempItem = new SERVICE_TYPE();
                            tempItem.ID = rs.getInt("ID");
//                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_ATTR_TYPE_NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("SERVICE_TYPE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new SERVICE_TYPE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_STATE_COMBOBOX">
    public void S_BO_TOKEN_STATE_COMBOBOX(String pLanguage, TOKEN_STATE[][] response)
            throws Exception {
        ArrayList<TOKEN_STATE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_STATE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN_STATE tempItem = new TOKEN_STATE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.REMARK = rs.getString("TOKEN_STATE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN_STATE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_VERSION_COMBOBOX">
    public void S_BO_TOKEN_VERSION_COMBOBOX(String pLanguage, TOKEN_VERSION[][] response)
            throws Exception {
        ArrayList<TOKEN_VERSION> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_VERSION_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN_VERSION tempItem = new TOKEN_VERSION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.REMARK = rs.getString("TOKEN_VERSION_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN_VERSION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_LIST">
    public void S_BO_TOKEN_LIST(String strFrom, String strTo, String pToken_SN, String pTokenState, String pToken_Version,
            String pAgentID, String pLanguage, TOKEN[][] response, int sPage, int sSum, String pTAX_CODE,
            String pBUDGET_CODE, String pP_ID, String pPASSPORT, String pCCCD, String pSIGNED_ENABLED, String pPHONE,
            String pEMAIL, String pBRANCH_ID_LIST, String pDECISION, String pENTERPRISE_ID, String pPERSONAL_ID) throws Exception {
        ResultSet rs = null;
        ArrayList<TOKEN> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_TOKEN_LIST", 15));
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString("pFROM_DT", strFrom);
                        } else {
                            proc_stmt.setString("pFROM_DT", null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString("pTO_DT", strTo);
                        } else {
                            proc_stmt.setString("pTO_DT", null);
                        }
                        if (!"".equals(pToken_SN)) {
                            proc_stmt.setString("pTOKEN_SN", pToken_SN);
                        } else {
                            proc_stmt.setString("pTOKEN_SN", null);
                        }
                        if (!"".equals(pTokenState)) {
                            proc_stmt.setInt("pTOKEN_STATE_ID", Integer.parseInt(pTokenState));
                        } else {
                            proc_stmt.setString("pTOKEN_STATE_ID", null);
                        }
                        if (!"".equals(pToken_Version)) {
                            proc_stmt.setInt("pTOKEN_VERSION_ID", Integer.parseInt(pToken_Version));
                        } else {
                            proc_stmt.setString("pTOKEN_VERSION_ID", null);
                        }
                        if (!"".equals(pAgentID)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pAgentID));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        proc_stmt.setInt("pLANGUAGE", Integer.parseInt(pLanguage));
                        proc_stmt.setInt("pPAGE_NO", sPage);
                        proc_stmt.setInt("pROW_NO", sSum);
                        if (!"".equals(pSIGNED_ENABLED)) {
                            proc_stmt.setInt("pSIGNED_ENABLED", Integer.parseInt(pSIGNED_ENABLED));
                        } else {
                            proc_stmt.setString("pSIGNED_ENABLED", null);
                        }
                        if (!"".equals(pPHONE)) {
                            proc_stmt.setString("pPHONE_CONTRACT", pPHONE);
                        } else {
                            proc_stmt.setString("pPHONE_CONTRACT", null);
                        }
                        if (!"".equals(pEMAIL)) {
                            proc_stmt.setString("pEMAIL_CONTRACT", pEMAIL);
                        } else {
                            proc_stmt.setString("pEMAIL_CONTRACT", null);
                        }
                        if (!"".equals(pBRANCH_ID_LIST)) {
                            proc_stmt.setString("pLIST_BRANCH_ID", pBRANCH_ID_LIST);
                        } else {
                            proc_stmt.setString("pLIST_BRANCH_ID", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN tempItem = new TOKEN();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.TOKEN_STATE_DESC = rs.getString("TOKEN_STATE_DESC");
                            tempItem.TOKEN_VERSION_DESC = rs.getString("TOKEN_VERSION_DESC");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            java.sql.Timestamp s = rs.getTimestamp("CREATED_DATE");
                            tempItem.EXPORT_DATE_TYPE = s;
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_TOTAL">
    public int S_BO_TOKEN_TOTAL(String strFrom, String strTo, String pToken_SN, String pTokenState,
            String pToken_Version, String pAgentID, String pTAX_CODE, String pBUDGET_CODE, String pP_ID,
            String pPASSPORT, String pCCCD, String pSIGNED_ENABLED, String pPHONE,
            String pEMAIL, String pBRANCH_ID_LIST, String pDECISION, String pENTERPRISE_ID, String pPERSONAL_ID) throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_TOKEN_TOTAL", 13));
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString("pFROM_DT", strFrom);
                        } else {
                            proc_stmt.setString("pFROM_DT", null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString("pTO_DT", strTo);
                        } else {
                            proc_stmt.setString("pTO_DT", null);
                        }
                        if (!"".equals(pToken_SN)) {
                            proc_stmt.setString("pTOKEN_SN", pToken_SN);
                        } else {
                            proc_stmt.setString("pTOKEN_SN", null);
                        }
                        if (!"".equals(pTokenState)) {
                            proc_stmt.setInt("pTOKEN_STATE_ID", Integer.parseInt(pTokenState));
                        } else {
                            proc_stmt.setString("pTOKEN_STATE_ID", null);
                        }
                        if (!"".equals(pToken_Version)) {
                            proc_stmt.setInt("pTOKEN_VERSION_ID", Integer.parseInt(pToken_Version));
                        } else {
                            proc_stmt.setString("pTOKEN_VERSION_ID", null);
                        }
                        if (!"".equals(pAgentID)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pAgentID));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        if (!"".equals(pSIGNED_ENABLED)) {
                            proc_stmt.setInt("pSIGNED_ENABLED", Integer.parseInt(pSIGNED_ENABLED));
                        } else {
                            proc_stmt.setString("pSIGNED_ENABLED", null);
                        }
                        if (!"".equals(pPHONE)) {
                            proc_stmt.setString("pPHONE_CONTRACT", pPHONE);
                        } else {
                            proc_stmt.setString("pPHONE_CONTRACT", null);
                        }
                        if (!"".equals(pEMAIL)) {
                            proc_stmt.setString("pEMAIL_CONTRACT", pEMAIL);
                        } else {
                            proc_stmt.setString("pEMAIL_CONTRACT", null);
                        }
                        if (!"".equals(pBRANCH_ID_LIST)) {
                            proc_stmt.setString("pLIST_BRANCH_ID", pBRANCH_ID_LIST);
                        } else {
                            proc_stmt.setString("pLIST_BRANCH_ID", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        proc_stmt.registerOutParameter("pCOUNT", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt("pCOUNT");
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_DETAIL">
    public void S_BO_TOKEN_DETAIL(String pID, TOKEN[][] response) throws Exception {
        ResultSet rs = null;
        ArrayList<TOKEN> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        oMapperParse = new ObjectMapper();
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_DETAIL(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN tempItem = new TOKEN();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.SO_PIN = EscapeUtils.CheckTextNull(rs.getString("SO_PIN"));
                            tempItem.TOKEN_STATE_ID = rs.getInt("TOKEN_STATE_ID");
                            tempItem.TOKEN_VERSION_ID = rs.getInt("TOKEN_VERSION_ID");
                            if (!"".equals(EscapeUtils.CheckTextNull(rs.getString("MENU_LINK_JSON")))) {
                                MENULINK_TOKEN itemParseMenu = oMapperParse.readValue(rs.getString("MENU_LINK_JSON"), MENULINK_TOKEN.class);
                                tempItem.MENU_LINK_NAME = itemParseMenu.MENU_LINK_NAME;
                                tempItem.MENU_LINK_URL = itemParseMenu.MENU_LINK_URL;
                            }
                            String sPUSH_NOTICE_JSON = EscapeUtils.CheckTextNull(rs.getString("PUSH_NOTICE_JSON"));
                            tempItem.PUSH_NOTICE_JSON = sPUSH_NOTICE_JSON;
                            if (!"".equals(sPUSH_NOTICE_JSON)) {
                                PUSH_TOKEN itemParsePush = oMapperParse.readValue(sPUSH_NOTICE_JSON, PUSH_TOKEN.class);
                                tempItem.PUSH_NOTICE_CONTENT = itemParsePush.PUSH_NOTICE_CONTENT;
                                tempItem.PUSH_NOTICE_URL = itemParsePush.PUSH_NOTICE_URL;
                                tempItem.PUSH_NOTICE_TEXT_COLOR = itemParsePush.PUSH_NOTICE_TEXT_COLOR;
                                tempItem.PUSH_NOTICE_BGR_COLOR = itemParsePush.PUSH_NOTICE_BGR_COLOR;
                                tempItem.PUSH_NOTICE_TEXT = EscapeUtils.CheckTextNull(itemParsePush.PUSH_NOTICE_TEXT);
                            }
                            tempItem.ACTIVATION_REMAINING_COUNTER = rs.getInt("ACTIVATION_REMAINING_COUNTER");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempItem.SIGNED_ENABLED = rs.getBoolean("SIGNED_ENABLED");
                            tempItem.SIGNING_COUNTER = rs.getInt("SIGNING_COUNTER");
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_DETAIL_HISTORY_CERTIFICATION">
    public void S_BO_TOKEN_DETAIL_HISTORY_CERTIFICATION(String pTOKEN_ID, String pLANGUAGE,
        CERTIFICATION[][] response) throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_DETAIL_HISTORY_CERTIFICATION(?,?) }");
                        if (!"".equals(pTOKEN_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pTOKEN_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, Integer.parseInt(pLANGUAGE));
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_DETAIL_HISTORY_CERTIFICATION", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.COMPANY_NAME = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            tempItem.PERSONAL_NAME = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.EMAIL_CONTRACT = EscapeUtils.CheckTextNull(rs.getString("EMAIL_CONTRACT"));
                            tempItem.PHONE_CONTRACT = EscapeUtils.CheckTextNull(rs.getString("PHONE_CONTRACT"));
                            tempItem.CREATED_DT = EscapeUtils.CheckTextNull(rs.getString("OPERATED_DT"));
                            tempItem.REVOKED_DT = EscapeUtils.CheckTextNull(rs.getString("REVOKED_DT"));
                            tempItem.CERTIFICATION_ATTR_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("SERVICE_TYPE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_ATTR_INSERT">
    public String S_BO_TOKEN_ATTR_INSERT(int pID, int pTOKEND_ATTR_TYPE_ID, int pTOKEN_ATTR_STATE_ID, String pValue,
            String pUSER_BY) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_ATTR_INSERT(?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pID);
                        proc_stmt.setInt(2, pTOKEND_ATTR_TYPE_ID);
                        proc_stmt.setInt(3, pTOKEN_ATTR_STATE_ID);
                        if (!"".equals(pValue)) {
                            proc_stmt.setString(4, pValue);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.setString(5, pUSER_BY);
                        proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_ATTR_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(6));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_UPDATE">
    public String S_BO_TOKEN_UPDATE(int pTOKEN_ID, String pTOKEN_STATE_ID, String pMENU_LINK_JSON,
            String pPUSH_NOTICE_JSON, String pBRANCH_ID, String pACTIVATION_CODE, String pUSER_BY) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_UPDATE(?,?,?,?,?,?,?,?) }");
                        if(pTOKEN_ID != 0)
                        {
                            proc_stmt.setInt(1, pTOKEN_ID);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(pTOKEN_STATE_ID)) {
                            proc_stmt.setInt(2, Integer.parseInt(pTOKEN_STATE_ID));
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pMENU_LINK_JSON)) {
                            if (!Definitions.CONFIG_UPDATE_DEFAULT_VALUE_NULL.equals(pMENU_LINK_JSON)) {
                                proc_stmt.setString(3, pMENU_LINK_JSON);
                            } else {
                                proc_stmt.setString(3, "");
                            }
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pPUSH_NOTICE_JSON)) {
                            if (!Definitions.CONFIG_UPDATE_DEFAULT_VALUE_NULL.equals(pPUSH_NOTICE_JSON)) {
                                proc_stmt.setString(4, pPUSH_NOTICE_JSON);
                            } else {
                                proc_stmt.setString(4, "");
                            }
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(5, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pACTIVATION_CODE)) {
                            proc_stmt.setInt(6, Integer.parseInt(pACTIVATION_CODE));
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        proc_stmt.setString(7, pUSER_BY);
                        proc_stmt.registerOutParameter(8, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(8));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_DELETE">
    public String S_BO_TOKEN_DELETE(int pTOKEN_ID, String pUSER_BY)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_DELETE(?,?,?) }");
                        proc_stmt.setInt(1, pTOKEN_ID);
                        proc_stmt.setString(2, pUSER_BY);
                        proc_stmt.registerOutParameter(3, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_DELETE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(3));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_GET_ATTR">
    public void S_BO_TOKEN_GET_ATTR(String pID, String sLanguage, TOKEN[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<TOKEN> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_GET_ATTR(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setInt(2, Integer.parseInt(sLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN tempItem = new TOKEN();
//                            tempItem.ID = rs.getInt("TOKEN_ID");
                            tempItem.TOKEN_ATTR_ID = rs.getInt("TOKEN_ATTR_ID");
                            tempItem.TOKEN_ATTR_TYPE_ID = rs.getInt("TOKEN_ATTR_TYPE_ID");
                            tempItem.TOKEN_ATTR_TYPE_DESC = rs.getString("TOKEN_ATTR_TYPE_DESC");
                            tempItem.TOKEN_ATTR_STATE = rs.getInt("TOKEN_ATTR_STATE_ID");
                            tempItem.TOKEN_ATTR_STATE_DESC = rs.getString("TOKEN_ATTR_STATE_DESC");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_ATTR_APPROVED">
    public String S_BO_TOKEN_ATTR_APPROVED(int pTOKEN_ATTR_ID, int pTOKEN_ID, String pTOKEN_ATTR_TYPE_ID,
            String pVALUE, String pUSER_BY) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_ATTR_APPROVED(?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pTOKEN_ATTR_ID);
                        proc_stmt.setInt(2, pTOKEN_ID);
                        if (!"".equals(pTOKEN_ATTR_TYPE_ID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pTOKEN_ATTR_TYPE_ID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pVALUE)) {
                            proc_stmt.setString(4, pVALUE);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.setString(5, pUSER_BY);
                        proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_ATTR_APPROVED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(6));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_TOKEN_ATTR_BUNDLE_APPROVED">
    public String S_BO_API_TOKEN_ATTR_BUNDLE_APPROVED(int pTOKEN_ATTR_ID, int pTOKEN_ATTR_STATE_ID, String pVALUE, String pUSER_BY)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_TOKEN_ATTR_BUNDLE_APPROVED(?,?,?,?,?) }");
                        proc_stmt.setInt(1, pTOKEN_ATTR_ID);
                        proc_stmt.setInt(2, pTOKEN_ATTR_STATE_ID);
                        if (!"".equals(pVALUE)) {
                            proc_stmt.setString(3, pVALUE);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setString(4, pUSER_BY);
                        proc_stmt.registerOutParameter(5, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_API_TOKEN_ATTR_BUNDLE_APPROVED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(5);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_ATTR_DECLINED">
    public String S_BO_TOKEN_ATTR_DECLINED(int pTOKEN_ATTR_ID, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_ATTR_DECLINED(?,?,?) }");
                        proc_stmt.setInt(1, pTOKEN_ATTR_ID);
                        proc_stmt.setString(2, pUSER_BY);
                        proc_stmt.registerOutParameter(3, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_ATTR_DECLINED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(3));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_ATTR_TOTAL">
    public int S_BO_TOKEN_ATTR_TOTAL(String strFrom, String strTo, String pToken_SN,
            String pAgentID, String pTOKEN_ATTR_TYPE, String pTOKEN_ATTR_STATE, String pBRANCH_LOGIN_ID,
            String pTAX_CODE, String pBUDGET_CODE, String pP_ID, String pPASSPORT, String pCCCD,
            String pBRANCH_ID_LIST, String pDECISION) throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_ATTR_TOTAL(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pToken_SN)) {
                            proc_stmt.setString(3, pToken_SN);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pAgentID)) {
                            proc_stmt.setInt(4, Integer.parseInt(pAgentID));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pTOKEN_ATTR_TYPE)) {
                            proc_stmt.setInt(5, Integer.parseInt(pTOKEN_ATTR_TYPE));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pTOKEN_ATTR_STATE)) {
                            proc_stmt.setInt(6, Integer.parseInt(pTOKEN_ATTR_STATE));
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pBRANCH_LOGIN_ID)) {
                            proc_stmt.setInt(7, Integer.parseInt(pBRANCH_LOGIN_ID));
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pTAX_CODE)) {
                            proc_stmt.setString(8, pTAX_CODE);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if (!"".equals(pBUDGET_CODE)) {
                            proc_stmt.setString(9, pBUDGET_CODE);
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        if (!"".equals(pP_ID)) {
                            proc_stmt.setString(10, pP_ID);
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        if (!"".equals(pPASSPORT)) {
                            proc_stmt.setString(11, pPASSPORT);
                        } else {
                            proc_stmt.setString(11, null);
                        }
                        if (!"".equals(pCCCD)) {
                            proc_stmt.setString(12, pCCCD);
                        } else {
                            proc_stmt.setString(12, null);
                        }
                        if (!"".equals(pBRANCH_ID_LIST)) {
                            proc_stmt.setString(13, pBRANCH_ID_LIST);
                        } else {
                            proc_stmt.setString(13, null);
                        }
                        if (!"".equals(pDECISION)) {
                            proc_stmt.setString(14, pDECISION);
                        } else {
                            proc_stmt.setString(14, null);
                        }
                        proc_stmt.registerOutParameter(15, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_ATTR_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(15);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_ATTR_LIST">
    public void S_BO_TOKEN_ATTR_LIST(String strFrom, String strTo, String pToken_SN, String pAgentID,
            String pTOKEN_ATTR_TYPE, String pTOKEN_ATTR_STATE, String pBRANCH_LOGIN_ID,
            String pTAX_CODE, String pBUDGET_CODE, String pP_ID, String pPASSPORT,
            String sLanguage, TOKEN[][] response, int iPagNo, int iSwRws, String pCCCD,
            String pBRANCH_ID_LIST, String pDECISION) throws Exception {
        ResultSet rs = null;
        ArrayList<TOKEN> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_ATTR_LIST(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pToken_SN)) {
                            proc_stmt.setString(3, pToken_SN);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pAgentID)) {
                            proc_stmt.setInt(4, Integer.parseInt(pAgentID));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pTOKEN_ATTR_TYPE)) {
                            proc_stmt.setInt(5, Integer.parseInt(pTOKEN_ATTR_TYPE));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pTOKEN_ATTR_STATE)) {
                            proc_stmt.setInt(6, Integer.parseInt(pTOKEN_ATTR_STATE));
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pBRANCH_LOGIN_ID)) {
                            proc_stmt.setInt(7, Integer.parseInt(pBRANCH_LOGIN_ID));
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pTAX_CODE)) {
                            proc_stmt.setString(8, pTAX_CODE);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if (!"".equals(pBUDGET_CODE)) {
                            proc_stmt.setString(9, pBUDGET_CODE);
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        if (!"".equals(pP_ID)) {
                            proc_stmt.setString(10, pP_ID);
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        if (!"".equals(pPASSPORT)) {
                            proc_stmt.setString(11, pPASSPORT);
                        } else {
                            proc_stmt.setString(11, null);
                        }
                        proc_stmt.setInt(12, Integer.parseInt(sLanguage));
                        proc_stmt.setInt(13, iPagNo);
                        proc_stmt.setInt(14, iSwRws);
                        if (!"".equals(pCCCD)) {
                            proc_stmt.setString(15, pCCCD);
                        } else {
                            proc_stmt.setString(15, null);
                        }
                        if (!"".equals(pBRANCH_ID_LIST)) {
                            proc_stmt.setString(16, pBRANCH_ID_LIST);
                        } else {
                            proc_stmt.setString(16, null);
                        }
                        if (!"".equals(pDECISION)) {
                            proc_stmt.setString(17, pDECISION);
                        } else {
                            proc_stmt.setString(17, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_ATTR_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN tempItem = new TOKEN();
                            tempItem.ID = rs.getInt("TOKEN_ID");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.TOKEN_ATTR_ID = rs.getInt("TOKEN_ATTR_ID");
                            tempItem.TOKEN_ATTR_TYPE_NAME = rs.getString("TOKEN_ATTR_TYPE_NAME");
                            tempItem.TOKEN_ATTR_TYPE_DESC = rs.getString("TOKEN_ATTR_TYPE_DESC");
                            tempItem.TOKEN_ATTR_STATE = rs.getInt("TOKEN_ATTR_STATE_ID");
                            tempItem.TOKEN_ATTR_STATE_DESC = rs.getString("TOKEN_ATTR_STATE_DESC");
                            tempItem.VALUE = rs.getString("VALUE");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_ATTR_DETAIL">
    public void S_BO_TOKEN_ATTR_DETAIL(String pTOKEN_ATTR_ID,
            String sLanguage, TOKEN[][] response) throws Exception {
        ResultSet rs = null;
        ArrayList<TOKEN> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_ATTR_DETAIL(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pTOKEN_ATTR_ID));
                        proc_stmt.setInt(2, Integer.parseInt(sLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN tempItem = new TOKEN();
                            tempItem.ID = rs.getInt("TOKEN_ID");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.TOKEN_ATTR_ID = rs.getInt("TOKEN_ATTR_ID");
                            tempItem.TOKEN_ATTR_TYPE_ID = rs.getInt("TOKEN_ATTR_TYPE_ID");
                            tempItem.TOKEN_ATTR_TYPE_NAME = rs.getString("TOKEN_ATTR_TYPE_NAME");
                            tempItem.TOKEN_ATTR_TYPE_DESC = rs.getString("TOKEN_ATTR_TYPE_DESC");
                            tempItem.TOKEN_ATTR_STATE = rs.getInt("TOKEN_ATTR_STATE_ID");
                            tempItem.TOKEN_ATTR_STATE_DESC = rs.getString("TOKEN_ATTR_STATE_DESC");
                            tempItem.TOKEN_ATTR_STATE_NAME = rs.getString("TOKEN_ATTR_STATE_NAME");
                            tempItem.VALUE = rs.getString("VALUE");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.BRANCH_DESC = EscapeUtils.CheckTextNull(rs.getString("BRANCH_DESC"));
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_GET_BY_TOKEN_SN">
    public void S_BO_TOKEN_GET_BY_TOKEN_SN(String pTOKEN_SN, TOKEN[][] response)
        throws Exception {
        ResultSet rs = null;
        ArrayList<TOKEN> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_GET_BY_TOKEN_SN(?) }");
                        proc_stmt.setString(1, pTOKEN_SN);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN tempItem = new TOKEN();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.TOKEN_SN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_GET_BY_ENTERPRISE_ID">
    public void S_BO_TOKEN_GET_BY_ENTERPRISE_ID(String pENTERPRISE_ID, TOKEN[][] response)
        throws Exception {
        ResultSet rs = null;
        ArrayList<TOKEN> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_GET_BY_ENTERPRISE_ID(?) }");
                        proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN tempItem = new TOKEN();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.TOKEN_SN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_IMPORT">
    public int S_BO_TOKEN_IMPORT(String pTOKEN_SN, String pTOKEN_SOPIN, String pTOKEN_VERSION, String pBRANCH_ID,
            String pUSER_BY) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_IMPORT(?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pTOKEN_SN);
                        proc_stmt.setString(2, pTOKEN_SOPIN);
                        proc_stmt.setInt(3, Integer.parseInt(pTOKEN_VERSION));
                        proc_stmt.setInt(4, Integer.parseInt(pBRANCH_ID));
                        proc_stmt.setString(5, pUSER_BY);
                        proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_IMPORT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(6);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="TOKEN_IMPORT_BUNDLE">
    public int TOKEN_IMPORT_BUNDLE(TOKEN_IMPORT[][] rsToken, String sUUID) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        Statement statement = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        statement = conns.createStatement();
                        CommonFunction.LogDebugString(log, "importtokenbundle", "BEGIN");
                        for(TOKEN_IMPORT rsItem : rsToken[0]) {
                            String paramSQL = "call S_TOOL_TOKEN_IMPORT('"+ rsItem.TOKEN_SN +"','"+ rsItem.SOPIN
                                +"',"+ rsItem.TOKEN_VERSION_ID +","+ rsItem.BRANCH_ID +","+ rsItem.USER_BY +",'"+ sUUID +"')" + ";";
                            statement.execute(paramSQL);
                        }
                        CommonFunction.LogDebugString(log, "importtokenbundle", "END");
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (statement != null) {
                statement.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_INSERT">
    public int S_BO_TOKEN_INSERT(String pTOKEN_SN, String pTOKEN_SOPIN, String pTOKEN_VERSION, String pBRANCH_ID,
            String pUSER_BY) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_INSERT(?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pTOKEN_SN);
                        proc_stmt.setString(2, pTOKEN_SOPIN);
                        proc_stmt.setInt(3, Integer.parseInt(pTOKEN_VERSION));
                        proc_stmt.setInt(4, Integer.parseInt(pBRANCH_ID));
                        proc_stmt.setString(5, pUSER_BY);
                        proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(6);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_IMPORT_UPDATE">
    public int S_BO_TOKEN_IMPORT_UPDATE(String pTOKEN_SN, String pTOKEN_SOPIN, String pTOKEN_VERSION,
            String pBRANCH_ID, String pUSER_BY) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_IMPORT_UPDATE(?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pTOKEN_SN);
                        proc_stmt.setString(2, pTOKEN_SOPIN);
                        proc_stmt.setInt(3, Integer.parseInt(pTOKEN_VERSION));
                        proc_stmt.setInt(4, Integer.parseInt(pBRANCH_ID));
                        proc_stmt.setString(5, pUSER_BY);
                        proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_IMPORT_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(6);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_IMPORT_LIST">
    public void S_BO_TOKEN_IMPORT_LIST(String pFROM_DT, String pTO_DT, String pFrom_TokenSN, String pTo_TokenSN,
            String pAgentID, String pLanguage, TOKEN[][] response, int sPage, int sSum, String pBRANCH_LIST_ID)
            throws Exception {
        ResultSet rs = null;
        ArrayList<TOKEN> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_IMPORT_LIST(?,?,?,?,?,?,?,?,?) }");
                        if (!"".equals(pFROM_DT)) {
                            proc_stmt.setString(1, pFROM_DT);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(pTO_DT)) {
                            proc_stmt.setString(2, pTO_DT);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pFrom_TokenSN)) {
                            proc_stmt.setString(3, pFrom_TokenSN);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pTo_TokenSN)) {
                            proc_stmt.setString(4, pTo_TokenSN);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pAgentID)) {
                            proc_stmt.setInt(5, Integer.parseInt(pAgentID));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.setInt(6, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(7, sPage);
                        proc_stmt.setInt(8, sSum);
                        proc_stmt.setString(9, pBRANCH_LIST_ID);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_IMPORT_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN tempItem = new TOKEN();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.TOKEN_STATE_DESC = rs.getString("TOKEN_STATE_DESC");
                            tempItem.TOKEN_VERSION_DESC = rs.getString("TOKEN_VERSION_DESC");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.SO_PIN = EscapeUtils.CheckTextNull(rs.getString("SO_PIN"));
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_IMPORT_TOTAL">
    public int S_BO_TOKEN_IMPORT_TOTAL(String strFrom, String strTo, String pFrom_TokenSN, String pTo_TokenSN,
            String pAgentID, String pBRANCH_LIST_ID) throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_IMPORT_TOTAL(?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pFrom_TokenSN)) {
                            proc_stmt.setString(3, pFrom_TokenSN);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pTo_TokenSN)) {
                            proc_stmt.setString(4, pTo_TokenSN);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pAgentID)) {
                            proc_stmt.setInt(5, Integer.parseInt(pAgentID));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.setString(6, pBRANCH_LIST_ID);
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_IMPORT_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(7);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_UPDATE_BRANCH">
    public String S_BO_TOKEN_UPDATE_BRANCH(String pTOKEN_ID, String pBRANCH_ID, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_UPDATE_BRANCH(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pTOKEN_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pBRANCH_ID));
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_UPDATE_BRANCH", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_UPDATE_BRANCH_RESPONSIBLE">
    public String S_BO_TOKEN_UPDATE_BRANCH_RESPONSIBLE(String pTOKEN_ID, String pBRANCH_ID, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_UPDATE_BRANCH_RESPONSIBLE(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pTOKEN_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pBRANCH_ID));
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_UPDATE_BRANCH_RESPONSIBLE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_IMPORT_LIST">
    public void S_BO_TOKEN_BY_TOKEN_SN(String pTokenSN, TOKEN[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<TOKEN> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_BY_TOKEN_SN(?) }");
                        proc_stmt.setString(1, pTokenSN);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_BY_TOKEN_SN", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN tempItem = new TOKEN();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.TOKEN_STATE_ID = rs.getInt("TOKEN_STATE_ID");
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    // LOG_SYSTEM
    //<editor-fold defaultstate="collapsed" desc="S_BO_SYSTEM_LOG_INSERT">
    public String S_BO_SYSTEM_LOG_INSERT(String pSOURCE_ENTITY_NAME, String pDESTINATION_ENTITY_NAME, String pTOKEN_SN,
        String pCERTIFICATION_SN, String pFUNCTIONALITY_NAME, String pREQUEST_DATA,
        String pUSER_BY, int[] pSYSTEM_LOG_ID, String pREQUEST_IP, String[] pBILL_CODE)
        throws Exception {
    String convrtr = null;
    Connection conns = null;
    try {
        if (null != Choise_TypeDB.trim()) {
            switch (Choise_TypeDB.trim()) {
                case "1":
                    conns = OpenDatabase();
                    proc_stmt = conns.prepareCall("{ call S_BO_SYSTEM_LOG_INSERT(?,?,?,?,?,?,?,?,?,?,?) }");
                    proc_stmt.setString(1, pSOURCE_ENTITY_NAME);
                    proc_stmt.setString(2, pDESTINATION_ENTITY_NAME);
                    if(!"".equals(pTOKEN_SN))
                    {
                        proc_stmt.setString(3, pTOKEN_SN);
                    } else {
                        proc_stmt.setString(3, null);
                    }
                    if (!"".equals(pCERTIFICATION_SN)) {
                        proc_stmt.setString(4, pCERTIFICATION_SN);
                    } else {
                        proc_stmt.setString(4, null);
                    }
                    proc_stmt.setString(5, pFUNCTIONALITY_NAME);
                    proc_stmt.setString(6, pREQUEST_IP);
                    proc_stmt.setString(7, pREQUEST_DATA);
                    proc_stmt.setString(8, pUSER_BY);
                    proc_stmt.registerOutParameter(9, java.sql.Types.INTEGER);
                    proc_stmt.registerOutParameter(10, java.sql.Types.INTEGER);
                    proc_stmt.registerOutParameter(11, java.sql.Types.VARCHAR);
                    CommonFunction.LogDebugString(log, "S_BO_SYSTEM_LOG_INSERT", proc_stmt.toString());
                    proc_stmt.execute();
                    convrtr = String.valueOf(proc_stmt.getInt(9));
                    pSYSTEM_LOG_ID[0] = proc_stmt.getInt(10);
                    pBILL_CODE[0] = proc_stmt.getString(11);
                    break;
                case "2":
                    break;
                default:
                    break;
            }
        }
    } finally {
        if (proc_stmt != null) {
            proc_stmt.close();
        }
        Connection[] temp_connection = new Connection[]{conns};
        CloseDatabase(temp_connection);
    }
    return convrtr;
}
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_SYSTEM_LOG_UPDATE">
    public String S_BO_SYSTEM_LOG_UPDATE(int pSYSTEM_LOG_ID, String pRESPONSE_CODE_NAME, String pRESPONSE_DATA, String sTOKEN_SN,
            String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_SYSTEM_LOG_UPDATE(?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pSYSTEM_LOG_ID);
                        proc_stmt.setString(2, pRESPONSE_CODE_NAME);
                        proc_stmt.setString(3, pRESPONSE_DATA);
                        proc_stmt.setString(4, pUSER_BY);
                        if(!"".equals(sTOKEN_SN)) {
                            proc_stmt.setString(5, sTOKEN_SN);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_SYSTEM_LOG_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(6));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_SYSTEM_LOG_BUNDLE_UPDATE">
    public String S_BO_SYSTEM_LOG_BUNDLE_UPDATE(int pSYSTEM_LOG_ID, String pRESPONSE_CODE_NAME, String pRESPONSE_DATA, String sTOKEN_SN,
            String pUSER_BY, String sBILL_CODE)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_SYSTEM_LOG_BUNDLE_UPDATE(?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pSYSTEM_LOG_ID);
                        proc_stmt.setString(2, pRESPONSE_CODE_NAME);
                        proc_stmt.setString(3, pRESPONSE_DATA);
                        proc_stmt.setString(4, pUSER_BY);
                        if(!"".equals(sTOKEN_SN)) {
                            proc_stmt.setString(5, sTOKEN_SN);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.setString(6, sBILL_CODE);
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_SYSTEM_LOG_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(7));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    // REGISTRATION
    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_ISSUED_LIST">
    public void S_BO_TOKEN_ISSUED_LIST(String pIa, String pIb, String pToken_SN,
            String pAgentID, String pLanguage, TOKEN[][] response, int sPage, int sSum)
            throws Exception {
        ResultSet rs = null;
        ArrayList<TOKEN> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_ISSUED_LIST(?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pIa));
                        proc_stmt.setInt(2, Integer.parseInt(pIb));
                        if (!"".equals(pToken_SN)) {
                            proc_stmt.setString(3, pToken_SN);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pAgentID)) {
                            proc_stmt.setInt(4, Integer.parseInt(pAgentID));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.setInt(5, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(6, sPage);
                        proc_stmt.setInt(7, sSum);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_ISSUED_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN tempItem = new TOKEN();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.TOKEN_STATE_DESC = rs.getString("TOKEN_STATE_DESC");
                            tempItem.TOKEN_VERSION_DESC = rs.getString("TOKEN_VERSION_DESC");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_ISSUED_TOTAL">
    public int S_BO_TOKEN_ISSUED_TOTAL(String strFrom, String strTo, String pToken_SN,
            String pAgentID, int[] pIa, int[] pIb) throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_ISSUED_TOTAL(?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pToken_SN)) {
                            proc_stmt.setString(3, pToken_SN);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pAgentID)) {
                            proc_stmt.setInt(4, Integer.parseInt(pAgentID));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        if (pIa[0] != 0) {
                            proc_stmt.setInt(6, pIa[0]);
                            proc_stmt.setInt(7, pIb[0]);
                        } else {
                            proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
                            proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_ISSUED_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(5);
                        pIa[0] = proc_stmt.getInt(6);
                        pIb[0] = proc_stmt.getInt(7);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_ISSUED_DETAIL">
    public void S_BO_TOKEN_ISSUED_DETAIL(String pID, String pLanguage, TOKEN[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<TOKEN> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_ISSUED_DETAIL(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN tempItem = new TOKEN();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.TOKEN_STATE_ID = rs.getInt("TOKEN_STATE_ID");
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.TOKEN_STATE_DESC = rs.getString("TOKEN_STATE_DESC");
                            tempItem.TOKEN_VERSION_DESC = rs.getString("TOKEN_VERSION_DESC");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    // CERTIFICATE
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PURPOSE_COMBOBOX">
    public void S_BO_CERTIFICATION_PURPOSE_COMBOBOX(String pLanguage, CERTIFICATION_PURPOSE[][] response)
            throws Exception {
        ArrayList<CERTIFICATION_PURPOSE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PURPOSE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PURPOSE tempItem = new CERTIFICATION_PURPOSE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.REMARK = rs.getString("CERTIFICATION_PURPOSE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PURPOSE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CA_GET_CERTIFICATION_PURPOSE_COMBOBOX">
    public void S_BO_CA_GET_CERTIFICATION_PURPOSE_COMBOBOX(String pCERTIFICATION_AUTHORITY_ID, String pLanguage, CERTIFICATION_PURPOSE[][] response)
        throws Exception {
        ArrayList<CERTIFICATION_PURPOSE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CA_GET_CERTIFICATION_PURPOSE_COMBOBOX(?,?) }");
                        if(!"".equals(pCERTIFICATION_AUTHORITY_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_AUTHORITY_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        CommonFunction.LogDebugString(log, "S_BO_CA_GET_CERTIFICATION_PURPOSE_COMBOBOX", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PURPOSE tempItem = new CERTIFICATION_PURPOSE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("CERTIFICATION_PURPOSE_NAME");
                            tempItem.REMARK = rs.getString("CERTIFICATION_PURPOSE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PURPOSE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_BY_PURPOSE">
    public void S_BO_CERTIFICATION_PROFILE_BY_PURPOSE(String pCERTIFICATION_PURPOSE_ID, String pLanguage, CERTIFICATION_PROFILE[][] response)
        throws Exception {
        ArrayList<CERTIFICATION_PROFILE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_BY_PURPOSE(?,?) }");
                        if(!"".equals(pCERTIFICATION_PURPOSE_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        CommonFunction.LogDebugString(log, "S_BO_CA_GET_CERTIFICATION_PURPOSE_COMBOBOX", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            if(rs.getBoolean("ENABLED") == true) {
                                CERTIFICATION_PROFILE tempItem = new CERTIFICATION_PROFILE();
                                tempItem.ID = rs.getInt("ID");
                                tempItem.NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                                tempItem.REMARK = rs.getString("CERTIFICATION_PROFILE_DESC");
                                tempList.add(tempItem);
                            }
                        }
                        response[0] = new CERTIFICATION_PROFILE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CA_GET_CERTIFICATION_PURPOSE_COMBOBOX_TOKEN">
    public void S_BO_CA_GET_CERTIFICATION_PURPOSE_COMBOBOX_TOKEN(String pCERTIFICATION_AUTHORITY_ID, String pLanguage, CERTIFICATION_PURPOSE[][] response)
            throws Exception {
        ArrayList<CERTIFICATION_PURPOSE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CA_GET_CERTIFICATION_PURPOSE_COMBOBOX_TOKEN(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_AUTHORITY_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PURPOSE tempItem = new CERTIFICATION_PURPOSE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("CERTIFICATION_PURPOSE_NAME");
                            tempItem.REMARK = rs.getString("CERTIFICATION_PURPOSE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PURPOSE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CA_GET_CERTIFICATION_PURPOSE_COMBOBOX_SOFT_TOKEN">
    public void S_BO_CA_GET_CERTIFICATION_PURPOSE_COMBOBOX_SOFT_TOKEN(String pCERTIFICATION_AUTHORITY_ID, String pLanguage, CERTIFICATION_PURPOSE[][] response)
            throws Exception {
        ArrayList<CERTIFICATION_PURPOSE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CA_GET_CERTIFICATION_PURPOSE_COMBOBOX_SOFT_TOKEN(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_AUTHORITY_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PURPOSE tempItem = new CERTIFICATION_PURPOSE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("CERTIFICATION_PURPOSE_NAME");
                            tempItem.REMARK = rs.getString("CERTIFICATION_PURPOSE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PURPOSE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CA_GET_CERTIFICATION_PURPOSE_COMBOBOX_FOR_PKI_FORMFACTOR">
    public void S_BO_CA_GET_CERTIFICATION_PURPOSE_COMBOBOX_FOR_PKI_FORMFACTOR(String pCERTIFICATION_AUTHORITY_ID, int pPKI_FORMFACTOR_ID,
        String pLanguage, CERTIFICATION_PURPOSE[][] response) throws Exception {
        ArrayList<CERTIFICATION_PURPOSE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CA_GET_CERTIFICATION_PURPOSE_COMBOBOX_FOR_PKI_FORMFACTOR(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_AUTHORITY_ID));
                        proc_stmt.setInt(2, pPKI_FORMFACTOR_ID);
                        proc_stmt.setInt(3, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PURPOSE tempItem = new CERTIFICATION_PURPOSE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("CERTIFICATION_PURPOSE_NAME");
                            tempItem.REMARK = rs.getString("CERTIFICATION_PURPOSE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PURPOSE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CA_GET_PKI_FORMFACTOR_COMBOBOX_FOR_CERTIFICATION_PURPOSE">
    public void S_BO_CA_GET_PKI_FORMFACTOR_COMBOBOX_FOR_CERTIFICATION_PURPOSE(int pCERTIFICATION_PURPOSE_ID,
        String pLanguage, PKI_FORMFACTOR[][] response) throws Exception {
        ArrayList<PKI_FORMFACTOR> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CA_GET_PKI_FORMFACTOR_COMBOBOX_FOR_CERTIFICATION_PURPOSE(?,?) }");
                        if(pCERTIFICATION_PURPOSE_ID != 0) {
                            proc_stmt.setInt(1, pCERTIFICATION_PURPOSE_ID);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        CommonFunction.LogDebugString(log, "S_BO_CA_GET_PKI_FORMFACTOR_COMBOBOX_FOR_CERTIFICATION_PURPOSE", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
//                            if(rs.getInt("ID") != Definitions.CONFIG_PKI_FORMFACTOR_ID_PKI_USIM) {
                            PKI_FORMFACTOR tempItem = new PKI_FORMFACTOR();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("PKI_FORMFACTOR_NAME");
                            tempItem.REMARK = rs.getString("PKI_FORMFACTOR_DESC");
                            tempList.add(tempItem);
//                            }
                        }
                        response[0] = new PKI_FORMFACTOR[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_PKI_FORMFACTOR_COMBOBOX">
    public void S_BO_PKI_FORMFACTOR_COMBOBOX(String pLanguage, PKI_FORMFACTOR[][] response) throws Exception {
        ArrayList<PKI_FORMFACTOR> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PKI_FORMFACTOR_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            PKI_FORMFACTOR tempItem = new PKI_FORMFACTOR();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("PKI_FORMFACTOR_NAME");
                            tempItem.REMARK = rs.getString("PKI_FORMFACTOR_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new PKI_FORMFACTOR[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_PKI_FORMFACTOR_DETAIL">
    public void S_BO_PKI_FORMFACTOR_DETAIL(String pID, PKI_FORMFACTOR[][] response) throws Exception {
        ArrayList<PKI_FORMFACTOR> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PKI_FORMFACTOR_DETAIL(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            PKI_FORMFACTOR tempItem = new PKI_FORMFACTOR();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("NAME");
                            tempItem.REMARK = rs.getString("REMARK");
                            tempItem.REMARK_EN = rs.getString("REMARK_EN");
                            tempItem.PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("PROPERTIES"));
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.CREATED_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_DT"));
                            tempItem.MODIFIED_DT = EscapeUtils.CheckTextNull(rs.getString("MODIFIED_DT"));
                            tempList.add(tempItem);
                        }
                        response[0] = new PKI_FORMFACTOR[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CA_GET_DURATION_COMBOBOX">
    public void S_BO_CA_GET_DURATION_COMBOBOX(String pCERTIFICATION_AUTHORITY_ID, String pCERTIFICATION_PURPOSE_ID,
            String pPKI_FORMFACTOR_ID, String pLanguage, CERTIFICATION_PROFILE[][] response) throws Exception {
        //String pCERTIFICATION_ATTR_TYPE_ID, 
        ArrayList<CERTIFICATION_PROFILE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CA_GET_DURATION_COMBOBOX(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_AUTHORITY_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        proc_stmt.setInt(3, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(4, Integer.parseInt(pPKI_FORMFACTOR_ID));
                        rs = proc_stmt.executeQuery();
                        CommonFunction.LogDebugString(log, "S_BO_CA_GET_DURATION_COMBOBOX", proc_stmt.toString());
                        while (rs.next()) {
                            CERTIFICATION_PROFILE tempItem = new CERTIFICATION_PROFILE();
                            tempItem.ID = rs.getInt("CERTIFICATION_PROFILE_ID");
                            tempItem.DURATION = rs.getInt("DURATION");
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_DESC"));
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempItem.CERTIFICATION_AUTHORITY_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_NAME"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PROFILE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CA_GET_DURATION_COMBOBOX_RENEWAL">
    public void S_BO_CA_GET_DURATION_COMBOBOX_RENEWAL(String pCERTIFICATION_AUTHORITY_ID, String pCERTIFICATION_PURPOSE_ID,
            String pPKI_FORMFACTOR_ID, String pLanguage, CERTIFICATION_PROFILE[][] response)
        throws Exception {
        //String pCERTIFICATION_ATTR_TYPE_ID, 
        ArrayList<CERTIFICATION_PROFILE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CA_GET_DURATION_COMBOBOX_RENEWAL(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_AUTHORITY_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        proc_stmt.setInt(3, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(4, Integer.parseInt(pPKI_FORMFACTOR_ID));
                        rs = proc_stmt.executeQuery();
                        CommonFunction.LogDebugString(log, "S_BO_CA_GET_DURATION_COMBOBOX_RENEWAL", proc_stmt.toString());
                        while (rs.next()) {
                            CERTIFICATION_PROFILE tempItem = new CERTIFICATION_PROFILE();
                            tempItem.ID = rs.getInt("CERTIFICATION_PROFILE_ID");
                            tempItem.DURATION = rs.getInt("DURATION");
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_DESC"));
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempItem.CERTIFICATION_AUTHORITY_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_NAME"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PROFILE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CA_GET_DURATION_COMBOBOX_BY_TYPE">
    public void S_BO_CA_GET_DURATION_COMBOBOX_BY_TYPE(String pCERTIFICATION_AUTHORITY_ID, String pCERTIFICATION_PURPOSE_ID,
            String pPKI_FORMFACTOR_ID, int pATTR_TYPE_ID, String pLanguage, CERTIFICATION_PROFILE[][] response)
        throws Exception {
        //String pCERTIFICATION_ATTR_TYPE_ID, 
        ArrayList<CERTIFICATION_PROFILE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CA_GET_DURATION_COMBOBOX_BY_TYPE(?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_AUTHORITY_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        proc_stmt.setInt(3, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(4, Integer.parseInt(pPKI_FORMFACTOR_ID));
                        if(pATTR_TYPE_ID != 0) {
                            proc_stmt.setInt(5, pATTR_TYPE_ID);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        rs = proc_stmt.executeQuery();
                        CommonFunction.LogDebugString(log, "S_BO_CA_GET_DURATION_COMBOBOX_BY_TYPE", proc_stmt.toString());
                        while (rs.next()) {
                            CERTIFICATION_PROFILE tempItem = new CERTIFICATION_PROFILE();
                            tempItem.ID = rs.getInt("CERTIFICATION_PROFILE_ID");
                            tempItem.DURATION = rs.getInt("DURATION");
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_DESC"));
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempItem.CERTIFICATION_AUTHORITY_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_NAME"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PROFILE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PURPOSE_DETAIL">
    public void S_BO_CERTIFICATION_PURPOSE_DETAIL(String pCERTIFICATION_PURPOSE_ID, CERTIFICATION_PURPOSE[][] response)
            throws Exception {
        ArrayList<CERTIFICATION_PURPOSE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PURPOSE_DETAIL(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PURPOSE tempItem = new CERTIFICATION_PURPOSE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.REMARK = rs.getString("REMARK");
                            tempItem.REMARK_EN = rs.getString("REMARK_EN");
                            tempItem.NAME = rs.getString("CERTIFICATION_PURPOSE_NAME");
                            tempItem.PROPERTIES = rs.getString("PROPERTIES");
                            tempItem.FILE_PROPERTIES = rs.getString("FILE_PROPERTIES");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PURPOSE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PURPOSE_INSERT">
    public String S_BO_CERTIFICATION_PURPOSE_INSERT(String pCERTIFICATION_PURPOSE_NAME, String pPROPERTIES,
        String pFILE_PROPERTIES, String pREMARK_EN, String pREMARK, String pUSERNAME_BY)
        throws Exception {
    String convrtr = null;
    Connection conns = null;
    try {
        if (null != Choise_TypeDB.trim()) {
            switch (Choise_TypeDB.trim()) {
                case "1":
                    conns = OpenDatabase();
                    proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PURPOSE_INSERT(?,?,?,?,?,?,?) }");
                    proc_stmt.setString(1, pCERTIFICATION_PURPOSE_NAME);
                    proc_stmt.setString(2, pPROPERTIES);
                    proc_stmt.setString(3, pFILE_PROPERTIES);
                    proc_stmt.setString(4, pREMARK_EN);
                    proc_stmt.setString(5, pREMARK);
                    proc_stmt.setString(6, pUSERNAME_BY);
                    proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                    CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_PURPOSE_INSERT", proc_stmt.toString());
                    proc_stmt.execute();
                    convrtr = String.valueOf(proc_stmt.getInt(7));
                    break;
                case "2":
                    break;
                default:
                    break;
            }
        }
    } finally {
        if (proc_stmt != null) {
            proc_stmt.close();
        }
        Connection[] temp_connection = new Connection[]{conns};
        CloseDatabase(temp_connection);
    }
    return convrtr;
}
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PURPOSE_UPDATE">
    public String S_BO_CERTIFICATION_PURPOSE_UPDATE(int pCERTIFICATION_PURPOSE_ID, String pPROPERTIES,
            String pFILE_PROPERTIES, String pREMARK_EN, String pREMARK, String pENABLED, String pUSERNAME_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PURPOSE_UPDATE(?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_PURPOSE_ID);
                        proc_stmt.setString(2, pPROPERTIES);
                        proc_stmt.setString(3, pFILE_PROPERTIES);
                        proc_stmt.setString(4, pREMARK_EN);
                        proc_stmt.setString(5, pREMARK);
                        proc_stmt.setInt(6, Integer.parseInt(pENABLED));
                        proc_stmt.setString(7, pUSERNAME_BY);
                        proc_stmt.registerOutParameter(8, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_PURPOSE_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(8));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PURPOSE_LIST">
    public void S_BO_CERTIFICATION_PURPOSE_LIST(String pLanguage, int sPage, int sSum,
            CERTIFICATION_PURPOSE[][] response) throws Exception {
        ArrayList<CERTIFICATION_PURPOSE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PURPOSE_LIST(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(2, sPage);
                        proc_stmt.setInt(3, sSum);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_PURPOSE_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PURPOSE tempItem = new CERTIFICATION_PURPOSE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.NAME = rs.getString("CERTIFICATION_PURPOSE_NAME");
                            tempItem.REMARK = rs.getString("CERTIFICATION_PURPOSE_DESC");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PURPOSE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_FUNCTIONALITY_TOTAL">
    public int S_BO_CERTIFICATION_PURPOSE_TOTAL() throws Exception {
        Connection conns = null;
        int ss = 0;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PURPOSE_TOTAL(?) }");
                        proc_stmt.registerOutParameter(1, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(1);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_INSERT">
    public String S_BO_CERTIFICATION_INSERT(int pTOKEN_ID, String pCERTIFICATION_PROFILE_ID, String pTOKEN_SN,
            String pCERTIFICATION_SN, String pPERSONAL_NAME, String pCOMPANY_NAME, String pDOMAIN_NAME, String pTAX_CODE, String pBUDGET_CODE,
            String pP_ID, String pPASSPORT, String pSUBJECT, String pISSUER_SUBJECT,
            String pPHONE_CONTRACT, String pEMAIL_CONTRACT, String pBRANCH_ID, String pPAST_CERTIFICATE_ID,
            String pCERTIFICATION_ATTR_TYPE_ID, String pPROVINCE_ID, String pACTIVATION_CODE,
            String pVALUE, String pUSER_BY, String pUSER_LOGIN, int[] pCERTIFICATE_ATTR_ID, int[] pCERTIFICATE_ID, String pCSR,
            String pPraviteKeyEnabled, String pChangeKeyEnabled, String pPrivateKey, int pPKI_FORMFACTOR_ID,
            String pDEVICE_UUID, String sOwnerID, String sCCCD, java.sql.Timestamp pEFFECTIVE_DT, String sDECISION,
            String pPERSONAL_ID, String pENTERPRISE_ID)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_INSERT", 31));
                        proc_stmt.setInt("pTOKEN_ID", pTOKEN_ID);
                        if (!"".equals(pCERTIFICATION_PROFILE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_PROFILE_ID", Integer.parseInt(pCERTIFICATION_PROFILE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_PROFILE_ID", null);
                        }
                        if (!"".equals(pTOKEN_SN)) {
                            proc_stmt.setString("pTOKEN_SN", pTOKEN_SN);
                        } else {
                            proc_stmt.setString("pTOKEN_SN", null);
                        }
                        if (!"".equals(pCERTIFICATION_SN)) {
                            proc_stmt.setString("pCERTIFICATION_SN", pCERTIFICATION_SN);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_SN", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pDOMAIN_NAME)) {
                            proc_stmt.setString("pDOMAIN_NAME", pDOMAIN_NAME);
                        } else {
                            proc_stmt.setString("pDOMAIN_NAME", null);
                        }
                        if (!"".equals(pSUBJECT)) {
                            proc_stmt.setString("pSUBJECT", pSUBJECT);
                        } else {
                            proc_stmt.setString("pSUBJECT", null);
                        }
                        if (!"".equals(pISSUER_SUBJECT)) {
                            proc_stmt.setString("pISSUER_SUBJECT", pISSUER_SUBJECT);
                        } else {
                            proc_stmt.setString("pISSUER_SUBJECT", null);
                        }
                        if (!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString("pPHONE_CONTRACT", pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString("pPHONE_CONTRACT", null);
                        }
                        if (!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString("pEMAIL_CONTRACT", pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString("pEMAIL_CONTRACT", null);
                        }
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        if (!"".equals(pPROVINCE_ID)) {
                            proc_stmt.setInt("pPROVINCE_ID", Integer.parseInt(pPROVINCE_ID));
                        } else {
                            proc_stmt.setString("pPROVINCE_ID", null);
                        }
                        if (!"".equals(pPAST_CERTIFICATE_ID)) {
                            proc_stmt.setInt("pPAST_CERTIFICATION_ID", Integer.parseInt(pPAST_CERTIFICATE_ID));
                        } else {
                            proc_stmt.setString("pPAST_CERTIFICATION_ID", null);
                        }
                        if (!"".equals(pACTIVATION_CODE)) {
                            proc_stmt.setString("pACTIVATION_CODE", pACTIVATION_CODE);
                        } else {
                            proc_stmt.setString("pACTIVATION_CODE", null);
                        }
                        if (!"".equals(pCERTIFICATION_ATTR_TYPE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_ATTR_TYPE_ID", Integer.parseInt(pCERTIFICATION_ATTR_TYPE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_ATTR_TYPE_ID", null);
                        }
                        if (!"".equals(pVALUE)) {
                            proc_stmt.setString("pVALUE", pVALUE);
                        } else {
                            proc_stmt.setString("pVALUE", null);
                        }
                        if (!"".equals(pPraviteKeyEnabled)) {
                            proc_stmt.setInt("pPRIVATE_KEY_ENABLED", Integer.parseInt(pPraviteKeyEnabled));
                        } else {
                            proc_stmt.setString("pPRIVATE_KEY_ENABLED", null);
                        }
                        if (!"".equals(pPrivateKey)) {
                            proc_stmt.setString("pPRIVATE_KEY", pPrivateKey);
                        } else {
                            proc_stmt.setString("pPRIVATE_KEY", null);
                        }
                        if (!"".equals(pChangeKeyEnabled)) {
                            proc_stmt.setInt("pCHANGE_KEY_ENABLED", Integer.parseInt(pChangeKeyEnabled));
                        } else {
                            proc_stmt.setString("pCHANGE_KEY_ENABLED", null);
                        }
                        proc_stmt.setInt("pPKI_FORMFACTOR_ID", pPKI_FORMFACTOR_ID);
                        proc_stmt.setInt("pOWNER_BY", Integer.parseInt(pUSER_BY));
                        proc_stmt.setString("pUSERNAME_BY", pUSER_LOGIN);
                        if(!"".equals(pCSR)) {
                            proc_stmt.setString("pCSR", pCSR);
                        } else {
                            proc_stmt.setString("pCSR", null);
                        }
                        if(!"".equals(pDEVICE_UUID)) {
                            proc_stmt.setString("pSERVICE_UUID", pDEVICE_UUID);
                        } else {
                            proc_stmt.setString("pSERVICE_UUID", null);
                        }
                        proc_stmt.setInt("pCERTIFICATION_OWNER_ID", Integer.parseInt(sOwnerID));
                        if (pEFFECTIVE_DT != null) {
                            proc_stmt.setObject("pEFFECTIVE_DT", pEFFECTIVE_DT);
                        } else {
                            proc_stmt.setString("pEFFECTIVE_DT", null);
                        }
                        if(!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        if(!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        proc_stmt.registerOutParameter("pRESULT", java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter("pCERTIFICATION_ATTR_ID", java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter("pCERTIFICATION_ID", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt("pRESULT"));
                        pCERTIFICATE_ATTR_ID[0] = proc_stmt.getInt("pCERTIFICATION_ATTR_ID");
                        pCERTIFICATE_ID[0] = proc_stmt.getInt("pCERTIFICATION_ID");
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_REGISTER_CERTIFICATION_IMPORT">
    public String S_BO_REGISTER_CERTIFICATION_IMPORT(int pTOKEN_ID, String pCERTIFICATION_PROFILE_CODE, String pTOKEN_SN,
            String pPERSONAL_NAME, String pCOMPANY_NAME, String pDOMAIN_NAME, String pTAX_CODE, String pBUDGET_CODE,
            String pP_ID, String pPASSPORT, String pSUBJECT, String pISSUER_SUBJECT,
            String pPHONE_CONTRACT, String pEMAIL_CONTRACT, String pPROVINCE_CODE, String pACTIVATION_CODE,
            String pVALUE, String pOWNER_BY, String pUSERNAME_BY, int[] pCERTIFICATE_ATTR_ID, int[] pCERTIFICATE_ID, String pCSR,
            String pPraviteKeyEnabled, String pPKI_FORMFACTOR_NAME, String pCERTIFICATION_PURPOSE_NAME,
            int pCERTIFICATION_AUTHORITY_ID, String pOWNER_ID, String pCCCD, String pDecision, String pENTERPRISE_ID, String pPERSONAL_ID)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_REGISTER_CERTIFICATION_IMPORT", 26));
                        proc_stmt.setInt("pTOKEN_ID", pTOKEN_ID);
                        if (!"".equals(pCERTIFICATION_PROFILE_CODE)) {
                            proc_stmt.setString("pCERTIFICATION_PROFILE_CODE", pCERTIFICATION_PROFILE_CODE);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_PROFILE_CODE", null);
                        }
                        if (!"".equals(pTOKEN_SN)) {
                            proc_stmt.setString("pTOKEN_SN", pTOKEN_SN);
                        } else {
                            proc_stmt.setString("pTOKEN_SN", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pDOMAIN_NAME)) {
                            proc_stmt.setString("pDOMAIN_NAME", pDOMAIN_NAME);
                        } else {
                            proc_stmt.setString("pDOMAIN_NAME", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        if (!"".equals(pSUBJECT)) {
                            proc_stmt.setString("pSUBJECT", pSUBJECT);
                        } else {
                            proc_stmt.setString("pSUBJECT", null);
                        }
                        if (!"".equals(pISSUER_SUBJECT)) {
                            proc_stmt.setString("pISSUER_SUBJECT", pISSUER_SUBJECT);
                        } else {
                            proc_stmt.setString("pISSUER_SUBJECT", null);
                        }
                        if (!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString("pPHONE_CONTRACT", pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString("pPHONE_CONTRACT", null);
                        }
                        if (!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString("pEMAIL_CONTRACT", pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString("pEMAIL_CONTRACT", null);
                        }
                        if (!"".equals(pPROVINCE_CODE)) {
                            proc_stmt.setString("pPROVINCE_CODE", pPROVINCE_CODE);
                        } else {
                            proc_stmt.setString("pPROVINCE_CODE", null);
                        }
                        if (!"".equals(pACTIVATION_CODE)) {
                            proc_stmt.setString("pACTIVATION_CODE", pACTIVATION_CODE);
                        } else {
                            proc_stmt.setString("pACTIVATION_CODE", null);
                        }
                        if (!"".equals(pVALUE)) {
                            proc_stmt.setString("pVALUE", pVALUE);
                        } else {
                            proc_stmt.setString("pVALUE", null);
                        }
                        if (!"".equals(pPraviteKeyEnabled)) {
                            proc_stmt.setInt("pPRIVATE_KEY_ENABLED", Integer.parseInt(pPraviteKeyEnabled));
                        } else {
                            proc_stmt.setString("pPRIVATE_KEY_ENABLED", null);
                        }
                        if(!"".equals(pPKI_FORMFACTOR_NAME)) {
                            proc_stmt.setString("pPKI_FORMFACTOR_NAME", pPKI_FORMFACTOR_NAME);
                        } else {
                            proc_stmt.setString("pPKI_FORMFACTOR_NAME", null);
                        }
                        proc_stmt.setString("pOWNERNAME_BY", pOWNER_BY);
                        proc_stmt.setString("pUSERNAME_BY", pUSERNAME_BY);
                        if(!"".equals(pCSR)) {
                            proc_stmt.setString("pCSR", pCSR);
                        } else {
                            proc_stmt.setString("pCSR", null);
                        }
                        if(!"".equals(pCERTIFICATION_PURPOSE_NAME)) {
                            proc_stmt.setString("pCERTIFICATION_PURPOSE_NAME", pCERTIFICATION_PURPOSE_NAME);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_PURPOSE_NAME", null);
                        }
                        proc_stmt.setInt("pCERTIFICATION_AUTHORITY_ID", pCERTIFICATION_AUTHORITY_ID);
                        proc_stmt.setInt("pCERTIFICATION_OWNER_ID", Integer.parseInt(pOWNER_ID));
                        proc_stmt.registerOutParameter("pRESULT", java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter("pCERTIFICATION_ATTR_ID", java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter("pCERTIFICATION_ID", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_REGISTER_CERTIFICATION_IMPORT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt("pRESULT"));
                        pCERTIFICATE_ATTR_ID[0] = proc_stmt.getInt("pCERTIFICATION_ATTR_ID");
                        pCERTIFICATE_ID[0] = proc_stmt.getInt("pCERTIFICATION_ID");
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE">
    public String S_BO_CERTIFICATION_UPDATE(int pCERTIFICATION_ID, String pCERTIFICATION_PROFILE_ID,
            String pPERSONAL_NAME, String pCOMPANY_NAME, String pDOMAIN_NAME, String pTAX_CODE,
            String pBUDGET_CODE, String pP_ID, String pPASSPORT,
            String pSUBJECT, String pISSUER_SUBJECT, String pPHONE_CONTRACT, String pEMAIL_CONTRACT,
            String pPROVINCE_ID, String pPraviteKeyEnabled, String pUSER_BY, String pPKI_FORMFACTOR_ID,
            String pCSR, String pDEVICE_UUID, String pDISCOUNT_RATE, String pSHARED_MODE, String pCCCD, String pDECISION,
            String pENTERPRISE_ID, String pPERSONAL_ID)
    throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_UPDATE2", 20));
                        proc_stmt.setInt("pCERTIFICATION_ID", pCERTIFICATION_ID);
                        if (!"".equals(pCERTIFICATION_PROFILE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_PROFILE_ID", Integer.parseInt(pCERTIFICATION_PROFILE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_PROFILE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pDOMAIN_NAME)) {
                            proc_stmt.setString("pDOMAIN_NAME", pDOMAIN_NAME);
                        } else {
                            proc_stmt.setString("pDOMAIN_NAME", null);
                        }
                        if (!"".equals(pSUBJECT)) {
                            proc_stmt.setString("pSUBJECT", pSUBJECT);
                        } else {
                            proc_stmt.setString("pSUBJECT", null);
                        }
                        if (!"".equals(pISSUER_SUBJECT)) {
                            proc_stmt.setString("pISSUER_SUBJECT", pISSUER_SUBJECT);
                        } else {
                            proc_stmt.setString("pISSUER_SUBJECT", null);
                        }
                        if (!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString("pPHONE_CONTRACT", pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString("pPHONE_CONTRACT", null);
                        }
                        if (!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString("pEMAIL_CONTRACT", pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString("pEMAIL_CONTRACT", null);
                        }
                        if (!"".equals(pPROVINCE_ID)) {
                            proc_stmt.setInt("pPROVINCE_ID", Integer.parseInt(pPROVINCE_ID));
                        } else {
                            proc_stmt.setString("pPROVINCE_ID", null);
                        }
                        if (!"".equals(pPraviteKeyEnabled)) {
                            proc_stmt.setInt("pPRIVATE_KEY_ENABLED", Integer.parseInt(pPraviteKeyEnabled));
                        } else {
                            proc_stmt.setString("pPRIVATE_KEY_ENABLED", null);
                        }
                        proc_stmt.setString("pUSERNAME_BY", pUSER_BY);
                        if (!"".equals(pPKI_FORMFACTOR_ID)) {
                            proc_stmt.setInt("pPKI_FORMFACTOR_ID", Integer.parseInt(pPKI_FORMFACTOR_ID));
                        } else {
                            proc_stmt.setString("pPKI_FORMFACTOR_ID", null);
                        }
                        if (!"".equals(pCSR)) {
                            proc_stmt.setString("pCSR", pCSR);
                        } else {
                            proc_stmt.setString("pCSR", null);
                        }
                        if (!"".equals(pDEVICE_UUID)) {
                            proc_stmt.setString("pSERVICE_UUID", pDEVICE_UUID);
                        } else {
                            proc_stmt.setString("pSERVICE_UUID", null);
                        }
                        if (!"".equals(pDISCOUNT_RATE)) {
                            proc_stmt.setInt("pDISCOUNT_RATE", Integer.parseInt(pDISCOUNT_RATE));
                        } else {
                            proc_stmt.setString("pDISCOUNT_RATE", null);
                        }
                        if (!"".equals(pSHARED_MODE)) {
                            proc_stmt.setInt("pSHARED_MODE", Integer.parseInt(pSHARED_MODE));
                        } else {
                            proc_stmt.setString("pSHARED_MODE", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        proc_stmt.registerOutParameter("pRESULT", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE2", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt("pRESULT"));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_CONTRACT">
    public String S_BO_CERTIFICATION_UPDATE_CONTRACT(int pCERTIFICATION_ID, String pEMAIL_CONTRACT,
            String pPHONE_CONTRACT, String pUSER_BY) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_UPDATE_CONTRACT(?,?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ID);
                        if (!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString(2, pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString(3, pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setString(4, pUSER_BY);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE_CONTRACT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_AMOUNT">
    public String S_BO_CERTIFICATION_UPDATE_AMOUNT(int pCERTIFICATION_ID, String pAMOUNT, String pPUSH_NOTICE_ENABLED,
            String pUSER_BY) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_UPDATE_AMOUNT(?,?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ID);
                        if (!"".equals(pAMOUNT)) {
                            proc_stmt.setDouble(2, Double.parseDouble(pAMOUNT));
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pPUSH_NOTICE_ENABLED)) {
                            proc_stmt.setInt(3, Integer.parseInt(pPUSH_NOTICE_ENABLED));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setString(4, pUSER_BY);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE_AMOUNT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_DURATION">
    public String S_BO_CERTIFICATION_UPDATE_DURATION(int pCERTFICATION_ID, int pDURATION, java.sql.Timestamp pEFFECTIVE_DT, String pUSER_BY)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_UPDATE_DURATION(?,?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTFICATION_ID);
                        if (pDURATION != 0) {
                            proc_stmt.setInt(2, pDURATION);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setString(3, pUSER_BY);
                        if (pEFFECTIVE_DT != null) {
                            proc_stmt.setObject(4, pEFFECTIVE_DT);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE_DURATION", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_APPROVED_LIST">
    public void S_BO_CERTIFICATION_APPROVED_LIST(String strFrom, String strTo, String pCERTIFICATION_STATE_ID, String pTOKEN_SN,
            String pCERTIFICATION_PURPOSE_ID, String pCERTIFICATION_ATTR_TYPE_ID, String pPERSONAL_NAME, String pCOMPANY_NAME,
            String pDOMAIN_NAME, String pBRANCH_ID, String pBRANCH_BY,
            String pPKI_FORMFACTOR_ID, String pDEVICE_UUID, String pCERT_SN, String pLanguage, CERTIFICATION[][] response,
            int sPage, int sSum, String pBENEFICIARIED_BY, String pBRANCH_ID_LIST,
            String pENTERPRISE_ID, String pPERSONAL_ID)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_APPROVED_LIST", 21));
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString("pFROM_DT", strFrom);
                        } else {
                            proc_stmt.setString("pFROM_DT", null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString("pTO_DT", strTo);
                        } else {
                            proc_stmt.setString("pTO_DT", null);
                        }
                        if (!"".equals(pCERTIFICATION_STATE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_ATTR_STATE_ID", Integer.parseInt(pCERTIFICATION_STATE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_ATTR_STATE_ID", null);
                        }
                        if (!"".equals(pTOKEN_SN)) {
                            proc_stmt.setString("pTOKEN_SN", pTOKEN_SN);
                        } else {
                            proc_stmt.setString("pTOKEN_SN", null);
                        }
                        if (!"".equals(pCERTIFICATION_PURPOSE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_PURPOSE_ID", Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_PURPOSE_ID", null);
                        }
                        if (!"".equals(pCERTIFICATION_ATTR_TYPE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_ATTR_TYPE_ID", Integer.parseInt(pCERTIFICATION_ATTR_TYPE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_ATTR_TYPE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pDOMAIN_NAME)) {
                            proc_stmt.setString("pDOMAIN_NAME", pDOMAIN_NAME);
                        } else {
                            proc_stmt.setString("pDOMAIN_NAME", null);
                        }
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        if (!"".equals(pBRANCH_BY)) {
                            proc_stmt.setInt("pBRANCH_BY", Integer.parseInt(pBRANCH_BY));
                        } else {
                            proc_stmt.setString("pBRANCH_BY", null);
                        }
                        proc_stmt.setInt("pLANGUAGE", Integer.parseInt(pLanguage));
                        if (!"".equals(pPKI_FORMFACTOR_ID)) {
                            proc_stmt.setInt("pPKI_FORMFACTOR_ID", Integer.parseInt(pPKI_FORMFACTOR_ID));
                        } else {
                            proc_stmt.setString("pPKI_FORMFACTOR_ID", null);
                        }
                        if (!"".equals(pDEVICE_UUID)) {
                            proc_stmt.setString("pSERVICE_UUID", pDEVICE_UUID);
                        } else {
                            proc_stmt.setString("pSERVICE_UUID", null);
                        }
                        if (!"".equals(pCERT_SN)) {
                            proc_stmt.setString("pCERTIFICATION_SN", pCERT_SN);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_SN", null);
                        }
                        proc_stmt.setInt("pPAGE_NO", sPage);
                        proc_stmt.setInt("pROW_NO", sSum);
                        if (!"".equals(pBENEFICIARIED_BY)) {
                            proc_stmt.setString("pBENEFICIARIED_BY", pBENEFICIARIED_BY);
                        } else {
                            proc_stmt.setString("pBENEFICIARIED_BY", null);
                        }
                        if (!"".equals(pBRANCH_ID_LIST)) {
                            proc_stmt.setString("pBRANCH_LIST_ID", pBRANCH_ID_LIST);
                        } else {
                            proc_stmt.setString("pBRANCH_LIST_ID", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_APPROVED_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("CERTIFICATION_ID");
                            tempItem.CERTIFICATION_ATTR_ID = rs.getInt("ID");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.CERTIFICATION_STATE_ID = rs.getInt("CERTIFICATION_STATE_ID");
                            tempItem.CERTIFICATION_ATTR_TYPE_ID = rs.getInt("CERTIFICATION_ATTR_TYPE_ID");
                            tempItem.CERTIFICATION_ATTR_TYPE_DESC = rs.getString("CERTIFICATION_ATTR_TYPE_DESC");
                            tempItem.CERTIFICATION_ATTR_STATE_ID = rs.getInt("CERTIFICATION_ATTR_STATE_ID");
                            tempItem.CERTIFICATION_ATTR_STATE_DESC = rs.getString("CERTIFICATION_ATTR_STATE_DESC");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            tempItem.DOMAIN_NAME = rs.getString("DOMAIN_NAME");
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.CERTIFICATION_PURPOSE_DESC = rs.getString("CERTIFICATION_PURPOSE_DESC");
                            tempItem.CERTIFICATION_PROFILE_NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.CERTIFICATION_PROFILE_DESC = rs.getString("CERTIFICATION_PROFILE_DESC");
                            tempItem.CERTIFICATION_STATE_DESC = rs.getString("CERTIFICATION_STATE_DESC");
                            tempItem.FILE_MANAGER_STATE_DESC = rs.getString("FILE_MANAGER_STATE_DESC");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.CREATED_BY_ID = rs.getInt("CREATED_BY_ID");
                            tempItem.OPERATED_DT = rs.getString("OPERATED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_APPROVED_DETAIL_CYCLIFE_CERTIFICATE">
    public void S_BO_CERTIFICATION_APPROVED_DETAIL_CYCLIFE_CERTIFICATE(String sCertID,
        String pLanguage, CERTIFICATION[][] response) throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_APPROVED_DETAIL_CYCLIFE_CERTIFICATE(?,?) }");
                        if (!"".equals(sCertID)) {
                            proc_stmt.setInt(1, Integer.parseInt(sCertID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_APPROVED_DETAIL_CYCLIFE_CERTIFICATE", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.REVOKED_DT = EscapeUtils.CheckTextNull(rs.getString("REVOKED_DT"));
                            tempItem.OPERATED_DT = EscapeUtils.CheckTextNull(rs.getString("OPERATED_DT"));
                            tempItem.CREATED_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_DT"));
                            tempItem.BRANCH_DESC = EscapeUtils.CheckTextNull(rs.getString("BRANCH_DESC"));
                            tempItem.CREATED_BY = EscapeUtils.CheckTextNull(rs.getString("BENEFICIARIER_DESC"));
                            tempItem.CERTIFICATION_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_STATE_DESC"));
                            tempItem.SERVICE_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("SERVICE_TYPE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_APPROVED_TOTAL">
    public int S_BO_CERTIFICATION_APPROVED_TOTAL(String strFrom, String strTo,
            String pCERTIFICATION_STATE_ID, String pTOKEN_SN, String pCERTIFICATION_PURPOSE_ID,
            String pCERTIFICATION_ATTR_TYPE_ID, String pPERSONAL_NAME, String pCOMPANY_NAME,
            String pDOMAIN_NAME,  String pBRANCH_ID, String pBRANCH_BY,
            String pPKI_FORMFACTOR_ID, String pDEVICE_UUID, String pCERT_SN,
            String pBENEFICIARIED_BY, String pBRANCH_ID_LIST, String pENTERPRISE_ID, String pPERSONAL_ID) throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_APPROVED_TOTAL", 19));
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString("pFROM_DT", strFrom);
                        } else {
                            proc_stmt.setString("pFROM_DT", null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString("pTO_DT", strTo);
                        } else {
                            proc_stmt.setString("pTO_DT", null);
                        }
                        if (!"".equals(pCERTIFICATION_STATE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_ATTR_STATE_ID", Integer.parseInt(pCERTIFICATION_STATE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_ATTR_STATE_ID", null);
                        }
                        if (!"".equals(pTOKEN_SN)) {
                            proc_stmt.setString("pTOKEN_SN", pTOKEN_SN);
                        } else {
                            proc_stmt.setString("pTOKEN_SN", null);
                        }
                        if (!"".equals(pCERTIFICATION_PURPOSE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_PURPOSE_ID", Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_PURPOSE_ID", null);
                        }
                        if (!"".equals(pCERTIFICATION_ATTR_TYPE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_ATTR_TYPE_ID", Integer.parseInt(pCERTIFICATION_ATTR_TYPE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_ATTR_TYPE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pDOMAIN_NAME)) {
                            proc_stmt.setString("pDOMAIN_NAME", pDOMAIN_NAME);
                        } else {
                            proc_stmt.setString("pDOMAIN_NAME", null);
                        }
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        if (!"".equals(pBRANCH_BY)) {
                            proc_stmt.setInt("pBRANCH_BY", Integer.parseInt(pBRANCH_BY));
                        } else {
                            proc_stmt.setString("pBRANCH_BY", null);
                        }
                        if (!"".equals(pPKI_FORMFACTOR_ID)) {
                            proc_stmt.setInt("pPKI_FORMFACTOR_ID", Integer.parseInt(pPKI_FORMFACTOR_ID));
                        } else {
                            proc_stmt.setString("pPKI_FORMFACTOR_ID", null);
                        }
                        if (!"".equals(pDEVICE_UUID)) {
                            proc_stmt.setString("pSERVICE_UUID", pDEVICE_UUID);
                        } else {
                            proc_stmt.setString("pSERVICE_UUID", null);
                        }
                        if (!"".equals(pCERT_SN)) {
                            proc_stmt.setString("pCERTIFICATION_SN", pCERT_SN);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_SN", null);
                        }
                        if (!"".equals(pBENEFICIARIED_BY)) {
                            proc_stmt.setInt("pBENEFICIARIED_BY", Integer.parseInt(pBENEFICIARIED_BY));
                        } else {
                            proc_stmt.setString("pBENEFICIARIED_BY", null);
                        }
                        if (!"".equals(pBRANCH_ID_LIST)) {
                            proc_stmt.setString("pBRANCH_LIST_ID", pBRANCH_ID_LIST);
                        } else {
                            proc_stmt.setString("pBRANCH_LIST_ID", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        proc_stmt.registerOutParameter("pCOUNT", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_APPROVED_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt("pCOUNT");
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_APPROVED_DETAIL">
    public void S_BO_CERTIFICATION_APPROVED_DETAIL(String pID, String pLanguage, CERTIFICATION[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_APPROVED_DETAIL(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_APPROVED_DETAIL", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("CERTIFICATION_ID");
                            tempItem.PUSH_NOTICE_ENABLED = rs.getBoolean("PUSH_NOTICE_ENABLED");
                            tempItem.CERTIFICATION_ATTR_ID = rs.getInt("ID");
                            tempItem.PAST_CERTIFICATION_ID = rs.getInt("PAST_CERTIFICATION_ID");
                            tempItem.CITY_PROVINCE_ID = rs.getInt("PROVINCE_ID");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.BRANCH_TOKEN_ID = rs.getInt("BRANCH_TOKEN_ID");
                            tempItem.BRANCH_TOKEN_DESC = EscapeUtils.CheckTextNull(rs.getString("BRANCH_TOKEN_DESC"));
                            tempItem.CERTIFICATION_PROFILE_ID = rs.getInt("CERTIFICATION_PROFILE_ID");
                            tempItem.CERTIFICATION_STATE_ID = rs.getInt("CERTIFICATION_STATE_ID");
                            tempItem.CERTIFICATION_PURPOSE_ID = rs.getInt("CERTIFICATION_PURPOSE_ID");
                            tempItem.CERTIFICATION_ATTR_TYPE_ID = rs.getInt("CERTIFICATION_ATTR_TYPE_ID");
                            tempItem.CERTIFICATION_ATTR_STATE_ID = rs.getInt("CERTIFICATION_ATTR_STATE_ID");
                            tempItem.CERTIFICATION_ATTR_STATE_DESC = rs.getString("CERTIFICATION_ATTR_STATE_DESC");
                            tempItem.CERTIFICATION_AUTHORITY_ID = rs.getInt("CERTIFICATION_AUTHORITY_ID");
                            tempItem.CERTIFICATION = rs.getString("CERTIFICATION");
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            tempItem.DOMAIN_NAME = rs.getString("DOMAIN_NAME");
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.SERVICE_UUID = rs.getString("SERVICE_UUID");
                            tempItem.DURATION = rs.getInt("DURATION");
                            tempItem.EMAIL_CONTRACT = rs.getString("EMAIL_CONTRACT");
                            tempItem.PHONE_CONTRACT = rs.getString("PHONE_CONTRACT");
                            tempItem.CERTIFICATION_STATE_DESC = rs.getString("CERTIFICATION_STATE_DESC");
                            tempItem.SUBJECT = rs.getString("SUBJECT");
                            tempItem.PAST_SUBJECT = EscapeUtils.CheckTextNull(rs.getString("PAST_SUBJECT"));
                            tempItem.PAST_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("PAST_PROPERTIES"));
                            tempItem.ISSUER_SUBJECT = rs.getString("ISSUER_SUBJECT");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.TOKEN_ID = rs.getInt("TOKEN_ID");
                            tempItem.CERTIFICATION_SN = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_SN"));
                            tempItem.CSR = rs.getString("CSR");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempItem.FEE_AMOUNT = rs.getInt("FEE_AMOUNT");
                            tempItem.TOKEN_AMOUNT = rs.getInt("TOKEN_AMOUNT");
                            tempItem.VALUE = rs.getString("VALUE");
                            tempItem.COMMENT = rs.getString("COMMENT");
                            tempItem.CREATED_BY_ID = rs.getInt("CREATED_BY_ID");
                            tempItem.EFFECTIVE_DT = rs.getString("EFFECTIVE_DT");
                            tempItem.EXPIRATION_DT = rs.getString("EXPIRATION_DT");
                            tempItem.PRIVATE_KEY_ENABLED = rs.getBoolean("PRIVATE_KEY_ENABLED");
                            tempItem.PRIVATE_KEY = EscapeUtils.CheckTextNull(rs.getString("PRIVATE_KEY"));
                            tempItem.PKI_FORMFACTOR_ID = rs.getInt("PKI_FORMFACTOR_ID");
                            tempItem.PKI_FORMFACTOR_DESC = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_DESC"));
                            tempItem.PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("PROPERTIES"));
                            tempItem.DISCOUNT_RATE = rs.getInt("DISCOUNT_RATE");
                            tempItem.SHARED_MODE = rs.getBoolean("SHARED_MODE");
                            tempItem.CERTIFICATION_OWNER_ID = rs.getInt("CERTIFICATION_OWNER_ID");
                            tempItem.CERT_PROFILE_DURATION = rs.getInt("CERTIFICATION_PROFILE_DURATION");
                            tempItem.CERT_PROFILE_PROMOTION = rs.getInt("CERTIFICATION_PROFILE_PROMOTION_DURATION");
                            tempItem.CORE_ERROR_DESCRIPTION = EscapeUtils.CheckTextNull(rs.getString("CORE_ERROR_DESCRIPTION"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_GET_INFO">
    public void S_BO_CERTIFICATION_GET_INFO(String pID, String pLanguage, CERTIFICATION[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_GET_INFO(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_GET_INFO", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.PUSH_NOTICE_ENABLED = rs.getBoolean("PUSH_NOTICE_ENABLED");
                            tempItem.CERTIFICATION_ATTR_ID = rs.getInt("ID");
                            tempItem.PAST_CERTIFICATION_ID = rs.getInt("PAST_CERTIFICATION_ID");
                            tempItem.CITY_PROVINCE_ID = rs.getInt("PROVINCE_ID");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.CERTIFICATION_PROFILE_ID = rs.getInt("CERTIFICATION_PROFILE_ID");
                            tempItem.CERTIFICATION_STATE_ID = rs.getInt("CERTIFICATION_STATE_ID");
                            tempItem.CERTIFICATION_PURPOSE_ID = rs.getInt("CERTIFICATION_PURPOSE_ID");
                            tempItem.CERTIFICATION_ATTR_TYPE_ID = rs.getInt("CERTIFICATION_ATTR_TYPE_ID");
                            tempItem.CERTIFICATION_AUTHORITY_ID = rs.getInt("CERTIFICATION_AUTHORITY_ID");
                            tempItem.CERTIFICATION = rs.getString("CERTIFICATION");
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            tempItem.DOMAIN_NAME = rs.getString("DOMAIN_NAME");
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.DURATION = rs.getInt("DURATION");
                            tempItem.EMAIL_CONTRACT = rs.getString("EMAIL_CONTRACT");
                            tempItem.PHONE_CONTRACT = rs.getString("PHONE_CONTRACT");
                            tempItem.CERTIFICATION_STATE_DESC = rs.getString("CERTIFICATION_STATE_DESC");
                            tempItem.SUBJECT = rs.getString("SUBJECT");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.CERTIFICATION_SN = rs.getString("CERTIFICATION_SN");
                            tempItem.CSR = rs.getString("CSR");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.CREATED_BY = rs.getString("CREATED_BY");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempItem.EFFECTIVE_DT = rs.getString("EFFECTIVE_DT");
                            tempItem.PROFILE_CONTACT_INFO = rs.getString("PROFILE_CONTACT_INFO");
                            tempItem.PKI_FORMFACTOR_NAME = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_NAME"));
                            tempItem.FEE_AMOUNT = rs.getInt("FEE_AMOUNT");
                            tempItem.TOKEN_AMOUNT = rs.getInt("TOKEN_AMOUNT");
                            tempItem.CERTIFICATION_OWNER_ID = rs.getInt("CERTIFICATION_OWNER_ID");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PRE_APPROVED">
    public String S_BO_CERTIFICATION_PRE_APPROVED(int pCERTIFICATION_ATTR_ID, String pVALUE, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PRE_APPROVED(?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ATTR_ID);
                        if (!"".equals(pVALUE)) {
                            proc_stmt.setString(2, pVALUE);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_PRE_APPROVED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PRE_APPROVED_BY_LOW_LEVEL_BRANCH">
    public String S_BO_CERTIFICATION_PRE_APPROVED_BY_LOW_LEVEL_BRANCH(int pCERTIFICATION_ATTR_ID, String pVALUE, String pUSER_BY, int pAPPROVE_ID_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PRE_APPROVED_BY_LOW_LEVEL_BRANCH(?,?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ATTR_ID);
                        if (!"".equals(pVALUE)) {
                            proc_stmt.setString(2, pVALUE);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.setInt(4, pAPPROVE_ID_BY);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_PRE_APPROVED_BY_LOW_LEVEL_BRANCH", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_APPROVED">
    public String S_BO_CERTIFICATION_APPROVED(int pCERTFICATION_ID, String pVALUE, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_APPROVED(?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTFICATION_ID);
                        if (!"".equals(pVALUE)) {
                            proc_stmt.setString(2, pVALUE);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_APPROVED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_APPROVED">
    public String S_BO_API_CERTIFICATION_APPROVED(int pCERTIFICATION_ATTR_ID, String pVALUE, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_APPROVED(?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ATTR_ID);
                        if (!"".equals(pVALUE)) {
                            proc_stmt.setString(2, pVALUE);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_APPROVED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_GET_LEVEL_BY_BRANCH_CODE">
    public String S_BO_API_GET_LEVEL_BY_BRANCH_CODE(String pBRANCH_CODE) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_GET_LEVEL_BY_BRANCH_CODE(?,?) }");
                        proc_stmt.setString(1, pBRANCH_CODE);
                        proc_stmt.registerOutParameter(2, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(2));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_ATTR_UPDATE_AGREEMENT_UUID">
    public String S_BO_CERTIFICATION_ATTR_UPDATE_AGREEMENT_UUID(int pCERTFICATION_ID, String pVALUE, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_ATTR_UPDATE_AGREEMENT_UUID(?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTFICATION_ID);
                        if (!"".equals(pVALUE)) {
                            proc_stmt.setString(2, pVALUE);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_ATTR_UPDATE_AGREEMENT_UUID", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_REMOVED">
    public String S_BO_CERTIFICATION_REMOVED(int pCERTFICATION_ID, String pCOMMENT, String pVALUE, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_REMOVED(?,?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTFICATION_ID);
                        proc_stmt.setString(2, pCOMMENT);
                        if(!"".equals(pVALUE))
                        {
                            proc_stmt.setString(3, pVALUE);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setString(4, pUSER_BY);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_REMOVED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_LIST">
    public void S_BO_CERTIFICATION_LIST(String strFrom, String strTo,
            String pCERTIFICATION_STATE_ID, String pCERTIFICATION_SN, String pCERTIFICATION_PURPOSE_ID,
            String pPERSONAL_NAME, String pCOMPANY_NAME, String pDOMAIN_NAME, String pBRANCH_ID, String pCREATED_BY, String pROLE_CREATED_BY,
            String pBRANCH_BY, String pTOKEN_LOST_STATUS, String sTOKEN_SN, String pPKI_FORMFACTOR_ID,
            String pDEVICE_UUID, String IsByOwner, String pCA_ID, String pSERVICE_TYPE_ID, String pLanguage,
            CERTIFICATION[][] response, int sPage, int sSum, String pBRANCH_ID_LIST,
            String pENTERPRISE_ID, String pPERSONAL_ID) throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_LIST", 25));
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString("pFROM_DT", strFrom);
                        } else {
                            proc_stmt.setString("pFROM_DT", null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString("pTO_DT", strTo);
                        } else {
                            proc_stmt.setString("pTO_DT", null);
                        }
                        if (!"".equals(pCERTIFICATION_STATE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_STATE_ID", Integer.parseInt(pCERTIFICATION_STATE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_STATE_ID", null);
                        }
                        if (!"".equals(pCERTIFICATION_SN)) {
                            proc_stmt.setString("pCERTIFICATION_SN", pCERTIFICATION_SN);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_SN", null);
                        }
                        if (!"".equals(pCERTIFICATION_PURPOSE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_PURPOSE_ID", Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_PURPOSE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pDOMAIN_NAME)) {
                            proc_stmt.setString("pDOMAIN_NAME", pDOMAIN_NAME);
                        } else {
                            proc_stmt.setString("pDOMAIN_NAME", null);
                        }
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        if (!"".equals(pCREATED_BY)) {
                            proc_stmt.setInt("pCREATED_BY", Integer.parseInt(pCREATED_BY));
                        } else {
                            proc_stmt.setString("pCREATED_BY", null);
                        }
                        if (!"".equals(pROLE_CREATED_BY)) {
                            proc_stmt.setInt("pROLE_CREATED_BY", Integer.parseInt(pROLE_CREATED_BY));
                        } else {
                            proc_stmt.setString("pROLE_CREATED_BY", null);
                        }
                        if (!"".equals(pBRANCH_BY)) {
                            proc_stmt.setInt("pBRANCH_BY", Integer.parseInt(pBRANCH_BY));
                        } else {
                            proc_stmt.setString("pBRANCH_BY", null);
                        }
                        if (!"".equals(pTOKEN_LOST_STATUS)) {
                            proc_stmt.setInt("pTOKEN_LOST_STATUS", Integer.parseInt(pTOKEN_LOST_STATUS));
                        } else {
                            proc_stmt.setString("pTOKEN_LOST_STATUS", null);
                        }
                        if (!"".equals(sTOKEN_SN)) {
                            proc_stmt.setString("pTOKEN_SN", sTOKEN_SN);
                        } else {
                            proc_stmt.setString("pTOKEN_SN", null);
                        }
                        if (!"".equals(pPKI_FORMFACTOR_ID)) {
                            proc_stmt.setInt("pPKI_FORMFACTOR_ID", Integer.parseInt(pPKI_FORMFACTOR_ID));
                        } else {
                            proc_stmt.setString("pPKI_FORMFACTOR_ID", null);
                        }
                        if (!"".equals(pDEVICE_UUID)) {
                            proc_stmt.setString("pSERVICE_UUID", pDEVICE_UUID);
                        } else {
                            proc_stmt.setString("pSERVICE_UUID", null);
                        }
                        if (!"".equals(IsByOwner)) {
                            proc_stmt.setInt("pIS_BY_OWNER", Integer.parseInt(IsByOwner));
                        } else {
                            proc_stmt.setString("pIS_BY_OWNER", null);
                        }
                        if (!"".equals(pCA_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_AUTHORITY_ID", Integer.parseInt(pCA_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_AUTHORITY_ID", null);
                        }
                        if (!"".equals(pSERVICE_TYPE_ID)) {
                            proc_stmt.setInt("pSERVICE_TYPE_ID", Integer.parseInt(pSERVICE_TYPE_ID));
                        } else {
                            proc_stmt.setString("pSERVICE_TYPE_ID", null);
                        }
                        proc_stmt.setInt("pLANGUAGE", Integer.parseInt(pLanguage));
                        proc_stmt.setInt("pPAGE_NO", sPage);
                        proc_stmt.setInt("pROW_NO", sSum);
                        if (!"".equals(pBRANCH_ID_LIST)) {
                            proc_stmt.setString("pBRANCH_LIST_ID", pBRANCH_ID_LIST);
                        } else {
                            proc_stmt.setString("pBRANCH_LIST_ID", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.CERTIFICATION_STATE_ID = rs.getInt("CERTIFICATION_STATE_ID");
                            tempItem.PAST_CERTIFICATION_ID = rs.getInt("PAST_CERTIFICATION_ID");
                            tempItem.CERTIFICATION_PURPOSE_ID = rs.getInt("CERTIFICATION_PURPOSE_ID");
                            tempItem.CERTIFICATION_ATTR_TYPE_ID = rs.getInt("CERTIFICATION_ATTR_TYPE_ID");
                            tempItem.CERTIFICATION_SN = rs.getString("CERTIFICATION_SN");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            tempItem.DOMAIN_NAME = rs.getString("DOMAIN_NAME");
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.CERTIFICATION_PROFILE_NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.CERTIFICATION_PROFILE_DESC = rs.getString("CERTIFICATION_PROFILE_DESC");
                            tempItem.CERTIFICATION_PURPOSE_DESC = rs.getString("CERTIFICATION_PURPOSE_DESC");
                            tempItem.CERTIFICATION_STATE_DESC = rs.getString("CERTIFICATION_STATE_DESC");
                            tempItem.CERTIFICATION_ATTR_STATE_DESC = rs.getString("CERTIFICATION_ATTR_STATE_DESC");
                            tempItem.CERTIFICATION_ATTR_TYPE_DESC = rs.getString("CERTIFICATION_ATTR_TYPE_DESC");
                            tempItem.SERVICE_TYPE_DESC = rs.getString("SERVICE_TYPE_DESC");
                            tempItem.CERTIFICATION_ATTR_STATE_ID = rs.getInt("CERTIFICATION_ATTR_STATE_ID");
                            tempItem.PKI_FORMFACTOR_ID = rs.getInt("PKI_FORMFACTOR_ID");
                            tempItem.PKI_FORMFACTOR_DESC = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_DESC"));
                            tempItem.NO_CANCEL_COMMITMENT = EscapeUtils.CheckTextNull(rs.getString("NO_CANCEL_COMMITMENT"));
                            tempItem.EXPIRATION_DT = rs.getString("EXPIRATION_DT");
                            tempItem.EFFECTIVE_DT = rs.getString("EFFECTIVE_DT");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.CREATED_BY = rs.getString("USERNAME_CREATED");
                            tempItem.SERVICE_UUID = EscapeUtils.CheckTextNull(rs.getString("SERVICE_UUID"));
                            tempItem.OPERATED_DT = EscapeUtils.CheckTextNull(rs.getString("OPERATED_DT"));
                            tempItem.ACTIVATION_CODE = EscapeUtils.CheckTextNull(rs.getString("ACTIVATION_CODE"));
                            tempItem.EXPIRATION_CONTRACT_DT = EscapeUtils.CheckTextNull(rs.getString("EXPIRATION_CONTRACT_DT"));
                            tempItem.SHARED_MODE = rs.getBoolean("SHARED_MODE");
                            tempItem.CROSS_CHECK_ENABLED = rs.getBoolean("CROSS_CHECK_ENABLED");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.CREATED_BY_ID = rs.getInt("CREATED_BY_ID");
                            tempItem.CERTIFICATION_ATTR_ID = rs.getInt("CERTIFICATION_ATTR_ID");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_LIST_EXPORT">
    public void S_BO_CERTIFICATION_LIST_EXPORT(String strFrom, String strTo,
            String pCERTIFICATION_STATE_ID, String pCERTIFICATION_SN, String pCERTIFICATION_PURPOSE_ID,
            String pPERSONAL_NAME, String pCOMPANY_NAME, String pDOMAIN_NAME, 
            String pBRANCH_ID, String pCREATED_BY, String pROLE_CREATED_BY,
            String pBRANCH_BY, String pTOKEN_LOST_STATUS, String sTOKEN_SN, String pPKI_FORMFACTOR_ID,
            String pDEVICE_UUID, String IsByOwner, String pCA_ID, String pSERVICE_TYPE_ID, String pLanguage,
            CERTIFICATION[][] response, String pBRANCH_ID_LIST, String pENTERPRISE_ID, String pPERSONAL_ID) throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_LIST_EXPORT", 23));
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString("pFROM_DT", strFrom);
                        } else {
                            proc_stmt.setString("pFROM_DT", null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString("pTO_DT", strTo);
                        } else {
                            proc_stmt.setString("pTO_DT", null);
                        }
                        if (!"".equals(pCERTIFICATION_STATE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_STATE_ID", Integer.parseInt(pCERTIFICATION_STATE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_STATE_ID", null);
                        }
                        if (!"".equals(pCERTIFICATION_SN)) {
                            proc_stmt.setString("pCERTIFICATION_SN", pCERTIFICATION_SN);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_SN", null);
                        }
                        if (!"".equals(pCERTIFICATION_PURPOSE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_PURPOSE_ID", Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_PURPOSE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pDOMAIN_NAME)) {
                            proc_stmt.setString("pDOMAIN_NAME", pDOMAIN_NAME);
                        } else {
                            proc_stmt.setString("pDOMAIN_NAME", null);
                        }
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        if (!"".equals(pCREATED_BY)) {
                            proc_stmt.setInt("pCREATED_BY", Integer.parseInt(pCREATED_BY));
                        } else {
                            proc_stmt.setString("pCREATED_BY", null);
                        }
                        if (!"".equals(pROLE_CREATED_BY)) {
                            proc_stmt.setInt("pROLE_CREATED_BY", Integer.parseInt(pROLE_CREATED_BY));
                        } else {
                            proc_stmt.setString("pROLE_CREATED_BY", null);
                        }
                        if (!"".equals(pBRANCH_BY)) {
                            proc_stmt.setInt("pBRANCH_BY", Integer.parseInt(pBRANCH_BY));
                        } else {
                            proc_stmt.setString("pBRANCH_BY", null);
                        }
                        if (!"".equals(pTOKEN_LOST_STATUS)) {
                            proc_stmt.setInt("pTOKEN_LOST_STATUS", Integer.parseInt(pTOKEN_LOST_STATUS));
                        } else {
                            proc_stmt.setString("pTOKEN_LOST_STATUS", null);
                        }
                        if (!"".equals(sTOKEN_SN)) {
                            proc_stmt.setString("pTOKEN_SN", sTOKEN_SN);
                        } else {
                            proc_stmt.setString("pTOKEN_SN", null);
                        }
                        if (!"".equals(pPKI_FORMFACTOR_ID)) {
                            proc_stmt.setInt("pPKI_FORMFACTOR_ID", Integer.parseInt(pPKI_FORMFACTOR_ID));
                        } else {
                            proc_stmt.setString("pPKI_FORMFACTOR_ID", null);
                        }
                        if (!"".equals(pDEVICE_UUID)) {
                            proc_stmt.setString("pSERVICE_UUID", pDEVICE_UUID);
                        } else {
                            proc_stmt.setString("pSERVICE_UUID", null);
                        }
                        if (!"".equals(IsByOwner)) {
                            proc_stmt.setInt("pIS_BY_OWNER", Integer.parseInt(IsByOwner));
                        } else {
                            proc_stmt.setString("pIS_BY_OWNER", null);
                        }
                        if (!"".equals(pCA_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_AUTHORITY_ID", Integer.parseInt(pCA_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_AUTHORITY_ID", null);
                        }
                        if (!"".equals(pSERVICE_TYPE_ID)) {
                            proc_stmt.setInt("pSERVICE_TYPE_ID", Integer.parseInt(pSERVICE_TYPE_ID));
                        } else {
                            proc_stmt.setString("pSERVICE_TYPE_ID", null);
                        }
                        proc_stmt.setInt("pLANGUAGE", Integer.parseInt(pLanguage));
                        if (!"".equals(pBRANCH_ID_LIST)) {
                            proc_stmt.setString("pBRANCH_LIST_ID", pBRANCH_ID_LIST);
                        } else {
                            proc_stmt.setString("pBRANCH_LIST_ID", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_LIST_EXPORT", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.CERTIFICATION_STATE_ID = rs.getInt("CERTIFICATION_STATE_ID");
                            tempItem.PAST_CERTIFICATION_ID = rs.getInt("PAST_CERTIFICATION_ID");
                            tempItem.CERTIFICATION_PURPOSE_ID = rs.getInt("CERTIFICATION_PURPOSE_ID");
                            tempItem.CERTIFICATION_ATTR_TYPE_ID = rs.getInt("CERTIFICATION_ATTR_TYPE_ID");
                            tempItem.CERTIFICATION_SN = rs.getString("CERTIFICATION_SN");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.TOKEN_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("TOKEN_STATE_DESC"));
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            tempItem.DOMAIN_NAME = rs.getString("DOMAIN_NAME");
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.CERTIFICATION_PROFILE_NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.CERTIFICATION_PURPOSE_DESC = rs.getString("CERTIFICATION_PURPOSE_DESC");
                            tempItem.CERTIFICATION_STATE_DESC = rs.getString("CERTIFICATION_STATE_DESC");
                            tempItem.CERTIFICATION_ATTR_STATE_DESC = rs.getString("CERTIFICATION_ATTR_STATE_DESC");
                            tempItem.CERTIFICATION_ATTR_TYPE_DESC = rs.getString("CERTIFICATION_ATTR_TYPE_DESC");
                            tempItem.SERVICE_TYPE_DESC = rs.getString("SERVICE_TYPE_DESC");
                            tempItem.CERTIFICATION_ATTR_STATE_ID = rs.getInt("CERTIFICATION_ATTR_STATE_ID");
                            tempItem.PKI_FORMFACTOR_ID = rs.getInt("PKI_FORMFACTOR_ID");
                            tempItem.PKI_FORMFACTOR_DESC = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_DESC"));
                            tempItem.EXPIRATION_DT = EscapeUtils.CheckTextNull(rs.getString("EXPIRATION_DT"));
                            tempItem.EFFECTIVE_DT = EscapeUtils.CheckTextNull(rs.getString("EFFECTIVE_DT"));
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.CREATED_BY = rs.getString("USERNAME_CREATED");
                            tempItem.SERVICE_UUID = EscapeUtils.CheckTextNull(rs.getString("SERVICE_UUID"));
                            tempItem.OPERATED_DT = EscapeUtils.CheckTextNull(rs.getString("OPERATED_DT"));
                            tempItem.REVOKED_DT = EscapeUtils.CheckTextNull(rs.getString("REVOKED_DT"));
                            tempItem.SHARED_MODE = rs.getBoolean("SHARED_MODE");
                            tempItem.CROSS_CHECK_ENABLED = rs.getBoolean("CROSS_CHECK_ENABLED");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_TOTAL">
    public int S_BO_CERTIFICATION_TOTAL(String strFrom, String strTo,
            String pCERTIFICATION_STATE_ID, String pCERTIFICATION_SN, String pCERTIFICATION_PURPOSE_ID,
            String pPERSONAL_NAME, String pCOMPANY_NAME, String pDOMAIN_NAME, String pBRANCH_ID, String pCREATED_BY, String pROLE_CREATED_BY,
            String pBRANCH_BY, String pTOKEN_LOST_STATUS, String sTOKEN_SN, String pPKI_FORMFACTOR_ID,
            String pDEVICE_UUID, String IsByOwner, String pCA_ID, String pSERVICE_TYPE_ID, String pBRANCH_ID_LIST,
            String pENTERPRISE_ID, String pPERSONAL_ID)
        throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_TOTAL", 23));
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString("pFROM_DT", strFrom);
                        } else {
                            proc_stmt.setString("pFROM_DT", null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString("pTO_DT", strTo);
                        } else {
                            proc_stmt.setString("pTO_DT", null);
                        }
                        if (!"".equals(pCERTIFICATION_STATE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_STATE_ID", Integer.parseInt(pCERTIFICATION_STATE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_STATE_ID", null);
                        }
                        if (!"".equals(pCERTIFICATION_SN)) {
                            proc_stmt.setString("pCERTIFICATION_SN", pCERTIFICATION_SN);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_SN", null);
                        }
                        if (!"".equals(pCERTIFICATION_PURPOSE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_PURPOSE_ID", Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_PURPOSE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pDOMAIN_NAME)) {
                            proc_stmt.setString("pDOMAIN_NAME", pDOMAIN_NAME);
                        } else {
                            proc_stmt.setString("pDOMAIN_NAME", null);
                        }
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        if (!"".equals(pCREATED_BY)) {
                            proc_stmt.setInt("pCREATED_BY", Integer.parseInt(pCREATED_BY));
                        } else {
                            proc_stmt.setString("pCREATED_BY", null);
                        }
                        if (!"".equals(pROLE_CREATED_BY)) {
                            proc_stmt.setInt("pROLE_CREATED_BY", Integer.parseInt(pROLE_CREATED_BY));
                        } else {
                            proc_stmt.setString("pROLE_CREATED_BY", null);
                        }
                        if (!"".equals(pBRANCH_BY)) {
                            proc_stmt.setInt("pBRANCH_BY", Integer.parseInt(pBRANCH_BY));
                        } else {
                            proc_stmt.setString("pBRANCH_BY", null);
                        }
                        if (!"".equals(pTOKEN_LOST_STATUS)) {
                            proc_stmt.setInt("pTOKEN_LOST_STATUS", Integer.parseInt(pTOKEN_LOST_STATUS));
                        } else {
                            proc_stmt.setString("pTOKEN_LOST_STATUS", null);
                        }
                        if (!"".equals(sTOKEN_SN)) {
                            proc_stmt.setString("pTOKEN_SN", sTOKEN_SN);
                        } else {
                            proc_stmt.setString("pTOKEN_SN", null);
                        }
                        if (!"".equals(pPKI_FORMFACTOR_ID)) {
                            proc_stmt.setInt("pPKI_FORMFACTOR_ID", Integer.parseInt(pPKI_FORMFACTOR_ID));
                        } else {
                            proc_stmt.setString("pPKI_FORMFACTOR_ID", null);
                        }
                        if (!"".equals(pDEVICE_UUID)) {
                            proc_stmt.setString("pSERVICE_UUID", pDEVICE_UUID);
                        } else {
                            proc_stmt.setString("pSERVICE_UUID", null);
                        }
                        if (!"".equals(IsByOwner)) {
                            proc_stmt.setInt("pIS_BY_OWNER", Integer.parseInt(IsByOwner));
                        } else {
                            proc_stmt.setString("pIS_BY_OWNER", null);
                        }
                        if (!"".equals(pCA_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_AUTHORITY_ID", Integer.parseInt(pCA_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_AUTHORITY_ID", null);
                        }
                        if (!"".equals(pSERVICE_TYPE_ID)) {
                            proc_stmt.setInt("pSERVICE_TYPE_ID", Integer.parseInt(pSERVICE_TYPE_ID));
                        } else {
                            proc_stmt.setString("pSERVICE_TYPE_ID", null);
                        }
                        if (!"".equals(pBRANCH_ID_LIST)) {
                            proc_stmt.setString("pBRANCH_LIST_ID", pBRANCH_ID_LIST);
                        } else {
                            proc_stmt.setString("pBRANCH_LIST_ID", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        proc_stmt.registerOutParameter("pCOUNT", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt("pCOUNT");
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_LIST_TOKEN_LOCK">
    public void S_BO_CERTIFICATION_LIST_TOKEN_LOCK(String strFrom, String strTo,
            String pCERTIFICATION_STATE_ID, String pCERTIFICATION_SN, String pCERTIFICATION_PURPOSE_ID,
            String pPERSONAL_NAME, String pCOMPANY_NAME,
            String pDOMAIN_NAME, String pBRANCH_ID, String pCREATED_BY, String pROLE_CREATED_BY,
            String pBRANCH_BY, String pTOKEN_LOST_STATUS, String sTOKEN_SN, String pPKI_FORMFACTOR_ID,
            String pDEVICE_UUID, String IsByOwner, String pCA_ID, String pSERVICE_TYPE_ID, String pLanguage,
            CERTIFICATION[][] response, String pENTERPRISE_ID, String pPERSONAL_ID) throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_LIST_TOKEN_LOCK", 22));
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString("pFROM_DT", strFrom);
                        } else {
                            proc_stmt.setString("pFROM_DT", null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString("pTO_DT", strTo);
                        } else {
                            proc_stmt.setString("pTO_DT", null);
                        }
                        if (!"".equals(pCERTIFICATION_STATE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_STATE_ID", Integer.parseInt(pCERTIFICATION_STATE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_STATE_ID", null);
                        }
                        if (!"".equals(pCERTIFICATION_SN)) {
                            proc_stmt.setString("pCERTIFICATION_SN", pCERTIFICATION_SN);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_SN", null);
                        }
                        if (!"".equals(pCERTIFICATION_PURPOSE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_PURPOSE_ID", Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_PURPOSE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pDOMAIN_NAME)) {
                            proc_stmt.setString("pDOMAIN_NAME", pDOMAIN_NAME);
                        } else {
                            proc_stmt.setString("pDOMAIN_NAME", null);
                        }
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        if (!"".equals(pCREATED_BY)) {
                            proc_stmt.setInt("pCREATED_BY", Integer.parseInt(pCREATED_BY));
                        } else {
                            proc_stmt.setString("pCREATED_BY", null);
                        }
                        if (!"".equals(pROLE_CREATED_BY)) {
                            proc_stmt.setInt("pROLE_CREATED_BY", Integer.parseInt(pROLE_CREATED_BY));
                        } else {
                            proc_stmt.setString("pROLE_CREATED_BY", null);
                        }
                        if (!"".equals(pBRANCH_BY)) {
                            proc_stmt.setInt("pBRANCH_BY", Integer.parseInt(pBRANCH_BY));
                        } else {
                            proc_stmt.setString("pBRANCH_BY", null);
                        }
                        if (!"".equals(pTOKEN_LOST_STATUS)) {
                            proc_stmt.setInt("pTOKEN_LOST_STATUS", Integer.parseInt(pTOKEN_LOST_STATUS));
                        } else {
                            proc_stmt.setString("pTOKEN_LOST_STATUS", null);
                        }
                        if (!"".equals(sTOKEN_SN)) {
                            proc_stmt.setString("pTOKEN_SN", sTOKEN_SN);
                        } else {
                            proc_stmt.setString("pTOKEN_SN", null);
                        }
                        if (!"".equals(pPKI_FORMFACTOR_ID)) {
                            proc_stmt.setInt("pPKI_FORMFACTOR_ID", Integer.parseInt(pPKI_FORMFACTOR_ID));
                        } else {
                            proc_stmt.setString("pPKI_FORMFACTOR_ID", null);
                        }
                        if (!"".equals(pDEVICE_UUID)) {
                            proc_stmt.setString("pSERVICE_UUID", pDEVICE_UUID);
                        } else {
                            proc_stmt.setString("pSERVICE_UUID", null);
                        }
                        if (!"".equals(IsByOwner)) {
                            proc_stmt.setInt("pIS_BY_OWNER", Integer.parseInt(IsByOwner));
                        } else {
                            proc_stmt.setString("pIS_BY_OWNER", null);
                        }
                        if (!"".equals(pCA_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_AUTHORITY_ID", Integer.parseInt(pCA_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_AUTHORITY_ID", null);
                        }
                        if (!"".equals(pSERVICE_TYPE_ID)) {
                            proc_stmt.setInt("pSERVICE_TYPE_ID", Integer.parseInt(pSERVICE_TYPE_ID));
                        } else {
                            proc_stmt.setString("pSERVICE_TYPE_ID", null);
                        }
                        proc_stmt.setInt("pLANGUAGE", Integer.parseInt(pLanguage));
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_LIST_TOKEN_LOCK", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.CERTIFICATION_STATE_ID = rs.getInt("CERTIFICATION_STATE_ID");
                            tempItem.PAST_CERTIFICATION_ID = rs.getInt("PAST_CERTIFICATION_ID");
                            tempItem.CERTIFICATION_PURPOSE_ID = rs.getInt("CERTIFICATION_PURPOSE_ID");
                            tempItem.CERTIFICATION_ATTR_TYPE_ID = rs.getInt("CERTIFICATION_ATTR_TYPE_ID");
                            tempItem.CERTIFICATION_SN = rs.getString("CERTIFICATION_SN");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            tempItem.DOMAIN_NAME = rs.getString("DOMAIN_NAME");
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.CERTIFICATION_PROFILE_NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.CERTIFICATION_PURPOSE_DESC = rs.getString("CERTIFICATION_PURPOSE_DESC");
                            tempItem.CERTIFICATION_STATE_DESC = rs.getString("CERTIFICATION_STATE_DESC");
                            tempItem.CERTIFICATION_ATTR_STATE_DESC = rs.getString("CERTIFICATION_ATTR_STATE_DESC");
                            tempItem.CERTIFICATION_ATTR_TYPE_DESC = rs.getString("CERTIFICATION_ATTR_TYPE_DESC");
                            tempItem.SERVICE_TYPE_DESC = rs.getString("SERVICE_TYPE_DESC");
                            tempItem.CERTIFICATION_ATTR_STATE_ID = rs.getInt("CERTIFICATION_ATTR_STATE_ID");
                            tempItem.PKI_FORMFACTOR_ID = rs.getInt("PKI_FORMFACTOR_ID");
                            tempItem.PKI_FORMFACTOR_DESC = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_DESC"));
                            tempItem.EXPIRATION_DT = rs.getString("EXPIRATION_DT");
                            tempItem.EFFECTIVE_DT = rs.getString("EFFECTIVE_DT");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.CREATED_BY = rs.getString("USERNAME_CREATED");
                            tempItem.SERVICE_UUID = EscapeUtils.CheckTextNull(rs.getString("SERVICE_UUID"));
                            tempItem.OPERATED_DT = EscapeUtils.CheckTextNull(rs.getString("OPERATED_DT"));
                            tempItem.SHARED_MODE = rs.getBoolean("SHARED_MODE");
                            tempItem.CROSS_CHECK_ENABLED = rs.getBoolean("CROSS_CHECK_ENABLED");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.CREATED_LOCK_REQUEST_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_LOCK_REQUEST_DT"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_LIST_TOKEN_WAIT_TO_LOCK">
    public void S_BO_CERTIFICATION_LIST_TOKEN_WAIT_TO_LOCK(String strFrom, String strTo,
            String pCERTIFICATION_STATE_ID, String pCERTIFICATION_SN, String pCERTIFICATION_PURPOSE_ID,
            String pPERSONAL_NAME, String pCOMPANY_NAME, String pDOMAIN_NAME, String pBRANCH_ID, String pCREATED_BY,
            String pROLE_CREATED_BY, String pBRANCH_BY, String pTOKEN_LOST_STATUS, String sTOKEN_SN, String pPKI_FORMFACTOR_ID,
            String pDEVICE_UUID, String IsByOwner, String pCA_ID, String pSERVICE_TYPE_ID, String pLanguage,
            CERTIFICATION[][] response, String pENTERPRISE_ID, String pPERSONAL_ID) throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_LIST_TOKEN_WAIT_TO_LOCK", 22));
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString("pFROM_DT", strFrom);
                        } else {
                            proc_stmt.setString("pFROM_DT", null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString("pTO_DT", strTo);
                        } else {
                            proc_stmt.setString("pTO_DT", null);
                        }
                        if (!"".equals(pCERTIFICATION_STATE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_STATE_ID", Integer.parseInt(pCERTIFICATION_STATE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_STATE_ID", null);
                        }
                        if (!"".equals(pCERTIFICATION_SN)) {
                            proc_stmt.setString("pCERTIFICATION_SN", pCERTIFICATION_SN);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_SN", null);
                        }
                        if (!"".equals(pCERTIFICATION_PURPOSE_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_PURPOSE_ID", Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_PURPOSE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pDOMAIN_NAME)) {
                            proc_stmt.setString("pDOMAIN_NAME", pDOMAIN_NAME);
                        } else {
                            proc_stmt.setString("pDOMAIN_NAME", null);
                        }
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        if (!"".equals(pCREATED_BY)) {
                            proc_stmt.setInt("pCREATED_BY", Integer.parseInt(pCREATED_BY));
                        } else {
                            proc_stmt.setString("pCREATED_BY", null);
                        }
                        if (!"".equals(pROLE_CREATED_BY)) {
                            proc_stmt.setInt("pROLE_CREATED_BY", Integer.parseInt(pROLE_CREATED_BY));
                        } else {
                            proc_stmt.setString("pROLE_CREATED_BY", null);
                        }
                        if (!"".equals(pBRANCH_BY)) {
                            proc_stmt.setInt("pBRANCH_BY", Integer.parseInt(pBRANCH_BY));
                        } else {
                            proc_stmt.setString("pBRANCH_BY", null);
                        }
                        if (!"".equals(pTOKEN_LOST_STATUS)) {
                            proc_stmt.setInt("pTOKEN_LOST_STATUS", Integer.parseInt(pTOKEN_LOST_STATUS));
                        } else {
                            proc_stmt.setString("pTOKEN_LOST_STATUS", null);
                        }
                        if (!"".equals(sTOKEN_SN)) {
                            proc_stmt.setString("pTOKEN_SN", sTOKEN_SN);
                        } else {
                            proc_stmt.setString("pTOKEN_SN", null);
                        }
                        if (!"".equals(pPKI_FORMFACTOR_ID)) {
                            proc_stmt.setInt("pPKI_FORMFACTOR_ID", Integer.parseInt(pPKI_FORMFACTOR_ID));
                        } else {
                            proc_stmt.setString("pPKI_FORMFACTOR_ID", null);
                        }
                        if (!"".equals(pDEVICE_UUID)) {
                            proc_stmt.setString("pSERVICE_UUID", pDEVICE_UUID);
                        } else {
                            proc_stmt.setString("pSERVICE_UUID", null);
                        }
                        if (!"".equals(IsByOwner)) {
                            proc_stmt.setInt("pIS_BY_OWNER", Integer.parseInt(IsByOwner));
                        } else {
                            proc_stmt.setString("pIS_BY_OWNER", null);
                        }
                        if (!"".equals(pCA_ID)) {
                            proc_stmt.setInt("pCERTIFICATION_AUTHORITY_ID", Integer.parseInt(pCA_ID));
                        } else {
                            proc_stmt.setString("pCERTIFICATION_AUTHORITY_ID", null);
                        }
                        if (!"".equals(pSERVICE_TYPE_ID)) {
                            proc_stmt.setInt("pSERVICE_TYPE_ID", Integer.parseInt(pSERVICE_TYPE_ID));
                        } else {
                            proc_stmt.setString("pSERVICE_TYPE_ID", null);
                        }
                        proc_stmt.setInt("pLANGUAGE", Integer.parseInt(pLanguage));
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_LIST_TOKEN_WAIT_TO_LOCK", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.CERTIFICATION_STATE_ID = rs.getInt("CERTIFICATION_STATE_ID");
                            tempItem.PAST_CERTIFICATION_ID = rs.getInt("PAST_CERTIFICATION_ID");
                            tempItem.CERTIFICATION_PURPOSE_ID = rs.getInt("CERTIFICATION_PURPOSE_ID");
                            tempItem.CERTIFICATION_ATTR_TYPE_ID = rs.getInt("CERTIFICATION_ATTR_TYPE_ID");
                            tempItem.CERTIFICATION_SN = rs.getString("CERTIFICATION_SN");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            tempItem.DOMAIN_NAME = rs.getString("DOMAIN_NAME");
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");																
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.CERTIFICATION_PROFILE_NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.CERTIFICATION_PURPOSE_DESC = rs.getString("CERTIFICATION_PURPOSE_DESC");
                            tempItem.CERTIFICATION_STATE_DESC = rs.getString("CERTIFICATION_STATE_DESC");
                            tempItem.CERTIFICATION_ATTR_STATE_DESC = rs.getString("CERTIFICATION_ATTR_STATE_DESC");
                            tempItem.CERTIFICATION_ATTR_TYPE_DESC = rs.getString("CERTIFICATION_ATTR_TYPE_DESC");
                            tempItem.SERVICE_TYPE_DESC = rs.getString("SERVICE_TYPE_DESC");
                            tempItem.CERTIFICATION_ATTR_STATE_ID = rs.getInt("CERTIFICATION_ATTR_STATE_ID");
                            tempItem.PKI_FORMFACTOR_ID = rs.getInt("PKI_FORMFACTOR_ID");
                            tempItem.PKI_FORMFACTOR_DESC = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_DESC"));
                            tempItem.EXPIRATION_DT = rs.getString("EXPIRATION_DT");
                            tempItem.EFFECTIVE_DT = rs.getString("EFFECTIVE_DT");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.CREATED_BY = rs.getString("USERNAME_CREATED");
                            tempItem.SERVICE_UUID = EscapeUtils.CheckTextNull(rs.getString("SERVICE_UUID"));
                            tempItem.OPERATED_DT = EscapeUtils.CheckTextNull(rs.getString("OPERATED_DT"));
                            tempItem.SHARED_MODE = rs.getBoolean("SHARED_MODE");
                            tempItem.CROSS_CHECK_ENABLED = rs.getBoolean("CROSS_CHECK_ENABLED");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.CREATED_LOCK_REQUEST_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_LOCK_REQUEST_DT"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_LIST_BY_OWNER">
    public void S_BO_CERTIFICATION_LIST_BY_OWNER(String pBRANCH_LOGIN, String pUSER_LOGIN,
            String pLanguage, CERTIFICATION[][] response, int sPage, int sSum,
            String pENTERPRISE_ID, String pPERSONAL_ID) throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_LIST_BY_OWNER", 7));
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        if (!"".equals(pBRANCH_LOGIN)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pBRANCH_LOGIN));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        if (!"".equals(pUSER_LOGIN)) {
                            proc_stmt.setInt("pCREATED_BY", Integer.parseInt(pUSER_LOGIN));
                        } else {
                            proc_stmt.setString("pCREATED_BY", null);
                        }
                        proc_stmt.setInt("pLANGUAGE", Integer.parseInt(pLanguage));
                        proc_stmt.setInt("pPAGE_NO", sPage);
                        proc_stmt.setInt("pROW_NO", sSum);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_LIST_BY_OWNER", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.CERTIFICATION_STATE_ID = rs.getInt("CERTIFICATION_STATE_ID");
                            tempItem.PAST_CERTIFICATION_ID = rs.getInt("PAST_CERTIFICATION_ID");
                            tempItem.CERTIFICATION_PURPOSE_ID = rs.getInt("CERTIFICATION_PURPOSE_ID");
                            tempItem.CERTIFICATION_ATTR_TYPE_ID = rs.getInt("CERTIFICATION_ATTR_TYPE_ID");
                            tempItem.CERTIFICATION_SN = rs.getString("CERTIFICATION_SN");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            tempItem.DOMAIN_NAME = rs.getString("DOMAIN_NAME");
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.CERTIFICATION_PROFILE_NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.CERTIFICATION_PURPOSE_DESC = rs.getString("CERTIFICATION_PURPOSE_DESC");
                            tempItem.CERTIFICATION_STATE_DESC = rs.getString("CERTIFICATION_STATE_DESC");
                            tempItem.CERTIFICATION_ATTR_STATE_DESC = rs.getString("CERTIFICATION_ATTR_STATE_DESC");
                            tempItem.CERTIFICATION_ATTR_TYPE_DESC = rs.getString("CERTIFICATION_ATTR_TYPE_DESC");
                            tempItem.SERVICE_TYPE_DESC = rs.getString("SERVICE_TYPE_DESC");
                            tempItem.CERTIFICATION_ATTR_STATE_ID = rs.getInt("CERTIFICATION_ATTR_STATE_ID");
                            tempItem.PKI_FORMFACTOR_ID = rs.getInt("PKI_FORMFACTOR_ID");
                            tempItem.PKI_FORMFACTOR_DESC = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_DESC"));
                            tempItem.EXPIRATION_DT = rs.getString("EXPIRATION_DT");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.CREATED_BY = rs.getString("USERNAME_CREATED");
                            tempItem.SHARED_MODE = rs.getBoolean("SHARED_MODE");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_TOTAL_BY_OWNER">
    public int S_BO_CERTIFICATION_TOTAL_BY_OWNER(String pBRANCH_LOGIN, String pUSER_LOGIN, String pENTERPRISE_ID,
        String pPERSONAL_ID) throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_TOTAL_BY_OWNER", 5));
                        if (!"".equals(pBRANCH_LOGIN)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pBRANCH_LOGIN));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        if (!"".equals(pUSER_LOGIN)) {
                            proc_stmt.setInt("pCREATED_BY", Integer.parseInt(pUSER_LOGIN));
                        } else {
                            proc_stmt.setString("pCREATED_BY", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        proc_stmt.registerOutParameter("pCOUNT", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_TOTAL_BY_OWNER", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt("pCOUNT");
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_DETAIL">
    public void S_BO_CERTIFICATION_DETAIL(String pID, String pLanguage, CERTIFICATION[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_DETAIL(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.TOKEN_ID = rs.getInt("TOKEN_ID");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.CITY_PROVINCE_ID = rs.getInt("PROVINCE_ID");
                            tempItem.CERTIFICATION_ATTR_ID = rs.getInt("CERTIFICATION_ATTR_ID");
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.CERTIFICATION = rs.getString("CERTIFICATION");
                            tempItem.CERTIFICATION_PROFILE_ID = rs.getInt("CERTIFICATION_PROFILE_ID");
                            tempItem.CERTIFICATION_STATE_ID = rs.getInt("CERTIFICATION_STATE_ID");
                            tempItem.CERTIFICATION_AUTHORITY_ID = rs.getInt("CERTIFICATION_AUTHORITY_ID");
                            tempItem.CERTIFICATION_STATE_DESC = rs.getString("CERTIFICATION_STATE_DESC");
                            tempItem.CERTIFICATION_ATTR_TYPE_DESC = rs.getString("CERTIFICATION_ATTR_TYPE_DESC");
                            tempItem.CERTIFICATION_ATTR_STATE_DESC = rs.getString("CERTIFICATION_ATTR_STATE_DESC");
                            tempItem.CERTIFICATION_ATTR_STATE_ID = rs.getInt("CERTIFICATION_ATTR_STATE_ID");
                            tempItem.CERTIFICATION_AUTHORITY_DESC = rs.getString("CERTIFICATION_AUTHORITY_DESC");
                            tempItem.CERTIFICATION_PURPOSE_DESC = rs.getString("CERTIFICATION_PURPOSE_DESC");
                            tempItem.CERTIFICATION_PROFILE_DESC = rs.getString("CERTIFICATION_PROFILE_DESC");
                            tempItem.CERTIFICATION_PURPOSE_ID = rs.getInt("CERTIFICATION_PURPOSE_ID");
                            tempItem.CERTIFICATION_ATTR_TYPE_ID = rs.getInt("CERTIFICATION_ATTR_TYPE_ID");
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            tempItem.DOMAIN_NAME = rs.getString("DOMAIN_NAME");
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.SERVICE_UUID = rs.getString("SERVICE_UUID");
                            tempItem.DURATION = rs.getInt("DURATION");
                            tempItem.EMAIL_CONTRACT = rs.getString("EMAIL_CONTRACT");
                            tempItem.PHONE_CONTRACT = rs.getString("PHONE_CONTRACT");
                            tempItem.SUBJECT = rs.getString("SUBJECT");
                            tempItem.ISSUER_SUBJECT = rs.getString("ISSUER_SUBJECT");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.CERTIFICATION_SN = rs.getString("CERTIFICATION_SN");
                            tempItem.CSR = rs.getString("CSR");
                            tempItem.FEE_AMOUNT = rs.getInt("FEE_AMOUNT");
                            tempItem.TOKEN_AMOUNT = rs.getInt("TOKEN_AMOUNT");
                            tempItem.EFFECTIVE_DT = rs.getString("EFFECTIVE_DT");
                            tempItem.VALUE = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_ATTR_VALUE"));
                            tempItem.EXPIRATION_DT = rs.getString("EXPIRATION_DT");
                            tempItem.EXPIRATION_CONTRACT_DT = rs.getString("EXPIRATION_CONTRACT_DT");
                            tempItem.KEY_SIZE = rs.getString("KEY_SIZE");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.CREATED_BY = rs.getString("BENEFICIARIED_BY");
                            tempItem.MODIFIED_DT = rs.getString("MODIFIED_DT");
                            tempItem.MODIFIED_BY = rs.getString("MODIFIED_BY");
                            tempItem.PRINT_EXPIRATION_CONTRACT_DT = rs.getString("PRINT_EXPIRATION_CONTRACT_DT");
                            tempItem.PRINT_EXPIRATION_DT = rs.getString("PRINT_EXPIRATION_DT");
                            tempItem.PRINT_EFFECTIVE_DT = rs.getString("PRINT_EFFECTIVE_DT");
                            tempItem.CUSTOMER_CONFIRMATION = EscapeUtils.CheckTextNull(rs.getString("CUSTOMER_CONFIRMATION"));
                            tempItem.ACTIVATION_CODE = rs.getString("ACTIVATION_CODE");
                            tempItem.ACTIVATION_EXPIRATION_DT = rs.getString("ACTIVATION_EXPIRATION_DT");
                            tempItem.COMMENT = rs.getString("COMMENT");
                            tempItem.PROPERTIES = rs.getString("PROPERTIES");
                            tempItem.CREATED_BY_ID = rs.getInt("BENEFICIARIED_BY_ID");
                            tempItem.PRIVATE_KEY_ENABLED = rs.getBoolean("PRIVATE_KEY_ENABLED");
                            tempItem.PRIVATE_KEY = EscapeUtils.CheckTextNull(rs.getString("PRIVATE_KEY"));
                            tempItem.RELEASE_DT = EscapeUtils.CheckTextNull(rs.getString("RELEASE_DT"));
                            tempItem.CERTIFICATION_OWNER_ID = rs.getInt("CERTIFICATION_OWNER_ID");
                            tempItem.PKI_FORMFACTOR_ID = rs.getInt("PKI_FORMFACTOR_ID");
                            tempItem.PKI_FORMFACTOR_DESC = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_DESC"));
                            tempItem.PKI_FORMFACTOR_NAME = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_NAME"));
                            tempItem.DISCOUNT_RATE = rs.getInt("DISCOUNT_RATE");
                            tempItem.CROSS_CHECK_ENABLED = rs.getBoolean("CROSS_CHECK_ENABLED");
                            tempItem.SHARED_MODE = rs.getBoolean("SHARED_MODE");
                            tempItem.RESIGNING_CONFIRMATION_PAPER_ENABLED = EscapeUtils.CheckTextNull(rs.getString("RESIGNING_CONFIRMATION_PAPER_ENABLED"));
                            tempItem.CROSS_CHECKED_DT = EscapeUtils.CheckTextNull(rs.getString("CROSS_CHECKED_DT"));
                            tempItem.ISSUED_DT = EscapeUtils.CheckTextNull(rs.getString("ISSUED_DT"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_REVOKED">
    public String S_BO_CERTIFICATION_REVOKED(int pCERTIFICATION_ATTR_ID, int pFO_DELETE_CERT_WHEN_REVOKE, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_REVOKED(?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ATTR_ID);
                        proc_stmt.setInt(2, pFO_DELETE_CERT_WHEN_REVOKE);
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_REVOKED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_ATTR_TYPE_COMBOBOX">
    public void S_BO_TOKEN_ATTR_TYPE_COMBOBOX(String pLanguage, TOKEN_ATTR_TYPE[][] response)
            throws Exception {
        ArrayList<TOKEN_ATTR_TYPE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_ATTR_TYPE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN_ATTR_TYPE tempItem = new TOKEN_ATTR_TYPE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.REMARK = rs.getString("TOKEN_ATTR_TYPE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN_ATTR_TYPE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_ATTR_STATE_COMBOBOX">
    public void S_BO_TOKEN_ATTR_STATE_COMBOBOX(String pLanguage, TOKEN_ATTR_STATE[][] response)
            throws Exception {
        ArrayList<TOKEN_ATTR_STATE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_ATTR_STATE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN_ATTR_STATE tempItem = new TOKEN_ATTR_STATE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("TOKEN_ATTR_STATE_NAME");
                            tempItem.REMARK = rs.getString("TOKEN_ATTR_STATE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN_ATTR_STATE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CHECK_TAX_CODE">
    public String S_BO_CHECK_TAX_CODE(String pMST)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CHECK_TAX_CODE(?,?) }");
                        proc_stmt.setString(1, pMST);
                        proc_stmt.registerOutParameter(2, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CHECK_TAX_CODE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(2));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CHECK_BUDGET_CODE">
    public String S_BO_CHECK_BUDGET_CODE(String pBUDGET_CODE)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CHECK_BUDGET_CODE(?,?) }");
                        proc_stmt.setString(1, pBUDGET_CODE);
                        proc_stmt.registerOutParameter(2, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CHECK_BUDGET_CODE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(2));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CHECK_DECISION">
    public String S_BO_CHECK_DECISION(String pVALUE)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CHECK_DECISION(?,?) }");
                        proc_stmt.setString(1, pVALUE);
                        proc_stmt.registerOutParameter(2, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(2));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CHECK_ENTERPRISE_ID">
    public String S_BO_CHECK_ENTERPRISE_ID(String pENTERPRISE_ID)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CHECK_ENTERPRISE_ID(?,?) }");
                        proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        proc_stmt.registerOutParameter("pRESULT", java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt("pRESULT"));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CHECK_PERSONAL_ID">
    public String S_BO_CHECK_PERSONAL_ID(String pPERSONAL_ID)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CHECK_PERSONAL_ID(?,?) }");
                        proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        proc_stmt.registerOutParameter("pRESULT", java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt("pRESULT"));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CHECK_P_ID">
    public String S_BO_CHECK_P_ID(String pP_ID)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CHECK_P_ID(?,?) }");
                        proc_stmt.setString(1, pP_ID);
                        proc_stmt.registerOutParameter(2, java.sql.Types.INTEGER);
//                        CommonFunction.LogDebugString(log, "S_BO_CHECK_P_ID", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(2));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CHECK_PASSPORT">
    public String S_BO_CHECK_PASSPORT(String pPASSPORT)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CHECK_PASSPORT(?,?) }");
                        proc_stmt.setString(1, pPASSPORT);
                        proc_stmt.registerOutParameter(2, java.sql.Types.INTEGER);
//                        CommonFunction.LogDebugString(log, "S_BO_CHECK_PASSPORT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(2));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CHECK_P_EID">
    public String S_BO_CHECK_P_EID(String pCCCD)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CHECK_P_EID(?,?) }");
                        proc_stmt.setString(1, pCCCD);
                        proc_stmt.registerOutParameter(2, java.sql.Types.INTEGER);
//                        CommonFunction.LogDebugString(log, "S_BO_CHECK_P_EID", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(2));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_TOTAL_BRANCH">
    public void S_BO_REPORT_TOTAL_BRANCH(String strFrom, String strTo,
        String pAgentID, String pAgentState, String pLANGUAGE, REPORT_QUICK_BRANCH[][] response,
        String sessUserAgentID, String sessTreeArrayBranchID) throws Exception {
        ResultSet rs = null;
        ArrayList<REPORT_QUICK_BRANCH> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_TOTAL_BRANCH(?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pAgentID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pAgentID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setInt(4, Integer.parseInt(pLANGUAGE));
                        if (!"".equals(pAgentState)) {
                            proc_stmt.setInt(5, Integer.parseInt(pAgentState));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(sessUserAgentID)) {
                            if(!Definitions.CONFIG_AGENT_ROOT.equals(sessUserAgentID)) {
                                proc_stmt.setInt(6, Integer.parseInt(sessUserAgentID));
                            } else {
                                proc_stmt.setString(6, null);
                            }
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        proc_stmt.setString(7, sessTreeArrayBranchID);
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_TOTAL_BRANCH", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            REPORT_QUICK_BRANCH tempItem = new REPORT_QUICK_BRANCH();
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.BRANCH_NAME = rs.getString("BRANCH_NAME");
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.TOTAL_INITIALIZED = rs.getInt("TOTAL_INITIALIZED");
                            tempItem.TOTAL_OPERATED = rs.getInt("TOTAL_OPERATED");
                            tempItem.TOTAL_REVOKED = rs.getInt("TOTAL_REVOKED");
                            tempList.add(tempItem);
                        }
                        response[0] = new REPORT_QUICK_BRANCH[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_TOTAL_BRANCH_USER">
    public void S_BO_REPORT_TOTAL_BRANCH_USER(String pFROM_DT, String pTO_DT,
            String pAgentID, REPORT_QUICK_BRANCH[][] response, String sessUserAgentID)
            throws Exception {
        ResultSet rs = null;
        ArrayList<REPORT_QUICK_BRANCH> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_TOTAL_BRANCH_USER(?,?,?,?) }");
                        if(!"".equals(pFROM_DT))
                        {
                            proc_stmt.setString(1, pFROM_DT);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if(!"".equals(pTO_DT))
                        {
                            proc_stmt.setString(2, pTO_DT);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pAgentID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pAgentID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(sessUserAgentID)) {
                            if(!Definitions.CONFIG_AGENT_ROOT.equals(sessUserAgentID)) {
                                proc_stmt.setInt(4, Integer.parseInt(sessUserAgentID));
                            } else {
                                proc_stmt.setString(4, null);
                            }
                        } else {
                            proc_stmt.setString(4, null);
                        }
//                        CommonFunction.LogDebugString(log, "S_BO_REPORT_TOTAL_BRANCH_USER", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            REPORT_QUICK_BRANCH tempItem = new REPORT_QUICK_BRANCH();
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.USER_STATE_ID = rs.getInt("USER_STATE_ID");
                            tempItem.USERNAME = rs.getString("USERNAME");
                            tempItem.CREATED_BY = rs.getInt("CREATED_BY");
                            tempItem.TOTAL_INITIALIZED = rs.getInt("TOTAL_INITIALIZED");
                            tempItem.TOTAL_OPERATED = rs.getInt("TOTAL_OPERATED");
                            tempItem.TOTAL_REVOKED = rs.getInt("TOTAL_REVOKED");
                            tempList.add(tempItem);
                        }
                        response[0] = new REPORT_QUICK_BRANCH[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_TOTAL_BRANCH_USER_LIST">
    public void S_BO_REPORT_TOTAL_BRANCH_USER_LIST(String pFROM_DT, String pTO_DT,
            String pAgentID, String pCREATED_BY, String pCERTIFICATION_STATE_ID,
            String pLANGUAGE, CERTIFICATION[][] response, String sessUserAgentID)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_TOTAL_BRANCH_USER_LIST(?,?,?,?,?,?,?) }");
                        if(!"".equals(pFROM_DT)){
                            proc_stmt.setString(1, pFROM_DT);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if(!"".equals(pTO_DT)){
                            proc_stmt.setString(2, pTO_DT);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pAgentID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pAgentID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pCREATED_BY)) {
                            proc_stmt.setInt(4, Integer.parseInt(pCREATED_BY));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pCERTIFICATION_STATE_ID)) {
                            proc_stmt.setInt(5, Integer.parseInt(pCERTIFICATION_STATE_ID));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.setInt(6, Integer.parseInt(pLANGUAGE));
                        if (!"".equals(sessUserAgentID)) {
                            if(!Definitions.CONFIG_AGENT_ROOT.equals(sessUserAgentID)) {
                                proc_stmt.setInt(7, Integer.parseInt(sessUserAgentID));
                            } else {
                                proc_stmt.setString(7, null);
                            }
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_TOTAL_BRANCH_USER_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.CERTIFICATION_PROFILE_DESC = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.CERTIFICATION_PURPOSE_DESC = rs.getString("CERTIFICATION_PURPOSE_DESC");
                            tempItem.CERTIFICATION_STATE_DESC = rs.getString("CERTIFICATION_STATE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_GET_USER_BRANCH">
    public void S_BO_GET_USER_BRANCH(String pBRANCH_ID, BACKOFFICE_USER[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<BACKOFFICE_USER> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GET_USER_BRANCH(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BACKOFFICE_USER tempItem = new BACKOFFICE_USER();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ROLE_ID = rs.getInt("ROLE_ID");
                            tempItem.USERNAME = rs.getString("USERNAME");
                            tempItem.FULL_NAME = rs.getString("FULL_NAME");
                            tempList.add(tempItem);
                        }
                        response[0] = new BACKOFFICE_USER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
//                        response[0] = new BACKOFFICE_USER[tempList.size()];
//                        response[0] = (BACKOFFICE_USER[]) tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_GET_USER_BRANCH_ALL">
    public void S_BO_GET_USER_BRANCH_ALL(String pBRANCH_ID, BACKOFFICE_USER[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<BACKOFFICE_USER> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GET_USER_BRANCH_ALL(?) }");
                        if(!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BACKOFFICE_USER tempItem = new BACKOFFICE_USER();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ROLE_ID = rs.getInt("ROLE_ID");
                            tempItem.USERNAME = rs.getString("USERNAME");
                            tempItem.FULL_NAME = rs.getString("FULL_NAME");
                            tempList.add(tempItem);
                        }
                        response[0] = new BACKOFFICE_USER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
//                        response[0] = new BACKOFFICE_USER[tempList.size()];
//                        response[0] = (BACKOFFICE_USER[]) tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_ACCESS_PROFILE">
    public void S_BO_USER_ACCESS_PROFILE(String pBRANCH_ID, int pIS_AUTO, int pLANGUAGE, BACKOFFICE_USER[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<BACKOFFICE_USER> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_ACCESS_PROFILE(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        proc_stmt.setInt(2, pIS_AUTO);
                        proc_stmt.setInt(3, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BACKOFFICE_USER tempItem = new BACKOFFICE_USER();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.USERNAME = EscapeUtils.CheckTextNull(rs.getString("USERNAME"));
                            tempItem.FULL_NAME = EscapeUtils.CheckTextNull(rs.getString("FULL_NAME"));
                            tempItem.BRANCH_REMARK = EscapeUtils.CheckTextNull(rs.getString("BRANCH_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new BACKOFFICE_USER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_TOTAL_CERTIFICATION_BY_USER">
    public int S_BO_TOTAL_CERTIFICATION_BY_USER(String strID)
            throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOTAL_CERTIFICATION_BY_USER(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(strID));
                        proc_stmt.registerOutParameter(2, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOTAL_CERTIFICATION_BY_USER", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(2);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_CANCEL">
    public int S_BO_USER_CANCEL(String pUSER_ID, String pUSERNAME_BY)
            throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_CANCEL(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pUSER_ID));
                        proc_stmt.setString(2, pUSERNAME_BY);
                        proc_stmt.registerOutParameter(3, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_USER_CANCEL", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(3);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_CHANGE_CREATED_BY">
    public int S_BO_CERTIFICATION_CHANGE_CREATED_BY(String pCREATED_BY_FROM, String pCREATED_BY_TO,
            String pBRANCH_TO, String pUSERNAME_BY)
            throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_CHANGE_CREATED_BY(?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCREATED_BY_FROM));
                        proc_stmt.setInt(2, Integer.parseInt(pCREATED_BY_TO));
                        proc_stmt.setInt(3, Integer.parseInt(pBRANCH_TO));
                        proc_stmt.setString(4, pUSERNAME_BY);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_CHANGE_CREATED_BY", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(5);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_GET_USER_FORGOT_MAIL">
    public void S_BO_GET_USER_FORGOT_MAIL(String strUserName, BACKOFFICE_USER[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<BACKOFFICE_USER> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GET_USER_FORGOT_MAIL(?) }");
                        proc_stmt.setString(1, strUserName);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BACKOFFICE_USER tempItem = new BACKOFFICE_USER();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.EMAIL = rs.getString("EMAIL");
                            tempList.add(tempItem);
                        }
                        response[0] = new BACKOFFICE_USER[tempList.size()];
                        response[0] = (BACKOFFICE_USER[]) tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_PAYMENT_REPORT_PER_MONTH">
    public void S_BO_PAYMENT_REPORT_PER_MONTH(String pMONTH, String pYEAR,
            String pAgentID, String pLANGUAGE, PAYMENT[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<PAYMENT> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PAYMENT_REPORT_PER_MONTH(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pMONTH));
                        proc_stmt.setInt(2, Integer.parseInt(pYEAR));
                        if (!"".equals(pAgentID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pAgentID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setInt(4, Integer.parseInt(pLANGUAGE));
                        CommonFunction.LogDebugString(log, "S_BO_PAYMENT_REPORT_PER_MONTH", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            PAYMENT tempItem = new PAYMENT();
                            tempItem.PAYMENT_ID = rs.getInt("PAYMENT_ID");
                            tempItem.PAYMENT_TYPE_ID = rs.getInt("PAYMENT_TYPE_ID");
                            tempItem.PAYMENT_TYPE_REMARK = rs.getString("PAYMENT_TYPE_DESC");
                            tempItem.AMOUNT = rs.getDouble("AMOUNT");
                            tempItem.PAYMENT_ENABLED = rs.getInt("PAYMENT_ENABLED");
                            tempItem.NOTE = rs.getString("NOTE");
                            tempList.add(tempItem);
                        }
                        response[0] = new PAYMENT[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_PAYMENT_INSERT">
    public String S_BO_PAYMENT_INSERT(int pPAYMENT_TYPE_ID, String pBRANCH_ID, String pBANK_PROPERTIES,
            String pDESCRIPTION_PROPERTIES, String pAMOUNT, String pMONTH, String pYEAR,
            String pNOTE, String pUSER_BY) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PAYMENT_INSERT(?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pPAYMENT_TYPE_ID);
                        proc_stmt.setInt(2, Integer.parseInt(pBRANCH_ID));
                        if (!"".equals(pBANK_PROPERTIES)) {
                            proc_stmt.setString(3, pBANK_PROPERTIES);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pDESCRIPTION_PROPERTIES)) {
                            proc_stmt.setString(4, pDESCRIPTION_PROPERTIES);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pAMOUNT)) {
                            proc_stmt.setDouble(5, Double.parseDouble(pAMOUNT));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pMONTH)) {
                            proc_stmt.setInt(6, Integer.parseInt(pMONTH));
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pYEAR)) {
                            proc_stmt.setInt(7, Integer.parseInt(pYEAR));
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        proc_stmt.setString(8, pNOTE);
                        proc_stmt.setString(9, pUSER_BY);
                        proc_stmt.registerOutParameter(10, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_PAYMENT_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(10));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_PAYMENT_UPDATE">
    public String S_BO_PAYMENT_UPDATE(int pPAYMENT_ID, int pPAYMENT_TYPE_ID, String pBRANCH_ID, String pBANK_PROPERTIES,
            String pDESCRIPTION_PROPERTIES, String pAMOUNT, String pMONTH, String pYEAR,
            String pNOTE, String pUSER_BY) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PAYMENT_UPDATE(?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pPAYMENT_ID);
                        proc_stmt.setInt(2, pPAYMENT_TYPE_ID);
                        proc_stmt.setInt(3, Integer.parseInt(pBRANCH_ID));
                        if (!"".equals(pBANK_PROPERTIES)) {
                            proc_stmt.setString(4, pBANK_PROPERTIES);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pDESCRIPTION_PROPERTIES)) {
                            proc_stmt.setString(5, pDESCRIPTION_PROPERTIES);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pAMOUNT)) {
                            proc_stmt.setDouble(6, Double.parseDouble(pAMOUNT));
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pMONTH)) {
                            proc_stmt.setInt(7, Integer.parseInt(pMONTH));
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pYEAR)) {
                            proc_stmt.setInt(8, Integer.parseInt(pYEAR));
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        proc_stmt.setString(9, pNOTE);
                        proc_stmt.setString(10, pUSER_BY);
                        proc_stmt.registerOutParameter(11, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_PAYMENT_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(11));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_PAYMENT_REPORT_PER_MONTH">
    public int S_BO_REPORT_PER_MONTH_TOTAL(String pMONTH, String pYEAR, String pAgentID,
            String pUSER, String pFORMFACTOR, String sessUserAgentID)
            throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_PER_MONTH_TOTAL(?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pMONTH));
                        proc_stmt.setInt(2, Integer.parseInt(pYEAR));
                        if (!"".equals(pAgentID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pAgentID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pUSER)) {
                            proc_stmt.setInt(4, Integer.parseInt(pUSER));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pFORMFACTOR)) {
                            proc_stmt.setInt(5, Integer.parseInt(pFORMFACTOR));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(sessUserAgentID)) {
                            if(!Definitions.CONFIG_AGENT_ROOT.equals(sessUserAgentID)) {
                                proc_stmt.setInt(6, Integer.parseInt(sessUserAgentID));
                            } else {
                                proc_stmt.setString(6, null);
                            }
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_PER_MONTH_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(7);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_PER_MONTH_LIST">
    public void S_BO_REPORT_PER_MONTH_LIST(String pMONTH, String pYEAR,
            String pBRANCH_ID, String pUSER, String pFORMFACTOR, String pLANGUAGE, REPORT_PER_MONTH[][] response,
            int sPage, int sSum, String sessUserAgentID)
            throws Exception {
        ResultSet rs = null;
        ArrayList<REPORT_PER_MONTH> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_PER_MONTH_LIST(?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pMONTH));
                        proc_stmt.setInt(2, Integer.parseInt(pYEAR));
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pUSER)) {
                            proc_stmt.setInt(4, Integer.parseInt(pUSER));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pFORMFACTOR)) {
                            proc_stmt.setInt(5, Integer.parseInt(pFORMFACTOR));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.setInt(6, Integer.parseInt(pLANGUAGE));
                        proc_stmt.setInt(7, sPage);
                        proc_stmt.setInt(8, sSum);
                        if (!"".equals(sessUserAgentID)) {
                            if(!Definitions.CONFIG_AGENT_ROOT.equals(sessUserAgentID)) {
                                proc_stmt.setInt(9, Integer.parseInt(sessUserAgentID));
                            } else {
                                proc_stmt.setString(9, null);
                            }
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_PER_MONTH_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            REPORT_PER_MONTH tempItem = new REPORT_PER_MONTH();
                            tempItem.BRANCH_NAME = rs.getString("BRANCH_NAME");
                            tempItem.USERNAME_CREATED = rs.getString("USERNAME_CREATED");
                            tempItem.CERTIFICATION_STATE_NAME = rs.getString("CERTIFICATION_STATE_NAME");
                            tempItem.CERTIFICATION_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_STATE_DESC"));
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            if(!"".equals(sENTERPRISE_ID)) {
                                String prefixMST = Definitions.CONFIG_CERTIFICATION_PREFIX_TAXCODE;
                                if(sENTERPRISE_ID.split(":")[0].equals(prefixMST)) {
                                    tempItem.TAX_CODE = sENTERPRISE_ID.replace(prefixMST+":", "").trim();
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.TAX_CODE))) {
                                    String prefixMNS = Definitions.CONFIG_CERTIFICATION_PREFIX_BUDGET_CODE;
                                    if(sENTERPRISE_ID.split(":")[0].equals(prefixMNS)) {
                                        tempItem.TAX_CODE = sENTERPRISE_ID.replace(prefixMNS+":", "").trim();
                                    }
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.BUDGET_CODE))) {
                                    String prefixGD = Definitions.CONFIG_CERTIFICATION_PREFIX_DECISION;
                                    if(sENTERPRISE_ID.split(":")[0].equals(prefixGD)) {
                                        tempItem.TAX_CODE = sENTERPRISE_ID.replace(prefixGD + ":", "").trim();
                                    }
                                }
                            }
                            if(!"".equals(sPERSONAL_ID)) {
                                String prefixPID = Definitions.CONFIG_CERTIFICATION_PREFIX_PERSONAL_CODE;
                                if(sPERSONAL_ID.split(":")[0].equals(prefixPID)) {
                                    tempItem.P_ID = sPERSONAL_ID.replace(prefixPID + ":", "").trim();
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.P_ID))) {
                                    String prefixHC = Definitions.CONFIG_CERTIFICATION_PREFIX_PASSPORT;
                                    if(sPERSONAL_ID.split(":")[0].equals(prefixHC)) {
                                        tempItem.P_ID = sPERSONAL_ID.replace(prefixHC + ":", "").trim();
                                    }
                                    if("".equals(EscapeUtils.CheckTextNull(tempItem.PASSPORT))) {
                                        String prefixCCCD = Definitions.CONFIG_CERTIFICATION_PREFIX_CITIZEN_CODE;
                                        if(sPERSONAL_ID.split(":")[0].equals(prefixCCCD)) {
                                            tempItem.P_ID = sPERSONAL_ID.replace(prefixCCCD + ":", "").trim();
                                        }
                                    }
                                }
                            }
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.PROVINCE_NAME = rs.getString("PROVINCE_NAME");
                            tempItem.CERTIFICATION_PROFILE_NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.CERTIFICATION_ATTR_TYPE_DESC = rs.getString("CERTIFICATION_ATTR_TYPE_DESC");
                            tempItem.FORM_FACTOR_DESC = rs.getString("FORM_FACTOR_DESC");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.REVOKED_DT = EscapeUtils.CheckTextNull(rs.getString("REVOKED_DT"));
                            tempItem.EFFECTIVE_DT = EscapeUtils.CheckTextNull(rs.getString("EFFECTIVE_DT"));
                            tempItem.EXPIRATION_DT = EscapeUtils.CheckTextNull(rs.getString("EXPIRATION_DT"));
                            tempItem.NUMBER_DELETED = rs.getString("NUMBER_DELETED");
                            tempItem.GENERATED_DT = rs.getString("OPERATED_DT");
                            tempItem.SERVICE_UUID = rs.getString("SERVICE_UUID");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.CERTIFICATION_SN = rs.getString("CERTIFICATION_SN");
                            tempItem.CERTIFICATION_PURPOSE_ID = rs.getInt("CERTIFICATION_PURPOSE_ID");
                            tempList.add(tempItem);
                        }
                        response[0] = new REPORT_PER_MONTH[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_PER_MONTH_SS_TOTAL">
    public int S_BO_REPORT_PER_MONTH_SS_TOTAL(String pMONTH, String pYEAR,
            String pAgentID, String pUSER)
            throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_PER_MONTH_SS_TOTAL(?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pMONTH));
                        proc_stmt.setInt(2, Integer.parseInt(pYEAR));
                        if (!"".equals(pAgentID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pAgentID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pUSER)) {
                            proc_stmt.setInt(4, Integer.parseInt(pUSER));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_PER_MONTH_SS_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(5);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_PER_MONTH_SS_LIST - CANCEL">
    public void S_BO_REPORT_PER_MONTH_SS_LIST(String pMONTH, String pYEAR,
            String pBRANCH_ID, String pUSER, String pLANGUAGE, REPORT_PER_MONTH[][] response, int sPage, int sSum)
            throws Exception {
        ResultSet rs = null;
        ArrayList<REPORT_PER_MONTH> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_PER_MONTH_SS_LIST(?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pMONTH));
                        proc_stmt.setInt(2, Integer.parseInt(pYEAR));
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pUSER)) {
                            proc_stmt.setInt(4, Integer.parseInt(pUSER));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.setInt(5, Integer.parseInt(pLANGUAGE));
                        proc_stmt.setInt(6, sPage);
                        proc_stmt.setInt(7, sSum);
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_PER_MONTH_SS_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            REPORT_PER_MONTH tempItem = new REPORT_PER_MONTH();
                            tempItem.BRANCH_NAME = rs.getString("BRANCH_NAME");
                            tempItem.USERNAME_CREATED = rs.getString("USERNAME_CREATED");
                            tempItem.CERTIFICATION_STATE_NAME = rs.getString("CERTIFICATION_STATE_NAME");
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            tempItem.TAX_CODE = rs.getString("TAX_CODE");
                            tempItem.P_ID = rs.getString("P_ID");
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.PROVINCE_NAME = rs.getString("PROVINCE_NAME");
                            tempItem.CERTIFICATION_PROFILE_NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.CERTIFICATION_ATTR_TYPE_DESC = rs.getString("CERTIFICATION_ATTR_TYPE_DESC");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.REVOKED_DT = rs.getString("REVOKED_DT");
                            tempItem.NUMBER_DELETED = rs.getString("NUMBER_DELETED");
                            tempItem.GENERATED_DT = rs.getString("GENERATED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new REPORT_PER_MONTH[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_SYSTEM_LOG_LIST">
    public void S_BO_SYSTEM_LOG_LIST(String strFrom, String strTo,
            String pFUNCTIONALITY_ID, String pRESPONSE_CODE_ID, String sBILLCODE,
            String pLanguage, SYSTEM_LOG[][] response, int sPage, int sSum)
            throws Exception {
        ResultSet rs = null;
        ArrayList<SYSTEM_LOG> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_SYSTEM_LOG_LIST(?,?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pFUNCTIONALITY_ID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pFUNCTIONALITY_ID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pRESPONSE_CODE_ID)) {
                            proc_stmt.setInt(4, Integer.parseInt(pRESPONSE_CODE_ID));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.setInt(5, Integer.parseInt(pLanguage));
                        proc_stmt.setInt(6, sPage);
                        proc_stmt.setInt(7, sSum);
                        if (!"".equals(sBILLCODE)) {
                            proc_stmt.setString(8, sBILLCODE);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_SYSTEM_LOG_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            SYSTEM_LOG tempItem = new SYSTEM_LOG();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.RESPONSE_CODE_DESC = rs.getString("RESPONSE_CODE_DESC");
//                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.FUNCTIONALITY_DESC = rs.getString("FUNCTIONALITY_DESC");
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.CREATED_BY = rs.getString("USERNAME_CREATED");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempItem.FUNCTIONALITY_NAME = EscapeUtils.CheckTextNull(rs.getString("FUNCTIONALITY_NAME"));
                            tempItem.BILLCODE = EscapeUtils.CheckTextNull(rs.getString("BILLCODE"));
                            tempList.add(tempItem);
                        }
                        response[0] = new SYSTEM_LOG[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_SYSTEM_LOG_TOTAL">
    public int S_BO_SYSTEM_LOG_TOTAL(String strFrom, String strTo,
            String pFUNCTIONALITY_ID, String pRESPONSE_CODE_ID, String sBILLCODE) throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_SYSTEM_LOG_TOTAL(?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pFUNCTIONALITY_ID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pFUNCTIONALITY_ID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pRESPONSE_CODE_ID)) {
                            proc_stmt.setInt(4, Integer.parseInt(pRESPONSE_CODE_ID));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(sBILLCODE)) {
                            proc_stmt.setString(5, sBILLCODE);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_SYSTEM_LOG_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(6);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_SYSTEM_LOG_DETAIL">
    public void S_BO_SYSTEM_LOG_DETAIL(String pID, String pLanguage, SYSTEM_LOG[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<SYSTEM_LOG> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_SYSTEM_LOG_DETAIL(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        CommonFunction.LogDebugString(log, "S_BO_SYSTEM_LOG_DETAIL", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            SYSTEM_LOG tempItem = new SYSTEM_LOG();
                            tempItem.ID = rs.getInt("ID");
//                            tempItem.SOURCE_ENTITY_ID = rs.getInt("SOURCE_ENTITY_ID");
                            tempItem.SOURCE_ENTITY_DESC = rs.getString("SOURCE_ENTITY_DESC");
                            tempItem.DESTINATION_ENTITY_DESC = rs.getString("DESTINATION_ENTITY_DESC");
//                            tempItem.DESTINATION_ENTITY_ID = rs.getInt("DESTINATION_ENTITY_ID");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.REQUEST_IP = rs.getString("REQUEST_IP");
                            tempItem.REQUEST_DATA = rs.getString("REQUEST_DATA");
                            tempItem.RESPONSE_DATA = rs.getString("RESPONSE_DATA");
                            tempItem.BILLCODE = rs.getString("BILLCODE");
                            tempItem.RESPONSE_CODE_DESC = rs.getString("RESPONSE_CODE_DESC");
                            tempItem.FUNCTIONALITY_DESC = rs.getString("FUNCTIONALITY_DESC");
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.CREATED_BY = rs.getString("USERNAME_CREATED");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new SYSTEM_LOG[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_SYSTEM_LOG_BY_BILLCODE">
    public void S_BO_SYSTEM_LOG_BY_BILLCODE(String pBillCode, int pLanguage, SYSTEM_LOG[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<SYSTEM_LOG> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_SYSTEM_LOG_BY_BILLCODE(?,?) }");
                        proc_stmt.setString(1, pBillCode);
                        proc_stmt.setInt(2, pLanguage);
                        CommonFunction.LogDebugString(log, "S_BO_SYSTEM_LOG_BY_BILLCODE", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            SYSTEM_LOG tempItem = new SYSTEM_LOG();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.REQUEST_IP = rs.getString("REQUEST_IP");
                            tempItem.REQUEST_DATA = rs.getString("REQUEST_DATA");
                            tempItem.RESPONSE_DATA = rs.getString("RESPONSE_DATA");
                            tempItem.BILLCODE = rs.getString("BILLCODE");
//                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.CREATED_BY = rs.getString("USERNAME_CREATED");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new SYSTEM_LOG[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    // REPORT NEAC
    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_NEAC_LIST">
    public void S_BO_REPORT_NEAC_LIST(String pQUARTER, String pYEAR, REPORT_CONTROL_NEAC[][] response)
        throws Exception {
        ResultSet rs = null;
        ArrayList<REPORT_CONTROL_NEAC> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_NEAC_LIST(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pQUARTER));
                        proc_stmt.setInt(2, Integer.parseInt(pYEAR));
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_NEAC_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            REPORT_CONTROL_NEAC tempItem = new REPORT_CONTROL_NEAC();
                            tempItem.TOTAL_STAFF = rs.getInt("TOTAL_STAFF");
                            tempItem.TOTAL_PERSONAL = rs.getInt("TOTAL_PERSONAL");
                            tempItem.TOTAL_ENTERPRISE = rs.getInt("TOTAL_ENTERPRISE");
                            tempItem.TO_DATE = rs.getString("REPORT_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new REPORT_CONTROL_NEAC[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_NEAC_DETAIL">
    public void S_BO_REPORT_NEAC_DETAIL(String pQUARTER, String pYEAR, int pOFFSET, int pLANGUAGE, CERTIFICATION[][] response)
        throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_NEAC_DETAIL(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pQUARTER));
                        proc_stmt.setInt(2, Integer.parseInt(pYEAR));
                        proc_stmt.setInt(3, pOFFSET);
                        proc_stmt.setInt(4, pLANGUAGE);
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_NEAC_DETAIL", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.COMPANY_NAME = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            tempItem.PERSONAL_NAME = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.PERSONAL_NAME = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.DOMAIN_NAME = EscapeUtils.CheckTextNull(rs.getString("DOMAIN_NAME"));
                            tempItem.PKI_FORMFACTOR_DESC = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_DESC"));
                            tempItem.CERTIFICATION_PURPOSE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PURPOSE_DESC"));
                            tempItem.CERTIFICATION_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempItem.CERTIFICATION_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_STATE_DESC"));
                            tempItem.CERTIFICATION_ATTR_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("SERVICE_TYPE_DESC"));
                            tempItem.CREATED_BY = EscapeUtils.CheckTextNull(rs.getString("USERNAME_CREATED"));
                            tempItem.BRANCH_DESC = EscapeUtils.CheckTextNull(rs.getString("BRANCH_DESC"));
                            tempItem.CREATED_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_DT"));
                            tempItem.REVOKED_DT = EscapeUtils.CheckTextNull(rs.getString("REVOKED_DT"));
                            tempItem.EFFECTIVE_DT = EscapeUtils.CheckTextNull(rs.getString("EFFECTIVE_DT"));
                            tempItem.CERTIFICATION_SN = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_SN"));
                            tempItem.TOKEN_SN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_PERIODIC_LIST">
    public void S_BO_REPORT_PERIODIC_LIST(String pQUARTER, String pYEAR,String pLANGUAGE, REPORT_RECURRING_NEAC[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<REPORT_RECURRING_NEAC> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_PERIODIC_LIST(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pQUARTER));
                        proc_stmt.setInt(2, Integer.parseInt(pYEAR));
                        proc_stmt.setInt(3, Integer.parseInt(pLANGUAGE));
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_PERIODIC_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            REPORT_RECURRING_NEAC tempItem = new REPORT_RECURRING_NEAC();
                            tempItem.TOTAL_STAFF = rs.getInt("TOTAL_STAFF");
                            tempItem.TOTAL_PERSONAL = rs.getInt("TOTAL_PERSONAL");
                            tempItem.TOTAL_ENTERPRISE = rs.getInt("TOTAL_ENTERPRISE");
                            tempItem.STATUS = rs.getString("CERTIFICATE_STATE_DESC");
                            int sSUM = tempItem.TOTAL_STAFF + tempItem.TOTAL_PERSONAL + tempItem.TOTAL_ENTERPRISE;
                            tempItem.STATUS_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_STATE_NAME"));
                            tempItem.SUM = sSUM;
                            tempList.add(tempItem);
                        }
                        response[0] = new REPORT_RECURRING_NEAC[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_PERIODIC_LIST">
    public void S_BO_REPORT_PERIODIC_EXPORT(String pQUARTER, String pYEAR, String pCERTIFICATION_STATE_NAME,
        String pLANGUAGE, REPORT_RECURRING_NEAC[][] response) throws Exception {
        ResultSet rs = null;
        ArrayList<REPORT_RECURRING_NEAC> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_PERIODIC_EXPORT(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pQUARTER));
                        proc_stmt.setInt(2, Integer.parseInt(pYEAR));
                        proc_stmt.setString(3, pCERTIFICATION_STATE_NAME);
                        proc_stmt.setInt(4, Integer.parseInt(pLANGUAGE));
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_PERIODIC_EXPORT", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            REPORT_RECURRING_NEAC tempItem = new REPORT_RECURRING_NEAC();
                            tempItem.TOTAL_STAFF = rs.getInt("TOTAL_STAFF");
                            tempItem.TOTAL_PERSONAL = rs.getInt("TOTAL_PERSONAL");
                            tempItem.TOTAL_ENTERPRISE = rs.getInt("TOTAL_ENTERPRISE");
//                            tempItem.STATUS = rs.getString("CERTIFICATE_STATE_DESC");
                            int sSUM = tempItem.TOTAL_STAFF + tempItem.TOTAL_PERSONAL + tempItem.TOTAL_ENTERPRISE;
//                            tempItem.STATUS_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_STATE_NAME"));
                            tempItem.CONTENT = EscapeUtils.CheckTextNull(rs.getString("REPORT_DESC"));
                            tempItem.SUM = sSUM;
                            tempList.add(tempItem);
                        }
                        response[0] = new REPORT_RECURRING_NEAC[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_PERIODIC_DETAIL">
    public void S_BO_REPORT_PERIODIC_DETAIL(String pQUARTER, String pYEAR, String pCERTIFICATION_PURPOSE_NAME,
            String pCERTIFICATION_STATE_NAME, String pLANGUAGE, CERTIFICATION[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_PERIODIC_DETAIL(?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pQUARTER));
                        proc_stmt.setInt(2, Integer.parseInt(pYEAR));
                        proc_stmt.setString(3, pCERTIFICATION_PURPOSE_NAME);
                        proc_stmt.setString(4, pCERTIFICATION_STATE_NAME);
                        proc_stmt.setInt(5, Integer.parseInt(pLANGUAGE));
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_PERIODIC_DETAIL", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.COMPANY_NAME = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            tempItem.PERSONAL_NAME = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.DOMAIN_NAME = EscapeUtils.CheckTextNull(rs.getString("DOMAIN_NAME"));
                            tempItem.PKI_FORMFACTOR_DESC = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_DESC"));
                            tempItem.CERTIFICATION_PURPOSE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PURPOSE_DESC"));
                            tempItem.CERTIFICATION_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempItem.CERTIFICATION_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_STATE_DESC"));
                            tempItem.CERTIFICATION_ATTR_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("SERVICE_TYPE_DESC"));
                            tempItem.CREATED_BY = EscapeUtils.CheckTextNull(rs.getString("USERNAME_CREATED"));
                            tempItem.BRANCH_DESC = EscapeUtils.CheckTextNull(rs.getString("BRANCH_DESC"));
                            tempItem.CREATED_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_DT"));
                            tempItem.REVOKED_DT = EscapeUtils.CheckTextNull(rs.getString("REVOKED_DT"));
                            tempItem.EFFECTIVE_DT = EscapeUtils.CheckTextNull(rs.getString("EFFECTIVE_DT"));
                            tempItem.CERTIFICATION_SN = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_SN"));
                            tempItem.TOKEN_SN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CHECK_ARLAM_CERTIFICATION">
    public String S_BO_CHECK_ARLAM_CERTIFICATION(int pCERTIFICATION_PURPOSE_ID, String pTAX_CODE, String pP_ID,
            String pMNS, String pDECISION, String pHC, String pCCCD, String pPKI_FORMFACTOR_ID, String pENTERPRISE_ID, String pPERSONAL_ID)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CHECK_ARLAM_CERTIFICATION", 5));
                        proc_stmt.setInt("pCERTIFICATION_PURPOSE_ID", pCERTIFICATION_PURPOSE_ID);
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        if (!"".equals(pPKI_FORMFACTOR_ID)) {
                            proc_stmt.setInt("pPKI_FORMFACTOR_ID", Integer.parseInt(pPKI_FORMFACTOR_ID));
                        } else {
                            proc_stmt.setString("pPKI_FORMFACTOR_ID", null);
                        }
                        proc_stmt.registerOutParameter("pRESULT", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CHECK_ARLAM_CERTIFICATION", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt("pRESULT"));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_GET_ALGORITHM_KEY_SIZE">
    public void S_BO_GET_ALGORITHM_KEY_SIZE(String pCERTIFICATION_PROFILE_ID, CERTIFICATION[][] response)
        throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GET_ALGORITHM_KEY_SIZE(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_PROFILE_ID));
                        CommonFunction.LogDebugString(log, "S_BO_GET_ALGORITHM_KEY_SIZE", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.KEY_SIZE = rs.getString("KEY_SIZE");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_GET_ALGORITHM_KEY_SIZE_BY_CODE">
    public void S_BO_GET_ALGORITHM_KEY_SIZE_BY_CODE(String pCERTIFICATION_PROFILE_CODE, CERTIFICATION[][] response)
        throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GET_ALGORITHM_KEY_SIZE_BY_CODE(?) }");
                        proc_stmt.setString(1, pCERTIFICATION_PROFILE_CODE);
                        CommonFunction.LogDebugString(log, "S_BO_GET_ALGORITHM_KEY_SIZE_BY_CODE", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.KEY_SIZE = rs.getString("KEY_SIZE");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_GET_CERTIFICATION_OPERATION - CANCEL">
    public void S_BO_GET_CERTIFICATION_OPERATION(String pCERTIFICATION_PURPOSE_NAME, String pTAX_CODE,
            String pBUDGET_CODE, String pP_ID, String pPASSPORT, CERTIFICATION[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_GET_CERTIFICATION_OPERATION(?,?,?,?,?) }");
                        proc_stmt.setString(1, pCERTIFICATION_PURPOSE_NAME);
                        if(!"".equals(pTAX_CODE))
                        {
                            proc_stmt.setString(2, pTAX_CODE);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if(!"".equals(pBUDGET_CODE))
                        {
                            proc_stmt.setString(3, pBUDGET_CODE);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if(!"".equals(pP_ID))
                        {
                            proc_stmt.setString(4, pP_ID);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if(!"".equals(pPASSPORT))
                        {
                            proc_stmt.setString(5, pPASSPORT);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_GET_CERTIFICATION_OPERATION", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.CERTIFICATION_PURPOSE_DESC = rs.getString("CERTIFICATION_PURPOSE_NAME");
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.TAX_CODE = rs.getString("TAX_CODE");
                            tempItem.P_ID = rs.getString("P_ID");
                            tempItem.BUDGET_CODE = rs.getString("BUDGET_CODE");
                            tempItem.PASSPORT = rs.getString("PASSPORT");
                            tempItem.EFFECTIVE_DT = rs.getString("EFFECTIVE_DT");
                            tempItem.EXPIRATION_DT = rs.getString("EXPIRATION_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_FILE_MANAGER_INSERT">
    public String S_BO_FILE_MANAGER_INSERT(String pFILE_PROFILE_NAME, String pUUID, String pDMS_PROPERTIES,
            String pMIME_TYPE_NAME, String pFILE_NAME, int pFILE_SIZE, String pCERTIFICATION_ID, String pUSER_BY,
            int[] pFILE_MANAGER_ID)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FILE_MANAGER_INSERT(?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pFILE_PROFILE_NAME);
                        if (!"".equals(pUUID)) {
                            proc_stmt.setString(2, pUUID);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pDMS_PROPERTIES)) {
                            proc_stmt.setString(3, pDMS_PROPERTIES);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pMIME_TYPE_NAME)) {
                            proc_stmt.setString(4, pMIME_TYPE_NAME);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pFILE_NAME)) {
                            proc_stmt.setString(5, pFILE_NAME);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.setInt(6, pFILE_SIZE);
                        proc_stmt.setInt(7, Integer.parseInt(pCERTIFICATION_ID));
                        proc_stmt.setString(8, pUSER_BY);
                        proc_stmt.registerOutParameter(9, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(10, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_FILE_MANAGER_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(9));
                        pFILE_MANAGER_ID[0] = proc_stmt.getInt(10);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_FILE_MANAGER_GET_BY_CERTIFICATION">
    public void S_BO_FILE_MANAGER_GET_BY_CERTIFICATION(String pCERTIFICATION_ID, String pLANGUAGE, FILE_MANAGER[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<FILE_MANAGER> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FILE_MANAGER_GET_BY_CERTIFICATION(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pLANGUAGE));
                        CommonFunction.LogDebugString(log, "S_BO_FILE_MANAGER_GET_BY_CERTIFICATION", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            FILE_MANAGER tempItem = new FILE_MANAGER();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.FILE_NAME = EscapeUtils.CheckTextNull(rs.getString("FILE_NAME"));
                            tempItem.UUID = EscapeUtils.CheckTextNull(rs.getString("UUID"));
                            tempItem.DMS_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("DMS_PROPERTIES"));
                            tempItem.FILE_SIZE = rs.getInt("FILE_SIZE");
                            tempItem.FILE_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("FILE_PROFILE_NAME"));
                            tempItem.FILE_PROFILE_DESC = EscapeUtils.CheckTextNull(rs.getString("FILE_PROFILE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new FILE_MANAGER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_FILE_MANAGER_DETAIL">
    public void S_BO_FILE_MANAGER_DETAIL(String pFILE_MANAGER_ID, String pLANGUAGE, FILE_MANAGER[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<FILE_MANAGER> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FILE_MANAGER_DETAIL(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pFILE_MANAGER_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pLANGUAGE));
                        CommonFunction.LogDebugString(log, "S_BO_FILE_MANAGER_DETAIL", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            FILE_MANAGER tempItem = new FILE_MANAGER();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.FILE_NAME = EscapeUtils.CheckTextNull(rs.getString("FILE_NAME"));
                            tempItem.UUID = EscapeUtils.CheckTextNull(rs.getString("UUID"));
                            tempItem.DMS_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("DMS_PROPERTIES"));
                            tempItem.FILE_SIZE = rs.getInt("FILE_SIZE");
                            tempItem.FILE_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("FILE_PROFILE_NAME"));
                            tempItem.FILE_PROFILE_DESC = EscapeUtils.CheckTextNull(rs.getString("FILE_PROFILE_DESC"));
                            tempItem.MIME_TYPE_NAME = EscapeUtils.CheckTextNull(rs.getString("MIME_TYPE_NAME"));
                            tempList.add(tempItem);
                        }
                        response[0] = new FILE_MANAGER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_FILE_MANAGER_DELETE">
    public String S_BO_FILE_MANAGER_DELETE(String pFILE_MANAGER_ID, String pUSER_BY)
            throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FILE_MANAGER_DELETE(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pFILE_MANAGER_ID));
                        proc_stmt.setString(2, pUSER_BY);
                        proc_stmt.registerOutParameter(3, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_FILE_MANAGER_DELETE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(3));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_SUPPLEMENT_FILE">
    public void S_BO_CERTIFICATION_SUPPLEMENT_FILE(int pCERTIFICATION_ATTR_ID, String pUSER_BY, String[] pRESPONSE_CODE_NAME)
        throws Exception {
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_SUPPLEMENT_FILE(?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ATTR_ID);
                        proc_stmt.setString(2, pUSER_BY);
                        proc_stmt.registerOutParameter(3, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_SUPPLEMENT_FILE", proc_stmt.toString());
                        proc_stmt.execute();
                        pRESPONSE_CODE_NAME[0] = proc_stmt.getString(3);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_LOGIN_USER_SSL">
    public String S_BO_LOGIN_USER_SSL(String pCERTIFICATION_HASH, String sSessID, String sIP)
            throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_LOGIN_USER_SSL(?,?,?,?) }");
                        proc_stmt.setString(1, pCERTIFICATION_HASH);
                        proc_stmt.setString(2, sSessID);
                        proc_stmt.setString(3, sIP);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_LOGIN_USER_SSL", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_LOGIN_USER_SSL_LIST">
    public void S_BO_LOGIN_USER_SSL_LIST(String pCERTIFICATION_HASH, String pLanguage,
            BACKOFFICE_USER[][] response) throws Exception {
        Connection conns = null;
        ArrayList<BACKOFFICE_USER> tempList = new ArrayList<>();
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_LOGIN_USER_SSL_LIST(?,?) }");
                        proc_stmt.setString(1, pCERTIFICATION_HASH);
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BACKOFFICE_USER tempItem = new BACKOFFICE_USER();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.USERNAME = rs.getString("USERNAME");
                            tempItem.FULL_NAME = rs.getString("FULL_NAME");
                            tempItem.ROLE_ID = rs.getInt("ROLE_ID");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.BRANCH_PARENT_ID = rs.getInt("BRANCH_PARENT_ID");
                            tempItem.ROLE_NAME = rs.getString("ROLE_NAME");
                            tempItem.BRANCH_REMARK = rs.getString("BRANCH_DESC");
                            tempItem.ROLE_REMARK = rs.getString("ROLE_DESC");
                            tempItem.PROPERTIES = rs.getString("PROPERTIES");
                            tempItem.CHANGE_PASS_ENABLED = rs.getBoolean("DEFAULT_PASSWORD_ENABLED");
                            tempList.add(tempItem);
                        }
                        response[0] = new BACKOFFICE_USER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_USER_CHECK_SSL">
    public boolean S_BO_USER_CHECK_SSL(String pCERTIFICATION_HASH) throws Exception {
        boolean convrtr = false;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_USER_CHECK_SSL(?,?) }");
                        proc_stmt.setString(1, pCERTIFICATION_HASH);
                        proc_stmt.registerOutParameter(2, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        int intResult = proc_stmt.getInt(2);
                        if(intResult == 1)
                        {
                            convrtr = true;
                        }
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_DESTROYED">
    public String S_BO_CERTIFICATION_DESTROYED(String pCERTIFICATION_ATTR_ID, String pCOMMENT, String pVALUE, String pUSER_BY)
            throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_DESTROYED(?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_ATTR_ID));
                        proc_stmt.setString(2, pCOMMENT);
                        if(!"".equals(pVALUE))
                        {
                            proc_stmt.setString(3, pVALUE);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setString(4, pUSER_BY);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_DESTROYED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_WARNING_EXPIRED_LIST">
    public void S_BO_CERTIFICATION_WARNING_EXPIRED_LIST(String pFROM_DT, String pTO_DT, String pBRANCH_ID,
            String pCREATED_BY, String sLanguage, CERTIFICATION[][] response, int sPage, int sSum, String sessTreeArrayBranchID)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_WARNING_EXPIRED_LIST", 8));
                        if(!"".equals(pFROM_DT)){
                            proc_stmt.setString(1, pFROM_DT);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if(!"".equals(pTO_DT)){
                            proc_stmt.setString(2, pTO_DT);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pCREATED_BY )) {
                            proc_stmt.setInt(4, Integer.parseInt(pCREATED_BY));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.setInt(5, Integer.parseInt(sLanguage));
                        proc_stmt.setInt(6, sPage);
                        proc_stmt.setInt(7, sSum);
                        proc_stmt.setString(8, sessTreeArrayBranchID);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_WARNING_EXPIRED_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC") + " (" + rs.getString("BRANCH_NAME") + ")";
                            tempItem.CREATED_BY = rs.getString("USERNAME_CREATED");
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.PHONE_CONTRACT = rs.getString("PHONE_CONTRACT");
                            tempItem.EMAIL_CONTRACT = rs.getString("EMAIL_CONTRACT");
                            tempItem.EFFECTIVE_DT = rs.getString("EFFECTIVE_DT");
                            tempItem.EXPIRATION_DT = rs.getString("EXPIRATION_DT");
                            tempItem.CERTIFICATION_SN = rs.getString("CERTIFICATION_SN");
                            tempItem.PROFILE_CONTACT_INFO = rs.getString("PROFILE_CONTACT_INFO");
                            tempItem.CERTIFICATION_PROFILE_NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.CERTIFICATION_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_STATUS_DESC"));
                            tempItem.SERVICE_TYPE_DESC = rs.getString("SERVICE_TYPE_DESC");
                            tempItem.BRIEF_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("BRIEF_PROPERTIES"));
                            tempItem.FILE_MANAGER_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("FILE_MANAGER_STATE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_WARNING_EXPIRED_TOTAL">
    public int S_BO_CERTIFICATION_WARNING_EXPIRED_TOTAL(String pFROM_DT, String pTO_DT, String pBRANCH_ID,
            String pCREATED_BY, String sessTreeArrayBranchID) throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_WARNING_EXPIRED_TOTAL", 6));
//                        if (!"".equals(pDAY_WARNING)) {
//                            proc_stmt.setInt(1, Integer.parseInt(pDAY_WARNING));
//                        } else {
//                            proc_stmt.setString(1, null);
//                        }
                        if(!"".equals(pFROM_DT)){
                            proc_stmt.setString(1, pFROM_DT);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if(!"".equals(pTO_DT)) {
                            proc_stmt.setString(2, pTO_DT);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pCREATED_BY )) {
                            proc_stmt.setInt(4, Integer.parseInt(pCREATED_BY));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.setString(5, sessTreeArrayBranchID);
                        proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_WARNING_EXPIRED_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(6);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_IMPORT - CANCEL">
    public String S_BO_CERTIFICATION_IMPORT(String pCERTIFICATION_PROFILE_ID, String pCSR, String pCERTIFICATION,
            String pTOKEN_SN, java.sql.Timestamp pEFFECTIVE_DT, java.sql.Timestamp pEXPIRATION_DT,
            java.sql.Timestamp pEXPIRATION_CONTRACT_DT, String pDURATION,
            double pFEE_AMOUNT, double pTOKEN_AMOUNT, String pPUBLIC_KEY,
            String pPUBLIC_KEY_HASH, String pCERTIFICATION_HASH, String pCERTIFICATION_SN, String pPERSONAL_NAME, String pCOMPANY_NAME,
            String pDOMAIN_NAME, String pTAX_CODE, String pBUDGET_CODE,
            String pP_ID, String pPASSPORT, String pSUBJECT, String pISSUER_SUBJECT, String pPHONE_CONTRACT,
            String pEMAIL_CONTRACT, String pBRANCH_ID, String pPROVINCE_ID,
            String pPROPERTIES, java.sql.Timestamp pCREATED_DT, String pCREATED_BY, java.sql.Timestamp pMODIFIED_DT, String pMODIFIED_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_IMPORT(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_PROFILE_ID));
                        if (!"".equals(pCSR)) {
                            proc_stmt.setString(2, pCSR);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pCERTIFICATION)) {
                            proc_stmt.setString(3, pCERTIFICATION);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pTOKEN_SN)) {
                            proc_stmt.setString(4, pTOKEN_SN);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (pEFFECTIVE_DT != null) {
                            proc_stmt.setObject(5, pEFFECTIVE_DT);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (pEXPIRATION_DT != null) {
                            proc_stmt.setObject(6, pEXPIRATION_DT);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (pEXPIRATION_CONTRACT_DT != null) {
                            proc_stmt.setObject(7, pEXPIRATION_CONTRACT_DT);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pDURATION)) {
                            proc_stmt.setInt(8, Integer.parseInt(pDURATION));
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if (!"".equals(pFEE_AMOUNT)) {
                            proc_stmt.setDouble(9, pFEE_AMOUNT);
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        if (!"".equals(pTOKEN_AMOUNT)) {
                            proc_stmt.setDouble(10, pTOKEN_AMOUNT);
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        if (!"".equals(pPUBLIC_KEY)) {
                            proc_stmt.setString(11, pPUBLIC_KEY);
                        } else {
                            proc_stmt.setString(11, null);
                        }
                        if (!"".equals(pPUBLIC_KEY_HASH)) {
                            proc_stmt.setString(12, pPUBLIC_KEY_HASH);
                        } else {
                            proc_stmt.setString(12, null);
                        }
                        if (!"".equals(pCERTIFICATION_HASH)) {
                            proc_stmt.setString(13, pCERTIFICATION_HASH);
                        } else {
                            proc_stmt.setString(13, null);
                        }
                        if (!"".equals(pCERTIFICATION_SN)) {
                            proc_stmt.setString(14, pCERTIFICATION_SN);
                        } else {
                            proc_stmt.setString(14, null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString(15, pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString(15, null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString(16, pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString(16, null);
                        }
                        if (!"".equals(pDOMAIN_NAME)) {
                            proc_stmt.setString(17, pDOMAIN_NAME);
                        } else {
                            proc_stmt.setString(17, null);
                        }
                        if (!"".equals(pTAX_CODE)) {
                            proc_stmt.setString(18, pTAX_CODE);
                        } else {
                            proc_stmt.setString(18, null);
                        }
                        if (!"".equals(pBUDGET_CODE)) {
                            proc_stmt.setString(19, pBUDGET_CODE);
                        } else {
                            proc_stmt.setString(19, null);
                        }
                        if (!"".equals(pP_ID)) {
                            proc_stmt.setString(20, pP_ID);
                        } else {
                            proc_stmt.setString(20, null);
                        }
                        if (!"".equals(pPASSPORT)) {
                            proc_stmt.setString(21, pPASSPORT);
                        } else {
                            proc_stmt.setString(21, null);
                        }
                        if (!"".equals(pSUBJECT)) {
                            proc_stmt.setString(22, pSUBJECT);
                        } else {
                            proc_stmt.setString(22, null);
                        }
                        if (!"".equals(pISSUER_SUBJECT)) {
                            proc_stmt.setString(23, pISSUER_SUBJECT);
                        } else {
                            proc_stmt.setString(23, null);
                        }
                        if (!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString(24, pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString(24, null);
                        }
                        if (!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString(25, pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString(25, null);
                        }
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(26, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(26, null);
                        }
                        if (!"".equals(pPROVINCE_ID)) {
                            proc_stmt.setInt(27, Integer.parseInt(pPROVINCE_ID));
                        } else {
                            proc_stmt.setString(27, null);
                        }
                        if (!"".equals(pPROPERTIES)) {
                            proc_stmt.setString(28, pPROPERTIES);
                        } else {
                            proc_stmt.setString(28, null);
                        }
//                        java.sql.Timestamp sDateResult = CommonFunction.convertStringToDateDB(sDateLimit);
                        if (pCREATED_DT != null) {
                            proc_stmt.setObject(29, pCREATED_DT);
                        } else {
                            proc_stmt.setString(29, null);
                        }
                        if (!"".equals(pCREATED_BY)) {
                            proc_stmt.setInt(30, Integer.parseInt(pCREATED_BY));
                        } else {
                            proc_stmt.setString(30, null);
                        }
                        if (pMODIFIED_DT != null) {
                            proc_stmt.setObject(31, pMODIFIED_DT);
                        } else {
                            proc_stmt.setString(31, null);
                        }
                        if (!"".equals(pMODIFIED_BY)) {
                            proc_stmt.setInt(32, Integer.parseInt(pMODIFIED_BY));
                        } else {
                            proc_stmt.setString(32, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_IMPORT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = "0";
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_CHANGED_CREATED_BY">
    public String S_BO_CERTIFICATION_CHANGED_CREATED_BY(String pCERTIFICATION_ATTR_ID, String pNEW_BRANCH_ID,
            String pNEW_CREATED_BY, String pUSERNAME_BY, String pVALUE)
            //, int[] pNEW_CERTIFICATION_ID, int[] pNEW_CERTIFICATION_ATTR_ID
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_CHANGED_CREATED_BY(?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_ATTR_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pNEW_BRANCH_ID));
                        proc_stmt.setInt(3, Integer.parseInt(pNEW_CREATED_BY));
                        proc_stmt.setString(4, pUSERNAME_BY);
                        if(!"".equals(pVALUE)){
                            proc_stmt.setString(5, pVALUE);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
//                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
//                        proc_stmt.registerOutParameter(8, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_CHANGED_CREATED_BY", proc_stmt.toString());
                        proc_stmt.execute();
//                        pNEW_CERTIFICATION_ID[0] = proc_stmt.getInt(6);
//                        pNEW_CERTIFICATION_ATTR_ID[0] = proc_stmt.getInt(7);
                        convrtr = String.valueOf(proc_stmt.getInt(6));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_ROLE_LIST">
    public void S_BO_API_ROLE_LIST(String pCA_ENABLED, int pLANGUAGE, UserRoleInfo[][] response)
            throws Exception {
        ArrayList<UserRoleInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_ROLE_LIST(?,?) }");
                        if(!"".equals(pCA_ENABLED)) {
                            proc_stmt.setString(1, pCA_ENABLED);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            UserRoleInfo tempItem = new UserRoleInfo();
                            tempItem.userRoleCode = rs.getString("NAME");
                            tempItem.userRoleName = rs.getString("ROLE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new UserRoleInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_USER_LIST">
    public void S_BO_API_USER_LIST(String pUSERNAME, String pBRANCH_NAME, String pROLE_NAME, int pLANGUAGE, UserInfo[][] response)
            throws Exception {
        ArrayList<UserInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_USER_LIST(?,?,?,?) }");
                        if(!"".equals(pUSERNAME))
                        {
                            proc_stmt.setString(1, pUSERNAME);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if(!"".equals(pBRANCH_NAME))
                        {
                            proc_stmt.setString(2, pBRANCH_NAME);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if(!"".equals(pROLE_NAME))
                        {
                            proc_stmt.setString(3, pROLE_NAME);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setInt(4, pLANGUAGE);
                        CommonFunction.LogDebugString(log, "S_BO_API_USER_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            UserInfo tempItem = new UserInfo();
                            tempItem.userName = rs.getString("USERNAME");
                            tempItem.phoneNumber = rs.getString("MSISDN");
                            tempItem.email = rs.getString("EMAIL");
                            tempItem.fullName = rs.getString("FULL_NAME");
                            tempItem.raID = rs.getInt("BRANCH_ID");
                            tempItem.raCode = rs.getString("BRANCH_NAME");
                            tempItem.raName = rs.getString("BRANCH_DESC");
                            tempItem.userRoleCode = rs.getString("ROLE_NAME");
                            tempItem.userRoleName = rs.getString("ROLE_DESC");
                            tempItem.createDate = rs.getString("CREATED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new UserInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_USER_DETAIL">
    public void S_BO_API_USER_DETAIL(String pUSERNAME, int pLANGUAGE, UserInfo[][] response)
            throws Exception {
        ArrayList<UserInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_USER_DETAIL(?,?) }");
                        if(!"".equals(pUSERNAME))
                        {
                            proc_stmt.setString(1, pUSERNAME);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, pLANGUAGE);
                        CommonFunction.LogDebugString(log, "S_BO_API_USER_DETAIL", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            UserInfo tempItem = new UserInfo();
                            tempItem.userID = rs.getInt("ID");
                            tempItem.phoneNumber = rs.getString("MSISDN");
                            tempItem.email = rs.getString("EMAIL");
                            tempItem.fullName = rs.getString("FULL_NAME");
                            tempItem.raCode = rs.getString("BRANCH_NAME");
                            tempItem.userRoleCode = rs.getString("ROLE_NAME");
                            tempList.add(tempItem);
                        }
                        response[0] = new UserInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_PROVINCE_LIST">
    public void S_BO_API_PROVINCE_LIST(String pPROVINCE_NAME, int pLANGUAGE, CityProvinceInfo[][] response)
            throws Exception {
        ArrayList<CityProvinceInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_PROVINCE_LIST(?,?) }");
                        if(!"".equals(pPROVINCE_NAME))
                        {
                            proc_stmt.setString(1, pPROVINCE_NAME);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CityProvinceInfo tempItem = new CityProvinceInfo();
                            tempItem.cityProvinceCode = rs.getString("PROVINCE_NAME");
                            tempItem.cityProvinceName = rs.getString("PROVINCE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CityProvinceInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_STATE_LIST">
    public void S_BO_API_CERTIFICATION_STATE_LIST(String pCERT_STATE_CODE, int pLANGUAGE, CertificateStateInfo[][] response)
            throws Exception {
        ArrayList<CertificateStateInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_STATE_LIST(?,?) }");
                        if(!"".equals(pCERT_STATE_CODE)) {
                            proc_stmt.setString(1, pCERT_STATE_CODE);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CertificateStateInfo tempItem = new CertificateStateInfo();
                            tempItem.certificateStateCode = rs.getString("CERTIFICATION_STATE_NAME");
                            tempItem.certificateStateName = rs.getString("CERTIFICATION_STATE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CertificateStateInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_AUTHORITY_LIST">
    public void S_BO_API_CERTIFICATION_AUTHORITY_LIST(String pCA_NAME, int pLANGUAGE, CertificateAuthorityInfo[][] response, String sJSON_POLICY,
            ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList)
            throws Exception {
        ArrayList<CertificateAuthorityInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_AUTHORITY_LIST(?,?) }");
                        if(!"".equals(pCA_NAME))
                        {
                            proc_stmt.setString(1, pCA_NAME);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            String sCERTIFICATION_AUTHORITY_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_NAME"));
                            if(!"".equals(sJSON_POLICY))
                            {
                                boolean accessProfileAll = CommonFunction.checkAPIAccessProfileAll(sJSON_POLICY);
                                if(accessProfileAll == true)
                                {
                                    CertificateAuthorityInfo tempItem = new CertificateAuthorityInfo();
                                    tempItem.certificateAuthorityCode = sCERTIFICATION_AUTHORITY_NAME;
                                    tempItem.certificateAuthorityName = rs.getString("CERTIFICATION_AUTHORITY_DESC");
                                    String sCERTIFICATION_AUTHORITY_CORECA_SUBJECT = "";
                                    ArrayList<ProObj> list = PropertiesContent.getPropertiesContent(EscapeUtils.CheckTextNull(rs.getString("PROPERTIES")));
                                    for (ProObj list1 : list) {
                                        if (list1.getKey().trim().equals(Definitions.CONFIG_PROPERTIES_CA_SUBJECTDN)) {
                                            sCERTIFICATION_AUTHORITY_CORECA_SUBJECT = list1.getValue().trim();
                                            break;
                                        }
                                    }
                                    tempItem.certificateAuthorityCoreCASubject = sCERTIFICATION_AUTHORITY_CORECA_SUBJECT;
                                    tempItem.dnUniqueEnabled = EscapeUtils.CheckTextNull(rs.getString("ENFORCE_UNIQUE_DN"));
                                    tempList.add(tempItem);
                                } else {
                                    if(tempProfileList.size() > 0)
                                    {
                                        for (CERTIFICATION_POLICY_DATA tempProfileList1 : tempProfileList) {
                                            if(sCERTIFICATION_AUTHORITY_NAME.equals(tempProfileList1.certificateAuthority))
                                            {
                                                CertificateAuthorityInfo tempItem = new CertificateAuthorityInfo();
                                                tempItem.certificateAuthorityCode = sCERTIFICATION_AUTHORITY_NAME;
                                                tempItem.certificateAuthorityName = rs.getString("CERTIFICATION_AUTHORITY_DESC");
                                                String sCERTIFICATION_AUTHORITY_CORECA_SUBJECT = "";
                                                ArrayList<ProObj> list = PropertiesContent.getPropertiesContent(EscapeUtils.CheckTextNull(rs.getString("PROPERTIES")));
                                                for (ProObj list1 : list) {
                                                    if (list1.getKey().trim().equals(Definitions.CONFIG_PROPERTIES_CA_SUBJECTDN)) {
                                                        sCERTIFICATION_AUTHORITY_CORECA_SUBJECT = list1.getValue().trim();
                                                        break;
                                                    }
                                                }
                                                tempItem.certificateAuthorityCoreCASubject = sCERTIFICATION_AUTHORITY_CORECA_SUBJECT;
                                                tempItem.dnUniqueEnabled = EscapeUtils.CheckTextNull(rs.getString("ENFORCE_UNIQUE_DN"));
                                                tempList.add(tempItem);
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                CertificateAuthorityInfo tempItem = new CertificateAuthorityInfo();
                                tempItem.certificateAuthorityCode = sCERTIFICATION_AUTHORITY_NAME;
                                tempItem.certificateAuthorityName = rs.getString("CERTIFICATION_AUTHORITY_DESC");
                                String sCERTIFICATION_AUTHORITY_CORECA_SUBJECT = "";
                                ArrayList<ProObj> list = PropertiesContent.getPropertiesContent(EscapeUtils.CheckTextNull(rs.getString("PROPERTIES")));
                                for (ProObj list1 : list) {
                                    if (list1.getKey().trim().equals(Definitions.CONFIG_PROPERTIES_CA_SUBJECTDN)) {
                                        sCERTIFICATION_AUTHORITY_CORECA_SUBJECT = list1.getValue().trim();
                                        break;
                                    }
                                }
                                tempItem.certificateAuthorityCoreCASubject = sCERTIFICATION_AUTHORITY_CORECA_SUBJECT;
                                tempItem.dnUniqueEnabled = EscapeUtils.CheckTextNull(rs.getString("ENFORCE_UNIQUE_DN"));
                                tempList.add(tempItem);
                            }
                        }
                        response[0] = new CertificateAuthorityInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CHECK_ENFORCE_UNIQUE_DN">
    public int S_BO_CHECK_ENFORCE_UNIQUE_DN(int pOWNER_TYPE_ID, String pENTERPRISE_ID, String pPERSONAL_ID,
        String pEMAIL_CONTRACT, String pSUBJECT, int pOWNER_ID) throws Exception {
        Connection conns = null;
        int sResult = 0;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CHECK_ENFORCE_UNIQUE_DN(?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pOWNER_TYPE_ID);
                        proc_stmt.setString(2, pENTERPRISE_ID);
                        proc_stmt.setString(3, pPERSONAL_ID);
                        proc_stmt.setString(4, pEMAIL_CONTRACT);
                        proc_stmt.setString(5, pSUBJECT);
                        if(pOWNER_ID != 0) {
                            proc_stmt.setInt(6, pOWNER_ID);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CHECK_ENFORCE_UNIQUE_DN", proc_stmt.toString());
                        proc_stmt.execute();
                        sResult = proc_stmt.getInt(7);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return sResult;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_PURPOSE_LIST">
    public void S_BO_API_CERTIFICATION_PURPOSE_LIST(String pCERT_AUTHORITY_CODE, int pLANGUAGE,
            CertificatePurposeInfo[][] response, String sJSON_POLICY, ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList) throws Exception {
        ArrayList<CertificatePurposeInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_PURPOSE_LIST(?,?) }");
                        if(!"".equals(pCERT_AUTHORITY_CODE)) {
                            proc_stmt.setString(1, pCERT_AUTHORITY_CODE);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            String sCERTIFICATION_PURPOSE_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PURPOSE_NAME"));
                            if(!"".equals(sJSON_POLICY))
                            {
                                boolean accessProfileAll = CommonFunction.checkAPIAccessProfileAll(sJSON_POLICY);
                                if(accessProfileAll == true)
                                {
                                    CertificatePurposeInfo tempItem = new CertificatePurposeInfo();
                                    tempItem.certificatePurposeCode = sCERTIFICATION_PURPOSE_NAME;
                                    tempItem.certificatePurposeName = rs.getString("CERTIFICATION_PURPOSE_DESC");
                                    tempList.add(tempItem);
                                } else {
                                    if(tempProfileList.size() > 0)
                                    {
                                        for (CERTIFICATION_POLICY_DATA tempProfileList1 : tempProfileList) {
                                            if(sCERTIFICATION_PURPOSE_NAME.equals(tempProfileList1.certificatePurpose))
                                            {
                                                CertificatePurposeInfo tempItem = new CertificatePurposeInfo();
                                                tempItem.certificatePurposeCode = sCERTIFICATION_PURPOSE_NAME;
                                                tempItem.certificatePurposeName = rs.getString("CERTIFICATION_PURPOSE_DESC");
                                                tempList.add(tempItem);
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        response[0] = new CertificatePurposeInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_PROFILE_LIST">
    public void S_BO_API_CERTIFICATION_PROFILE_LIST(String pCERT_AUTHORITY_CODE, String pCERT_PURPOSE_CODE, String pPKI_FORMFACTOR_NAME,
            int pRENEW_ENABLED, int pLANGUAGE, CertificateProfileInfo[][] response, String sJSON_POLICY,
            ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList)
        throws Exception {
        ArrayList<CertificateProfileInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_PROFILE_LIST(?,?,?,?,?) }");
                        if(!"".equals(pCERT_AUTHORITY_CODE)) {
                            proc_stmt.setString(1, pCERT_AUTHORITY_CODE);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if(!"".equals(pCERT_PURPOSE_CODE)) {
                            proc_stmt.setString(2, pCERT_PURPOSE_CODE);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setInt(3, pLANGUAGE);
                        if(!"".equals(pPKI_FORMFACTOR_NAME)) {
                            proc_stmt.setString(4, pPKI_FORMFACTOR_NAME);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.setInt(5, pRENEW_ENABLED);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_PROFILE_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            if(!"".equals(sJSON_POLICY))
                            {
                                boolean accessProfileAll = CommonFunction.checkAPIAccessProfileAll(sJSON_POLICY);
                                if(accessProfileAll == true) {
                                    CertificateProfileInfo tempItem = new CertificateProfileInfo();
                                    tempItem.certificateProfileCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                                    tempItem.certificateProfileName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_DESC"));
                                    tempItem.duration = rs.getInt("DURATION");
                                    tempList.add(tempItem);
                                } else {
                                    if(tempProfileList.size() > 0)
                                    {
                                        String sCERTIFICATION_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                                        String sCERTIFICATION_AUTHORITY_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_NAME"));
                                        for (CERTIFICATION_POLICY_DATA tempProfileList1 : tempProfileList) {
                                            if(sCERTIFICATION_PROFILE_NAME.equals(tempProfileList1.name)
                                                && sCERTIFICATION_AUTHORITY_NAME.equals(tempProfileList1.certificateAuthority))
                                            {
                                                CertificateProfileInfo tempItem = new CertificateProfileInfo();
                                                tempItem.certificateProfileCode = sCERTIFICATION_PROFILE_NAME;
                                                tempItem.certificateProfileName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_DESC"));
                                                tempItem.duration = rs.getInt("DURATION");
                                                tempList.add(tempItem);
                                                break;
                                            }
                                        }
                                    }
                                }
                            } else {
                                CertificateProfileInfo tempItem = new CertificateProfileInfo();
                                tempItem.certificateProfileCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                                tempItem.certificateProfileName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_DESC"));
                                tempItem.duration = rs.getInt("DURATION");
                                tempList.add(tempItem);
                            }
                        }
                        response[0] = new CertificateProfileInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_PROFILE_LIST_HASID">
    public void S_BO_API_CERTIFICATION_PROFILE_LIST_HASID(String pCERT_AUTHORITY_CODE, String pCERT_PURPOSE_CODE, String pPKI_FORMFACTOR_NAME,
            int pRENEW_ENABLED, int pLANGUAGE, CERTIFICATION_PROFILE[][] response, String sJSON_POLICY,
            ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList)
        throws Exception {
        ArrayList<CERTIFICATION_PROFILE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_PROFILE_LIST(?,?,?,?,?) }");
                        if(!"".equals(pCERT_AUTHORITY_CODE)) {
                            proc_stmt.setString(1, pCERT_AUTHORITY_CODE);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if(!"".equals(pCERT_PURPOSE_CODE)) {
                            proc_stmt.setString(2, pCERT_PURPOSE_CODE);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setInt(3, pLANGUAGE);
                        if(!"".equals(pPKI_FORMFACTOR_NAME)) {
                            proc_stmt.setString(4, pPKI_FORMFACTOR_NAME);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.setInt(5, pRENEW_ENABLED);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_PROFILE_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            if(!"".equals(sJSON_POLICY))
                            {
                                boolean accessProfileAll = CommonFunction.checkAPIAccessProfileAll(sJSON_POLICY);
                                if(accessProfileAll == true) {
                                    CERTIFICATION_PROFILE tempItem = new CERTIFICATION_PROFILE();
                                    tempItem.ID = rs.getInt("ID");
                                    tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                                    tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_DESC"));
                                    tempItem.DURATION = rs.getInt("DURATION");
                                    tempList.add(tempItem);
                                } else {
                                    if(tempProfileList.size() > 0)
                                    {
                                        String sCERTIFICATION_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                                        String sCERTIFICATION_AUTHORITY_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_NAME"));
                                        for (CERTIFICATION_POLICY_DATA tempProfileList1 : tempProfileList) {
                                            if(sCERTIFICATION_PROFILE_NAME.equals(tempProfileList1.name)
                                                && sCERTIFICATION_AUTHORITY_NAME.equals(tempProfileList1.certificateAuthority))
                                            {
                                                CERTIFICATION_PROFILE tempItem = new CERTIFICATION_PROFILE();
                                                tempItem.ID = rs.getInt("ID");
                                                tempItem.NAME = sCERTIFICATION_PROFILE_NAME;
                                                tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_DESC"));
                                                tempItem.DURATION = rs.getInt("DURATION");
                                                tempList.add(tempItem);
                                                break;
                                            }
                                        }
                                    }
                                }
                            } else {
                                CERTIFICATION_PROFILE tempItem = new CERTIFICATION_PROFILE();
                                tempItem.ID = rs.getInt("ID");
                                tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                                tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_DESC"));
                                tempItem.DURATION = rs.getInt("DURATION");
                                tempList.add(tempItem);
                            }
                        }
                        response[0] = new CERTIFICATION_PROFILE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_PROFILE_GET_PROPERTIES">
    public void S_BO_API_CERTIFICATION_PROFILE_GET_PROPERTIES(String pCERT_AUTHORITY_CODE, String pCERT_PROFILE_CODE,
            String pPKI_FORMFACTOR_CODE, CertificateProfileInfo[][] response) throws Exception {
        ArrayList<CertificateProfileInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_PROFILE_GET_PROPERTIES(?,?,?) }");
                        if(!"".equals(pCERT_AUTHORITY_CODE)) {
                            proc_stmt.setString(1, pCERT_AUTHORITY_CODE);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if(!"".equals(pCERT_PROFILE_CODE)) {
                            proc_stmt.setString(2, pCERT_PROFILE_CODE);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if(!"".equals(pPKI_FORMFACTOR_CODE)) {
                            proc_stmt.setString(3, pPKI_FORMFACTOR_CODE);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_PROFILE_GET_PROPERTIES", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CertificateProfileInfo tempItem = new CertificateProfileInfo();
                            tempItem.certificateProfileProperties = rs.getString("PROPERTIES");
                            tempItem.amount = rs.getDouble("AMOUNT");
                            tempItem.durationFree = rs.getInt("PROMOTION_DURATION");
                            tempList.add(tempItem);
                        }
                        response[0] = new CertificateProfileInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_PURPOSE_GET_FILE_PROPERTIES">
    public void S_BO_API_CERTIFICATION_PURPOSE_GET_FILE_PROPERTIES(String pCERT_PURPOSE_NAME,
            CertificatePurposeInfo[][] response) throws Exception {
        ArrayList<CertificatePurposeInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_PURPOSE_GET_FILE_PROPERTIES(?) }");
                        if(!"".equals(pCERT_PURPOSE_NAME)) {
                            proc_stmt.setString(1, pCERT_PURPOSE_NAME);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CertificatePurposeInfo tempItem = new CertificatePurposeInfo();
                            tempItem.certificatePurposeFileProperties = rs.getString("FILE_PROPERTIES");
                            tempList.add(tempItem);
                        }
                        response[0] = new CertificatePurposeInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_GET_INFO">
    public void S_BO_API_CERTIFICATION_GET_INFO(String pTAX_CODE, String pP_ID, String pBUDGET_CODE, String pPASSPORT,
            String pCERTIFICATION_SN, int pCERTIFICATION_ID, String pCERTIFICATION_STATE_CODE,
            String pCERTIFICATION_PROFILE_CODE, int pLANGUAGE, int[] pRESPONSE_CODE, CertificateInfo[][] response, String pCCCD,
            String pDECISION, String pENTERPRISE_ID, String pPERSONAL_ID)
            throws Exception {
        ArrayList<CertificateInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_API_CERTIFICATION_GET_INFO2", 8));
                        if(!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if(!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        if(!"".equals(pCERTIFICATION_SN)) {
                            proc_stmt.setString("pCERTIFICATION_SN", pCERTIFICATION_SN);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_SN", null);
                        }
                        if(pCERTIFICATION_ID != 0) {
                            proc_stmt.setInt("pCERTIFICATION_ID", pCERTIFICATION_ID);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_ID", null);
                        }
                        if(!"".equals(pCERTIFICATION_STATE_CODE)) {
                            proc_stmt.setString("pCERTIFICATION_STATE_CODE", pCERTIFICATION_STATE_CODE);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_STATE_CODE", null);
                        }
                        if(!"".equals(pCERTIFICATION_PROFILE_CODE)) {
                            proc_stmt.setString("pCERTIFICATION_PROFILE_CODE", pCERTIFICATION_PROFILE_CODE);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_PROFILE_CODE", null);
                        }
                        proc_stmt.setInt("pLANGUAGE", pLANGUAGE);
                        proc_stmt.registerOutParameter("pRESPONSE_CODE_NAME", java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_GET_INFO2", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        pRESPONSE_CODE[0] = Integer.parseInt(proc_stmt.getString("pRESPONSE_CODE_NAME"));
                        while (rs.next()) {
                            CertificateInfo tempItem = new CertificateInfo();
                            tempItem.certificateID = rs.getInt("ID");
                            tempItem.certificateOwnerID = rs.getInt("CERTIFICATION_OWNER_ID");
                            tempItem.requestId = rs.getInt("CERTIFICATION_ATTR_ID");
                            tempItem.pastCertificateId = rs.getInt("PAST_CERTIFICATION_ID");
                            tempItem.certificateProfileId = rs.getInt("CERTIFICATION_PROFILE_ID");
                            tempItem.provinceId = rs.getInt("PROVINCE_ID");
                            tempItem.raId = rs.getInt("BRANCH_ID");
                            tempItem.provinceName = EscapeUtils.CheckTextNull(rs.getString("PROVINCE_NAME"));
                            tempItem.createdId = rs.getInt("BENEFICIARIED_BY");
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDGetInfoAPI(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.certificate = rs.getString("CERTIFICATION");
                            tempItem.effectiveTime = rs.getString("EFFECTIVE_DT");
                            tempItem.expirationTime = rs.getString("EXPIRATION_DT");
                            tempItem.expirationContractTime = rs.getString("EXPIRATION_CONTRACT_DT");
                            tempItem.certificateSN = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_SN"));
                            tempItem.personalName = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.companyName = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            tempItem.certificateDN = EscapeUtils.CheckTextNull(rs.getString("SUBJECT"));
                            tempItem.phoneContact = EscapeUtils.CheckTextNull(rs.getString("PHONE_CONTRACT"));
                            tempItem.emailContact = EscapeUtils.CheckTextNull(rs.getString("EMAIL_CONTRACT"));
                            tempItem.tokenSN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempItem.domainName = EscapeUtils.CheckTextNull(rs.getString("DOMAIN_NAME"));
                            tempItem.publicKey = EscapeUtils.CheckTextNull(rs.getString("PUBLIC_KEY"));
                            tempItem.publicKeyHash = EscapeUtils.CheckTextNull(rs.getString("PUBLIC_KEY_HASH"));
                            tempItem.certificateHash = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_HASH"));
                            tempItem.certificateAuthorityCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_NAME"));
                            tempItem.certificateAuthorityName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_DESC"));
                            tempItem.certificatePurposeCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PURPOSE_NAME"));
                            tempItem.certificatePurposeName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PURPOSE_DESC"));
                            tempItem.certificateProfileCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempItem.certificateProfileName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_DESC"));
                            tempItem.certificateStateCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_STATE_NAME"));
                            tempItem.certificateStateName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_STATE_DESC"));
                            tempItem.formFactorCode = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_NAME"));
                            tempItem.formFactorName = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_DESC"));
                            tempItem.coreCASubject = EscapeUtils.CheckTextNull(rs.getString("ISSUER_SUBJECT"));
                            tempItem.csr = EscapeUtils.CheckTextNull(rs.getString("CSR"));
                            tempItem.createdDate = rs.getString("CREATED_DT");
                            tempItem.certificateStateId = rs.getInt("CERTIFICATION_STATE_ID");
                            tempItem.backupKeyEnabled = rs.getBoolean("PRIVATE_KEY_ENABLED");
                            tempItem.tokenId = rs.getInt("TOKEN_ID");
                            tempItem.value = EscapeUtils.CheckTextNull(rs.getString("VALUE"));
                            tempItem.comment = EscapeUtils.CheckTextNull(rs.getString("COMMENT"));
                            tempItem.subjectAlternativeName = EscapeUtils.CheckTextNull(rs.getString("PROPERTIES"));
                            tempItem.requestStateCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_ATTR_STATE_NAME"));
                            tempItem.requestStateName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_ATTR_STATE_DESC"));
                            tempItem.requestTypeCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_ATTR_TYPE_NAME"));
                            tempItem.requestTypeName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_ATTR_TYPE_DESC"));
                            tempItem.deviceUUID = EscapeUtils.CheckTextNull(rs.getString("SERVICE_UUID"));
                            tempItem.discountRate = rs.getInt("DISCOUNT_RATE");
                            tempItem.shareMode = rs.getBoolean("SHARED_MODE");
                            tempItem.activationCode = EscapeUtils.CheckTextNull(rs.getString("ACTIVATION_CODE"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CertificateInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_BRIEF_LIST_EXPORT">
    public void S_BO_API_CERTIFICATION_BRIEF_LIST_EXPORT(String pCOMPANY_NAME, String pPERSONAL_NAME, String pCOLLECT_ENABLED, String pBRANCH_NAME,
            String pUserUID, int pLANGUAGE, String idCheckCommitEnabled,
            String stateProfile, String certificateSN, CertificateBriefInfo[][] response, int[] pRESPONSE_CODE,
            String pENTERPRISE_ID, String pPERSONAL_ID)
        throws Exception {
        ArrayList<CertificateBriefInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_API_CERTIFICATION_BRIEF_LIST_EXPORT", 12));
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pCOLLECT_ENABLED)) {
                            proc_stmt.setInt("pCOLLECT_ENABLED", Integer.parseInt(pCOLLECT_ENABLED));
                        } else {
                            proc_stmt.setString("pCOLLECT_ENABLED", null);
                        }
                        proc_stmt.setInt("pLANGUAGE", pLANGUAGE);
                        if (!"".equals(pBRANCH_NAME)) {
                            proc_stmt.setString("pBRANCH_NAME", pBRANCH_NAME);
                        } else {
                            proc_stmt.setString("pBRANCH_NAME", null);
                        }
                        if (!"".equals(pUserUID)) {
                            proc_stmt.setInt("pUSER_BY", Integer.parseInt(pUserUID));
                        } else {
                            proc_stmt.setString("pUSER_BY", null);
                        }
                        if ("1".equals(idCheckCommitEnabled)) {
                            proc_stmt.setInt("pCOMMIT_ENABLED", Integer.parseInt(idCheckCommitEnabled));
                        } else {
                            proc_stmt.setString("pCOMMIT_ENABLED", null);
                        }
                        if (!"".equals(stateProfile)) {
                            proc_stmt.setString("pFILE_MANAGER_STATE_NAME", stateProfile);
                        } else {
                            proc_stmt.setString("pFILE_MANAGER_STATE_NAME", null);
                        }
                        if (!"".equals(certificateSN)) {
                            proc_stmt.setString("pCERTIFICATION_SN", certificateSN);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_SN", null);
                        }
                        proc_stmt.registerOutParameter("pRESPONSE_CODE", java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_BRIEF_LIST_EXPORT", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        pRESPONSE_CODE[0] = Integer.parseInt(proc_stmt.getString("pRESPONSE_CODE"));
                        while (rs.next()) {
                            if(EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_STATE_NAME")).equals(Definitions.CONFIG_CERTIFICATION_STATE_CODE_OPERATED))
                            {
                                String sBRIEF_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("BRIEF_PROPERTIES"));
                                CertificateBriefInfo tempItem = new CertificateBriefInfo();                                
                                String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                                String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                                CommonReferServlet.separateUIDToBriefField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                                tempItem.certificateSN = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_SN"));
                                tempItem.personalName = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                                tempItem.companyName = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                                tempItem.receivedBriefTime = EscapeUtils.CheckTextNull(rs.getString("RECEIVED_BRIEF_DT"));
                                tempItem.briefState = EscapeUtils.CheckTextNull(rs.getString("FILE_MANAGER_STATE_DESC"));
                                if(!"".equals(sBRIEF_PROPERTIES))
                                {
                                    CERTIFICATION_POLICY_DATA[][] resIPData = new CERTIFICATION_POLICY_DATA[1][];
                                    CommonFunction.getCollectedBriefProperties(sBRIEF_PROPERTIES, resIPData);
                                    if(resIPData[0].length > 0) {
                                        boolean bRegister = CommonFunction.checkBriefFileType(Definitions.CONFIG_FILE_PROFILE_SERVICE_REGISTRATION_DOCUMENT, resIPData);
                                        if(bRegister == true){tempItem.registrationFile = true;}
                                        boolean bConfirm = CommonFunction.checkBriefFileType(Definitions.CONFIG_FILE_PROFILE_MINUTES_OF_HANDOVER, resIPData);
                                        if(bConfirm == true){tempItem.confirmationFile = true;}
                                        boolean bDKKD = CommonFunction.checkBriefFileType(Definitions.CONFIG_FILE_PROFILE_PHOTO_ACTIVITY_DECLARATION, resIPData);
                                        if(bDKKD == true){tempItem.businessLicenseFile = true;}
                                        boolean bCMND = CommonFunction.checkBriefFileType(Definitions.CONFIG_FILE_PROFILE_PHOTO_ID_CARD, resIPData);
                                        if(bCMND == true){tempItem.identityCardFile = true;}
                                    }
                                }
                                tempList.add(tempItem);
                            }
                        }
                        response[0] = new CertificateBriefInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_EXPIRE_SOON_LIST">
    public void S_BO_API_CERTIFICATION_EXPIRE_SOON_LIST(int pExpireDateNumber, String beneficiaryBranch, String beneficiaryUser,
            int pLANGUAGE, CertificateExpireSoonInfo[][] response, int[] pRESPONSE_CODE)
        throws Exception {
        ArrayList<CertificateExpireSoonInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_EXPIRE_SOON_LIST(?,?,?,?) }");
                        proc_stmt.setInt(1, pExpireDateNumber);
                        if (!"".equals(beneficiaryBranch)) {
                            proc_stmt.setString(2, beneficiaryBranch);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(beneficiaryUser)) {
                            proc_stmt.setString(3, beneficiaryUser);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setInt(4, pLANGUAGE);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_EXPIRE_SOON_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        pRESPONSE_CODE[0] = 0;
                        while (rs.next()) {
                            CertificateExpireSoonInfo tempItem = new CertificateExpireSoonInfo();
                            tempItem.certificateID = rs.getInt("ID");
                            tempItem.certificateOwnerID = rs.getInt("CERTIFICATION_OWNER_ID");
                            tempItem.provinceId = rs.getInt("PROVINCE_ID");
                            tempItem.provinceName = EscapeUtils.CheckTextNull(rs.getString("PROVINCE_NAME"));
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToAPIExpireField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.certificate = rs.getString("CERTIFICATION");
                            tempItem.effectiveTime = rs.getString("EFFECTIVE_DT");
                            tempItem.expirationTime = rs.getString("EXPIRATION_DT");
                            tempItem.expirationContractTime = rs.getString("EXPIRATION_CONTRACT_DT");
                            tempItem.certificateSN = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_SN"));
                            tempItem.personalName = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.companyName = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            tempItem.certificateDN = EscapeUtils.CheckTextNull(rs.getString("SUBJECT"));
                            tempItem.phoneContact = EscapeUtils.CheckTextNull(rs.getString("PHONE_CONTRACT"));
                            tempItem.emailContact = EscapeUtils.CheckTextNull(rs.getString("EMAIL_CONTRACT"));
                            tempItem.tokenSN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempItem.domainName = EscapeUtils.CheckTextNull(rs.getString("DOMAIN_NAME"));
                            tempItem.certificateAuthorityCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_NAME"));
                            tempItem.certificateAuthorityName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_DESC"));
                            tempItem.certificatePurposeCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PURPOSE_NAME"));
                            tempItem.certificatePurposeName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PURPOSE_DESC"));
                            tempItem.certificateProfileCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempItem.certificateProfileName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_DESC"));
                            tempItem.certificateStateCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_STATE_NAME"));
                            tempItem.certificateStateName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_STATE_DESC"));
                            tempItem.formFactorCode = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_NAME"));
                            tempItem.formFactorName = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_DESC"));
                            tempItem.csr = EscapeUtils.CheckTextNull(rs.getString("CSR"));
                            tempItem.createdDate = rs.getString("CREATED_DT");
                            tempItem.backupKeyEnabled = rs.getBoolean("PRIVATE_KEY_ENABLED");
//                            tempItem.value = EscapeUtils.CheckTextNull(rs.getString("VALUE"));
                            tempItem.subjectAlternativeName = EscapeUtils.CheckTextNull(rs.getString("PROPERTIES"));
                            tempItem.requestTypeCode = EscapeUtils.CheckTextNull(rs.getString("SERVICE_TYPE_NAME"));
                            tempItem.requestTypeName = EscapeUtils.CheckTextNull(rs.getString("SERVICE_TYPE_DESC"));
                            tempItem.deviceUUID = EscapeUtils.CheckTextNull(rs.getString("SERVICE_UUID"));
                            tempItem.beneficiaryUser = EscapeUtils.CheckTextNull(rs.getString("USERNAME_CREATED"));
                            tempItem.beneficiaryBranch = EscapeUtils.CheckTextNull(rs.getString("BRANCH_DESC"));
                            tempItem.discountRate = rs.getInt("DISCOUNT_RATE");
                            tempItem.shareModeEnabled = rs.getBoolean("SHARED_MODE");
                            tempItem.expireDateNumber = rs.getInt("EXPIRE_DATE_NUMBER");
                            tempItem.compensateDateNumber = rs.getInt("COMPENSATION_DATE_NUMBER");
                            tempList.add(tempItem);
                        }
                        response[0] = new CertificateExpireSoonInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_REPORT_PERIODIC_NEAC">
    public void S_BO_API_REPORT_PERIODIC_NEAC(int pQUARTER, int pYEAR, int pLANGUAGE, PeriodicReportInfo[][] response)
            throws Exception {
        ArrayList<PeriodicReportInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_REPORT_PERIODIC_NEAC(?,?,?) }");
                        proc_stmt.setInt(1, pQUARTER);
                        proc_stmt.setInt(2, pYEAR);
                        proc_stmt.setInt(3, pLANGUAGE);
                        CommonFunction.LogDebugString(log, "S_BO_API_REPORT_PERIODIC_NEAC", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            PeriodicReportInfo tempItem = new PeriodicReportInfo();
                            tempItem.numberOfBusiness = rs.getInt("TOTAL_ENTERPRISE");
                            tempItem.numberOfPersonal = rs.getInt("TOTAL_PERSONAL");
                            tempItem.numberOfStaff = rs.getInt("TOTAL_STAFF");
                            int sSUM = tempItem.numberOfBusiness + tempItem.numberOfPersonal + tempItem.numberOfStaff;
                            tempItem.numberOfTotal = sSUM;
                            tempItem.certificateStateCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATE_STATE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new PeriodicReportInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_REPORT_RECONCILIATION_NEAC">
    public void S_BO_API_REPORT_RECONCILIATION_NEAC(int pQUARTER, int pYEAR, ReconciliationReportInfo[][] response)
            throws Exception {
        ArrayList<ReconciliationReportInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_REPORT_RECONCILIATION_NEAC(?,?) }");
                        proc_stmt.setInt(1, pQUARTER);
                        proc_stmt.setInt(2, pYEAR);
                        CommonFunction.LogDebugString(log, "S_BO_API_REPORT_RECONCILIATION_NEAC", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            ReconciliationReportInfo tempItem = new ReconciliationReportInfo();
                            tempItem.content = EscapeUtils.CheckTextNull(rs.getString("REPORT_DESC"));
                            tempItem.numberOfCertificate = rs.getInt("TOTAL_ENTERPRISE");
                            tempList.add(tempItem);
                        }
                        response[0] = new ReconciliationReportInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_REPORT_CERTIFICATE_NEAC">
    public void S_BO_API_REPORT_CERTIFICATE_NEAC(String pFrom, String pTo, String sCertStatCode, int pLANGUAGE,
            CertificateNEACReportInfo[][] response, String[] pRESULT_ADD)
            throws Exception {
        ArrayList<CertificateNEACReportInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_REPORT_CERTIFICATE_NEAC(?,?,?,?) }");
                        if(!"".equals(pFrom)) {
                            proc_stmt.setString(1, pFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if(!"".equals(pTo)) {
                            proc_stmt.setString(2, pTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if(!"".equals(sCertStatCode)) {
                            proc_stmt.setString(3, sCertStatCode);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setInt(4, pLANGUAGE);
                        CommonFunction.LogDebugString(log, "S_BO_API_REPORT_CERTIFICATE_NEAC", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CertificateNEACReportInfo tempItem = new CertificateNEACReportInfo();
                            String sCERT = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION"));
                            tempItem.certificateAuthorityCode = rs.getString("CERTIFICATION_AUTHORITY_CODE");
                            tempItem.certificateAuthorityName = rs.getString("CERTIFICATION_AUTHORITY_DESC");
                            tempItem.certificateStateCode = rs.getString("CERTIFICATION_STATE_CODE");
                            tempItem.certificateStateName = rs.getString("CERTIFICATION_STATE_DESC");
                            tempItem.certificatePurposeCode = rs.getString("CERTIFICATION_PURPOSE_CODE");
                            tempItem.certificateSN = rs.getString("CERTIFICATION_SN");
                            tempItem.issuerSubject = rs.getString("ISSUER_SUBJECT");
                            tempItem.effectiveTime = rs.getString("EFFECTIVE_DT");
                            tempItem.expirationTime = rs.getString("EXPIRATION_DT");
                            tempItem.publicKey = rs.getString("PUBLIC_KEY");
                            tempItem.certificateDN = EscapeUtils.CheckTextNull(rs.getString("SUBJECT")).replace(Definitions.CONFIG_COMPONENT_DN_TAG_UID, Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE);;
                            tempItem.createDate = pRESULT_ADD[0];
                            tempItem.createUser = pRESULT_ADD[1];
                            tempItem.frequency = pRESULT_ADD[2];
                            if(!"".equals(sCERT))
                            {
                                String[] parseCert = new String[16];
                                GetFeatureCertificate2.parserCertificateComponent(sCERT, parseCert);
                                if("0".equals(parseCert[0]))
                                {
                                    tempItem.version = parseCert[1];
                                    tempItem.signatureAlgorithm = parseCert[2];
                                    tempItem.signatureHashAlgorithm = parseCert[3];
                                    tempItem.authorityInformationAccess = parseCert[4];
                                    tempItem.keyUsage = parseCert[5];
                                    tempItem.enhancedKeyUsage = parseCert[6];
                                    tempItem.subjectKeyIdentifier = parseCert[7];
                                    tempItem.authorityKeyIdentifier = parseCert[8];
                                    tempItem.certificatePolicies = parseCert[9];
                                    tempItem.crlDistributionPoints = parseCert[10];
                                    tempItem.basicConstraints = parseCert[11];
                                    tempItem.subjectAlternativeName = parseCert[12];
                                    tempItem.thumbprintAlgorithm = parseCert[13];
                                    tempItem.thumbprint = parseCert[14];
                                }
                            }
                            tempList.add(tempItem);
                        }
                        response[0] = new CertificateNEACReportInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_REPORT_CERTIFICATE">
    public void S_BO_API_REPORT_CERTIFICATE(String pFROM_DT, String pTO_DT, String pCERTIFICATION_AUTHORITY_CODE,
            String pCERTIFICATION_PURPOSE_CODE, String pCERTIFICATION_PROFILE_CODE, String pPKI_FORMFACTOR_CODE,
            String pBENEFICIARY_USERNAME, String pBRANCH_ID, int pCERTIFICATION_OWNER_ID, int pLANGUAGE,
            CertificateReportInfo[][] response) throws Exception {
        ArrayList<CertificateReportInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_REPORT_CERTIFICATE(?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pFROM_DT);
                        proc_stmt.setString(2, pTO_DT);
                        if(!"".equals(pCERTIFICATION_AUTHORITY_CODE)) {
                            proc_stmt.setString(3, pCERTIFICATION_AUTHORITY_CODE);
                        } else{
                            proc_stmt.setString(3, null);
                        }
                        if(!"".equals(pCERTIFICATION_PURPOSE_CODE)) {
                            proc_stmt.setString(4, pCERTIFICATION_PURPOSE_CODE);
                        } else{
                            proc_stmt.setString(4, null);
                        }
                        if(!"".equals(pCERTIFICATION_PROFILE_CODE)) {
                            proc_stmt.setString(5, pCERTIFICATION_PROFILE_CODE);
                        } else{
                            proc_stmt.setString(5, null);
                        }
                        if(!"".equals(pPKI_FORMFACTOR_CODE)) {
                            proc_stmt.setString(6, pPKI_FORMFACTOR_CODE);
                        } else{
                            proc_stmt.setString(6, null);
                        }
                        if(!"".equals(pBENEFICIARY_USERNAME)) {
                            proc_stmt.setString(7, pBENEFICIARY_USERNAME);
                        } else{
                            proc_stmt.setString(7, null);
                        }
                        if(!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(8, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if(pCERTIFICATION_OWNER_ID != 0) {
                            proc_stmt.setInt(9, pCERTIFICATION_OWNER_ID);
                        } else{
                            proc_stmt.setString(9, null);
                        }
                        proc_stmt.setInt(10, pLANGUAGE);
                        CommonFunction.LogDebugString(log, "S_BO_API_REPORT_CERTIFICATE", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CertificateReportInfo tempItem = new CertificateReportInfo();
                            tempItem.companyName = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            tempItem.personalName = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.taxCode = EscapeUtils.CheckTextNull(rs.getString("TAX_CODE"));
                            tempItem.decision = EscapeUtils.CheckTextNull(rs.getString("DECISION"));
                            tempItem.pid = EscapeUtils.CheckTextNull(rs.getString("P_ID"));
                            tempItem.citizenId = EscapeUtils.CheckTextNull(rs.getString("P_EID"));
                            tempItem.budgetCode = EscapeUtils.CheckTextNull(rs.getString("BUDGET_CODE"));
                            tempItem.passport = EscapeUtils.CheckTextNull(rs.getString("PASSPORT"));
                            tempItem.certificate = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION"));
                            tempItem.effectiveTime = EscapeUtils.CheckTextNull(rs.getString("EFFECTIVE_DT"));
                            tempItem.expirationTime = EscapeUtils.CheckTextNull(rs.getString("EXPIRATION_DT"));
                            tempItem.certificateSN = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_SN"));
                            tempItem.certificateDN = EscapeUtils.CheckTextNull(rs.getString("SUBJECT"));
                            tempItem.phoneContact = EscapeUtils.CheckTextNull(rs.getString("PHONE_CONTRACT"));
                            tempItem.emailContact = EscapeUtils.CheckTextNull(rs.getString("EMAIL_CONTRACT"));
                            tempItem.tokenSN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempItem.beneficiaryUser = EscapeUtils.CheckTextNull(rs.getString("BENEFICIARY_USER"));
                            tempItem.publicKey = EscapeUtils.CheckTextNull(rs.getString("PUBLIC_KEY"));
                            tempItem.publicKeyHash = EscapeUtils.CheckTextNull(rs.getString("PUBLIC_KEY_HASH"));
                            tempItem.certificateHash = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_HASH"));
                            tempItem.certificateAuthorityName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_DESC"));
                            tempItem.certificatePurposeName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PURPOSE_DESC"));
                            tempItem.certificateProfileName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_DESC"));
                            tempItem.certificateStateName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_STATE_DESC"));
                            tempItem.backupKeyEnabled = rs.getBoolean("PRIVATE_KEY_ENABLED");
                            tempItem.certificateOwnerID = rs.getInt("CERTIFICATION_OWNER_ID");
                            tempItem.formFactorName = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_DESC"));
                            tempItem.beneficiaryRA = EscapeUtils.CheckTextNull(rs.getString("BRANCH_DESC"));
                            
                            tempItem.certificateAuthorityCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_NAME"));
                            tempItem.certificatePurposeCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PURPOSE_NAME"));
                            tempItem.certificateProfileCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempItem.formFactorCode = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_NAME"));
                            tempItem.certificateStateCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_STATE_NAME"));
                            tempItem.cityProvinceCode = EscapeUtils.CheckTextNull(rs.getString("PROVINCE_NAME"));
                            tempItem.cityProvinceName = EscapeUtils.CheckTextNull(rs.getString("PROVINCE_DESC"));
                            tempItem.requestStateCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_ATTR_STATE_NAME"));
                            tempItem.requestStateName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_ATTR_STATE_DESC"));
                            tempItem.requestTypeCode = EscapeUtils.CheckTextNull(rs.getString("SERVICE_TYPE_NAME"));
                            tempItem.requestTypeName = EscapeUtils.CheckTextNull(rs.getString("SERVICE_TYPE_DESC"));
                            tempItem.createDate = EscapeUtils.CheckTextNull(rs.getString("CREATED_DT"));
                            tempItem.deviceUUID = EscapeUtils.CheckTextNull(rs.getString("SERVICE_UUID"));
                            tempItem.approveDate = EscapeUtils.CheckTextNull(rs.getString("APPROVAL_CA_DT"));
                            tempItem.revokeDate = EscapeUtils.CheckTextNull(rs.getString("REVOKED_DT"));
                            tempItem.operationDate = EscapeUtils.CheckTextNull(rs.getString("OPERATED_DT"));
                            tempItem.issueDate = EscapeUtils.CheckTextNull(rs.getString("ISSUED_DT"));
                            tempItem.expirationContractTime = EscapeUtils.CheckTextNull(rs.getString("EXPIRATION_CONTRACT_DT"));
                            tempItem.csr = EscapeUtils.CheckTextNull(rs.getString("CSR"));
                            tempItem.duration = EscapeUtils.CheckTextNull(rs.getString("DURATION"));
                            tempItem.feeAmount = EscapeUtils.CheckTextNull(rs.getString("FEE_AMOUNT"));
                            tempItem.comment = EscapeUtils.CheckTextNull(rs.getString("COMMENT"));
                            tempItem.value = EscapeUtils.CheckTextNull(rs.getString("VALUE"));
                            
                            tempList.add(tempItem);
                        }
                        response[0] = new CertificateReportInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_FILE_MANAGER_CERTIFICATION">
    public void S_BO_API_FILE_MANAGER_BY_CERTIFICATION_ID(int pCERTIFICATION_ID, String pFILE_PROFILE_NAME, int pLANGUAGE,
        FILE_MANAGER[][] response) throws Exception {
        ArrayList<FILE_MANAGER> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_FILE_MANAGER_BY_CERTIFICATION_ID(?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ID);
                        if(!"".equals(pFILE_PROFILE_NAME)) {
                            proc_stmt.setString(2, pFILE_PROFILE_NAME);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setInt(3, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            FILE_MANAGER tempItem = new FILE_MANAGER();
                            tempItem.FILE_NAME = EscapeUtils.CheckTextNull(rs.getString("FILE_NAME"));
                            tempItem.DMS_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("DMS_PROPERTIES"));
                            tempItem.FILE_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("FILE_PROFILE_NAME"));
                            tempItem.FILE_PROFILE_DESC = EscapeUtils.CheckTextNull(rs.getString("FILE_PROFILE_DESC"));
                            tempItem.UUID = EscapeUtils.CheckTextNull(rs.getString("UUID"));
                            tempList.add(tempItem);
                        }
                        response[0] = new FILE_MANAGER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_INSERT">
    public void S_BO_API_CERTIFICATION_INSERT(String pCERTIFICATION_PROFILE_CODE, String pTOKEN_SN, String pCERTIFICATION_SN,
            String pPERSONAL_NAME, String pCOMPANY_NAME, String pDOMAIN_NAME, String pSUBJECT,
            String pISSUER_SUBJECT, String pPHONE_CONTRACT, String pEMAIL_CONTRACT, String pPROVINCE_NAME,
            String pPAST_CERTIFICATION_SN, String pACTIVATION_CODE, String pCERTIFICATION_ATTR_TYPE_NAME, String pVALUE_ATTR,
            String pOWNER_BY, String pUSER_BY, String pCSR, String pCA_CODE, String pCHANGE_KEY_ENABLED,
            String pPRIVATE_KEY_ENABLED, String pPKI_FORMFACTOR_NAME, String pDEVICE_UUID, String pPROMOTION_DURATION,
            String[] pRESPONSE_CODE_NAME, int[] pCERTIFICATION_ID, int[] pCERTIFICATION_ATTR_ID,
            int pCERTIFICATION_OWNER_ID, java.sql.Timestamp pEFFECTIVE_DT, java.sql.Timestamp pEXPIRATION_DT,
            String pENTERPRISE_ID, String pPERSONAL_ID) throws Exception {
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_API_CERTIFICATION_INSERT2", 32));
                        proc_stmt.setString("pCERTIFICATION_PROFILE_NAME", pCERTIFICATION_PROFILE_CODE);
                        if (!"".equals(pTOKEN_SN)) {
                            proc_stmt.setString("pTOKEN_SN", pTOKEN_SN);
                        } else {
                            proc_stmt.setString("pTOKEN_SN", null);
                        }
                        if (!"".equals(pCERTIFICATION_SN)) {
                            proc_stmt.setString("pCERTIFICATION_SN", pCERTIFICATION_SN);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_SN", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pDOMAIN_NAME)) {
                            proc_stmt.setString("pDOMAIN_NAME", pDOMAIN_NAME);
                        } else {
                            proc_stmt.setString("pDOMAIN_NAME", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        if (!"".equals(pSUBJECT)) {
                            proc_stmt.setString("pSUBJECT", pSUBJECT);
                        } else {
                            proc_stmt.setString("pSUBJECT", null);
                        }
                        if (!"".equals(pISSUER_SUBJECT)) {
                            proc_stmt.setString("pISSUER_SUBJECT", pISSUER_SUBJECT);
                        } else {
                            proc_stmt.setString("pISSUER_SUBJECT", null);
                        }
                        if (!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString("pPHONE_CONTRACT", pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString("pPHONE_CONTRACT", null);
                        }
                        if (!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString("pEMAIL_CONTRACT", pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString("pEMAIL_CONTRACT", null);
                        }
                        if (!"".equals(pPROVINCE_NAME)) {
                            proc_stmt.setString("pPROVINCE_NAME", pPROVINCE_NAME);
                        } else {
                            proc_stmt.setString("pPROVINCE_NAME", null);
                        }
                        if (!"".equals(pPAST_CERTIFICATION_SN)) {
                            proc_stmt.setString("pPAST_CERTIFICATION_SN", pPAST_CERTIFICATION_SN);
                        } else {
                            proc_stmt.setString("pPAST_CERTIFICATION_SN", null);
                        }
                        if (!"".equals(pACTIVATION_CODE)) {
                            proc_stmt.setString("pACTIVATION_CODE", pACTIVATION_CODE);
                        } else {
                            proc_stmt.setString("pACTIVATION_CODE", null);
                        }
                        if (!"".equals(pCERTIFICATION_ATTR_TYPE_NAME)) {
                            proc_stmt.setString("pCERTIFICATION_ATTR_TYPE_NAME", pCERTIFICATION_ATTR_TYPE_NAME);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_ATTR_TYPE_NAME", null);
                        }
                        if (!"".equals(pVALUE_ATTR)) {
                            proc_stmt.setString("pVALUE", pVALUE_ATTR);
                        } else {
                            proc_stmt.setString("pVALUE", null);
                        }
                        if (!"".equals(pOWNER_BY)) {
                            proc_stmt.setString("pOWNER_USERNAME_BY", pOWNER_BY);
                        } else {
                            proc_stmt.setString("pOWNER_USERNAME_BY", null);
                        }
                        if (!"".equals(pUSER_BY)) {
                            proc_stmt.setString("pUSERNAME_BY", pUSER_BY);
                        } else {
                            proc_stmt.setString("pUSERNAME_BY", null);
                        }
                        if (!"".equals(pCSR)) {
                            proc_stmt.setString("pCSR", pCSR);
                        } else {
                            proc_stmt.setString("pCSR", null);
                        }
                        if (!"".equals(pCA_CODE)) {
                            proc_stmt.setString("pCERTIFICATION_AUTHORITY_NAME", pCA_CODE);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_AUTHORITY_NAME", null);
                        }
                        if (!"".equals(pPRIVATE_KEY_ENABLED)) {
                            proc_stmt.setInt("pPRIVATE_KEY_ENABLED", Integer.parseInt(pPRIVATE_KEY_ENABLED));
                        } else {
                            proc_stmt.setString("pPRIVATE_KEY_ENABLED", null);
                        }
                        if (!"".equals(pCHANGE_KEY_ENABLED)) {
                            proc_stmt.setInt("pCHANGE_KEY_ENABLED", Integer.parseInt(pCHANGE_KEY_ENABLED));
                        } else {
                            proc_stmt.setString("pCHANGE_KEY_ENABLED", null);
                        }
                        if (!"".equals(pPKI_FORMFACTOR_NAME)) {
                            proc_stmt.setString("pPKI_FORMFACTOR_NAME", pPKI_FORMFACTOR_NAME);
                        } else {
                            proc_stmt.setString("pPKI_FORMFACTOR_NAME", null);
                        }
                        if (!"".equals(pDEVICE_UUID)) {
                            proc_stmt.setString("pSERVICE_UUID", pDEVICE_UUID);
                        } else {
                            proc_stmt.setString("pSERVICE_UUID", null);
                        }
                        proc_stmt.setInt("pCERTIFICATION_OWNER_ID", pCERTIFICATION_OWNER_ID);
                        if (!"".equals(pPROMOTION_DURATION)) {
                            proc_stmt.setString("pPROMOTION_DURATION", pPROMOTION_DURATION);
                        } else {
                            proc_stmt.setString("pPROMOTION_DURATION", null);
                        }
                        if (pEFFECTIVE_DT != null) {
                            proc_stmt.setObject("pEFFECTIVE_DT", pEFFECTIVE_DT);
                        } else {
                            proc_stmt.setString("pEFFECTIVE_DT", null);
                        }
                        if (pEXPIRATION_DT != null) {
                            proc_stmt.setObject("pEXPIRATION_DT", pEXPIRATION_DT);
                        } else {
                            proc_stmt.setString("pEXPIRATION_DT", null);
                        }
                        proc_stmt.registerOutParameter("pRESPONSE_CODE_NAME", java.sql.Types.VARCHAR);
                        proc_stmt.registerOutParameter("pCERTIFICATION_ID", java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter("pCERTIFICATION_ATTR_ID", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_INSERT2", proc_stmt.toString());
                        proc_stmt.execute();
                        pRESPONSE_CODE_NAME[0] = proc_stmt.getString("pRESPONSE_CODE_NAME");
                        pCERTIFICATION_ID[0] = proc_stmt.getInt("pCERTIFICATION_ID");
                        pCERTIFICATION_ATTR_ID[0] = proc_stmt.getInt("pCERTIFICATION_ATTR_ID");
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_ATTR_INSERT">
    public void S_BO_API_CERTIFICATION_ATTR_INSERT(String pCERTIFICATION_SN, int pCERTIFICATION_ATTR_TYPE_ID,
        String pVALUE, String pUSER_BY, String[] pRESPONSE_CODE_NAME, int[] pCERTIFICATE_ATTR_ID)
        throws Exception {
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_ATTR_INSERT(?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pCERTIFICATION_SN);
                        proc_stmt.setInt(2, pCERTIFICATION_ATTR_TYPE_ID);
                        proc_stmt.setString(3, pVALUE);
                        proc_stmt.setString(4, pUSER_BY);
                        proc_stmt.registerOutParameter(5, java.sql.Types.VARCHAR);
                        proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_ATTR_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        pRESPONSE_CODE_NAME[0] = proc_stmt.getString(5);
                        pCERTIFICATE_ATTR_ID[0] = proc_stmt.getInt(6);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_REFUND">
    public int S_BO_API_CERTIFICATION_REFUND(int pCERTIFICATION_ID,
        String pVALUE, String pUSER_BY, int[] pCERTIFICATE_ATTR_ID)
        throws Exception {
        Connection conns = null;
        int sResult = 0;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_REFUND(?,?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ID);
//                        proc_stmt.setInt(2, pCERTIFICATION_ATTR_TYPE_ID);
                        proc_stmt.setString(2, pVALUE);
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_REFUND", proc_stmt.toString());
                        proc_stmt.execute();
                        sResult = proc_stmt.getInt(4);
                        pCERTIFICATE_ATTR_ID[0] = proc_stmt.getInt(5);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return sResult;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_FILE_MANAGER_INSERT">
    public String S_BO_API_FILE_MANAGER_INSERT(String pFILE_PROFILE_NAME, String pUUID, String pDMS_PROPERTIES,
            String pMIME_TYPE_NAME, String pFILE_NAME, int pFILE_SIZE, int pCERTIFICATION_ID, int pCERTIFICATION_OWNER_ID, String pUSER_BY,
            int[] pFILE_MANAGER_ID)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_FILE_MANAGER_INSERT(?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pFILE_PROFILE_NAME);
                        if (!"".equals(pUUID)) {
                            proc_stmt.setString(2, pUUID);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pDMS_PROPERTIES)) {
                            proc_stmt.setString(3, pDMS_PROPERTIES);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pMIME_TYPE_NAME)) {
                            proc_stmt.setString(4, pMIME_TYPE_NAME);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pFILE_NAME)) {
                            proc_stmt.setString(5, pFILE_NAME);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.setInt(6, pFILE_SIZE);
                        proc_stmt.setInt(7, pCERTIFICATION_ID);
                        proc_stmt.setInt(8, pCERTIFICATION_OWNER_ID);
                        proc_stmt.setString(9, pUSER_BY);
                        proc_stmt.registerOutParameter(10, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(11, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_FILE_MANAGER_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(10));
                        pFILE_MANAGER_ID[0] = proc_stmt.getInt(11);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_ATTR_SUPPLEMENT_FILE">
    public void S_BO_API_CERTIFICATION_ATTR_SUPPLEMENT_FILE(int pCERTIFICATION_ID, int pCERTIFICATION_ATTR_TYPE_ID, 
            String pVALUE, String pFILE_PROFILE_NAME, String pUUID, String pDMS_PROPERTIES,
            String pMIME_TYPE_NAME, String pFILE_NAME, int pFILE_SIZE, String pUSER_BY,
            String[] pRESPONSE_CODE_NAME,  int[] pCERTIFICATION_ATTR_ID, int[] pFILE_MANAGER_ID)
            throws Exception {
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_ATTR_SUPPLEMENT_FILE(?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ID);
                        proc_stmt.setInt(2, pCERTIFICATION_ATTR_TYPE_ID);
                        proc_stmt.setString(3, pVALUE);
                        proc_stmt.setString(4, pFILE_PROFILE_NAME);
                        if (!"".equals(pUUID)) {
                            proc_stmt.setString(5, pUUID);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pDMS_PROPERTIES)) {
                            proc_stmt.setString(6, pDMS_PROPERTIES);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pMIME_TYPE_NAME)) {
                            proc_stmt.setString(7, pMIME_TYPE_NAME);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pFILE_NAME)) {
                            proc_stmt.setString(8, pFILE_NAME);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        proc_stmt.setInt(9, pFILE_SIZE);
                        proc_stmt.setString(10, pUSER_BY);
                        proc_stmt.registerOutParameter(11, java.sql.Types.VARCHAR);
                        proc_stmt.registerOutParameter(12, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(13, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_ATTR_SUPPLEMENT_FILE", proc_stmt.toString());
                        proc_stmt.execute();
                        pRESPONSE_CODE_NAME[0] = proc_stmt.getString(11);
                        pCERTIFICATION_ATTR_ID[0] = proc_stmt.getInt(12);
                        pFILE_MANAGER_ID[0] = proc_stmt.getInt(13);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_OWNER_INSERT_SUPPLEMENT_FILE">
    public void S_BO_API_CERTIFICATION_OWNER_INSERT_SUPPLEMENT_FILE(int pCERTIFICATION_OWNER_ID,
            String pFILE_PROFILE_NAME, String pUUID, String pDMS_PROPERTIES,
            String pMIME_TYPE_NAME, String pFILE_NAME, int pFILE_SIZE, String pUSER_BY,
            String[] pRESPONSE_CODE_NAME,  int[] pFILE_MANAGER_ID)
            throws Exception {
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_OWNER_INSERT_SUPPLEMENT_FILE(?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_OWNER_ID);
                        proc_stmt.setString(2, pFILE_PROFILE_NAME);
                        if (!"".equals(pUUID)) {
                            proc_stmt.setString(3, pUUID);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pDMS_PROPERTIES)) {
                            proc_stmt.setString(4, pDMS_PROPERTIES);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pMIME_TYPE_NAME)) {
                            proc_stmt.setString(5, pMIME_TYPE_NAME);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pFILE_NAME)) {
                            proc_stmt.setString(6, pFILE_NAME);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        proc_stmt.setInt(7, pFILE_SIZE);
                        proc_stmt.setString(8, pUSER_BY);
                        proc_stmt.registerOutParameter(9, java.sql.Types.VARCHAR);
                        proc_stmt.registerOutParameter(10, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_OWNER_INSERT_SUPPLEMENT_FILE", proc_stmt.toString());
                        proc_stmt.execute();
                        pRESPONSE_CODE_NAME[0] = proc_stmt.getString(9);
                        pFILE_MANAGER_ID[0] = proc_stmt.getInt(10);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_SUPPLEMENT_FILE">
    public void S_BO_API_CERTIFICATION_SUPPLEMENT_FILE(int pCERTIFICATION_ATTR_ID, String pUSER_BY, String[] pRESPONSE_CODE_NAME)
        throws Exception {
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_SUPPLEMENT_FILE(?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ATTR_ID);
                        proc_stmt.setString(2, pUSER_BY);
                        proc_stmt.registerOutParameter(3, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_SUPPLEMENT_FILE", proc_stmt.toString());
                        proc_stmt.execute();
                        pRESPONSE_CODE_NAME[0] = proc_stmt.getString(3);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_SUPPLEMENT_FILE_DECLINE">
    public void S_BO_API_CERTIFICATION_SUPPLEMENT_FILE_DECLINE(int pCERTIFICATION_ATTR_ID, String pUSER_BY, String[] pRESPONSE_CODE_NAME)
        throws Exception {
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_SUPPLEMENT_FILE_DECLINE(?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ATTR_ID);
                        proc_stmt.setString(2, pUSER_BY);
                        proc_stmt.registerOutParameter(3, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_SUPPLEMENT_FILE_DECLINE", proc_stmt.toString());
                        proc_stmt.execute();
                        pRESPONSE_CODE_NAME[0] = proc_stmt.getString(3);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_GET_ALGORITHM_KEY_SIZE">
    public void S_BO_API_GET_ALGORITHM_KEY_SIZE(String pCERTIFICATION_PROFILE_CODE, CERTIFICATION[][] response)
        throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_GET_ALGORITHM_KEY_SIZE(?) }");
                        proc_stmt.setString(1, pCERTIFICATION_PROFILE_CODE);
                        CommonFunction.LogDebugString(log, "S_BO_API_GET_ALGORITHM_KEY_SIZE", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.KEY_SIZE = rs.getString("KEY_SIZE");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_PROFILE_GET_INFO ">
    public void S_BO_API_CERTIFICATION_PROFILE_GET_INFO(String pCERTIFICATION_PROFILE_CODE, CERTIFICATION_PROFILE[][] response)
        throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION_PROFILE> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_PROFILE_GET_INFO (?) }");
                        proc_stmt.setString(1, pCERTIFICATION_PROFILE_CODE);
//                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_PROFILE_GET_INFO ", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PROFILE tempItem = new CERTIFICATION_PROFILE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.DURATION = rs.getInt("DURATION");
                            tempItem.DURATION_FREE = rs.getInt("PROMOTION_DURATION");
                            tempItem.CERTIFICATION_AUTHORITY_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_NAME"));
                            tempItem.CERTIFICATION_PURPOSE_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PURPOSE_NAME"));
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PROFILE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_BRANCH_GET_INFO">
    public void S_BO_API_BRANCH_GET_INFO(String pBRANCH_NAME , BRANCH[][] response)
            throws Exception {
        ArrayList<BRANCH> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_BRANCH_GET_INFO(?) }");
                        proc_stmt.setString(1, pBRANCH_NAME);
                        CommonFunction.LogDebugString(log, "S_BO_API_BRANCH_GET_INFO", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BRANCH tempItem = new BRANCH();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.PARENT_ID = rs.getInt("PARENT_ID");
                            tempItem.PROVINCE_ID = rs.getInt("PROVINCE_ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("BRANCH_NAME"));
                            tempItem.SOAP_SECURITY_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("SOAP_SECURITY_PROPERTIES"));
                            tempItem.REST_JWT_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("REST_JWT_PROPERTIES"));
                            tempItem.CERTIFICATION_PROFILE_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_PROPERTIES"));
                            tempItem.CERTIFICATION_POLICY_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_POLICY_PROPERTIES"));
                            tempItem.IP_ADDRESS_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("IP_ADDRESS_PROPERTIES"));
                            tempItem.FUNCTIONALTITY_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("FUNCTIONALITY_PROPERTIES"));
                            tempList.add(tempItem);
                        }
                        response[0] = new BRANCH[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_BRANCH_LIST">
    public void S_BO_API_BRANCH_LIST(String pBRANCH_NAME, int pLANGUAGE, BranchInfo[][] response)
            throws Exception {
        ArrayList<BranchInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_BRANCH_LIST(?,?) }");
                        if(!"".equals(pBRANCH_NAME)) {
                            proc_stmt.setString(1, pBRANCH_NAME);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, pLANGUAGE);
                        CommonFunction.LogDebugString(log, "S_BO_API_BRANCH_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BranchInfo tempItem = new BranchInfo();
                            tempItem.branchManager = EscapeUtils.CheckTextNull(rs.getString("BRANCH_MANAGER"));
                            tempItem.branchCode = EscapeUtils.CheckTextNull(rs.getString("BRANCH_NAME"));
                            tempItem.branchName = EscapeUtils.CheckTextNull(rs.getString("BRANCH_DESC"));
                            tempItem.address = EscapeUtils.CheckTextNull(rs.getString("ADDRESS"));
                            tempItem.email = EscapeUtils.CheckTextNull(rs.getString("EMAIL"));
                            tempItem.phoneNumber = EscapeUtils.CheckTextNull(rs.getString("PHONENUMBER"));
                            tempItem.representativePosition = EscapeUtils.CheckTextNull(rs.getString("REPRESENTATIVE_POSITION"));
                            tempItem.representative = EscapeUtils.CheckTextNull(rs.getString("REPRESENTATIVE"));
                            tempItem.taxCode = EscapeUtils.CheckTextNull(rs.getString("TAX_CODE"));
                            tempList.add(tempItem);
                        }
                        response[0] = new BranchInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_RESPONSE_CODE_GET_INFO">
    public void S_BO_API_RESPONSE_CODE_GET_INFO(String pRESPONSE_CODE_NAME, int pLANGUAGE, RESPONSE_CODE[][] response)
            throws Exception {
        ArrayList<RESPONSE_CODE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_RESPONSE_CODE_GET_INFO(?,?) }");
                        proc_stmt.setString(1, pRESPONSE_CODE_NAME);
                        proc_stmt.setInt(2, pLANGUAGE);
                        CommonFunction.LogDebugString(log, "S_BO_API_RESPONSE_CODE_GET_INFO", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            RESPONSE_CODE tempItem = new RESPONSE_CODE();
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("RESPONSE_CODE_NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("RESPONSE_CODE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new RESPONSE_CODE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_REVOCATION_REASON_LIST">
    public void S_BO_API_CERTIFICATION_REVOCATION_REASON_LIST(String pNAME, int pLanguage, CertificateRevocationReasonInfo[][] response)
            throws Exception {
        ArrayList<CertificateRevocationReasonInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_REVOCATION_REASON_LIST(?,?) }");
                        if(!"".equals(pNAME)){
                            proc_stmt.setString(1, pNAME);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, pLanguage);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            if(rs.getInt("ID") != Definitions.CONFIG_CERTIFICATION_REVOKE_REASON_CERTIFICATEHOLD_ID
                                && rs.getInt("ID") != Definitions.CONFIG_CERTIFICATION_REVOKE_REASON_REMOVEFROMCRL_ID)
                            {
                                CertificateRevocationReasonInfo tempItem = new CertificateRevocationReasonInfo();
                                tempItem.certificateRevocationReasonId = rs.getInt("ID");
                                tempItem.certificateRevocationReasonCode = rs.getString("NAME");
                                tempItem.certificateRevocationReasonName = rs.getString("CERTIFICATION_REVOCATION_REASON_DESC");
                                tempList.add(tempItem);
                            }
                        }
                        response[0] = new CertificateRevocationReasonInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_PKI_FORMFACTOR_LIST">
    public void S_BO_API_PKI_FORMFACTOR_LIST(String pCERTIFICATION_PURPOSE_CODE, int pLANGUAGE, FormfactorInfo[][] response, String sJSON_POLICY)
            throws Exception {
        ArrayList<FormfactorInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_PKI_FORMFACTOR_LIST(?,?) }");
                        proc_stmt.setString(1, pCERTIFICATION_PURPOSE_CODE);
                        proc_stmt.setInt(2, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        if(!"".equals(sJSON_POLICY))
                        {
                            while (rs.next()) {
                                CERTIFICATION_POLICY_DATA[][] resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                                CommonFunction.getPKIFormFactorCertList(sJSON_POLICY, resPolicyData);
                                if(resPolicyData[0].length > 0)
                                {
                                    String sPKI_FORMFACTOR_NAME = EscapeUtils.CheckTextNull(rs.getString("NAME"));
                                    for(CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0])
                                    {
                                        if(sPKI_FORMFACTOR_NAME.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name)))
                                        {
                                            FormfactorInfo tempItem = new FormfactorInfo();
                                            tempItem.formFactorId = rs.getInt("ID");
                                            tempItem.formFactorCode = rs.getString("NAME");
                                            tempItem.formFactorName = rs.getString("PKI_FORMFACTOR_DESC");
                                            tempList.add(tempItem);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        response[0] = new FormfactorInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_FILE_PROFILE_LIST">
    public void S_BO_API_FILE_PROFILE_LIST(int pLANGUAGE, FileTypeInfo[][] response)
            throws Exception {
        ArrayList<FileTypeInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_FILE_PROFILE_LIST(?) }");
                        proc_stmt.setInt(1, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            FileTypeInfo tempItem = new FileTypeInfo();
                            tempItem.fileTypeCode = rs.getString("NAME");
                            tempItem.fileTypeName = rs.getString("FILE_PROFILE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new FileTypeInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_FILE_PROFILE_LIST">
    public void S_BO_FILE_PROFILE_COMBOBOX(FILE_PROFILE[][] response)
            throws Exception {
        ArrayList<FILE_PROFILE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FILE_PROFILE_COMBOBOX() }");
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            FILE_PROFILE tempItem = new FILE_PROFILE();
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("REMARK"));
                            tempItem.REMARK_EN = EscapeUtils.CheckTextNull(rs.getString("REMARK_EN"));
                            tempList.add(tempItem);
                        }
                        response[0] = new FILE_PROFILE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_FUNCTIONALITY_COMBOBOX">
    public void S_BO_API_FUNCTIONALITY_COMBOBOX(String pLANGUAGE, FUNCTIONALITY[][] response)
            throws Exception {
        ArrayList<FUNCTIONALITY> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_FUNCTIONALITY_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLANGUAGE));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            FUNCTIONALITY tempItem = new FUNCTIONALITY();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("API_FUNCTIONALITY_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new FUNCTIONALITY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_GET_USERNAME_BY_BRANCH_CODE">
    public void S_BO_API_GET_USERNAME_BY_BRANCH_CODE(String pBRANCH_CODE, int[] pRESPONSE_CODE, UserInfo[][] response)
        throws Exception {
        ArrayList<UserInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_GET_USERNAME_BY_BRANCH_CODE(?,?) }");
                        proc_stmt.setString(1, pBRANCH_CODE);
                        proc_stmt.registerOutParameter(2, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_GET_USERNAME_BY_BRANCH_CODE", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        pRESPONSE_CODE[0] = proc_stmt.getInt(2);
                        while (rs.next()) {
                            UserInfo tempItem = new UserInfo();
                            tempItem.userName = EscapeUtils.CheckTextNull(rs.getString("USERNAME"));
                            tempList.add(tempItem);
                        }
                        response[0] = new UserInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CHECK_USERNAME_AND_BRANCH_CODE">
    public String S_BO_API_CHECK_USERNAME_AND_BRANCH_CODE(String pBRANCH_CODE, String pUSERNAME)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CHECK_USERNAME_AND_BRANCH_CODE(?,?,?) }");
                        proc_stmt.setString(1, pBRANCH_CODE);
                        proc_stmt.setString(2, pUSERNAME);
                        proc_stmt.registerOutParameter(3, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_CHECK_USERNAME_AND_BRANCH_CODE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(3));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_TOKEN_ATTR_INSERT">
    public void S_BO_API_TOKEN_ATTR_INSERT(String pTOKEN_SN, int pTOKEND_ATTR_TYPE_ID, int pTOKEN_ATTR_STATE_ID, String pValue,
        String pUSER_BY, String[] pRESPONSE_CODE, int[] pTOKEN_ATTR_ID) throws Exception {
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_TOKEN_ATTR_INSERT(?,?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pTOKEN_SN);
                        proc_stmt.setInt(2, pTOKEND_ATTR_TYPE_ID);
                        proc_stmt.setInt(3, pTOKEN_ATTR_STATE_ID);
                        if (!"".equals(pValue)) {
                            proc_stmt.setString(4, pValue);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.setString(5, pUSER_BY);
                        proc_stmt.registerOutParameter(6, java.sql.Types.VARCHAR);
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_TOKEN_ATTR_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        pRESPONSE_CODE[0] = proc_stmt.getString(6);
                        pTOKEN_ATTR_ID[0] = proc_stmt.getInt(7);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_TOKEN_ATTR_DECLINED">
    public String S_BO_API_TOKEN_ATTR_DECLINED(int pTOKEN_ATTR_ID, String pVALUE, String pUSER_BY)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_TOKEN_ATTR_DECLINED(?,?,?,?) }");
                        proc_stmt.setInt(1, pTOKEN_ATTR_ID);
                        proc_stmt.setString(2, pVALUE);
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_API_TOKEN_ATTR_DECLINED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(4);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_TOKEN_ATTR_UNBLOCK_LIST">
    public void S_BO_API_TOKEN_ATTR_UNBLOCK_LIST(int pATTR_ID, String pBRANCH_ID, String pTOKEN_ATTR_STATE_CODE,
        int pLANGUAGE, FormFactorUnblockInfo[][] response) throws Exception {
        ArrayList<FormFactorUnblockInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_TOKEN_ATTR_UNBLOCK_LIST(?,?,?,?) }");
                        if(pATTR_ID != 0) {
                            proc_stmt.setInt(1, pATTR_ID);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if(!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(2, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if(!"".equals(pTOKEN_ATTR_STATE_CODE)) {
                            proc_stmt.setString(3, pTOKEN_ATTR_STATE_CODE);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setInt(4, pLANGUAGE);
                        CommonFunction.LogDebugString(log, "S_BO_API_TOKEN_ATTR_UNBLOCK_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            FormFactorUnblockInfo tempItem = new FormFactorUnblockInfo();
                            tempItem.formFactorUnblockID = rs.getInt("ID");
                            tempItem.formFactorSN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempItem.formFactorCode = EscapeUtils.CheckTextNull(rs.getString("FORMFACTOR_NAME"));
                            tempItem.formFactorName = EscapeUtils.CheckTextNull(rs.getString("FORMFACTOR_DESC"));
                            tempItem.queueStateCode = EscapeUtils.CheckTextNull(rs.getString("TOKEN_ATTR_STATE_NAME"));
                            tempItem.queueStateName = EscapeUtils.CheckTextNull(rs.getString("TOKEN_ATTR_STATE_DESC"));
                            tempItem.userPINEnabled = EscapeUtils.CheckTextNull(rs.getString("TOKEN_ATTR_TYPE_NAME")).equals(Definitions.CONFIG_ROLE_PROPERTIES_TOKEN_UNLOCK);
//                            tempItem.formFactorTypeName = EscapeUtils.CheckTextNull(rs.getString("TOKEN_ATTR_TYPE_NAME"));
//                            tempItem.formFactorTypeDesc = EscapeUtils.CheckTextNull(rs.getString("TOKEN_ATTR_TYPE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new FormFactorUnblockInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_TOKEN_ATTR_TOKEN_LIST">
    public void S_BO_API_TOKEN_ATTR_TOKEN_LIST(int pATTR_ID, String pBRANCH_ID, String pTOKEN_ATTR_STATE_CODE, String pTOKEN_SN,
        String pTOKEN_ATTR_TYPE_NAME, int pLANGUAGE, FormFactorTokenInfo[][] response) throws Exception {
        ArrayList<FormFactorTokenInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_TOKEN_ATTR_TOKEN_LIST(?,?,?,?,?,?) }");
                        if(pATTR_ID != 0) {
                            proc_stmt.setInt(1, pATTR_ID);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if(!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(2, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if(!"".equals(pTOKEN_SN)) {
                            proc_stmt.setString(3, pTOKEN_SN);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if(!"".equals(pTOKEN_ATTR_STATE_CODE)) {
                            proc_stmt.setString(4, pTOKEN_ATTR_STATE_CODE);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if(!"".equals(pTOKEN_ATTR_TYPE_NAME)) {
                            proc_stmt.setString(5, pTOKEN_ATTR_TYPE_NAME);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.setInt(6, pLANGUAGE);
                        CommonFunction.LogDebugString(log, "S_BO_API_TOKEN_ATTR_TOKEN_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            FormFactorTokenInfo tempItem = new FormFactorTokenInfo();
                            tempItem.formFactorTokenID = rs.getInt("ID");
                            tempItem.formFactorSN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempItem.formFactorCode = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_NAME"));
                            tempItem.formFactorName = EscapeUtils.CheckTextNull(rs.getString("PKI_FORMFACTOR_DESC"));
                            tempItem.queueStateCode = EscapeUtils.CheckTextNull(rs.getString("TOKEN_ATTR_STATE_NAME"));
                            tempItem.queueStateName = EscapeUtils.CheckTextNull(rs.getString("TOKEN_ATTR_STATE_DESC"));
                            tempItem.queueTypeCode = EscapeUtils.CheckTextNull(rs.getString("TOKEN_ATTR_TYPE_NAME"));
                            tempItem.queueTypeName = EscapeUtils.CheckTextNull(rs.getString("TOKEN_ATTR_TYPE_DESC"));
                            String sVALUE_OLD = EscapeUtils.CheckTextNull(rs.getString("VALUE"));
                            if(!"".equals(sVALUE_OLD)) {
                                oMapperParse = new ObjectMapper();
                                ATTRIBUTE_VALUES valueATTR_Frist = oMapperParse.readValue(sVALUE_OLD, ATTRIBUTE_VALUES.class);
                                tempItem.remark = EscapeUtils.CheckTextNull(valueATTR_Frist.getActionReason());
                                if (valueATTR_Frist.getAttributeData() != null) {
                                    if (valueATTR_Frist.getAttributeData().getRequestUnlockObject() != null) {
                                        if(!"".equals(EscapeUtils.CheckTextNull(valueATTR_Frist.getAttributeData().getRequestUnlockObject().PHONE_NUMBER)))
                                        {
                                            tempItem.phoneNumber = valueATTR_Frist.getAttributeData().getRequestUnlockObject().PHONE_NUMBER;
                                        }
                                        if(!"".equals(EscapeUtils.CheckTextNull(valueATTR_Frist.getAttributeData().getRequestUnlockObject().EMAIL)))
                                        {
                                            tempItem.email = valueATTR_Frist.getAttributeData().getRequestUnlockObject().EMAIL;
                                        }
                                    }
                                }
                            }
                            tempList.add(tempItem);
                        }
                        response[0] = new FormFactorTokenInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_TOKEN_ATTR_STATE_LIST">
    public void S_BO_API_TOKEN_ATTR_STATE_LIST(String pNAME, int pLANGUAGE, QueueStateInfo[][] response)
            throws Exception {
        ArrayList<QueueStateInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_TOKEN_ATTR_STATE_LIST(?,?) }");
                        if(!"".equals(pNAME)) {
                            proc_stmt.setString(1, pNAME);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            QueueStateInfo tempItem = new QueueStateInfo();
                            tempItem.queueStateCode = rs.getString("TOKEN_ATTR_STATE_NAME");
                            tempItem.queueStateName = rs.getString("TOKEN_ATTR_STATE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new QueueStateInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_TOKEN_ATTR_TYPE_LIST">
    public void S_BO_API_TOKEN_ATTR_TYPE_LIST(String pNAME, int pLANGUAGE, QueueTypeInfo[][] response)
        throws Exception {
        ArrayList<QueueTypeInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_TOKEN_ATTR_TYPE_LIST(?,?) }");
                        if(!"".equals(pNAME)) {
                            proc_stmt.setString(1, pNAME);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            QueueTypeInfo tempItem = new QueueTypeInfo();
                            tempItem.queueTypeCode = rs.getString("TOKEN_ATTR_TYPE_NAME");
                            tempItem.queueTypeName = rs.getString("TOKEN_ATTR_TYPE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new QueueTypeInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_FUNCTIONALITY_COMBOBOX">
    public void S_BO_API_TOKEN_GET_INFO(String pTOKEN_ID, String pTOKEN_ATTR_ID, String pTOKEN_SN,
        int pLANGUAGE, TOKEN[][] response) throws Exception {
        ArrayList<TOKEN> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_TOKEN_GET_INFO(?,?,?,?) }");
                        if(!"".equals(pTOKEN_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pTOKEN_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if(!"".equals(pTOKEN_ATTR_ID)) {
                            proc_stmt.setInt(2, Integer.parseInt(pTOKEN_ATTR_ID));
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if(!"".equals(pTOKEN_SN )) {
                            proc_stmt.setString(3, pTOKEN_SN );
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setInt(4, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN tempItem = new TOKEN();
                            tempItem.ID = rs.getInt("TOKEN_ID");
                            tempItem.BRANCH_ID = rs.getInt("BRANCH_ID");
                            tempItem.TOKEN_SN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempItem.TOKEN_ATTR_TYPE_ID = rs.getInt("TOKEN_ATTR_TYPE_ID");
                            tempItem.TOKEN_STATE_ID = rs.getInt("TOKEN_STATE_ID");
                            tempItem.TOKEN_ATTR_ID = rs.getInt("TOKEN_ATTR_ID");
                            tempItem.ACTIVATION_REMAINING_COUNTER = rs.getInt("ACTIVATION_REMAINING_COUNTER");
                            tempItem.VALUE = EscapeUtils.CheckTextNull(rs.getString("VALUE"));
                            tempItem.TOKEN_ATTR_STATE_NAME = EscapeUtils.CheckTextNull(rs.getString("TOKEN_ATTR_STATE_NAME"));
                            tempItem.TOKEN_ATTR_TYPE_NAME = EscapeUtils.CheckTextNull(rs.getString("TOKEN_ATTR_TYPE_NAME"));
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_USER_INSERT">
    public void S_BO_API_USER_INSERT(String strUser, String strPass, String strFull,
            String strGroup, String pBranch, String strEmail, String strMobile,
            String createUID, String[] pRESPONSE_CODE, int[] pUSER_ID) throws Exception {
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_USER_INSERT(?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setString(1, strUser);
                        proc_stmt.setString(2, strPass);
                        proc_stmt.setString(3, strFull);
                        proc_stmt.setString(4, strGroup);
                        proc_stmt.setString(5, pBranch);
                        proc_stmt.setString(6, strEmail);
                        proc_stmt.setString(7, strMobile);
                        proc_stmt.setString(8, createUID);
                        proc_stmt.registerOutParameter(9, java.sql.Types.VARCHAR);
                        proc_stmt.registerOutParameter(10, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_USER_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        pRESPONSE_CODE[0] = proc_stmt.getString(9);
                        pUSER_ID[0] = proc_stmt.getInt(10);
                        break;
                    case "2":
                        break;
                    default:
                        pRESPONSE_CODE[0] = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_BRANCH_INSERT">
    public String S_BO_API_BRANCH_INSERT(String pNAME, String pPROVINCE_CODE, String pREMARK_EN, String pREMARK,
            String pPARENT_CODE, String pUSER_BY, String strPhone, String strAddress, String pEMAIL, String pREPRESENTATIVE,
            String pREPRESENTATIVE_POSITION, String pTAX_CODE, byte[] pLOGO, String pDISCOUNT_RATE_PROFILE_CODE,
            String pCERTIFICATION_POLICY_PROPERTIES, String pBRANCH_ROLE_CODE, int[] pBRANCH_ID) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_BRANCH_INSERT(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pNAME);
                        proc_stmt.setString(2, strPhone);
                        proc_stmt.setString(3, strAddress);
                        proc_stmt.setString(4, pEMAIL);
                        proc_stmt.setString(5, pREPRESENTATIVE);
                        proc_stmt.setString(6, pREPRESENTATIVE_POSITION);
                        proc_stmt.setString(7, pTAX_CODE);
                        proc_stmt.setBytes(8, pLOGO);
                        proc_stmt.setString(9, pPROVINCE_CODE);
                        if(!"".equals(pDISCOUNT_RATE_PROFILE_CODE)) {
                            proc_stmt.setString(10, pDISCOUNT_RATE_PROFILE_CODE);
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        proc_stmt.setString(11, pREMARK_EN);
                        proc_stmt.setString(12, pREMARK);
                        proc_stmt.setString(13, pPARENT_CODE);
                        proc_stmt.setString(14, pUSER_BY);
                        proc_stmt.setString(15, pCERTIFICATION_POLICY_PROPERTIES);
                        proc_stmt.setString(16, pBRANCH_ROLE_CODE);
                        proc_stmt.registerOutParameter(17, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(18, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_BRANCH_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(17));
                        pBRANCH_ID[0] = proc_stmt.getInt(18);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_OWNER_INSERT">
    public void S_BO_CERTIFICATION_OWNER_INSERT(String pPERSONAL_NAME, String pCOMPANY_NAME, String pENTERPRISE_ID,
            String pPERSONAL_ID, String pCERTIFICATION_OWNER_TYPE, String pPHONE_CONTRACT, String pEMAIL_CONTRACT,
            String pUSERNAME_BY, String pADDRESS, String pREPRESENTATIVE, String pREPRESENTATIVE_POSITION,
            String pMESSAGING_QUEUE_FUNCTION, String pVALUE, String pCERTIFICATION_OWNER_UUID,
            String[] pRESPONSE_CODE_NAME, int[] pCERTIFICATION_OWNER_ID, int[] pMESSAGING_QUEUE_ID)
        throws Exception {
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_OWNER_INSERT(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pPERSONAL_NAME);
                        proc_stmt.setString(2, pCOMPANY_NAME);
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString(3, pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString(4, pPERSONAL_ID);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pCERTIFICATION_OWNER_TYPE)) {
                            proc_stmt.setInt(5, Integer.parseInt(pCERTIFICATION_OWNER_TYPE));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString(6, pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString(7, pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pUSERNAME_BY)) {
                            proc_stmt.setString(8, pUSERNAME_BY);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if (!"".equals(pADDRESS)) {
                            proc_stmt.setString(9, pADDRESS);
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        if (!"".equals(pREPRESENTATIVE)) {
                            proc_stmt.setString(10, pREPRESENTATIVE);
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        if (!"".equals(pREPRESENTATIVE_POSITION)) {
                            proc_stmt.setString(11, pREPRESENTATIVE_POSITION);
                        } else {
                            proc_stmt.setString(11, null);
                        }
                        if (!"".equals(pMESSAGING_QUEUE_FUNCTION)) {
                            proc_stmt.setInt(12, Integer.parseInt(pMESSAGING_QUEUE_FUNCTION));
                        } else {
                            proc_stmt.setString(12, null);
                        }
                        if (!"".equals(pVALUE)) {
                            proc_stmt.setString(13, pVALUE);
                        } else {
                            proc_stmt.setString(13, null);
                        }
                        if (!"".equals(pCERTIFICATION_OWNER_UUID)) {
                            proc_stmt.setString(14, pCERTIFICATION_OWNER_UUID);
                        } else {
                            proc_stmt.setString(14, null);
                        }
                        proc_stmt.registerOutParameter(15, java.sql.Types.VARCHAR);
                        proc_stmt.registerOutParameter(16, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(17, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_OWNER_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        pRESPONSE_CODE_NAME[0] = proc_stmt.getString(15);
                        pCERTIFICATION_OWNER_ID[0] = proc_stmt.getInt(16);
                        pMESSAGING_QUEUE_ID[0] = proc_stmt.getInt(17);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_OWNER_INSERT_MESSAGING_QUEUE">
    public void S_BO_CERTIFICATION_OWNER_INSERT_MESSAGING_QUEUE(int pCERTIFICATION_OWNER_ID, int pMESSAGING_QUEUE_STATE_ID, 
            int pMESSAGING_QUEUE_FUNCTION_ID, String pVALUE, String pCOMMENT, String pUSERNAME_BY,
            String[] pRESPONSE_CODE_NAME, int[] pMESSAGING_QUEUE_ID) throws Exception {
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_OWNER_INSERT_MESSAGING_QUEUE(?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_OWNER_ID);
                        proc_stmt.setInt(2, pMESSAGING_QUEUE_STATE_ID);
                        proc_stmt.setInt(3, pMESSAGING_QUEUE_FUNCTION_ID);
                        if (!"".equals(pVALUE)) {
                            proc_stmt.setString(4, pVALUE);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pCOMMENT)) {
                            proc_stmt.setString(5, pCOMMENT);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pUSERNAME_BY)) {
                            proc_stmt.setString(6, pUSERNAME_BY);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        proc_stmt.registerOutParameter(7, java.sql.Types.VARCHAR);
                        proc_stmt.registerOutParameter(8, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_OWNER_INSERT_MESSAGING_QUEUE", proc_stmt.toString());
                        proc_stmt.execute();
                        pRESPONSE_CODE_NAME[0] = proc_stmt.getString(7);
                        pMESSAGING_QUEUE_ID[0] = proc_stmt.getInt(8);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_MESSAGING_QUEUE_APPROVED_TOTAL">
    public int S_BO_MESSAGING_QUEUE_APPROVED_TOTAL(String strFrom, String strTo, String pMESSAGING_QUEUE_STATE_ID,
            String pMESSAGING_QUEUE_FUNCTION_ID, String pCERTIFICATION_OWNER_STATE_ID, String pCERTIFICATION_OWNER_TYPE_ID,
            String pCOMPANY_NAME, String pENTERPRISE_ID, String pPERSONAL_NAME, String pPERSONAL_ID,
            String pPHONE_CONTRACT, String pEMAIL_CONTRACT) throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_MESSAGING_QUEUE_APPROVED_TOTAL(?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pMESSAGING_QUEUE_STATE_ID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pMESSAGING_QUEUE_STATE_ID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pMESSAGING_QUEUE_FUNCTION_ID)) {
                            proc_stmt.setInt(4, Integer.parseInt(pMESSAGING_QUEUE_FUNCTION_ID));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pCERTIFICATION_OWNER_STATE_ID)) {
                            proc_stmt.setInt(5, Integer.parseInt(pCERTIFICATION_OWNER_STATE_ID));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pCERTIFICATION_OWNER_TYPE_ID)) {
                            proc_stmt.setInt(6, Integer.parseInt(pCERTIFICATION_OWNER_TYPE_ID));
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString(7, pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString(8, pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString(9, pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString(10, pPERSONAL_ID);
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        if (!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString(11, pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString(11, null);
                        }
                        if (!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString(12, pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString(12, null);
                        }
                        proc_stmt.registerOutParameter(13, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_MESSAGING_QUEUE_APPROVED_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(13);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_MESSAGING_QUEUE_APPROVED_LIST">
    public void S_BO_MESSAGING_QUEUE_APPROVED_LIST(String strFrom, String strTo, String pMESSAGING_QUEUE_STATE_ID,
            String pMESSAGING_QUEUE_FUNCTION_ID, String pCERTIFICATION_OWNER_STATE_ID, String pCERTIFICATION_OWNER_TYPE_ID,
            String pCOMPANY_NAME, String pENTERPRISE_ID, String pPERSONAL_NAME, String pPERSONAL_ID, 
            String pPHONE_CONTRACT, String pEMAIL_CONTRACT, int pLANGUAGE, int pPAGE_NO, int pROW_NO, CERTIFICATION_OWNER[][] response)
        throws Exception {
        ArrayList<CERTIFICATION_OWNER> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_MESSAGING_QUEUE_APPROVED_LIST(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pMESSAGING_QUEUE_STATE_ID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pMESSAGING_QUEUE_STATE_ID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pMESSAGING_QUEUE_FUNCTION_ID)) {
                            proc_stmt.setInt(4, Integer.parseInt(pMESSAGING_QUEUE_FUNCTION_ID));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pCERTIFICATION_OWNER_STATE_ID)) {
                            proc_stmt.setInt(5, Integer.parseInt(pCERTIFICATION_OWNER_STATE_ID));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pCERTIFICATION_OWNER_TYPE_ID)) {
                            proc_stmt.setInt(6, Integer.parseInt(pCERTIFICATION_OWNER_TYPE_ID));
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString(7, pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString(8, pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString(9, pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString(10, pPERSONAL_ID);
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        if (!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString(11, pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString(11, null);
                        }
                        if (!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString(12, pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString(12, null);
                        }
                        proc_stmt.setInt(13, pLANGUAGE);
                        proc_stmt.setInt(14, pPAGE_NO);
                        proc_stmt.setInt(15, pROW_NO);
                        CommonFunction.LogDebugString(log, "S_BO_MESSAGING_QUEUE_APPROVED_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CERTIFICATION_OWNER tempItem = new CERTIFICATION_OWNER();
                            tempItem.MESSAGING_QUEUE_ID = rs.getInt("ID");
                            tempItem.COMPANY_NAME = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            tempItem.ENTERPRISE_ID = sENTERPRISE_ID;
                            tempItem.PERSONAL_NAME = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.PERSONAL_ID = sPERSONAL_ID;
                            if(!"".equals(sENTERPRISE_ID)) {
                                if(sENTERPRISE_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE.replace(":", ""))) {
                                    tempItem.TAX_CODE = sENTERPRISE_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE, "");
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.TAX_CODE))) {
                                    if(sENTERPRISE_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_BUDGETCODE.replace(":", ""))) {
                                        tempItem.BUDGET_CODE = sENTERPRISE_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_BUDGETCODE, "");
                                    }
                                }
                            }
                            if(!"".equals(sPERSONAL_ID)) {
                                if(sPERSONAL_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CMND.replace(":", ""))) {
                                    tempItem.P_ID = sPERSONAL_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CMND, "");
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.P_ID))) {
                                    if(sPERSONAL_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_PASSPORT.replace(":", ""))) {
                                        tempItem.PASSPORT = sPERSONAL_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_PASSPORT, "");
                                    }
                                    if("".equals(EscapeUtils.CheckTextNull(tempItem.PASSPORT))) {
                                        if(sPERSONAL_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CITIZEN_ID.replace(":", ""))) {
                                            tempItem.CITIZEN_ID = sPERSONAL_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CITIZEN_ID, "");
                                        }
                                    }
                                }
                            }
                            tempItem.CERTIFICATION_OWNER_STATE_ID = rs.getInt("CERTIFICATION_OWNER_STATE_ID");
                            tempItem.CERTIFICATION_OWNER_TYPE_ID = rs.getInt("CERTIFICATION_OWNER_TYPE_ID");
                            tempItem.CERTIFICATION_OWNER_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_OWNER_STATE_DESC"));
                            tempItem.CERTIFICATION_OWNER_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_OWNER_TYPE_DESC"));
                            tempItem.PHONE_CONTRACT = EscapeUtils.CheckTextNull(rs.getString("PHONE_CONTRACT"));
                            tempItem.EMAIL_CONTRACT = EscapeUtils.CheckTextNull(rs.getString("EMAIL_CONTRACT"));
                            tempItem.MODIFIED_DT = EscapeUtils.CheckTextNull(rs.getString("MODIFIED_DT"));
                            tempItem.CREATED_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_DT"));
                            tempItem.MESSAGING_QUEUE_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_STATE_DESC"));
                            tempItem.MESSAGING_QUEUE_FUNCTION_DESC = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_FUNCTION_DESC"));
                            tempItem.MESSAGING_QUEUE_STATE_ID  = rs.getInt("MESSAGING_QUEUE_STATE_ID");
                            tempItem.MESSAGING_QUEUE_FUNCTION_ID = rs.getInt("MESSAGING_QUEUE_FUNCTION_ID");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_OWNER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_MESSAGING_QUEUE_APPROVED_DETAIL">
    public void S_BO_MESSAGING_QUEUE_APPROVED_DETAIL(String pID, String pLanguage, CERTIFICATION_OWNER[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION_OWNER> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_MESSAGING_QUEUE_APPROVED_DETAIL(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        CommonFunction.LogDebugString(log, "S_BO_MESSAGING_QUEUE_APPROVED_DETAIL", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_OWNER tempItem = new CERTIFICATION_OWNER();
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            tempItem.ID = rs.getInt("CERTIFICATION_OWNER_ID");
                            tempItem.MESSAGING_QUEUE_ID = rs.getInt("MESSAGING_QUEUE_ID");
                            tempItem.COMPANY_NAME = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            tempItem.ENTERPRISE_ID = sENTERPRISE_ID;
                            tempItem.PERSONAL_NAME = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.PERSONAL_ID = sPERSONAL_ID;
                            if(!"".equals(sENTERPRISE_ID)) {
                                if(sENTERPRISE_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE.replace(":", ""))) {
                                    tempItem.TAX_CODE = sENTERPRISE_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE, "");
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.TAX_CODE))) {
                                    if(sENTERPRISE_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_BUDGETCODE.replace(":", ""))) {
                                        tempItem.BUDGET_CODE = sENTERPRISE_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_BUDGETCODE, "");
                                    }
                                }
                            }
                            if(!"".equals(sPERSONAL_ID)) {
                                if(sPERSONAL_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CMND.replace(":", ""))) {
                                    tempItem.P_ID = sPERSONAL_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CMND, "");
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.P_ID))) {
                                    if(sPERSONAL_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_PASSPORT.replace(":", ""))) {
                                        tempItem.PASSPORT = sPERSONAL_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_PASSPORT, "");
                                    }
                                    if("".equals(EscapeUtils.CheckTextNull(tempItem.PASSPORT))) {
                                        if(sPERSONAL_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CITIZEN_ID.replace(":", ""))) {
                                            tempItem.CITIZEN_ID = sPERSONAL_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CITIZEN_ID, "");
                                        }
                                    }
                                }
                            }
                            tempItem.CERTIFICATION_OWNER_STATE_ID = rs.getInt("CERTIFICATION_OWNER_STATE_ID");
                            tempItem.MESSAGING_QUEUE_STATE_ID = rs.getInt("MESSAGING_QUEUE_STATE_ID");
                            tempItem.CERTIFICATION_OWNER_TYPE_ID = rs.getInt("CERTIFICATION_OWNER_TYPE_ID");
                            tempItem.MESSAGING_QUEUE_FUNCTION_ID = rs.getInt("MESSAGING_QUEUE_FUNCTION_ID");
                            tempItem.CERTIFICATION_OWNER_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_OWNER_STATE_DESC"));
                            tempItem.CERTIFICATION_OWNER_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_OWNER_TYPE_DESC"));
                            tempItem.PHONE_CONTRACT = EscapeUtils.CheckTextNull(rs.getString("PHONE_CONTRACT"));
                            tempItem.EMAIL_CONTRACT = EscapeUtils.CheckTextNull(rs.getString("EMAIL_CONTRACT"));
                            tempItem.MODIFIED_DT = EscapeUtils.CheckTextNull(rs.getString("MODIFIED_DT"));
                            tempItem.CREATED_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_DT"));
                            tempItem.MESSAGING_QUEUE_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_STATE_DESC"));
                            tempItem.MESSAGING_QUEUE_FUNCTION_DESC = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_FUNCTION_DESC"));
                            tempItem.ADDRESS = EscapeUtils.CheckTextNull(rs.getString("ADDRESS"));
                            tempItem.REPRESENTATIVE = EscapeUtils.CheckTextNull(rs.getString("REPRESENTATIVE"));
                            tempItem.REPRESENTATIVE_POSITION = EscapeUtils.CheckTextNull(rs.getString("REPRESENTATIVE_POSITION"));
                            tempItem.VALUE = EscapeUtils.CheckTextNull(rs.getString("VALUE"));
                            tempItem.COMMENT = EscapeUtils.CheckTextNull(rs.getString("COMMENT"));
                            tempItem.ADDRESS = EscapeUtils.CheckTextNull(rs.getString("ADDRESS"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_OWNER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_OWNER_TOTAL">
    public int S_BO_CERTIFICATION_OWNER_TOTAL(String strFrom, String strTo, String pCERTIFICATION_OWNER_STATE_ID, String pCERTIFICATION_OWNER_TYPE_ID,
        String pCOMPANY_NAME, String pENTERPRISE_ID, String pPERSONAL_NAME, String pPERSONAL_ID, 
        String pPHONE_CONTRACT, String pEMAIL_CONTRACT) throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_OWNER_TOTAL(?,?,?,?,?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pCERTIFICATION_OWNER_STATE_ID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pCERTIFICATION_OWNER_STATE_ID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pCERTIFICATION_OWNER_TYPE_ID)) {
                            proc_stmt.setInt(4, Integer.parseInt(pCERTIFICATION_OWNER_TYPE_ID));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString(5, pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString(6, pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString(7, pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString(8, pPERSONAL_ID);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if (!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString(9, pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        if (!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString(10, pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        proc_stmt.registerOutParameter(11, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_OWNER_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(11);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_OWNER_LIST">
    public void S_BO_CERTIFICATION_OWNER_LIST(String strFrom, String strTo, String pCERTIFICATION_OWNER_STATE_ID, String pCERTIFICATION_OWNER_TYPE_ID,
            String pCOMPANY_NAME, String pENTERPRISE_ID, String pPERSONAL_NAME, String pPERSONAL_ID, 
            String pPHONE_CONTRACT, String pEMAIL_CONTRACT, int pLANGUAGE, int pPAGE_NO, int pROW_NO, CERTIFICATION_OWNER[][] response)
        throws Exception {
        ArrayList<CERTIFICATION_OWNER> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_OWNER_LIST(?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pCERTIFICATION_OWNER_STATE_ID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pCERTIFICATION_OWNER_STATE_ID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pCERTIFICATION_OWNER_TYPE_ID)) {
                            proc_stmt.setInt(4, Integer.parseInt(pCERTIFICATION_OWNER_TYPE_ID));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString(5, pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString(6, pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString(7, pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString(8, pPERSONAL_ID);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if (!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString(9, pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        if (!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString(10, pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        proc_stmt.setInt(11, pLANGUAGE);
                        proc_stmt.setInt(12, pPAGE_NO);
                        proc_stmt.setInt(13, pROW_NO);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_OWNER_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CERTIFICATION_OWNER tempItem = new CERTIFICATION_OWNER();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.COMPANY_NAME = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            tempItem.ENTERPRISE_ID = sENTERPRISE_ID;
                            tempItem.PERSONAL_NAME = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.PERSONAL_ID = sPERSONAL_ID;
                            if(!"".equals(sENTERPRISE_ID)) {
                                if(sENTERPRISE_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE.replace(":", ""))) {
                                    tempItem.TAX_CODE = sENTERPRISE_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE, "");
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.TAX_CODE))) {
                                    if(sENTERPRISE_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_BUDGETCODE.replace(":", ""))) {
                                        tempItem.BUDGET_CODE = sENTERPRISE_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_BUDGETCODE, "");
                                    }
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.BUDGET_CODE))) {
                                    if(sENTERPRISE_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_DECISION.replace(":", ""))) {
                                        tempItem.DECISION = sENTERPRISE_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_DECISION, "");
                                    }
                                }
                            }
                            if(!"".equals(sPERSONAL_ID)) {
                                if(sPERSONAL_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CMND.replace(":", ""))) {
                                    tempItem.P_ID = sPERSONAL_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CMND, "");
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.P_ID))) {
                                    if(sPERSONAL_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_PASSPORT.replace(":", ""))) {
                                        tempItem.PASSPORT = sPERSONAL_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_PASSPORT, "");
                                    }
                                    if("".equals(EscapeUtils.CheckTextNull(tempItem.PASSPORT))) {
                                        if(sPERSONAL_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CITIZEN_ID.replace(":", ""))) {
                                            tempItem.CITIZEN_ID = sPERSONAL_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CITIZEN_ID, "");
                                        }
                                    }
                                }
                            }
                            tempItem.CERTIFICATION_OWNER_STATE_ID = rs.getInt("CERTIFICATION_OWNER_STATE_ID");
                            tempItem.CERTIFICATION_OWNER_TYPE_ID = rs.getInt("CERTIFICATION_OWNER_TYPE_ID");
                            tempItem.CERTIFICATION_OWNER_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_OWNER_STATE_DESC"));
                            tempItem.CERTIFICATION_OWNER_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_OWNER_TYPE_DESC"));
                            tempItem.MESSAGING_QUEUE_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_STATE_DESC"));
                            tempItem.MESSAGING_QUEUE_FUNCTION_DESC = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_FUNCTION_DESC"));
                            tempItem.PHONE_CONTRACT = EscapeUtils.CheckTextNull(rs.getString("PHONE_CONTRACT"));
                            tempItem.EMAIL_CONTRACT = EscapeUtils.CheckTextNull(rs.getString("EMAIL_CONTRACT"));
                            tempItem.MODIFIED_DT = EscapeUtils.CheckTextNull(rs.getString("MODIFIED_DT"));
                            tempItem.CREATED_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_DT"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_OWNER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_OWNER_DETAIL">
    public void S_BO_CERTIFICATION_OWNER_DETAIL(String pID, String pLanguage, CERTIFICATION_OWNER[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION_OWNER> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_OWNER_DETAIL(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_OWNER_DETAIL", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_OWNER tempItem = new CERTIFICATION_OWNER();
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            tempItem.ID = rs.getInt("ID");
                            tempItem.COMPANY_NAME = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            tempItem.ENTERPRISE_ID = sENTERPRISE_ID;
                            tempItem.PERSONAL_NAME = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.PERSONAL_ID = sPERSONAL_ID;
                            if(!"".equals(sENTERPRISE_ID)) {
                                if(sENTERPRISE_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE.replace(":", ""))) {
                                    tempItem.TAX_CODE = sENTERPRISE_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE, "");
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.TAX_CODE))) {
                                    if(sENTERPRISE_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_BUDGETCODE.replace(":", ""))) {
                                        tempItem.BUDGET_CODE = sENTERPRISE_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_BUDGETCODE, "");
                                    }
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.BUDGET_CODE))) {
                                    if(sENTERPRISE_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_DECISION.replace(":", ""))) {
                                        tempItem.DECISION = sENTERPRISE_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_DECISION, "");
                                    }
                                }
                            }
                            if(!"".equals(sPERSONAL_ID)) {
                                if(sPERSONAL_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CMND.replace(":", ""))) {
                                    tempItem.P_ID = sPERSONAL_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CMND, "");
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.P_ID))) {
                                    if(sPERSONAL_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_PASSPORT.replace(":", ""))) {
                                        tempItem.PASSPORT = sPERSONAL_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_PASSPORT, "");
                                    }
                                    if("".equals(EscapeUtils.CheckTextNull(tempItem.PASSPORT))) {
                                        if(sPERSONAL_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CITIZEN_ID.replace(":", ""))) {
                                            tempItem.CITIZEN_ID = sPERSONAL_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CITIZEN_ID, "");
                                        }
                                    }
                                }
                            }
                            tempItem.CERTIFICATION_OWNER_STATE_ID = rs.getInt("CERTIFICATION_OWNER_STATE_ID");
                            tempItem.CERTIFICATION_OWNER_TYPE_ID = rs.getInt("CERTIFICATION_OWNER_TYPE_ID");
                            tempItem.CERTIFICATION_OWNER_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_OWNER_STATE_DESC"));
                            tempItem.CERTIFICATION_OWNER_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_OWNER_TYPE_DESC"));
                            tempItem.PHONE_CONTRACT = EscapeUtils.CheckTextNull(rs.getString("PHONE_CONTRACT"));
                            tempItem.EMAIL_CONTRACT = EscapeUtils.CheckTextNull(rs.getString("EMAIL_CONTRACT"));
                            tempItem.MODIFIED_DT = EscapeUtils.CheckTextNull(rs.getString("MODIFIED_DT"));
                            tempItem.CREATED_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_DT"));
                            tempItem.MESSAGING_QUEUE_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_STATE_DESC"));
                            tempItem.MESSAGING_QUEUE_FUNCTION_DESC = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_FUNCTION_DESC"));
                            tempItem.ADDRESS = EscapeUtils.CheckTextNull(rs.getString("ADDRESS"));
                            tempItem.REPRESENTATIVE = EscapeUtils.CheckTextNull(rs.getString("REPRESENTATIVE"));
                            tempItem.REPRESENTATIVE_POSITION = EscapeUtils.CheckTextNull(rs.getString("REPRESENTATIVE_POSITION"));
                            tempItem.COMMENT = EscapeUtils.CheckTextNull(rs.getString("COMMENT"));
                            tempItem.MODIFIED_BY = EscapeUtils.CheckTextNull(rs.getString("MODIFIED_BY"));
                            tempItem.CREATED_BY = EscapeUtils.CheckTextNull(rs.getString("CREATED_BY"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_OWNER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_MESSAGING_QUEUE_STATE_COMBOBOX">
    public void S_BO_MESSAGING_QUEUE_STATE_COMBOBOX(String pLanguge, MESSAGING_QUEUE_STATE[][] response)
            throws Exception {
        ArrayList<MESSAGING_QUEUE_STATE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_MESSAGING_QUEUE_STATE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguge));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            MESSAGING_QUEUE_STATE tempItem = new MESSAGING_QUEUE_STATE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_STATE_NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_STATE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new MESSAGING_QUEUE_STATE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_MESSAGING_QUEUE_FUNCTION_COMBOBOX ">
    public void S_BO_MESSAGING_QUEUE_FUNCTION_COMBOBOX (String pLanguge, MESSAGING_QUEUE_FUNCTION[][] response)
            throws Exception {
        ArrayList<MESSAGING_QUEUE_FUNCTION> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_MESSAGING_QUEUE_FUNCTION_COMBOBOX (?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguge));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            MESSAGING_QUEUE_FUNCTION tempItem = new MESSAGING_QUEUE_FUNCTION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_FUNCTION_NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_FUNCTION_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new MESSAGING_QUEUE_FUNCTION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_OWNER_STATE_COMBOBOX ">
    public void S_BO_CERTIFICATION_OWNER_STATE_COMBOBOX(String pLanguge, CERTIFICATION_OWNER_STATE[][] response)
            throws Exception {
        ArrayList<CERTIFICATION_OWNER_STATE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_OWNER_STATE_COMBOBOX (?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguge));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_OWNER_STATE tempItem = new CERTIFICATION_OWNER_STATE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("S_BO_CERTIFICATION_OWNER_STATE_NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("S_BO_CERTIFICATION_OWNER_STATE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_OWNER_STATE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_OWNER_TYPE_COMBOBOX ">
    public void S_BO_CERTIFICATION_OWNER_TYPE_COMBOBOX(String pLanguge, CERTIFICATION_OWNER_TYPE[][] response)
            throws Exception {
        ArrayList<CERTIFICATION_OWNER_TYPE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_OWNER_TYPE_COMBOBOX (?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguge));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_OWNER_TYPE tempItem = new CERTIFICATION_OWNER_TYPE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("S_BO_CERTIFICATION_OWNER_TYPE_NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("S_BO_CERTIFICATION_OWNER_TYPE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_OWNER_TYPE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_OWNER_CHANGE_INFO">
    public String S_BO_API_CERTIFICATION_OWNER_CHANGE_INFO(int pMESSAGING_QUEUE_ID, String pADDRESS, String pPERSONAL_NAME,
            String pCOMPANY_NAME, String pPHONE_CONTRACT, String pEMAIL_CONTRACT, String pCOMMENT,
            String pREPRESENTATIVE, String pREPRESENTATIVE_POSITION, String pUSER_BY)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_OWNER_CHANGE_INFO(?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pMESSAGING_QUEUE_ID );
                        if(!"".equals(pADDRESS)) {
                            proc_stmt.setString(2, pADDRESS);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if(!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString(3, pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if(!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString(4, pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if(!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString(5, pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if(!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString(6, pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        proc_stmt.setString(7, pUSER_BY);
                        if(!"".equals(pCOMMENT)) {
                            proc_stmt.setString(8, pCOMMENT);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if(!"".equals(pREPRESENTATIVE)) {
                            proc_stmt.setString(9, pREPRESENTATIVE);
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        if(!"".equals(pREPRESENTATIVE_POSITION)) {
                            proc_stmt.setString(10, pREPRESENTATIVE_POSITION);
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        proc_stmt.registerOutParameter(11, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_OWNER_CHANGE_INFO", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(11);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_OWNER_SUPPLEMENT_FILE">
    public String S_BO_API_CERTIFICATION_OWNER_SUPPLEMENT_FILE(int pMESSAGING_QUEUE_ID, String pCOMMENT, String pUSER_BY)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_OWNER_SUPPLEMENT_FILE(?,?,?,?) }");
                        proc_stmt.setInt(1, pMESSAGING_QUEUE_ID);
                        if(!"".equals(pCOMMENT)) {
                            proc_stmt.setString(2, pCOMMENT);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_OWNER_SUPPLEMENT_FILE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(4);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_OWNER">
    public String S_BO_CERTIFICATION_UPDATE_OWNER(int pCERTIFICATION_OWNER_ID, String pADDRESS, String pPERSONAL_NAME,
            String pCOMPANY_NAME, String pCOMPANY_UUID, String pPERSONAL_UUID, String pCERTIFICATION_OWNER_TYPE_ID,
            String pPHONE_CONTRACT, String pEMAIL_CONTRACT, String pREPRESENTATIVE, String pREPRESENTATIVE_POSITION, String pUSER_BY)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_OWNER_UPDATE(?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_OWNER_ID );
                        if(!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString(2, pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if(!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString(3, pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if(!"".equals(pCOMPANY_UUID)) {
                            proc_stmt.setString(4, pCOMPANY_UUID);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if(!"".equals(pPERSONAL_UUID)) {
                            proc_stmt.setString(5, pPERSONAL_UUID);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if(!"".equals(pCERTIFICATION_OWNER_TYPE_ID)) {
                            proc_stmt.setInt(6, Integer.parseInt(pCERTIFICATION_OWNER_TYPE_ID));
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if(!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString(7, pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if(!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString(8, pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        proc_stmt.setString(9, pUSER_BY);
                        if(!"".equals(pADDRESS)) {
                            proc_stmt.setString(10, pADDRESS);
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        if(!"".equals(pREPRESENTATIVE)) {
                            proc_stmt.setString(11, pREPRESENTATIVE);
                        } else {
                            proc_stmt.setString(11, null);
                        }
                        if(!"".equals(pREPRESENTATIVE_POSITION)) {
                            proc_stmt.setString(12, pREPRESENTATIVE_POSITION);
                        } else {
                            proc_stmt.setString(12, null);
                        }
                        proc_stmt.registerOutParameter(13, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_OWNER_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(13);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_OWNER_INSERT">
    public void S_BO_API_CERTIFICATION_OWNER_INSERT(String pPERSONAL_NAME, String pCOMPANY_NAME, String pENTERPRISE_ID,
            String pPERSONAL_ID, String pCERTIFICATION_OWNER_TYPE_NAME, String pPHONE_CONTRACT, String pEMAIL_CONTRACT,
            String pUSERNAME_BY, String pADDRESS, String pREPRESENTATIVE, String pREPRESENTATIVE_POSITION,
            String pMESSAGING_QUEUE_FUNCTION_NAME, String pVALUE, String pOWNER_UUID,
            String[] pRESPONSE_CODE_NAME, int[] pCERTIFICATION_OWNER_ID, int[] pMESSAGING_QUEUE_ID)
        throws Exception {
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_OWNER_INSERT(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pPERSONAL_NAME);
                        proc_stmt.setString(2, pCOMPANY_NAME);
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString(3, pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString(4, pPERSONAL_ID);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pCERTIFICATION_OWNER_TYPE_NAME)) {
                            proc_stmt.setString(5, pCERTIFICATION_OWNER_TYPE_NAME);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString(6, pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString(7, pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pUSERNAME_BY)) {
                            proc_stmt.setString(8, pUSERNAME_BY);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if (!"".equals(pADDRESS)) {
                            proc_stmt.setString(9, pADDRESS);
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        if (!"".equals(pREPRESENTATIVE)) {
                            proc_stmt.setString(10, pREPRESENTATIVE);
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        if (!"".equals(pREPRESENTATIVE_POSITION)) {
                            proc_stmt.setString(11, pREPRESENTATIVE_POSITION);
                        } else {
                            proc_stmt.setString(11, null);
                        }
                        if (!"".equals(pMESSAGING_QUEUE_FUNCTION_NAME)) {
                            proc_stmt.setString(12, pMESSAGING_QUEUE_FUNCTION_NAME);
                        } else {
                            proc_stmt.setString(12, null);
                        }
                        if (!"".equals(pVALUE)) {
                            proc_stmt.setString(13, pVALUE);
                        } else {
                            proc_stmt.setString(13, null);
                        }
                        if (!"".equals(pOWNER_UUID)) {
                            proc_stmt.setString(14, pOWNER_UUID);
                        } else {
                            proc_stmt.setString(14, null);
                        }
                        proc_stmt.registerOutParameter(15, java.sql.Types.VARCHAR);
                        proc_stmt.registerOutParameter(16, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(17, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_OWNER_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        pRESPONSE_CODE_NAME[0] = proc_stmt.getString(15);
                        pCERTIFICATION_OWNER_ID[0] = proc_stmt.getInt(16);
                        pMESSAGING_QUEUE_ID[0] = proc_stmt.getInt(17);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_OWNER_INSERT_MESSAGING_QUEUE">
    public void S_BO_API_CERTIFICATION_OWNER_INSERT_MESSAGING_QUEUE(int pCERTIFICATION_OWNER_ID, int pMESSAGING_QUEUE_STATE_ID, 
            int pMESSAGING_QUEUE_FUNCTION_ID, String pVALUE, String pCOMMENT, String pUSERNAME_BY,
            String[] pRESPONSE_CODE_NAME, int[] pMESSAGING_QUEUE_ID) throws Exception {
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_OWNER_INSERT_MESSAGING_QUEUE(?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_OWNER_ID);
                        proc_stmt.setInt(2, pMESSAGING_QUEUE_STATE_ID);
                        proc_stmt.setInt(3, pMESSAGING_QUEUE_FUNCTION_ID);
                        if (!"".equals(pVALUE)) {
                            proc_stmt.setString(4, pVALUE);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pCOMMENT)) {
                            proc_stmt.setString(5, pCOMMENT);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pUSERNAME_BY)) {
                            proc_stmt.setString(6, pUSERNAME_BY);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        proc_stmt.registerOutParameter(7, java.sql.Types.VARCHAR);
                        proc_stmt.registerOutParameter(8, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_OWNER_INSERT_MESSAGING_QUEUE", proc_stmt.toString());
                        proc_stmt.execute();
                        pRESPONSE_CODE_NAME[0] = proc_stmt.getString(7);
                        pMESSAGING_QUEUE_ID[0] = proc_stmt.getInt(8);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_OWNER_TYPE_LIST">
    public void S_BO_API_CERTIFICATION_OWNER_TYPE_LIST(int pLANGUAGE, CertificateOwnerTypeInfo[][] response)
        throws Exception {
        ArrayList<CertificateOwnerTypeInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_OWNER_TYPE_LIST(?) }");
                        proc_stmt.setInt(1, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CertificateOwnerTypeInfo tempItem = new CertificateOwnerTypeInfo();
                            tempItem.certificateOwnerTypeCode = rs.getString("CERTIFICATION_OWNER_TYPE_NAME");
                            tempItem.certificateOwnerTypeName = rs.getString("CERTIFICATION_OWNER_TYPE_DECS");
                            tempList.add(tempItem);
                        }
                        response[0] = new CertificateOwnerTypeInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_STATE_LIST">
    public void S_BO_API_CERTIFICATION_OWNER_STATE_LIST(int pLANGUAGE, CertificateOwnerStateInfo[][] response)
            throws Exception {
        ArrayList<CertificateOwnerStateInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_OWNER_STATE_LIST(?) }");
                        proc_stmt.setInt(1, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CertificateOwnerStateInfo tempItem = new CertificateOwnerStateInfo();
                            tempItem.certificateOwnerStateCode = rs.getString("CERTIFICATION_OWNER_STATE_NAME");
                            tempItem.certificateOwnerStateName = rs.getString("CERTIFICATION_OWNER_STATE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CertificateOwnerStateInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_OWNER_GET_INFO">
    public void S_BO_API_CERTIFICATION_OWNER_GET_INFO(int pCERTIFICATION_OWNER_ID, String pCERTIFICATION_OWNER_STATE_NAME,
        String pCERTIFICATION_OWNER_TYPE_NAME, String pCOMPANY_NAME, String pENTERPRISE_ID, String pPERSONAL_NAME, String pPERSONAL_ID,
        String pPHONE_CONTRACT, String pEMAIL_CONTRACT, int pLANGUAGE, CertificateOwnerInfo[][] response)
        throws Exception {
        ArrayList<CertificateOwnerInfo> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_OWNER_GET_INFO(?,?,?,?,?,?,?,?,?,?) }");
                        if(pCERTIFICATION_OWNER_ID != 0) {
                            proc_stmt.setInt(1, pCERTIFICATION_OWNER_ID);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if(!"".equals(pCERTIFICATION_OWNER_STATE_NAME)) {
                            proc_stmt.setString(2, pCERTIFICATION_OWNER_STATE_NAME);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if(!"".equals(pCERTIFICATION_OWNER_TYPE_NAME)) {
                            proc_stmt.setString(3, pCERTIFICATION_OWNER_TYPE_NAME);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if(!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString(4, pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if(!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString(5, pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if(!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString(6, pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if(!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString(7, pPERSONAL_ID);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if(!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString(8, pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if(!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString(9, pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        proc_stmt.setInt(10, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CertificateOwnerInfo tempItem = new CertificateOwnerInfo();
                            tempItem.certificateOwnerID = rs.getInt("CERTIFICATION_OWNER_ID");
                            tempItem.messagingQueueID = rs.getInt("MESSAGING_QUEUE_ID");
                            tempItem.enterpriseUUID = sENTERPRISE_ID;
                            tempItem.personalUUID = sPERSONAL_ID;
                            if(!"".equals(sENTERPRISE_ID)) {
                                if(sENTERPRISE_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE.replace(":", ""))) {
                                    tempItem.taxCode = sENTERPRISE_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE, "");
                                }
                                if(sENTERPRISE_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_BUDGETCODE.replace(":", ""))) {
                                    tempItem.budgetCode = sENTERPRISE_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_BUDGETCODE, "");
                                }
                                if(sENTERPRISE_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_DECISION.replace(":", ""))) {
                                    tempItem.decision = sENTERPRISE_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_DECISION, "");
                                }
                            }
                            if(!"".equals(sPERSONAL_ID)) {
                                if(sPERSONAL_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CMND.replace(":", ""))) {
                                    tempItem.pid = sPERSONAL_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CMND, "");
                                }
                                if(sPERSONAL_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_PASSPORT.replace(":", ""))) {
                                    tempItem.passport = sPERSONAL_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_PASSPORT, "");
                                }
                                if(sPERSONAL_ID.split(":")[0].equals(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CITIZEN_ID.replace(":", ""))) {
                                    tempItem.citizenId = sPERSONAL_ID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CITIZEN_ID, "");
                                }
                            }
                            tempItem.phoneContact = EscapeUtils.CheckTextNull(rs.getString("PHONE_CONTRACT"));
                            tempItem.emailContact = EscapeUtils.CheckTextNull(rs.getString("EMAIL_CONTRACT"));
                            tempItem.personalName = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.companyName = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            tempItem.representative = EscapeUtils.CheckTextNull(rs.getString("REPRESENTATIVE"));
                            tempItem.representativePosition = EscapeUtils.CheckTextNull(rs.getString("REPRESENTATIVE_POSITION"));
                            tempItem.address = EscapeUtils.CheckTextNull(rs.getString("ADDRESS"));
                            tempItem.certificateOwnerTypeCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_OWNER_TYPE_NAME"));
                            tempItem.certificateOwnerTypeName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_OWNER_TYPE_DESC"));
                            tempItem.certificateOwnerStateCode = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_OWNER_STATE_NAME"));
                            tempItem.certificateOwnerStateName = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_OWNER_STATE_DESC"));
                            tempItem.messagingQueueStateCode = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_STATE_NAME"));
                            tempItem.messagingQueueStateName = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_STATE_DESC"));
                            tempItem.value = EscapeUtils.CheckTextNull(rs.getString("VALUE"));
                            tempItem.comment = EscapeUtils.CheckTextNull(rs.getString("COMMENT"));
                            tempItem.messagingQueueTypeCode = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_FUNCTION_NAME"));
                            tempItem.messagingQueueTypeName = EscapeUtils.CheckTextNull(rs.getString("MESSAGING_QUEUE_FUNCTION_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CertificateOwnerInfo[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_OWNER_PRE_APPROVED">
    public String S_BO_API_CERTIFICATION_OWNER_PRE_APPROVED(int pOWNER_ATTR_ID, String pVALUE, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_OWNER_PRE_APPROVED(?,?,?,?) }");
                        proc_stmt.setInt(1, pOWNER_ATTR_ID);
                        if (!"".equals(pVALUE)) {
                            proc_stmt.setString(2, pVALUE);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_OWNER_PRE_APPROVED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(4);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_OWNER_APPROVED">
    public String S_BO_API_CERTIFICATION_OWNER_APPROVED(int pOWNER_ATTR_ID, String pVALUE, String pUSER_BY) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_OWNER_APPROVED(?,?,?,?) }");
                        proc_stmt.setInt(1, pOWNER_ATTR_ID);
                        if (!"".equals(pVALUE)) {
                            proc_stmt.setString(2, pVALUE);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_OWNER_APPROVED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(4);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_OWNER_DISPOSE">
    public String S_BO_API_CERTIFICATION_OWNER_DISPOSE(int pMESSAGING_QUEUE_ID, String pCOMMENT, String pUSER_BY)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_OWNER_DISPOSE(?,?,?,?) }");
                        proc_stmt.setInt(1, pMESSAGING_QUEUE_ID);
                        proc_stmt.setString(2, pCOMMENT);
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_OWNER_DISPOSE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(4);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_OWNER_REGISTRATION">
    public String S_BO_API_CERTIFICATION_OWNER_REGISTRATION(int pMESSAGING_QUEUE_ID, String pCOMMENT, String pUSER_BY)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_OWNER_REGISTRATION(?,?,?,?) }");
                        proc_stmt.setInt(1, pMESSAGING_QUEUE_ID);
                        if(!"".equals(pCOMMENT)) {
                            proc_stmt.setString(2, pCOMMENT);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_OWNER_REGISTRATION", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(4);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_CERTIFICATION_OWNER_DECLINED">
    public String S_BO_API_CERTIFICATION_OWNER_DECLINED(int pMESSAGING_QUEUE_ID, String pCOMMENT, String pUSER_BY)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_CERTIFICATION_OWNER_DECLINED(?,?,?,?) }");
                        proc_stmt.setInt(1, pMESSAGING_QUEUE_ID);
                        proc_stmt.setString(2, pCOMMENT);
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_API_CERTIFICATION_OWNER_DECLINED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(4);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_FILE_MANAGER_BY_CERTIFICATION_OWNER_ID">
    public void S_BO_API_FILE_MANAGER_BY_CERTIFICATION_OWNER_ID(int pOWNER_ID, String pFILE_PROFILE_NAME, int pLANGUAGE,
        FILE_MANAGER[][] response) throws Exception {
        ArrayList<FILE_MANAGER> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_FILE_MANAGER_BY_CERTIFICATION_OWNER_ID(?,?,?) }");
                        proc_stmt.setInt(1, pOWNER_ID);
                        if(!"".equals(pFILE_PROFILE_NAME)) {
                            proc_stmt.setString(2, pFILE_PROFILE_NAME);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setInt(3, pLANGUAGE);
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            FILE_MANAGER tempItem = new FILE_MANAGER();
                            tempItem.FILE_NAME = EscapeUtils.CheckTextNull(rs.getString("FILE_NAME"));
                            tempItem.DMS_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("DMS_PROPERTIES"));
                            tempItem.FILE_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("FILE_PROFILE_NAME"));
                            tempItem.FILE_PROFILE_DESC = EscapeUtils.CheckTextNull(rs.getString("FILE_PROFILE_DESC"));
                            tempItem.UUID = rs.getString("UUID");
                            tempList.add(tempItem);
                        }
                        response[0] = new FILE_MANAGER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                         break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_GET_TOKEN_ID">
    public void S_BO_CERTIFICATION_GET_TOKEN_ID(String pMST, String pMNS,
            String pCMND, String sHC, String sCCCD, String sCertSN, TOKEN[][] response, int[] pResult, String pDECISION,
            String pENTERPRISE_ID, String pPERSONAL_ID)
            throws Exception {
        ResultSet rs = null;
        ArrayList<TOKEN> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
//                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_GET_TOKEN_ID(?,?,?,?,?,?,?,?) }");
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_GET_TOKEN_ID", 4));
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        if (!"".equals(sCertSN)) {
                            proc_stmt.setString("pCERTIFICATION_SN", sCertSN);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_SN", null);
                        }
                        proc_stmt.registerOutParameter("pRESULT", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_GET_TOKEN_ID", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        pResult[0] = proc_stmt.getInt("pRESULT");
                        while (rs.next()) {
                            TOKEN tempItem = new TOKEN();
                            tempItem.ID = rs.getInt("TOKEN_ID");
                            tempItem.PUSH_NOTICE_JSON = rs.getString("PUSH_NOTICE_JSON");
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_UUID_GET_CERTIFICATION_ID">
    public void S_BO_UUID_GET_CERTIFICATION_ID(String pENTERPRISE_ID, String pPERSONAL_ID,
            String pCERTIFICATION_SN, CERTIFICATION[][] response, int[] pResult)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_UUID_GET_CERTIFICATION_ID", 4));
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        if (!"".equals(pCERTIFICATION_SN)) {
                            proc_stmt.setString("pCERTIFICATION_SN", pCERTIFICATION_SN);
                        } else {
                            proc_stmt.setString("pCERTIFICATION_SN", null);
                        }
                        proc_stmt.registerOutParameter("pRESULT", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_UUID_GET_CERTIFICATION_ID", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        pResult[0] = proc_stmt.getInt("pRESULT");
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.PROFILE_CONTACT_INFO = EscapeUtils.CheckTextNull(rs.getString("PROFILE_CONTACT_INFO"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_CONTACT_INFO">
    public String S_BO_CERTIFICATION_UPDATE_CONTACT_INFO(int pCERTIFICATION_ID, String pPROFILE_CONTACT_INFO, String pUSER_BY)
            throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_UPDATE_CONTACT_INFO(?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ID);
                        proc_stmt.setString(2, pPROFILE_CONTACT_INFO);
                        proc_stmt.setInt(3, Integer.parseInt(pUSER_BY));
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE_CONTACT_INFO", proc_stmt.toString());
                        proc_stmt.execute();
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_UPDATE_PUSH_NOTICE_JSON">
    public String S_BO_TOKEN_UPDATE_PUSH_NOTICE_JSON(String pTOKEN_ID, String pPUSH_NOTICE_JSON, String pUSER_BY)
            throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_UPDATE_PUSH_NOTICE_JSON(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pTOKEN_ID));
                        proc_stmt.setString(2, pPUSH_NOTICE_JSON);
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_UPDATE_PUSH_NOTICE_JSON", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_PUSH_NOTIFICATION_COLLECTING - CANCEL">
    public String S_BO_CERTIFICATION_UPDATE_PUSH_NOTIFICATION_COLLECTING(String pMST, String pMNS,
            String pCMND, String sHC, String pCOLLECT_ENABLED, String pUSER_BY, String strCCCD)
            throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_UPDATE_PUSH_NOTIFICATION_COLLECTING(?,?,?,?,?,?,?,?) }");
                        if (!"".equals(pMST)) {
                            proc_stmt.setString(1, pMST);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(pMNS)) {
                            proc_stmt.setString(2, pMNS);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pCMND)) {
                            proc_stmt.setString(3, pCMND);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(sHC)) {
                            proc_stmt.setString(4, sHC);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.setInt(5, Integer.parseInt(pCOLLECT_ENABLED));
                        proc_stmt.setString(6, pUSER_BY);
                        if (!"".equals(strCCCD)) {
                            proc_stmt.setString(7, strCCCD);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        proc_stmt.registerOutParameter(8, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE_PUSH_NOTIFICATION_COLLECTING", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(8));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_COLLECT_ENABLED">
    public String S_BO_CERTIFICATION_UPDATE_COLLECT_ENABLED(String pMST, String pMNS,
        String pCMND, String sHC, String pCOLLECT_ENABLED, String pUSER_BY, String strCCCD, String strDEC,
        String pENTERPRISE_ID, String pPERSONAL_ID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_UPDATE_COLLECT_ENABLED", 5));		
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        proc_stmt.setInt("pCOLLECT_ENABLED", Integer.parseInt(pCOLLECT_ENABLED));
                        proc_stmt.setString("pUSERNAME_BY", pUSER_BY);
                        proc_stmt.registerOutParameter("pRESULT", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE_COLLECT_ENABLED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt("pRESULT"));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_CROSS_CHECK_ENABLED">
    public String S_BO_CERTIFICATION_UPDATE_CROSS_CHECK_ENABLED(String pMST, String pMNS,
            String pCMND, String sHC, String pCROSS_CHECK_ENABLED, String pUSER_BY, String strCCCD,
            String strDEC, String pENTERPRISE_ID, String pPERSONAL_ID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_UPDATE_CROSS_CHECK_ENABLED", 5));
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        proc_stmt.setInt("pCROSS_CHECK_ENABLED", Integer.parseInt(pCROSS_CHECK_ENABLED));
                        proc_stmt.setString("pUSERNAME_BY", pUSER_BY);
                        proc_stmt.registerOutParameter("pRESULT", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE_CROSS_CHECK_ENABLED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt("pRESULT"));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_CHECK">
    public String S_BO_TOKEN_CHECK(String pTOKEN_ID)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_CHECK(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pTOKEN_ID));
                        proc_stmt.registerOutParameter(2, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_CHECK", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(2));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_REVOKED_REASON">
    public String S_BO_CERTIFICATION_UPDATE_REVOKED_REASON(String pCERTIFICATE_ID, String pCOMMENT, String pUSER_BY)
        throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_UPDATE_REVOKED_REASON(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATE_ID));
                        proc_stmt.setString(2, pCOMMENT);
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE_REVOKED_REASON", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_DISALLOWANCE_LIST_GET_ALL_PHONE">
    public void S_BO_CERTIFICATION_DISALLOWANCE_LIST_GET_ALL_PHONE(CERTIFICATION_CONTACT[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION_CONTACT> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_DISALLOWANCE_LIST_GET_ALL_PHONE() }");
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_CONTACT tempItem = new CERTIFICATION_CONTACT();
                            tempItem.VALUE = EscapeUtils.CheckTextNull(rs.getString("PHONE_CONTRACT"));
                            tempItem.TOTAL = EscapeUtils.CheckTextNull(rs.getString("FREQUENCY"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_CONTACT[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_DISALLOWANCE_LIST_GET_ALL_EMAIL">
    public void S_BO_CERTIFICATION_DISALLOWANCE_LIST_GET_ALL_EMAIL(CERTIFICATION_CONTACT[][] response)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION_CONTACT> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_DISALLOWANCE_LIST_GET_ALL_EMAIL() }");
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_CONTACT tempItem = new CERTIFICATION_CONTACT();
                            tempItem.VALUE = EscapeUtils.CheckTextNull(rs.getString("EMAIL_CONTRACT"));
                            tempItem.TOTAL = EscapeUtils.CheckTextNull(rs.getString("FREQUENCY"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_CONTACT[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_ATTR_INSERT">
    public String S_BO_CERTIFICATION_ATTR_INSERT(String pCERTIFICATION_ID, String pCERTIFICATION_ATTR_TYPE_ID,
        String pVALUE, String pUSER_BY, int[] pCERTIFICATE_ATTR_ID)
        throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_ATTR_INSERT(?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pCERTIFICATION_ATTR_TYPE_ID));
                        proc_stmt.setString(3, pVALUE);
                        proc_stmt.setString(4, pUSER_BY);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_ATTR_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        pCERTIFICATE_ATTR_ID[0] = proc_stmt.getInt(6);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_REFUND">
    public String S_BO_CERTIFICATION_REFUND(String pCERTIFICATION_ID, String pVALUE,
        String pUSER_BY, int[] pCERTIFICATE_ATTR_ID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_REFUND(?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_ID));
                        proc_stmt.setString(2, pVALUE);
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_REFUND", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        pCERTIFICATE_ATTR_ID[0] = proc_stmt.getInt(5);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_DISABLE">
    public String S_BO_CERTIFICATION_DISABLE(String pCERTIFICATION_ATTR_ID, java.sql.Timestamp pRELEASE_DT,
        String pCOMMENT, String pUSER_BY)
        throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_DISABLE(?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_ATTR_ID));
                        if (pRELEASE_DT != null) {
                            proc_stmt.setObject(2, pRELEASE_DT);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setString(3, pCOMMENT);
                        proc_stmt.setString(4, pUSER_BY);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_DISABLE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_RECOVERED">
    public String S_BO_CERTIFICATION_RECOVERED(String pCERTIFICATION_ATTR_ID, String pUSER_BY)
        throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_RECOVERED(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_ATTR_ID));
                        proc_stmt.setString(2, pUSER_BY);
                        proc_stmt.registerOutParameter(3, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_RECOVERED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(3));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_SOFTTOKEN_REISSUE">
    public String S_BO_CERTIFICATION_SOFTTOKEN_REISSUE(int pCERTIFICATION_ATTR_ID, String pUSER_BY)
        throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_SOFTTOKEN_REISSUE(?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ATTR_ID);
                        proc_stmt.setString(2, pUSER_BY);
                        proc_stmt.registerOutParameter(3, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_SOFTTOKEN_REISSUE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(3));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_REVOCATION_REASON_COMBOBOX">
    public void S_BO_CERTIFICATION_REVOCATION_REASON_COMBOBOX(String pLanguage, CERTIFICATION_REVOCATION_REASON[][] response)
            throws Exception {
        ArrayList<CERTIFICATION_REVOCATION_REASON> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_REVOCATION_REASON_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_REVOCATION_REASON tempItem = new CERTIFICATION_REVOCATION_REASON();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = rs.getString("NAME");
                            tempItem.REMARK = rs.getString("CERTIFICATION_REVOCATION_REASON_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_REVOCATION_REASON[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_REVOCATION_REASON_DETAIL">
    public void S_BO_CERTIFICATION_REVOCATION_REASON_DETAIL(String pID, CERTIFICATION_REVOCATION_REASON[][] response)
            throws Exception {
        ArrayList<CERTIFICATION_REVOCATION_REASON> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_REVOCATION_REASON_DETAIL(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_REVOCATION_REASON tempItem = new CERTIFICATION_REVOCATION_REASON();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("NAME"));
                            tempItem.REMARK = rs.getString("REMARK");
                            tempItem.REMARK_EN = rs.getString("REMARK_EN");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_REVOCATION_REASON[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_RECOVERY_STATE">
    public String S_BO_TOKEN_RECOVERY_STATE(String pTOKEN_ID, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_RECOVERY_STATE(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pTOKEN_ID));
                        proc_stmt.setString(2, pUSER_BY);
                        proc_stmt.registerOutParameter(3, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_RECOVERY_STATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(3));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_PROPERTIES">
    public String S_BO_CERTIFICATION_UPDATE_PROPERTIES(String pCERTIFICATION_ID, String pPROPERTIES, String pUSER_BY)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_UPDATE_PROPERTIES(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_ID));
                        proc_stmt.setString(2, pPROPERTIES);
                        proc_stmt.setString(3, pUSER_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE_PROPERTIES", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_DISCOUNT_RATE_PROFILE_TOTAL">
    public int S_BO_DISCOUNT_RATE_PROFILE_TOTAL() throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_DISCOUNT_RATE_PROFILE_TOTAL(?) }");
                        proc_stmt.registerOutParameter(1, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(1);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_DISCOUNT_RATE_PROFILE_LIST">
    public void S_BO_DISCOUNT_RATE_PROFILE_LIST(String pLANGUAGE, int pPAGE_NO,
            int pROW_NO, DISCOUNT_RATE_PROFILE[][] response)
        throws Exception {
        ArrayList<DISCOUNT_RATE_PROFILE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_DISCOUNT_RATE_PROFILE_LIST(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLANGUAGE));
                        proc_stmt.setInt(2, pPAGE_NO);
                        proc_stmt.setInt(3, pROW_NO);
                        CommonFunction.LogDebugString(log, "S_BO_DISCOUNT_RATE_PROFILE_LIST ", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            DISCOUNT_RATE_PROFILE tempItem = new DISCOUNT_RATE_PROFILE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("DISCOUNT_RATE_PROFILE_NAME"));
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("DISCOUNT_RATE_PROFILE_DESC"));
                            tempItem.CREATED_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_DT"));
                            tempList.add(tempItem);
                        }
                        response[0] = new DISCOUNT_RATE_PROFILE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_DISCOUNT_RATE_PROFILE_COMBOBOX ">
    public void S_BO_DISCOUNT_RATE_PROFILE_COMBOBOX(String pLANGUAGE, DISCOUNT_RATE_PROFILE[][] response)
        throws Exception {
        ArrayList<DISCOUNT_RATE_PROFILE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_DISCOUNT_RATE_PROFILE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLANGUAGE));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            DISCOUNT_RATE_PROFILE tempItem = new DISCOUNT_RATE_PROFILE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("DISCOUNT_RATE_PROFILE_NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("DISCOUNT_RATE_PROFILE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new DISCOUNT_RATE_PROFILE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_DISCOUNT_RATE_PROFILE_DETAIL ">
    public void S_BO_DISCOUNT_RATE_PROFILE_DETAIL (String pID, DISCOUNT_RATE_PROFILE[][] response)
        throws Exception {
        ArrayList<DISCOUNT_RATE_PROFILE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_DISCOUNT_RATE_PROFILE_DETAIL (?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            DISCOUNT_RATE_PROFILE tempItem = new DISCOUNT_RATE_PROFILE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("DISCOUNT_RATE_PROFILE_NAME"));
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("REMARK"));
                            tempItem.REMARK_EN = EscapeUtils.CheckTextNull(rs.getString("REMARK_EN"));
                            tempItem.PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("PROPERTIES"));
                            tempItem.MODIFIED_DT = EscapeUtils.CheckTextNull(rs.getString("MODIFIED_DT"));
                            tempItem.CREATED_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_DT"));
                            tempItem.MODIFIED_BY = EscapeUtils.CheckTextNull(rs.getString("MODIFIED_BY"));
                            tempItem.CREATED_BY = EscapeUtils.CheckTextNull(rs.getString("CREATED_BY"));
                            tempList.add(tempItem);
                        }
                        response[0] = new DISCOUNT_RATE_PROFILE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_DISCOUNT_RATE_PROFILE_INSERT">
    public String S_BO_DISCOUNT_RATE_PROFILE_INSERT(String strName, String strRemark, String strRemark_EN,
            String pUserUID) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_DISCOUNT_RATE_PROFILE_INSERT(?,?,?,?,?) }");
                        proc_stmt.setString(1, strName);
                        proc_stmt.setString(2, strRemark);
                        proc_stmt.setString(3, strRemark_EN);
                        proc_stmt.setString(4, pUserUID);
                        proc_stmt.registerOutParameter(5, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_DISCOUNT_RATE_PROFILE_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(5);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_DISCOUNT_RATE_PROFILE_UPDATE">
    public String S_BO_DISCOUNT_RATE_PROFILE_UPDATE(String strID, String strRemark, String strRemark_EN,
            String sENABLED, String pPROPERTIES, String pUserUID) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_DISCOUNT_RATE_PROFILE_UPDATE(?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(strID));
                        proc_stmt.setInt(2, Integer.parseInt(sENABLED));
                        proc_stmt.setString(3, strRemark);
                        proc_stmt.setString(4, strRemark_EN);
                        if(!"".equals(pPROPERTIES))
                        {
                            proc_stmt.setString(5, pPROPERTIES);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.setString(6, pUserUID);
                        proc_stmt.registerOutParameter(7, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_DISCOUNT_RATE_PROFILE_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(7);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_GET_DISCOUNT_RATE_PROFILE">
    public void S_BO_BRANCH_GET_DISCOUNT_RATE_PROFILE(String pBRANCH_ID, DISCOUNT_RATE_PROFILE[][] response)
        throws Exception {
        ArrayList<DISCOUNT_RATE_PROFILE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_GET_DISCOUNT_RATE_PROFILE(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_GET_DISCOUNT_RATE_PROFILE", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            DISCOUNT_RATE_PROFILE tempItem = new DISCOUNT_RATE_PROFILE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("NAME"));
                            tempItem.PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("PROPERTIES"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("REMARK"));
                            tempItem.REMARK_EN = EscapeUtils.CheckTextNull(rs.getString("REMARK_EN"));
                            tempList.add(tempItem);
                        }
                        response[0] = new DISCOUNT_RATE_PROFILE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_REPORT_TOTAL">
    public int S_BO_TOKEN_REPORT_TOTAL(String pBRANCH_ID, String pMONTH, String pYEAR, String pREMAINING_BEGINING_MONTH,
        String pIMPORT_IN_MONTH, String pTOKEN_USED_IN_MONTH, String pREAMINING_END_MONTH, String pBRANCH_ID_LIST)
        throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_REPORT_TOTAL(?,?,?,?,?,?,?,?,?) }");
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, Integer.parseInt(pMONTH));
                        proc_stmt.setInt(3, Integer.parseInt(pYEAR));
                        proc_stmt.setInt(4, Integer.parseInt(pREMAINING_BEGINING_MONTH));
                        proc_stmt.setInt(5, Integer.parseInt(pIMPORT_IN_MONTH));
                        proc_stmt.setInt(6, Integer.parseInt(pTOKEN_USED_IN_MONTH));
                        proc_stmt.setInt(7, Integer.parseInt(pREAMINING_END_MONTH));
                        if (!"".equals(pBRANCH_ID_LIST)) {
                            proc_stmt.setString(8, pBRANCH_ID_LIST);
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        proc_stmt.registerOutParameter(9, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_REPORT_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(9);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_REPORT_LIST">
    public void S_BO_TOKEN_REPORT_LIST(String pBRANCH_ID, String pMONTH, String pYEAR, String pREMAINING_BEGINING_MONTH,
        String pIMPORT_IN_MONTH, String pTOKEN_USED_IN_MONTH, String pREAMINING_END_MONTH,
        int pPAGE_NO, int pROW_NO, int pLANGUAGE, TOKEN[][] response, String pBRANCH_ID_LIST)
        throws Exception {
        ResultSet rs = null;
        ArrayList<TOKEN> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_REPORT_LIST(?,?,?,?,?,?,?,?,?,?,?) }");
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, Integer.parseInt(pMONTH));
                        proc_stmt.setInt(3, Integer.parseInt(pYEAR));
                        proc_stmt.setInt(4, Integer.parseInt(pREMAINING_BEGINING_MONTH));
                        proc_stmt.setInt(5, Integer.parseInt(pIMPORT_IN_MONTH));
                        proc_stmt.setInt(6, Integer.parseInt(pTOKEN_USED_IN_MONTH));
                        proc_stmt.setInt(7, Integer.parseInt(pREAMINING_END_MONTH));
                        proc_stmt.setInt(8, pLANGUAGE);
                        proc_stmt.setInt(9, pPAGE_NO);
                        proc_stmt.setInt(10, pROW_NO);
                        if (!"".equals(pBRANCH_ID_LIST)) {
                            proc_stmt.setString(11, pBRANCH_ID_LIST);
                        } else {
                            proc_stmt.setString(11, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_REPORT_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            TOKEN tempItem = new TOKEN();
//                            tempItem.ID = rs.getInt("ID");
                            tempItem.TOKEN_SN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempItem.TOKEN_VERSION_DESC = EscapeUtils.CheckTextNull(rs.getString("VERSION_TOKEN_DESC"));
                            tempItem.TOKEN_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("TOKEN_STATE_DESC"));
                            tempItem.BRANCH_DESC = rs.getString("BRANCH_DESC");
                            tempItem.IMPORT_EXPORT_DT = rs.getString("MODIFIED_DT");
//                            tempItem.CREATED_BY = rs.getString("USERNAME_CREATED");
                            tempList.add(tempItem);
                        }
                        response[0] = new TOKEN[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_CROSS_CHECK_TOTAL">
    public int S_BO_CERTIFICATION_CROSS_CHECK_TOTAL(String pMONTH, String pYEAR,
            String pAgentID, String pCROSS_CHECK_ENABLED, String pUSER_BY, String sessUserAgentID)
            throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_CROSS_CHECK_TOTAL(?,?,?,?,?,?,?) }");
                        if (!"".equals(pAgentID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pAgentID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(pCROSS_CHECK_ENABLED)) {
                            proc_stmt.setInt(2, Integer.parseInt(pCROSS_CHECK_ENABLED));
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setInt(3, Integer.parseInt(pMONTH));
                        proc_stmt.setInt(4, Integer.parseInt(pYEAR));
                        if (!"".equals(pUSER_BY)) {
                            proc_stmt.setInt(5, Integer.parseInt(pUSER_BY));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(sessUserAgentID)) {
                            if(!Definitions.CONFIG_AGENT_ROOT.equals(sessUserAgentID)) {
                                proc_stmt.setInt(6, Integer.parseInt(sessUserAgentID));
                            } else {
                                proc_stmt.setString(6, null);
                            }
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_CROSS_CHECK_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(7);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_CROSS_CHECK_LIST">
    public void S_BO_CERTIFICATION_CROSS_CHECK_LIST(String pMONTH, String pYEAR,
            String pBRANCH_ID, String pCROSS_CHECK_ENABLED, String pUSER_BY, String pLANGUAGE, CERTIFICATION[][] response,
            int sPage, int sSum, String sessUserAgentID)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_CROSS_CHECK_LIST(?,?,?,?,?,?,?,?,?) }");
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(pCROSS_CHECK_ENABLED)) {
                            proc_stmt.setInt(2, Integer.parseInt(pCROSS_CHECK_ENABLED));
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setInt(3, Integer.parseInt(pMONTH));
                        proc_stmt.setInt(4, Integer.parseInt(pYEAR));
                        proc_stmt.setInt(5, sPage);
                        proc_stmt.setInt(6, sSum);
                        proc_stmt.setInt(7, Integer.parseInt(pLANGUAGE));
                        if (!"".equals(pUSER_BY)) {
                            proc_stmt.setInt(8, Integer.parseInt(pUSER_BY));
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if (!"".equals(sessUserAgentID)) {
                            if(!Definitions.CONFIG_AGENT_ROOT.equals(sessUserAgentID)) {
                                proc_stmt.setInt(9, Integer.parseInt(sessUserAgentID));
                            } else {
                                proc_stmt.setString(9, null);
                            }
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_CROSS_CHECK_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.ISSUED_DT = EscapeUtils.CheckTextNull(rs.getString("ISSUED_DT"));
                            tempItem.BRANCH_DESC = EscapeUtils.CheckTextNull(rs.getString("BRANCH_NAME"));
                            tempItem.CREATED_BY = EscapeUtils.CheckTextNull(rs.getString("SALE_ACCOUNT"));
                            tempItem.COMPANY_NAME = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("COMPANY_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            if(!"".equals(sENTERPRISE_ID)) {
                                String prefixMST = Definitions.CONFIG_CERTIFICATION_PREFIX_TAXCODE;
                                if(sENTERPRISE_ID.split(":")[0].equals(prefixMST)) {
                                    tempItem.TAX_CODE = sENTERPRISE_ID.replace(prefixMST+":", "").trim();
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.TAX_CODE))) {
                                    String prefixMNS = Definitions.CONFIG_CERTIFICATION_PREFIX_BUDGET_CODE;
                                    if(sENTERPRISE_ID.split(":")[0].equals(prefixMNS)) {
                                        tempItem.TAX_CODE = sENTERPRISE_ID.replace(prefixMNS+":", "").trim();
                                    }
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.BUDGET_CODE))) {
                                    String prefixGD = Definitions.CONFIG_CERTIFICATION_PREFIX_DECISION;
                                    if(sENTERPRISE_ID.split(":")[0].equals(prefixGD)) {
                                        tempItem.TAX_CODE = sENTERPRISE_ID.replace(prefixGD + ":", "").trim();
                                    }
                                }
                            }
                            if(!"".equals(sPERSONAL_ID)) {
                                String prefixPID = Definitions.CONFIG_CERTIFICATION_PREFIX_PERSONAL_CODE;
                                if(sPERSONAL_ID.split(":")[0].equals(prefixPID)) {
                                    tempItem.P_ID = sPERSONAL_ID.replace(prefixPID + ":", "").trim();
                                }
                                if("".equals(EscapeUtils.CheckTextNull(tempItem.P_ID))) {
                                    String prefixHC = Definitions.CONFIG_CERTIFICATION_PREFIX_PASSPORT;
                                    if(sPERSONAL_ID.split(":")[0].equals(prefixHC)) {
                                        tempItem.P_ID = sPERSONAL_ID.replace(prefixHC + ":", "").trim();
                                    }
                                    if("".equals(EscapeUtils.CheckTextNull(tempItem.PASSPORT))) {
                                        String prefixCCCD = Definitions.CONFIG_CERTIFICATION_PREFIX_CITIZEN_CODE;
                                        if(sPERSONAL_ID.split(":")[0].equals(prefixCCCD)) {
                                            tempItem.P_ID = sPERSONAL_ID.replace(prefixCCCD + ":", "").trim();
                                        }
                                    }
                                }
                            }
                            tempItem.PERSONAL_NAME = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.CERTIFICATION_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempItem.CERTIFICATION_ATTR_TYPE_DESC = rs.getString("SERVICE_TYPE_DESC");
                            tempItem.CROSS_CHECK_ENABLED = rs.getBoolean("CROSS_CHECK_ENABLED");
                            tempItem.CROSS_CHECKED_MOUNTH = pMONTH + "/" + pYEAR;
                            tempItem.CROSS_CHECKED_DT = EscapeUtils.CheckTextNull(rs.getString("CROSS_CHECKED_DT"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_CROSS_CHECK_STATE">
    public String S_BO_CERTIFICATION_UPDATE_CROSS_CHECK_STATE(int strID, String pUserUID)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_UPDATE_CROSS_CHECK_STATE(?,?,?) }");
                        proc_stmt.setInt(1, strID);
                        proc_stmt.setString(2, pUserUID);
                        proc_stmt.registerOutParameter(3, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE_CROSS_CHECK_STATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(3);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_CROSS_CHECK_DETAIL">
    public void S_BO_REPORT_CROSS_CHECK_DETAIL(String pMONTH, String pYEAR,
            String pBRANCH_ID, String pUSER_BY, String pLANGUAGE, CERTIFICATION_CONTROL_REPORT[][] response,
            int sPage, int sSum, String sessUserAgentID)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION_CONTROL_REPORT> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_CROSS_CHECK_DETAIL(?,?,?,?,?,?,?,?) }");
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, Integer.parseInt(pMONTH));
                        proc_stmt.setInt(3, Integer.parseInt(pYEAR));
                        proc_stmt.setInt(4, sPage);
                        proc_stmt.setInt(5, sSum);
                        proc_stmt.setInt(6, Integer.parseInt(pLANGUAGE));
                        if (!"".equals(pUSER_BY)) {
                            proc_stmt.setInt(7, Integer.parseInt(pUSER_BY));
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(sessUserAgentID)) {
                            if(!Definitions.CONFIG_AGENT_ROOT.equals(sessUserAgentID)) {
                                proc_stmt.setInt(8, Integer.parseInt(sessUserAgentID));
                            } else {
                                proc_stmt.setString(8, null);
                            }
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_CROSS_CHECK_DETAIL", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_CONTROL_REPORT tempItem = new CERTIFICATION_CONTROL_REPORT();
                            tempItem.REVOKED_DT = EscapeUtils.CheckTextNull(rs.getString("REVOKED_DT"));
                            tempItem.EFFECTIVE_DT = EscapeUtils.CheckTextNull(rs.getString("EFFECTIVE_DT"));
                            tempItem.EXPIRATION_DT = EscapeUtils.CheckTextNull(rs.getString("EXPIRATION_DT"));
                            tempItem.CERTIFICATION_SN = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_SN"));
                            tempItem.BRANCH_NAME = EscapeUtils.CheckTextNull(rs.getString("BRANCH_NAME"));
                            tempItem.CREATED_BY = EscapeUtils.CheckTextNull(rs.getString("SALE_ACCOUNT"));
                            tempItem.COMPANY_NAME = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("COMPANY_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            String[] sResultSum = new String[2];
                            CommonReferServlet.separateUIDToSumField(sENTERPRISE_ID, sPERSONAL_ID, sResultSum);
                            tempItem.TAX_CODE = sResultSum[0];
                            tempItem.P_ID = sResultSum[0];
                            tempItem.PERSONAL_NAME = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.CERTIFICATION_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempItem.SERVICE_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("SERVICE_TYPE_DESC"));
                            tempItem.PAST_SERVICE_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("PAST_SERVICE_TYPE_DESC"));
                            tempItem.PAST_EFFECTIVE_DT = EscapeUtils.CheckTextNull(rs.getString("PAST_EFFECTIVE_DT"));
                            tempItem.EXPIRATION_CONTRACT_DT = EscapeUtils.CheckTextNull(rs.getString("EXPIRATION_CONTRACT_DT"));
                            tempItem.PAST_FILE_MANAGER_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("PAST_FILE_MANAGER_STATE_DESC"));
                            tempItem.PAST_BRANCH_DESC = EscapeUtils.CheckTextNull(rs.getString("PAST_BRANCH_NAME"));
                            int feeAmount = rs.getInt("FEE_AMOUNT");
                            int tokenNum = rs.getInt("TOKEN_NUMBER");
                            int tokenAmount = rs.getInt("TOKEN_AMOUNT");
                            tempItem.TOKEN_NUMBER = tokenNum;
                            tempItem.ROSE_AMOUNT = 0;
                            String sRole = EscapeUtils.CheckTextNull(rs.getString("ROSE"));
                            if(!"".equals(sRole)) {
                                tempItem.ROSE_AMOUNT = Integer.parseInt(sRole);
                            } else {
                                int numRate = rs.getInt("DISCOUNT_RATE");
                                if(numRate != 0) {
                                    tempItem.ROSE_AMOUNT = (feeAmount/100) * numRate;
                                }
                            }
                            if(tokenNum != 0) {
                                tokenAmount = tokenAmount * tokenNum;
                            }
                            tempItem.FEE_AMOUNT = feeAmount;
                            tempItem.TOKEN_AMOUNT = tokenAmount;
                            tempItem.RETURN_AMOUNT = feeAmount - tempItem.ROSE_AMOUNT;
                            tempItem.TOKEN_SN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempItem.CROSS_CHECK_MONTH = EscapeUtils.CheckTextNull(rs.getString("CROSS_CHECK_MONTH"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_CONTROL_REPORT[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_TOTAL_CROSS_CHECK_DETAIL">
    public void S_BO_REPORT_TOTAL_CROSS_CHECK_DETAIL(String pMONTH, String pYEAR,
            String pBRANCH_ID, String pUSER_BY, String pLANGUAGE, CERTIFICATION_CONTROL_REPORT[][] response,
            int sPage, int sSum, String sessUserAgentID)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION_CONTROL_REPORT> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_TOTAL_CROSS_CHECK_DETAIL(?,?,?,?,?,?,?,?) }");
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, Integer.parseInt(pMONTH));
                        proc_stmt.setInt(3, Integer.parseInt(pYEAR));
                        proc_stmt.setInt(4, sPage);
                        proc_stmt.setInt(5, sSum);
                        proc_stmt.setInt(6, Integer.parseInt(pLANGUAGE));
                        if (!"".equals(pUSER_BY)) {
                            proc_stmt.setInt(7, Integer.parseInt(pUSER_BY));
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(sessUserAgentID)) {
                            if(!Definitions.CONFIG_AGENT_ROOT.equals(sessUserAgentID)) {
                                proc_stmt.setInt(8, Integer.parseInt(sessUserAgentID));
                            } else {
                                proc_stmt.setString(8, null);
                            }
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_TOTAL_CROSS_CHECK_DETAIL", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_CONTROL_REPORT tempItem = new CERTIFICATION_CONTROL_REPORT();
                            tempItem.REVOKED_DT = EscapeUtils.CheckTextNull(rs.getString("REVOKED_DT"));
                            tempItem.EFFECTIVE_DT = EscapeUtils.CheckTextNull(rs.getString("EFFECTIVE_DT"));
                            tempItem.EXPIRATION_DT = EscapeUtils.CheckTextNull(rs.getString("EXPIRATION_DT"));
                            tempItem.CERTIFICATION_SN = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_SN"));
                            tempItem.BRANCH_NAME = EscapeUtils.CheckTextNull(rs.getString("BRANCH_NAME"));
                            tempItem.CREATED_BY = EscapeUtils.CheckTextNull(rs.getString("SALE_ACCOUNT"));
                            tempItem.COMPANY_NAME = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));                            
                            String[] sResultSum = new String[2];
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToSumField(sENTERPRISE_ID, sPERSONAL_ID, sResultSum);
                            tempItem.TAX_CODE = sResultSum[0];
                            tempItem.P_ID = sResultSum[1];
                            tempItem.PERSONAL_NAME = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.CERTIFICATION_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempItem.SERVICE_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("SERVICE_TYPE_DESC"));
                            tempItem.PAST_SERVICE_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("PAST_SERVICE_TYPE_DESC"));
                            tempItem.PAST_EFFECTIVE_DT = EscapeUtils.CheckTextNull(rs.getString("PAST_EFFECTIVE_DT"));
                            tempItem.EXPIRATION_CONTRACT_DT = EscapeUtils.CheckTextNull(rs.getString("EXPIRATION_CONTRACT_DT"));
                            tempItem.PAST_FILE_MANAGER_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("PAST_FILE_MANAGER_STATE_DESC"));
                            tempItem.PAST_BRANCH_DESC = EscapeUtils.CheckTextNull(rs.getString("PAST_BRANCH_NAME"));
                            int feeAmount = rs.getInt("FEE_AMOUNT");
                            int tokenNum = rs.getInt("TOKEN_NUMBER");
                            int tokenAmount = rs.getInt("TOKEN_AMOUNT");
                            tempItem.TOKEN_NUMBER = tokenNum;
                            tempItem.ROSE_AMOUNT = 0;
                            String sRole = EscapeUtils.CheckTextNull(rs.getString("ROSE"));
                            if(!"".equals(sRole)) {
                                tempItem.ROSE_AMOUNT = Integer.parseInt(sRole);
                            } else {
                                int numRate = rs.getInt("DISCOUNT_RATE");
                                if(numRate != 0) {
                                    tempItem.ROSE_AMOUNT = (feeAmount/100) * numRate;
                                }
                            }
                            if(tokenNum != 0) {
                                tokenAmount = tokenAmount * tokenNum;
                            }
                            tempItem.FEE_AMOUNT = feeAmount;
                            tempItem.TOKEN_AMOUNT = tokenAmount;
                            tempItem.RETURN_AMOUNT = feeAmount - tempItem.ROSE_AMOUNT;
                            tempItem.TOKEN_SN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempItem.CROSS_CHECK_MONTH = EscapeUtils.CheckTextNull(rs.getString("CROSS_CHECK_MONTH"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_CONTROL_REPORT[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_CERTIFICATE_AUTO_REVOKED">
    public void S_BO_REPORT_CERTIFICATE_AUTO_REVOKED(String pMONTH, String pYEAR,
            String pBRANCH_ID, String pUSER_BY, String pLANGUAGE, CERTIFICATION_CONTROL_REPORT[][] response,
            int sPage, int sSum, String sessUserAgentID)
        throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION_CONTROL_REPORT> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_CERTIFICATE_AUTO_REVOKED(?,?,?,?,?,?,?,?) }");
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, Integer.parseInt(pMONTH));
                        proc_stmt.setInt(3, Integer.parseInt(pYEAR));
                        proc_stmt.setInt(4, sPage);
                        proc_stmt.setInt(5, sSum);
                        proc_stmt.setInt(6, Integer.parseInt(pLANGUAGE));
                        if (!"".equals(pUSER_BY)) {
                            proc_stmt.setInt(7, Integer.parseInt(pUSER_BY));
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(sessUserAgentID)) {
                            if(!Definitions.CONFIG_AGENT_ROOT.equals(sessUserAgentID)) {
                                proc_stmt.setInt(8, Integer.parseInt(sessUserAgentID));
                            } else {
                                proc_stmt.setString(8, null);
                            }
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_CERTIFICATE_AUTO_REVOKED", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_CONTROL_REPORT tempItem = new CERTIFICATION_CONTROL_REPORT();
                            tempItem.ISSUED_DT = EscapeUtils.CheckTextNull(rs.getString("EFFECTIVE_DT"));
                            tempItem.CERTIFICATION_SN = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_SN"));
                            tempItem.BRANCH_NAME = EscapeUtils.CheckTextNull(rs.getString("BRANCH_NAME"));
                            tempItem.CREATED_BY = EscapeUtils.CheckTextNull(rs.getString("SALE_ACCOUNT"));
                            tempItem.COMPANY_NAME = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("COMPANY_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            String[] sResultSum = new String[2];
                            CommonReferServlet.separateUIDToSumField(sENTERPRISE_ID, sPERSONAL_ID, sResultSum);
                            tempItem.TAX_CODE = sResultSum[0];
                            tempItem.P_ID = sResultSum[0];
                            tempItem.PERSONAL_NAME = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.CERTIFICATION_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempItem.SERVICE_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("SERVICE_TYPE_DESC"));
                            tempItem.PAST_FILE_MANAGER_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("PAST_FILE_MANAGER_STATE_DESC"));
                            tempItem.PAST_BRANCH_DESC = EscapeUtils.CheckTextNull(rs.getString("PAST_BRANCH_NAME"));
                            int feeAmount = rs.getInt("FEE_AMOUNT");
                            int tokenNum = rs.getInt("TOKEN_NUMBER");
                            int tokenAmount = rs.getInt("TOKEN_AMOUNT");
                            tempItem.TOKEN_NUMBER = tokenNum;
                            tempItem.ROSE_AMOUNT = 0;
                            String sRose = EscapeUtils.CheckTextNull(rs.getString("ROSE"));
                            if(!"".equals(sRose)) {
                                tempItem.ROSE_AMOUNT = Integer.parseInt(sRose);
                            } else {
                                int numRate = rs.getInt("DISCOUNT_RATE");
                                if(numRate != 0) {
                                    tempItem.ROSE_AMOUNT = (feeAmount/100) * numRate;
                                }
                            }
                            if(tokenNum != 0) {
                                tokenAmount = tokenAmount * tokenNum;
                            }
                            tempItem.FEE_AMOUNT = feeAmount;
                            tempItem.TOKEN_AMOUNT = tokenAmount;
                            tempItem.RETURN_AMOUNT = feeAmount - tempItem.ROSE_AMOUNT;
                            tempItem.TOKEN_SN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempItem.REVOKED_DT = EscapeUtils.CheckTextNull(rs.getString("DECLINED_DT"));
                            tempItem.CROSS_CHECK_MONTH = pMONTH + "/" + pYEAR;
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_CONTROL_REPORT[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_CERTIFICATE_DECLINE">
    public void S_BO_REPORT_CERTIFICATE_DECLINE(String pMONTH, String pYEAR,
            String pBRANCH_ID, String pUSER_BY, String pLANGUAGE, CERTIFICATION_CONTROL_REPORT[][] response, int sPage, int sSum, String sessUserAgentID)
            throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION_CONTROL_REPORT> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_CERTIFICATE_DECLINE(?,?,?,?,?,?,?,?) }");
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, Integer.parseInt(pMONTH));
                        proc_stmt.setInt(3, Integer.parseInt(pYEAR));
                        proc_stmt.setInt(4, sPage);
                        proc_stmt.setInt(5, sSum);
                        proc_stmt.setInt(6, Integer.parseInt(pLANGUAGE));
                        if (!"".equals(pUSER_BY)) {
                            proc_stmt.setInt(7, Integer.parseInt(pUSER_BY));
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(sessUserAgentID)) {
                            if(!Definitions.CONFIG_AGENT_ROOT.equals(sessUserAgentID)) {
                                proc_stmt.setInt(8, Integer.parseInt(sessUserAgentID));
                            } else {
                                proc_stmt.setString(8, null);
                            }
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_CERTIFICATE_DECLINE", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_CONTROL_REPORT tempItem = new CERTIFICATION_CONTROL_REPORT();
                            tempItem.ISSUED_DT = EscapeUtils.CheckTextNull(rs.getString("EFFECTIVE_DT"));
                            tempItem.CERTIFICATION_SN = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_SN"));
                            tempItem.BRANCH_NAME = EscapeUtils.CheckTextNull(rs.getString("BRANCH_NAME"));
                            tempItem.CREATED_BY = EscapeUtils.CheckTextNull(rs.getString("SALE_ACCOUNT"));
                            tempItem.COMPANY_NAME = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("COMPANY_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            String[] sResultSum = new String[2];
                            CommonReferServlet.separateUIDToSumField(sENTERPRISE_ID, sPERSONAL_ID, sResultSum);
                            tempItem.TAX_CODE = sResultSum[0];
                            tempItem.P_ID = sResultSum[0];
                            tempItem.PERSONAL_NAME = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.CERTIFICATION_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempItem.SERVICE_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("SERVICE_TYPE_DESC"));
                            tempItem.PAST_FILE_MANAGER_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("PAST_FILE_MANAGER_STATE_DESC"));
                            tempItem.PAST_BRANCH_DESC = EscapeUtils.CheckTextNull(rs.getString("PAST_BRANCH_NAME"));
                            int feeAmount = rs.getInt("FEE_AMOUNT");
                            int tokenNum = rs.getInt("TOKEN_NUMBER");
                            int tokenAmount = rs.getInt("TOKEN_AMOUNT");
                            tempItem.TOKEN_NUMBER = tokenNum;
                            tempItem.ROSE_AMOUNT = 0;
                            String sRose = EscapeUtils.CheckTextNull(rs.getString("ROSE"));
                            if(!"".equals(sRose)) {
                                tempItem.ROSE_AMOUNT = Integer.parseInt(sRose);
                            } else {
                                int numRate = rs.getInt("DISCOUNT_RATE");
                                if(numRate != 0) {
                                    tempItem.ROSE_AMOUNT = (feeAmount/100) * numRate;
                                }
                            }
                            if(tokenNum != 0) {
                                tokenAmount = tokenAmount * tokenNum;
                            }
                            tempItem.FEE_AMOUNT = feeAmount;
                            tempItem.TOKEN_AMOUNT = tokenAmount;
                            tempItem.RETURN_AMOUNT = feeAmount - tempItem.ROSE_AMOUNT;
                            tempItem.TOKEN_SN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempItem.REVOKED_DT = EscapeUtils.CheckTextNull(rs.getString("DECLINED_DT"));
                            tempItem.CROSS_CHECK_MONTH = pMONTH + "/" + pYEAR;
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_CONTROL_REPORT[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_BRIEF_TOTAL">
    public int S_BO_CERTIFICATION_BRIEF_TOTAL(String pCOMPANY_NAME,
            String pPERSONAL_NAME, String pCOLLECT_ENABLED, String pMONTH, String pYEAR,
            String pBRANCH_ID, String pCOMPENSATION_BRIEF, String pBRIEF_TYPE, String pUserUID,
            String pCOMMIT_ENABLED, String stateProfile, String strFromReceiveDate,
            String strToReceiveDate, String pConfirmResign, String pERROR_SIGNING, String pENTERPRISE_ID, String pPERSONAL_ID)
        throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_BRIEF_TOTAL", 18));
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        if (!"".equals(pCOLLECT_ENABLED)) {
                            proc_stmt.setInt("pCOLLECT_ENABLED", Integer.parseInt(pCOLLECT_ENABLED));
                        } else {
                            proc_stmt.setString("pCOLLECT_ENABLED", null);
                        }
                        if (!"".equals(pMONTH)) {
                            proc_stmt.setInt("pMONTH", Integer.parseInt(pMONTH));
                        } else {
                            proc_stmt.setString("pMONTH", null);
                        }
                        proc_stmt.setInt("pYEAR", Integer.parseInt(pYEAR));
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        if (!"".equals(pCOMPENSATION_BRIEF)) {
                            proc_stmt.setInt("pCOMPENSATION_BRIEF", Integer.parseInt(pCOMPENSATION_BRIEF));
                        } else {
                            proc_stmt.setString("pCOMPENSATION_BRIEF", null);
                        }
                        if (!"".equals(pBRIEF_TYPE)) {
                            proc_stmt.setInt("pBRIEF_TYPE", Integer.parseInt(pBRIEF_TYPE));
                        } else {
                            proc_stmt.setString("pBRIEF_TYPE", null);
                        }
                        if (!"".equals(pUserUID)) {
                            proc_stmt.setInt("pUSER_BY", Integer.parseInt(pUserUID));
                        } else {
                            proc_stmt.setString("pUSER_BY", null);
                        }
                        if ("1".equals(pCOMMIT_ENABLED)) {
                            proc_stmt.setInt("pCOMMIT_ENABLED", Integer.parseInt(pCOMMIT_ENABLED));
                        } else {
                            proc_stmt.setString("pCOMMIT_ENABLED", null);
                        }
                        if (!"".equals(stateProfile)) {
                            proc_stmt.setInt("pFILE_MANAGER_STATE_ID", Integer.parseInt(stateProfile));
                        } else {
                            proc_stmt.setString("pFILE_MANAGER_STATE_ID", null);
                        }
                        if (!"".equals(strFromReceiveDate)) {
                            proc_stmt.setString("pDATE_RECEIVED_BRIEF_FROM", strFromReceiveDate);
                        } else {
                            proc_stmt.setString("pDATE_RECEIVED_BRIEF_FROM", null);
                        }
                        if (!"".equals(strToReceiveDate)) {
                            proc_stmt.setString("pDATE_RECEIVED_BRIEF_TO", strToReceiveDate);
                        } else {
                            proc_stmt.setString("pDATE_RECEIVED_BRIEF_TO", null);
                        }
                        if (!"".equals(pConfirmResign)) {
                            proc_stmt.setInt("pRESIGNING_CONFIRMATION_PAPER_ENABLED", Integer.parseInt(pConfirmResign));
                        } else {
                            proc_stmt.setString("pRESIGNING_CONFIRMATION_PAPER_ENABLED", null);
                        }
                        if (!"".equals(pERROR_SIGNING)) {
                            proc_stmt.setInt("pERROR_SIGNING", Integer.parseInt(pERROR_SIGNING));
                        } else {
                            proc_stmt.setString("pERROR_SIGNING", null);
                        }
                        proc_stmt.registerOutParameter("pCOUNT", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_BRIEF_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt("pCOUNT");
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_BRIEF_LIST">
    public void S_BO_CERTIFICATION_BRIEF_LIST(String pCOMPANY_NAME, String pPERSONAL_NAME, String pCOLLECT_ENABLED,
        String pMONTH, String pYEAR, String pBRANCH_ID, String pCOMPENSATION_BRIEF, String pBRIEF_TYPE, String pUserUID,
        String pLANGUAGE, CERTIFICATION[][] response, int sPage, int sSum, String pCOMMIT_ENABLED, String stateProfile, String strFromReceiveDate,
        String strToReceiveDate, String pConfirmResign, String pERROR_SIGNING, String pENTERPRISE_ID, String pPERSONAL_ID)
        throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_BRIEF_LIST", 20));
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        if (!"".equals(pCOLLECT_ENABLED)) {
                            proc_stmt.setInt("pCOLLECT_ENABLED", Integer.parseInt(pCOLLECT_ENABLED));
                        } else {
                            proc_stmt.setString("pCOLLECT_ENABLED", null);
                        }
                        if (!"".equals(pMONTH)) {
                            proc_stmt.setInt("pMONTH", Integer.parseInt(pMONTH));
                        } else {
                            proc_stmt.setString("pMONTH", null);
                        }
                        proc_stmt.setInt("pYEAR", Integer.parseInt(pYEAR));
                        proc_stmt.setInt("pLANGUAGE", Integer.parseInt(pLANGUAGE));
                        proc_stmt.setInt("pPAGE_NO", sPage);
                        proc_stmt.setInt("pROW_NO", sSum);
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        if (!"".equals(pCOMPENSATION_BRIEF)) {
                            proc_stmt.setInt("pCOMPENSATION_BRIEF", Integer.parseInt(pCOMPENSATION_BRIEF));
                        } else {
                            proc_stmt.setString("pCOMPENSATION_BRIEF", null);
                        }
                        if (!"".equals(pBRIEF_TYPE)) {
                            proc_stmt.setInt("pBRIEF_TYPE", Integer.parseInt(pBRIEF_TYPE));
                        } else {
                            proc_stmt.setString("pBRIEF_TYPE", null);
                        }
                        if (!"".equals(pUserUID)) {
                            proc_stmt.setInt("pUSER_BY", Integer.parseInt(pUserUID));
                        } else {
                            proc_stmt.setString("pUSER_BY", null);
                        }
                        if ("1".equals(pCOMMIT_ENABLED)) {
                            proc_stmt.setInt("pCOMMIT_ENABLED", Integer.parseInt(pCOMMIT_ENABLED));
                        } else {
                            proc_stmt.setString("pCOMMIT_ENABLED", null);
                        }
                        if (!"".equals(stateProfile)) {
                            proc_stmt.setInt("pFILE_MANAGER_STATE_ID", Integer.parseInt(stateProfile));
                        } else {
                            proc_stmt.setString("pFILE_MANAGER_STATE_ID", null);
                        }
                        if (!"".equals(strFromReceiveDate)) {
                            proc_stmt.setString("pDATE_RECEIVED_BRIEF_FROM", strFromReceiveDate);
                        } else {
                            proc_stmt.setString("pDATE_RECEIVED_BRIEF_FROM", null);
                        }
                        if (!"".equals(strToReceiveDate)) {
                            proc_stmt.setString("pDATE_RECEIVED_BRIEF_TO", strToReceiveDate);
                        } else {
                            proc_stmt.setString("pDATE_RECEIVED_BRIEF_TO", null);
                        }
                        if (!"".equals(pConfirmResign)) {
                            proc_stmt.setInt("pRESIGNING_CONFIRMATION_PAPER_ENABLED", Integer.parseInt(pConfirmResign));
                        } else {
                            proc_stmt.setString("pRESIGNING_CONFIRMATION_PAPER_ENABLED", null);
                        }
                        if (!"".equals(pERROR_SIGNING)) {
                            proc_stmt.setInt("pERROR_SIGNING", Integer.parseInt(pERROR_SIGNING));
                        } else {
                            proc_stmt.setString("pERROR_SIGNING", null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_BRIEF_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.CERTIFICATION_OWNER_ID = rs.getInt("CERTIFICATION_OWNER_ID");
                            tempItem.ISSUED_DT = rs.getString("ISSUED_DT");
                            tempItem.CREATED_BY = rs.getString("SALE_STAFF");
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.TOKEN_SN = rs.getString("TOKEN_SN");
                            tempItem.CERTIFICATION_AUTHORITY_DESC = rs.getString("CERTIFICATION_AUTHORITY_DESC");
                            tempItem.CERTIFICATION_PROFILE_NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.CROSS_CHECKED_MOUNTH = rs.getString("CROSS_CHECK_MONTH");
                            tempItem.BRIEF_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("BRIEF_PROPERTIES"));
                            tempItem.CERTIFICATION_ATTR_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("SERVICE_TYPE_DESC"));
                            tempItem.FILE_MANAGER_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("FILE_MANAGER_STATE_DESC"));
                            tempItem.COLLECT_ENABLED = rs.getBoolean("COLLECT_ENABLED");
                            tempItem.BRIEF_TYPE = rs.getBoolean("BRIEF_TYPE");
                            tempItem.CERTIFICATION_SN = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_SN"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_BRIEF_LIST_EXPORT">
    public void S_BO_CERTIFICATION_BRIEF_LIST_EXPORT(String pCOMPANY_NAME,
        String pPERSONAL_NAME, String pCOLLECT_ENABLED, String pMONTH, String pYEAR, String pBRANCH_ID,
        String pCOMPENSATION_BRIEF, String pBRIEF_TYPE, String pUserUID, String pLANGUAGE, CERTIFICATION[][] response,
        String idCheckCommitEnabled, String stateProfile, String strFromReceiveDate,
        String strToReceiveDate, String pConfirmResign, String pERROR_SIGNING, String pENTERPRISE_ID, String pPERSONAL_ID)
        throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_BRIEF_LIST_EXPORT", 18));
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        if (!"".equals(pCOLLECT_ENABLED)) {
                            proc_stmt.setInt("pCOLLECT_ENABLED", Integer.parseInt(pCOLLECT_ENABLED));
                        } else {
                            proc_stmt.setString("pCOLLECT_ENABLED", null);
                        }
                        if (!"".equals(pMONTH)) {
                            proc_stmt.setInt("pMONTH", Integer.parseInt(pMONTH));
                        } else {
                            proc_stmt.setString("pMONTH", null);
                        }
                        proc_stmt.setInt("pYEAR", Integer.parseInt(pYEAR));
                        proc_stmt.setInt("pLANGUAGE", Integer.parseInt(pLANGUAGE));
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        if (!"".equals(pCOMPENSATION_BRIEF)) {
                            proc_stmt.setInt("pCOMPENSATION_BRIEF", Integer.parseInt(pCOMPENSATION_BRIEF));
                        } else {
                            proc_stmt.setString("pCOMPENSATION_BRIEF", null);
                        }
                        if (!"".equals(pBRIEF_TYPE)) {
                            proc_stmt.setInt("pBRIEF_TYPE", Integer.parseInt(pBRIEF_TYPE));
                        } else {
                            proc_stmt.setString("pBRIEF_TYPE", null);
                        }
                        if (!"".equals(pUserUID)) {
                            proc_stmt.setInt("pUSER_BY", Integer.parseInt(pUserUID));
                        } else {
                            proc_stmt.setString("pUSER_BY", null);
                        }
                        if ("1".equals(idCheckCommitEnabled)) {
                            proc_stmt.setInt("pCOMMIT_ENABLED", Integer.parseInt(idCheckCommitEnabled));
                        } else {
                            proc_stmt.setString("pCOMMIT_ENABLED", null);
                        }
                        if (!"".equals(stateProfile)) {
                            proc_stmt.setInt("pFILE_MANAGER_STATE_ID", Integer.parseInt(stateProfile));
                        } else {
                            proc_stmt.setString("pFILE_MANAGER_STATE_ID", null);
                        }
                        if (!"".equals(strFromReceiveDate)) {
                            proc_stmt.setString("pDATE_RECEIVED_BRIEF_FROM", strFromReceiveDate);
                        } else {
                            proc_stmt.setString("pDATE_RECEIVED_BRIEF_FROM", null);
                        }
                        if (!"".equals(strToReceiveDate)) {
                            proc_stmt.setString("pDATE_RECEIVED_BRIEF_TO", strToReceiveDate);
                        } else {
                            proc_stmt.setString("pDATE_RECEIVED_BRIEF_TO", null);
                        }
                        if (!"".equals(pConfirmResign)) {
                            proc_stmt.setInt("pRESIGNING_CONFIRMATION_PAPER_ENABLED", Integer.parseInt(pConfirmResign));
                        } else {
                            proc_stmt.setString("pRESIGNING_CONFIRMATION_PAPER_ENABLED", null);
                        }
                        if (!"".equals(pERROR_SIGNING)) {
                            proc_stmt.setInt("pERROR_SIGNING", Integer.parseInt(pERROR_SIGNING));
                        } else {
                            proc_stmt.setString("pERROR_SIGNING", null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_BRIEF_LIST_EXPORT", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.CERTIFICATION_OWNER_ID = rs.getInt("CERTIFICATION_OWNER_ID");
                            tempItem.ISSUED_DT = EscapeUtils.CheckTextNull(rs.getString("ISSUED_DT"));
                            tempItem.BRANCH_DESC = EscapeUtils.CheckTextNull(rs.getString("BRANCH_NAME")) + " (" + EscapeUtils.CheckTextNull(rs.getString("BRANCH_DESC")) + ")";
                            tempItem.CREATED_BY = EscapeUtils.CheckTextNull(rs.getString("SALE_STAFF"));
                            tempItem.COMPANY_NAME = EscapeUtils.CheckTextNull(rs.getString("COMPANY_NAME"));
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempItem.PERSONAL_NAME = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_NAME"));
                            tempItem.CERTIFICATION_AUTHORITY_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_DESC"));
                            tempItem.CERTIFICATION_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempItem.CROSS_CHECKED_MOUNTH = EscapeUtils.CheckTextNull(rs.getString("CROSS_CHECK_MONTH"));
                            tempItem.BRIEF_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("BRIEF_PROPERTIES"));
                            tempItem.CERTIFICATION_ATTR_TYPE_DESC = EscapeUtils.CheckTextNull(rs.getString("SERVICE_TYPE_DESC"));
                            tempItem.COLLECT_ENABLED = rs.getBoolean("COLLECT_ENABLED");
                            tempItem.COLLECT_SOFTCOPY = rs.getBoolean("COLLECTED_SOFTCOPY_ENABLED");
                            tempItem.RECEIVED_BRIEF_DATE = EscapeUtils.CheckTextNull(rs.getString("RECEIVED_BRIEF_DT"));
                            tempItem.FINE_FOR_LACK_OF_BRIEF = rs.getInt("FINE_FOR_LACK_OF_BRIEF");
                            tempItem.BRIEF_TYPE = rs.getBoolean("BRIEF_TYPE");
                            tempItem.TOKEN_SN = EscapeUtils.CheckTextNull(rs.getString("TOKEN_SN"));
                            tempItem.PHONE_CONTRACT = EscapeUtils.CheckTextNull(rs.getString("PHONE_CONTRACT"));
                            tempItem.EMAIL_CONTRACT = EscapeUtils.CheckTextNull(rs.getString("EMAIL_CONTRACT"));
                            tempItem.COLLECTED_FULL_BRIEF_DT = EscapeUtils.CheckTextNull(rs.getString("COLLECTED_FULL_BRIEF_DT"));
                            tempItem.RECEIVED_BRIEF_DT = EscapeUtils.CheckTextNull(rs.getString("RECEIVED_BRIEF_DT"));
                            tempItem.FILE_MANAGER_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("FILE_MANAGER_STATE_DESC"));
                            tempItem.CERTIFICATION_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_STATE_DESC"));
                            tempItem.CERTIFICATION_SN = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_SN"));
                            tempItem.PROFILE_CONTACT_INFO = EscapeUtils.CheckTextNull(rs.getString("PROFILE_CONTACT_INFO"));
                            tempItem.TOKEN_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("TOKEN_STATE_DESC"));
                            tempItem.TOKEN_WAIT_TO_LOCK = EscapeUtils.CheckTextNull(rs.getString("TOKEN_WAIT_TO_LOCK"));
                            tempItem.TOKEN_WAIT_TO_UNLOCK = EscapeUtils.CheckTextNull(rs.getString("TOKEN_WAIT_TO_UNLOCK"));
                            tempItem.EFFECTIVE_DT = EscapeUtils.CheckTextNull(rs.getString("EFFECTIVE_DT"));
                            tempItem.EXPIRATION_DT = EscapeUtils.CheckTextNull(rs.getString("EXPIRATION_DT"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_FILE_MANAGER_INSERT_WITH_OWNER">
    public String S_BO_FILE_MANAGER_INSERT_WITH_OWNER(String pFILE_PROFILE_NAME, String pUUID, String pDMS_PROPERTIES,
            String pMIME_TYPE_NAME, String pFILE_NAME, int pFILE_SIZE, String pCERTIFICATION_ID, String pCERTIFICATION_OWNER_ID, String pUSER_BY,
            int[] pFILE_MANAGER_ID)
            throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FILE_MANAGER_INSERT_WITH_OWNER(?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setString(1, pFILE_PROFILE_NAME);
                        if (!"".equals(pUUID)) {
                            proc_stmt.setString(2, pUUID);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pDMS_PROPERTIES)) {
                            proc_stmt.setString(3, pDMS_PROPERTIES);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pMIME_TYPE_NAME)) {
                            proc_stmt.setString(4, pMIME_TYPE_NAME);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pFILE_NAME)) {
                            proc_stmt.setString(5, CommonFunction.clearUnicodeFontString(pFILE_NAME));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.setInt(6, pFILE_SIZE);
                        proc_stmt.setInt(7, Integer.parseInt(pCERTIFICATION_ID));
                        proc_stmt.setInt(8, Integer.parseInt(pCERTIFICATION_OWNER_ID));
                        proc_stmt.setString(9, pUSER_BY);
                        proc_stmt.registerOutParameter(10, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(11, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_FILE_MANAGER_INSERT_WITH_OWNER", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(10));
                        pFILE_MANAGER_ID[0] = proc_stmt.getInt(11);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_FILE_MANAGER_GET_BY_CERTIFICATION">
    public void S_BO_FILE_MANAGER_GET_BY_CERTIFICATION_AND_OWNER(String pCERTIFICATION_ID, String pOWNER_ID,
        String pLANGUAGE, FILE_MANAGER[][] response) throws Exception {
        ResultSet rs = null;
        ArrayList<FILE_MANAGER> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FILE_MANAGER_GET_BY_CERTIFICATION_AND_OWNER(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pOWNER_ID));
                        proc_stmt.setInt(3, Integer.parseInt(pLANGUAGE));
                        CommonFunction.LogDebugString(log, "S_BO_FILE_MANAGER_GET_BY_CERTIFICATION_AND_OWNER", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            FILE_MANAGER tempItem = new FILE_MANAGER();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.CERTIFICATION_ID = rs.getInt("CERTIFICATION_ID");
                            tempItem.FILE_NAME = EscapeUtils.CheckTextNull(rs.getString("FILE_NAME"));
                            tempItem.UUID = EscapeUtils.CheckTextNull(rs.getString("UUID"));
                            tempItem.DMS_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("DMS_PROPERTIES"));
                            tempItem.FILE_SIZE = rs.getInt("FILE_SIZE");
                            tempItem.SIGNED = rs.getBoolean("SIGNED");
                            tempItem.FILE_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("FILE_PROFILE_NAME"));
                            tempItem.FILE_PROFILE_DESC = EscapeUtils.CheckTextNull(rs.getString("FILE_PROFILE_DESC"));
                            tempItem.MODIFIED_DT = EscapeUtils.CheckTextNull(rs.getString("MODIFIED_DT"));
                            tempList.add(tempItem);
                        }
                        response[0] = new FILE_MANAGER[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_BRIEF_UPDATE">
    public String S_BO_CERTIFICATION_BRIEF_UPDATE(String pCERTIFICATION_BRIEF_ID, String pBRIEF_TYPE, String pBRIEF_PROPERTIES,
            String pCOLLECT_ENABLED, String pEMAIL_CONTRACT, String pPHONE_CONTRACT, String pFEE_AMOUNT,
            String pTOKEN_AMOUNT, String pFINE_FOR_LACK_OF_BRIEF, String pUserUID, String pCOLLECT_SOFTCOPY_ENABLED,
            String pADDRESS, java.sql.Timestamp pRECEIVED_BRIEF_DATE, String pREPRESENTATIVE_EMAIL, String pREPRESENTATIVE_PHONE,
            String pREPRESENTATIVE_NAME, String pCONTACT_NAME, String pFILE_MANAGER_STATE_ID, String pProfileContactInfo)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_BRIEF_UPDATE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_BRIEF_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pBRIEF_TYPE));
                        proc_stmt.setString(3, pBRIEF_PROPERTIES);
                        proc_stmt.setInt(4, Integer.parseInt(pCOLLECT_ENABLED));
                        proc_stmt.setString(5, pUserUID);
                        if(!"".equals(pEMAIL_CONTRACT)) {
                            proc_stmt.setString(6, pEMAIL_CONTRACT);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if(!"".equals(pPHONE_CONTRACT)) {
                            proc_stmt.setString(7, pPHONE_CONTRACT);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if(!"".equals(pFEE_AMOUNT)) {
                            proc_stmt.setDouble(8, Double.parseDouble(pFEE_AMOUNT));
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        if(!"".equals(pTOKEN_AMOUNT)) {
                            proc_stmt.setDouble(9, Double.parseDouble(pTOKEN_AMOUNT));
                        } else {
                            proc_stmt.setString(9, null);
                        }
                        if(!"".equals(pCOLLECT_SOFTCOPY_ENABLED)) {
                            proc_stmt.setInt(10, Integer.parseInt(pCOLLECT_SOFTCOPY_ENABLED));
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        if(!"".equals(pFINE_FOR_LACK_OF_BRIEF)) {
                            proc_stmt.setDouble(11, Double.parseDouble(pFINE_FOR_LACK_OF_BRIEF));
                        } else {
                            proc_stmt.setString(11, null);
                        }
                        if(!"".equals(pProfileContactInfo)) {
                            proc_stmt.setString(12, pProfileContactInfo);
                        } else {
                            proc_stmt.setString(12, null);
                        }
                        if (pRECEIVED_BRIEF_DATE != null) {
                            proc_stmt.setObject(13, pRECEIVED_BRIEF_DATE);
                        } else {
                            proc_stmt.setString(13, null);
                        }
//                        if(!"".equals(pREPRESENTATIVE_EMAIL)) {
//                            proc_stmt.setString(14, pREPRESENTATIVE_EMAIL);
//                        } else {
//                            proc_stmt.setString(14, null);
//                        }
//                        if(!"".equals(pREPRESENTATIVE_PHONE)) {
//                            proc_stmt.setString(15, pREPRESENTATIVE_PHONE);
//                        } else {
//                            proc_stmt.setString(15, null);
//                        }
//                        if(!"".equals(pREPRESENTATIVE_NAME)) {
//                            proc_stmt.setString(16, pREPRESENTATIVE_NAME);
//                        } else {
//                            proc_stmt.setString(16, null);
//                        }
//                        if(!"".equals(pCONTACT_NAME)) {
//                            proc_stmt.setString(17, pCONTACT_NAME);
//                        } else {
//                            proc_stmt.setString(17, null);
//                        }
                        if(!"".equals(pFILE_MANAGER_STATE_ID)) {
                            proc_stmt.setInt(14, Integer.parseInt(pFILE_MANAGER_STATE_ID));
                        } else {
                            proc_stmt.setString(14, null);
                        }
                        proc_stmt.registerOutParameter(15, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_BRIEF_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(15);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_BRIEF_UPDATE_COLLECT_SOFTCOPY">
    public String S_BO_CERTIFICATION_BRIEF_UPDATE_COLLECT_SOFTCOPY(String pCERTIFICATION_BRIEF_ID, String pBRIEF_PROPERTIES,
            String pCOLLECT_SOFTCOPY_ENABLED, String pUserUID, String pSTATE_PROFILE)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_BRIEF_UPDATE_COLLECT_SOFTCOPY(?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_BRIEF_ID));
                        if(!"".equals(pBRIEF_PROPERTIES)) {
                            proc_stmt.setString(2, pBRIEF_PROPERTIES);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if(!"".equals(pCOLLECT_SOFTCOPY_ENABLED)) {
                            proc_stmt.setInt(3, Integer.parseInt(pCOLLECT_SOFTCOPY_ENABLED));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setString(4, pUserUID);
                        if(!"".equals(pSTATE_PROFILE)) {
                            proc_stmt.setInt(5, Integer.parseInt(pSTATE_PROFILE));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.registerOutParameter(6, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_BRIEF_UPDATE_COLLECT_SOFTCOPY", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(6);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_FILE_MANAGER_UPDATE_COMMIT_ENABLED">
    public String S_BO_FILE_MANAGER_UPDATE_COMMIT_ENABLED(String pCERTIFICATION_ID, String pUserUID)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_FILE_MANAGER_UPDATE_COMMIT_ENABLED(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_ID));
                        proc_stmt.setString(2, pUserUID);
                        proc_stmt.registerOutParameter(3, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_FILE_MANAGER_UPDATE_COMMIT_ENABLED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(3);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_BRIEF_UPDATE_BRIEF_TYPE">
    public String S_BO_CERTIFICATION_BRIEF_UPDATE_BRIEF_TYPE(String pCOMPANY_NAME, String pTAX_CODE, String pBUDGET_CODE, 
            String pPERSONAL_NAME, String pP_ID, String pPASSPORT, String pCOLLECT_ENABLED, String pMONTH, String pYEAR,
            String pBRANCH_ID, String pUserUID, String pCommitEnabled, String pDECISION, String pCCCD, String pConfirmResign,
            String pENTERPRISE_ID, String pPERSONAL_ID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall(CommonFunction.getNumericalOrderStore("S_BO_CERTIFICATION_BRIEF_UPDATE_BRIEF_TYPE", 12));
                        if (!"".equals(pCOMPANY_NAME)) {
                            proc_stmt.setString("pCOMPANY_NAME", pCOMPANY_NAME);
                        } else {
                            proc_stmt.setString("pCOMPANY_NAME", null);
                        }
                        if (!"".equals(pPERSONAL_NAME)) {
                            proc_stmt.setString("pPERSONAL_NAME", pPERSONAL_NAME);
                        } else {
                            proc_stmt.setString("pPERSONAL_NAME", null);
                        }
                        if (!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString("pENTERPRISE_ID", pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString("pENTERPRISE_ID", null);
                        }
                        if (!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString("pPERSONAL_ID", pPERSONAL_ID);
                        } else {
                            proc_stmt.setString("pPERSONAL_ID", null);
                        }
                        if (!"".equals(pCOLLECT_ENABLED)) {
                            proc_stmt.setInt("pCOLLECT_ENABLED", Integer.parseInt(pCOLLECT_ENABLED));
                        } else {
                            proc_stmt.setString("pCOLLECT_ENABLED", null);
                        }
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt("pBRANCH_ID", Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString("pBRANCH_ID", null);
                        }
                        if (!"".equals(pMONTH)) {
                            proc_stmt.setInt("pMONTH", Integer.parseInt(pMONTH));
                        } else {
                            proc_stmt.setString("pMONTH", null);
                        }
                        proc_stmt.setInt("pYEAR", Integer.parseInt(pYEAR));
                        proc_stmt.setString("pUSERNAME_BY", pUserUID);
                        if (!"".equals(pCommitEnabled)) {
                            proc_stmt.setInt("pCOMMIT_ENABLED", Integer.parseInt(pCommitEnabled));
                        } else {
                            proc_stmt.setString("pCOMMIT_ENABLED", null);
                        }
                        if (!"".equals(pConfirmResign)) {
                            proc_stmt.setInt("pRESIGNING_CONFIRMATION_PAPER_ENABLED", Integer.parseInt(pConfirmResign));
                        } else {
                            proc_stmt.setString("pRESIGNING_CONFIRMATION_PAPER_ENABLED", null);
                        }
                        proc_stmt.registerOutParameter("pRESULT", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_BRIEF_UPDATE_BRIEF_TYPE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt("pRESULT"));
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_BRIEF_DETAIL">
    public void S_BO_CERTIFICATION_BRIEF_DETAIL(String pCERTIFICATION_BRIEF_ID, CERTIFICATION[][] response) throws Exception {
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_BRIEF_DETAIL(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERTIFICATION_BRIEF_ID));
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_BRIEF_DETAIL", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
//                            tempItem.COLLECTED_BRIEF_DT = rs.getString("COLLECTED_BRIEF_DT");
                            tempItem.BRIEF_PROPERTIES = rs.getString("BRIEF_PROPERTIES");
                            tempItem.COLLECT_SOFTCOPY = rs.getBoolean("COLLECTED_SOFTCOPY_ENABLED");
                            tempItem.COLLECT_ENABLED = rs.getBoolean("COLLECT_ENABLED");
                            tempItem.BRIEF_TYPE = rs.getBoolean("BRIEF_TYPE");
                            tempItem.FINE_FOR_LACK_OF_BRIEF = rs.getInt("FINE_FOR_LACK_OF_BRIEF");
                            tempItem.RECEIVED_BRIEF_DATE = rs.getString("RECEIVED_BRIEF_DT"); 
//                            tempItem.ADDRESS = rs.getString("ADDRESS");
//                            tempItem.REPRESENTATIVE_EMAIL = rs.getString("REPRESENTATIVE_EMAIL");
//                            tempItem.REPRESENTATIVE_PHONE = rs.getString("REPRESENTATIVE_PHONE");
//                            tempItem.REPRESENTATIVE_NAME = rs.getString("REPRESENTATIVE_NAME");
                            tempItem.PROFILE_CONTACT_INFO = rs.getString("PROFILE_CONTACT_INFO");
//                            tempItem.CONTACT_NAME = rs.getString("CONTACT_NAME");
                            tempItem.FILE_MANAGER_STATE_ID = rs.getInt("FILE_MANAGER_STATE_ID");
                            tempItem.COMMIT_ENABLED = rs.getBoolean("COMMIT_ENABLED");
//                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_BRIEF_REPORT">
    public void S_BO_CERTIFICATION_BRIEF_REPORT(String pBRANCH_ID, String pMONTH, String pYEAR, String pUSER_BY,
        int[] pREMAINING_BEGINNING_MONTH, int[] pBRIEF_IN_MONTH, int[] pBRIEF_LACK_IN_MONTH_NO,
        int[] pBRIEF_COMPENSATE_IN_MONTH_NO, int[] pOVER_TIME_BRIEF_NO, int[] pREMAINING_END_MONTH) throws Exception {
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_BRIEF_REPORT(?,?,?,?,?,?,?,?,?,?) }");
                        if(!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if(!"".equals(pMONTH)) {
                            proc_stmt.setInt(2, Integer.parseInt(pMONTH));
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.setInt(3, Integer.parseInt(pYEAR));
                        if(!"".equals(pUSER_BY)) {
                            proc_stmt.setInt(4, Integer.parseInt(pUSER_BY));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(8, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(9, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(10, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_BRIEF_REPORT", proc_stmt.toString());
                        proc_stmt.execute();
                        pREMAINING_BEGINNING_MONTH[0] = proc_stmt.getInt(5);
                        pBRIEF_IN_MONTH[0] = proc_stmt.getInt(6);
                        pBRIEF_LACK_IN_MONTH_NO[0] = proc_stmt.getInt(7);
                        pBRIEF_COMPENSATE_IN_MONTH_NO[0] = proc_stmt.getInt(8);
                        pOVER_TIME_BRIEF_NO[0] = proc_stmt.getInt(9);
                        pREMAINING_END_MONTH[0] = proc_stmt.getInt(10);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_CROSS_CHECK_STATE">
    public String S_BO_CHECK_OWNER_HAVE_EXISTS_CERTIFICATION(String pENTERPRISE_ID, String pPERSONAL_ID)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CHECK_OWNER_HAVE_EXISTS_CERTIFICATION(?,?,?) }");
                        if(!"".equals(pENTERPRISE_ID)) {
                            proc_stmt.setString(1, pENTERPRISE_ID);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if(!"".equals(pPERSONAL_ID)) {
                            proc_stmt.setString(2, pPERSONAL_ID);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        proc_stmt.registerOutParameter(3, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_CHECK_OWNER_HAVE_EXISTS_CERTIFICATION", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(3);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_ROLE_TOTAL">
    public int S_BO_BRANCH_ROLE_TOTAL() throws Exception {
        int ss = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_ROLE_TOTAL(?) }");
                        proc_stmt.registerOutParameter(1, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(1);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_ROLE_LIST">
    public void S_BO_BRANCH_ROLE_LIST(String pLANGUAGE, int pPAGE_NO,
            int pROW_NO, BRANCH_ROLE[][] response)
        throws Exception {
        ArrayList<BRANCH_ROLE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_ROLE_LIST(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLANGUAGE));
                        proc_stmt.setInt(2, pPAGE_NO);
                        proc_stmt.setInt(3, pROW_NO);
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_ROLE_LIST ", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BRANCH_ROLE tempItem = new BRANCH_ROLE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("BRANCH_ROLE_NAME"));
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("BRANCH_ROLE_DESC"));
                            tempItem.CREATED_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_DT"));
                            tempList.add(tempItem);
                        }
                        response[0] = new BRANCH_ROLE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_ROLE_COMBOBOX ">
    public void S_BO_BRANCH_ROLE_COMBOBOX(String pLANGUAGE, BRANCH_ROLE[][] response)
        throws Exception {
        ArrayList<BRANCH_ROLE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_ROLE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLANGUAGE));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BRANCH_ROLE tempItem = new BRANCH_ROLE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("BRANCH_ROLE_NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("BRANCH_ROLE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new BRANCH_ROLE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_STATE_COMBOBOX ">
    public void S_BO_BRANCH_STATE_COMBOBOX(String pLANGUAGE, BRANCH_STATE[][] response)
        throws Exception {
        ArrayList<BRANCH_STATE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_STATE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLANGUAGE));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BRANCH_STATE tempItem = new BRANCH_STATE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("BRANCH_STATE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new BRANCH_STATE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_ROLE_DETAIL ">
    public void S_BO_BRANCH_ROLE_DETAIL (String pID, BRANCH_ROLE[][] response)
        throws Exception {
        ArrayList<BRANCH_ROLE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_ROLE_DETAIL (?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BRANCH_ROLE tempItem = new BRANCH_ROLE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("BRANCH_ROLE_NAME"));
                            tempItem.ENABLED = rs.getBoolean("ENABLED");
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("REMARK"));
                            tempItem.REMARK_EN = EscapeUtils.CheckTextNull(rs.getString("REMARK_EN"));
                            tempItem.CERTIFICATION_PROFILE_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_PROPERTIES"));
                            tempItem.MODIFIED_DT = EscapeUtils.CheckTextNull(rs.getString("MODIFIED_DT"));
                            tempItem.CREATED_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_DT"));
                            tempItem.MODIFIED_BY = EscapeUtils.CheckTextNull(rs.getString("MODIFIED_BY"));
                            tempItem.CREATED_BY = EscapeUtils.CheckTextNull(rs.getString("CREATED_BY"));
                            tempList.add(tempItem);
                        }
                        response[0] = new BRANCH_ROLE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_ROLE_INSERT">
    public String S_BO_BRANCH_ROLE_INSERT(String strName, String strRemark, String strRemark_EN, String pCERTIFICATION_PROFILE_PROPERTIES,
            String pUserUID) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_ROLE_INSERT(?,?,?,?,?,?) }");
                        proc_stmt.setString(1, strName);
                        proc_stmt.setString(2, strRemark);
                        proc_stmt.setString(3, strRemark_EN);
                        proc_stmt.setString(4, pUserUID);
                        proc_stmt.setString(5, pCERTIFICATION_PROFILE_PROPERTIES);
                        proc_stmt.registerOutParameter(6, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_ROLE_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(6);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_ROLE_UPDATE">
    public String S_BO_BRANCH_ROLE_UPDATE(String strID, String strRemark, String strRemark_EN,
            String sENABLED, String pPROPERTIES, String pAPPLY_ALL, String pUserUID) throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_ROLE_UPDATE(?,?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(strID));
                        proc_stmt.setInt(2, Integer.parseInt(sENABLED));
                        proc_stmt.setString(3, strRemark);
                        proc_stmt.setString(4, strRemark_EN);
                        if(!"".equals(pPROPERTIES))
                        {
                            proc_stmt.setString(5, pPROPERTIES);
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.setString(6, pUserUID);
                        proc_stmt.setInt(7, Integer.parseInt(pAPPLY_ALL));
                        proc_stmt.registerOutParameter(8, java.sql.Types.VARCHAR);
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_ROLE_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getString(8);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_GET_BRANCH_ROLE">
    public void S_BO_BRANCH_GET_BRANCH_ROLE(String pBRANCH_ID, BRANCH_ROLE[][] response)
        throws Exception {
        ArrayList<BRANCH_ROLE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_GET_BRANCH_ROLE(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_GET_BRANCH_ROLE", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BRANCH_ROLE tempItem = new BRANCH_ROLE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("NAME"));
                            tempItem.CERTIFICATION_PROFILE_PROPERTIES = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_PROPERTIES"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("REMARK"));
                            tempItem.REMARK_EN = EscapeUtils.CheckTextNull(rs.getString("REMARK_EN"));
                            tempList.add(tempItem);
                        }
                        response[0] = new BRANCH_ROLE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_FOR_BRANCH">
    public void S_BO_CERTIFICATION_PROFILE_FOR_BRANCH(String pCERTIFICATION_AUTHORITY_ID, String pCERTIFICATION_PURPOSE_ID,
            CERTIFICATION_PROFILE[][] response) throws Exception {
        ArrayList<CERTIFICATION_PROFILE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_FOR_BRANCH(?,?) }");
                        if (!"".equals(pCERTIFICATION_AUTHORITY_ID)) {
                            proc_stmt.setString(1, pCERTIFICATION_AUTHORITY_ID);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(pCERTIFICATION_PURPOSE_ID)) {
                            proc_stmt.setString(2, pCERTIFICATION_PURPOSE_ID);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_PROFILE_FOR_BRANCH", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PROFILE tempItem = new CERTIFICATION_PROFILE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("REMARK"));
                            tempItem.REMARK_EN = EscapeUtils.CheckTextNull(rs.getString("REMARK_EN"));
                            tempItem.CERTIFICATION_PURPOSE_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PURPOSE_NAME"));
                            tempItem.CERTIFICATION_AUTHORITY_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_AUTHORITY_NAME"));
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_PROFILE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_LIST_BY_TOKEN_ID">
    public void S_BO_CERTIFICATION_LIST_BY_TOKEN_ID(String pTOKEN_ID,
            String pLanguage, CERTIFICATION[][] response) throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_LIST_BY_TOKEN_ID(?,?) }");
                        if (!"".equals(pTOKEN_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pTOKEN_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_LIST_BY_TOKEN_ID", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION tempItem = new CERTIFICATION();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.PERSONAL_NAME = rs.getString("PERSONAL_NAME");
                            tempItem.COMPANY_NAME = rs.getString("COMPANY_NAME");
                            tempItem.DOMAIN_NAME = rs.getString("DOMAIN_NAME");
                            String sENTERPRISE_ID = EscapeUtils.CheckTextNull(rs.getString("ENTERPRISE_ID"));
                            String sPERSONAL_ID = EscapeUtils.CheckTextNull(rs.getString("PERSONAL_ID"));
                            CommonReferServlet.separateUIDToField(sENTERPRISE_ID, sPERSONAL_ID, tempItem);
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_SUMMARY_ENTERPRISE">
    public void S_BO_REPORT_SUMMARY_ENTERPRISE(String pBRANCH_ID, String pMONTH, String pYEAR, String pUSER_BY,
            String pLanguage, CERTIFICATION_REPORT_SUMMARY[][] response, String sessUserAgentID) throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION_REPORT_SUMMARY> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_SUMMARY_ENTERPRISE(?,?,?,?,?,?) }");
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(pMONTH)) {
                            proc_stmt.setInt(2, Integer.parseInt(pMONTH));
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pYEAR)) {
                            proc_stmt.setInt(3, Integer.parseInt(pYEAR));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setInt(4, Integer.parseInt(pLanguage));
                        if (!"".equals(pUSER_BY)) {
                            proc_stmt.setInt(5, Integer.parseInt(pUSER_BY));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(sessUserAgentID)) {
                            if(!Definitions.CONFIG_AGENT_ROOT.equals(sessUserAgentID)) {
                                proc_stmt.setInt(6, Integer.parseInt(sessUserAgentID));
                            } else {
                                proc_stmt.setString(6, null);
                            }
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_SUMMARY_ENTERPRISE", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_REPORT_SUMMARY tempItem = new CERTIFICATION_REPORT_SUMMARY();
                            tempItem.CERTIFICATION_PROFILE_NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.CERTIFICATION_PROFILE_AMOUNT = rs.getDouble("CERTIFICATION_PROFILE_AMOUNT");
                            tempItem.DISCOUNT_RATE = rs.getInt("DISCOUNT_RATE");
                            tempItem.NUMBER_CUSTOMER = rs.getInt("NUMBER_CUSTOMER");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_REPORT_SUMMARY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_REPORT_SUMMARY_PERSONAL">
    public void S_BO_REPORT_SUMMARY_PERSONAL(String pBRANCH_ID, String pMONTH, String pYEAR, String pUSER_BY,
            String pLanguage, CERTIFICATION_REPORT_SUMMARY[][] response, String sessUserAgentID) throws Exception {
        ResultSet rs = null;
        ArrayList<CERTIFICATION_REPORT_SUMMARY> tempList = new ArrayList<>();
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_REPORT_SUMMARY_PERSONAL(?,?,?,?,?,?) }");
                        if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(pMONTH)) {
                            proc_stmt.setInt(2, Integer.parseInt(pMONTH));
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pYEAR)) {
                            proc_stmt.setInt(3, Integer.parseInt(pYEAR));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.setInt(4, Integer.parseInt(pLanguage));
                        if (!"".equals(pUSER_BY)) {
                            proc_stmt.setInt(5, Integer.parseInt(pUSER_BY));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(sessUserAgentID)) {
                            if(!Definitions.CONFIG_AGENT_ROOT.equals(sessUserAgentID)) {
                                proc_stmt.setInt(6, Integer.parseInt(sessUserAgentID));
                            } else {
                                proc_stmt.setString(6, null);
                            }
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_REPORT_SUMMARY_PERSONAL", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_REPORT_SUMMARY tempItem = new CERTIFICATION_REPORT_SUMMARY();
                            tempItem.CERTIFICATION_PROFILE_NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.CERTIFICATION_PROFILE_AMOUNT = rs.getDouble("CERTIFICATION_PROFILE_AMOUNT");
                            tempItem.DISCOUNT_RATE = rs.getInt("DISCOUNT_RATE");
                            tempItem.NUMBER_CUSTOMER = rs.getInt("NUMBER_CUSTOMER");
                            tempList.add(tempItem);
                        }
                        response[0] = new CERTIFICATION_REPORT_SUMMARY[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_DISCOUNT_RATE">
    public String S_BO_CERTIFICATION_UPDATE_DISCOUNT_RATE(String pBRANCH_ID, String pMONTH, String pYEAR,
        String pCERTIFICATION_PROFILE_NAME, String pDISCOUNT_RATE)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_UPDATE_DISCOUNT_RATE(?,?,?,?,?) }");
                       if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(pMONTH)) {
                            proc_stmt.setInt(2, Integer.parseInt(pMONTH));
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pYEAR)) {
                            proc_stmt.setInt(3, Integer.parseInt(pYEAR));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pCERTIFICATION_PROFILE_NAME)) {
                            proc_stmt.setString(4, pCERTIFICATION_PROFILE_NAME);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pDISCOUNT_RATE)) {
                            proc_stmt.setInt(5, Integer.parseInt(pDISCOUNT_RATE));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE_DISCOUNT_RATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = "0";
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_ROSE">
    public String S_BO_CERTIFICATION_UPDATE_ROSE(String pBRANCH_ID, String pMONTH, String pYEAR,
        String pCERTIFICATION_PROFILE_NAME, String pDISCOUNT_RATE)
        throws Exception {
        String convrtr = null;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_UPDATE_ROSE(?,?,?,?,?) }");
                       if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(pMONTH)) {
                            proc_stmt.setInt(2, Integer.parseInt(pMONTH));
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pYEAR)) {
                            proc_stmt.setInt(3, Integer.parseInt(pYEAR));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pCERTIFICATION_PROFILE_NAME)) {
                            proc_stmt.setString(4, pCERTIFICATION_PROFILE_NAME);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(pDISCOUNT_RATE)) {
                            proc_stmt.setInt(5, Integer.parseInt(pDISCOUNT_RATE));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE_ROSE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = "0";
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_TOKEN_REPORT_SUMMARY">
    public String S_BO_TOKEN_REPORT_SUMMARY(String pBRANCH_ID, String pMONTH, String pYEAR, String pUSER_BY,
            int[] pREMAINING_BEGINING_MONTH, int[] pIMPORT_IN_MONTH, int[] pTOKEN_USED_IN_MONTH,
            int[] pREAMINING_END_MONTH) throws Exception {
        String strResult="0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_TOKEN_REPORT_SUMMARY(?,?,?,?,?,?,?,?) }");
                       if (!"".equals(pBRANCH_ID)) {
                            proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ID));
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(pMONTH)) {
                            proc_stmt.setInt(2, Integer.parseInt(pMONTH));
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pYEAR)) {
                            proc_stmt.setInt(3, Integer.parseInt(pYEAR));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pUSER_BY)) {
                            proc_stmt.setInt(4, Integer.parseInt(pUSER_BY));
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.registerOutParameter(5, java.sql.Types.BIGINT);
                        proc_stmt.registerOutParameter(6, java.sql.Types.BIGINT);
                        proc_stmt.registerOutParameter(7, java.sql.Types.BIGINT);
                        proc_stmt.registerOutParameter(8, java.sql.Types.BIGINT);
                        CommonFunction.LogDebugString(log, "S_BO_TOKEN_REPORT_SUMMARY", proc_stmt.toString());
                        proc_stmt.execute();
                        pREMAINING_BEGINING_MONTH[0] = proc_stmt.getInt(5);
                        pIMPORT_IN_MONTH[0] = proc_stmt.getInt(6);
                        pTOKEN_USED_IN_MONTH[0] = proc_stmt.getInt(7);
                        pREAMINING_END_MONTH[0] = proc_stmt.getInt(8);
                        strResult = "0";
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return strResult;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_ROLE_LIST_BRANCH">
    public void S_BO_BRANCH_ROLE_LIST_BRANCH(String pBRANCH_ROLE_ID, int pLANGUAGE, BRANCH[][] response)
        throws Exception {
        ArrayList<BRANCH> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_ROLE_LIST_BRANCH(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pBRANCH_ROLE_ID));
                        proc_stmt.setInt(2, pLANGUAGE);
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_ROLE_LIST_BRANCH", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BRANCH tempItem = new BRANCH();
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("BRANCH_DESC"));
                            tempItem.BRANCH_STATE_ID = rs.getInt("BRANCH_STATE_ID");
                            tempItem.BRANCH_STATE_DESC = EscapeUtils.CheckTextNull(rs.getString("BRANCH_STATE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new BRANCH[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_UNASSIGN_CERTIFICATION_PROFILE_BY_PKI_FORMFACTOR">
    public CERTIFICATION_PROFILE[] S_BO_UNASSIGN_CERTIFICATION_PROFILE_BY_PKI_FORMFACTOR(String pPKI_FORMFACTOR_ID, String pLanguage)
            throws Exception {
        ResultSet rs = null;
        Connection conns = null;
        CERTIFICATION_PROFILE[] temp = null;
        ArrayList<CERTIFICATION_PROFILE> tempList = new ArrayList<>();
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_UNASSIGN_CERTIFICATION_PROFILE_BY_PKI_FORMFACTOR(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pPKI_FORMFACTOR_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PROFILE tempItem = new CERTIFICATION_PROFILE();
                            tempItem.ID = rs.getInt("CERTIFICATION_PROFILE_ID");
                            tempItem.NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.REMARK = rs.getString("CERTIFICATION_PROFILE_DESC");
                            tempList.add(tempItem);
                        }
                        temp = new CERTIFICATION_PROFILE[tempList.size()];
                        temp = tempList.toArray(temp);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return temp;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_BY_PKI_FORMFACTOR">
    public CERTIFICATION_PROFILE[] S_BO_CERTIFICATION_PROFILE_BY_PKI_FORMFACTOR(String pPKI_FORMFACTOR_ID, String pLanguage)
            throws Exception {
        ResultSet rs = null;
        Connection conns = null;
        CERTIFICATION_PROFILE[] temp = null;
        ArrayList<CERTIFICATION_PROFILE> tempList = new ArrayList<>();
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_BY_PKI_FORMFACTOR(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pPKI_FORMFACTOR_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            CERTIFICATION_PROFILE tempItem = new CERTIFICATION_PROFILE();
                            tempItem.ID = rs.getInt("PKI_FORMFACTOR_ATTR_ID");
                            tempItem.NAME = rs.getString("CERTIFICATION_PROFILE_NAME");
                            tempItem.REMARK = rs.getString("CERTIFICATION_PROFILE_DESC");
                            tempItem.CREATED_DT = rs.getString("CREATED_DT");
                            tempList.add(tempItem);
                        }
                        temp = new CERTIFICATION_PROFILE[tempList.size()];
                        temp = tempList.toArray(temp);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return temp;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_PKI_FORMFACTOR_UPDATE">
    public String S_BO_PKI_FORMFACTOR_UPDATE(String pPKI_FORMFACTOR_ID, String pREMARK,
        String pREMARK_EN, String pPROPERTIES, int pENABLED, String pUser_UID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PKI_FORMFACTOR_UPDATE(?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pPKI_FORMFACTOR_ID));
                        proc_stmt.setString(2, pREMARK);
                        proc_stmt.setString(3, pREMARK_EN);
                        proc_stmt.setString(4, pPROPERTIES);
                        proc_stmt.setInt(5, pENABLED);
                        proc_stmt.setString(6, pUser_UID);
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_PKI_FORMFACTOR_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(7));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_PKI_FORMFACTOR_ATTR_REMOVE">
    public String S_BO_PKI_FORMFACTOR_ATTR_REMOVE(String strID, String updateUID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PKI_FORMFACTOR_ATTR_REMOVE(?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(strID));
                        proc_stmt.setString(2, updateUID);
                        proc_stmt.registerOutParameter(3, java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(3));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_PKI_FORMFACTOR_ATTR_INSERT">
    public String S_BO_PKI_FORMFACTOR_ATTR_INSERT(String pPKI_FORMFACTOR_ID, String pPKI_FORMFACTOR_ATTR_TYPE_ID,
        String pVALUE, String pUser_UID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_PKI_FORMFACTOR_ATTR_INSERT(?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pPKI_FORMFACTOR_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pPKI_FORMFACTOR_ATTR_TYPE_ID));
                        proc_stmt.setString(3, pVALUE);
                        proc_stmt.setString(4, pUser_UID);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_PKI_FORMFACTOR_ATTR_INSERT", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(5));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_ATTR_UPDATE">
    public String S_BO_CERTIFICATION_PROFILE_ATTR_UPDATE(String pCERT_PROFILE_ID, String pCERT_PROFILE_ATTR_TYPE_ID,
        String pVALUE, String pBLOB, String pUser_UID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_ATTR_UPDATE(?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERT_PROFILE_ID));
                        proc_stmt.setInt(2, Integer.parseInt(pCERT_PROFILE_ATTR_TYPE_ID));
                        proc_stmt.setString(3, pVALUE);
                        proc_stmt.setString(4, pBLOB);
                        proc_stmt.setString(5, pUser_UID);
                        proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_PROFILE_ATTR_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(6));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_UPDATE_AUTO_SYNC">
    public String S_BO_CERTIFICATION_PROFILE_UPDATE_AUTO_SYNC(String pCERT_PROFILE_ID, String pAUTO_SYNC,
        String pUser_UID) throws Exception {
        String convrtr = "0";
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_UPDATE_AUTO_SYNC(?,?,?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pCERT_PROFILE_ID));
                        proc_stmt.setString(2, pAUTO_SYNC);
                        proc_stmt.setString(3, pUser_UID);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_PROFILE_UPDATE_AUTO_SYNC", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = String.valueOf(proc_stmt.getInt(4));
                        break;
                    case "2":
                        break;
                    default:
                        convrtr = "-1";
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_GET_TREE_BRANCH">
    public void S_BO_BRANCH_GET_TREE_BRANCH(int pBRANCH_ID, int pLANGUAGE, BRANCH[][] response)
        throws Exception {
        ArrayList<BRANCH> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_GET_TREE_BRANCH(?,?) }");
                        proc_stmt.setInt(1, pBRANCH_ID);
                        proc_stmt.setInt(2, pLANGUAGE);
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_GET_TREE_BRANCH", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            if(rs.getInt("ID") != 1) {
                                BRANCH tempItem = new BRANCH();
                                tempItem.ID = rs.getInt("ID");
                                tempItem.PARENT_ID = rs.getInt("PARENT_ID");
                                tempItem.LEVEL_ID = rs.getInt("LV");
                                tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("NAME"));
                                tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("DESC"));
                                tempList.add(tempItem);
                            }
                        }
                        List<Integer> list = new ArrayList<>();
                        for(int i=0; i<tempList.size(); i++) {
                            list.add(tempList.get(i).LEVEL_ID);
                        }
                        int iCountParent = CommonFunction.findMaxList(list);
                        String sPrefix = "";
                        if(iCountParent > 1) {
                            int n=2;
                            if(pBRANCH_ID == 1) {
                                n=3;
                            }
                            for(int i = n; i<=iCountParent; i++)
                            {
                                sPrefix = sPrefix + "&nbsp;&nbsp;&nbsp;";
                                for(int j=0; j<tempList.size(); j++)
                                {
                                    if(tempList.get(j).LEVEL_ID == i)
                                    {
                                        tempList.get(j).NAME = sPrefix +"+ "+tempList.get(j).NAME;
                                    }
                                }
                            }
                        }
                        response[0] = new BRANCH[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_GET_TREE_BRANCH_ROOT">
    public void S_BO_BRANCH_GET_TREE_BRANCH_ROOT(int pBRANCH_ID, int pLANGUAGE, BRANCH[][] response)
        throws Exception {
        ArrayList<BRANCH> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_GET_TREE_BRANCH(?,?) }");
                        proc_stmt.setInt(1, pBRANCH_ID);
                        proc_stmt.setInt(2, pLANGUAGE);
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_GET_TREE_BRANCH", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BRANCH tempItem = new BRANCH();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.PARENT_ID = rs.getInt("PARENT_ID");
                            tempItem.LEVEL_ID = rs.getInt("LV");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("DESC"));
                            tempList.add(tempItem);
                        }
                        List<Integer> list = new ArrayList<>();
                        for(int i=0; i<tempList.size(); i++) {
                            list.add(tempList.get(i).LEVEL_ID);
                        }
                        int iCountParent = CommonFunction.findMaxList(list);
                        String sPrefix = "";
                        if(iCountParent > 1) {
                            for(int i=3; i<=iCountParent; i++)
                            {
                                sPrefix = sPrefix + "&nbsp;&nbsp;&nbsp;";
                                for(int j=0; j<tempList.size(); j++)
                                {
                                    if(tempList.get(j).LEVEL_ID == i)
                                    {
                                        tempList.get(j).NAME = sPrefix +"+ "+tempList.get(j).NAME;
                                    }
                                }
                            }
                        }
                        response[0] = new BRANCH[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_GET_TREE_BRANCH_AGENCY">
    public void S_BO_BRANCH_GET_TREE_BRANCH_AGENCY(int pBRANCH_ID, int pLANGUAGE, BRANCH[][] response, String sLevelBranch)
        throws Exception {
        ArrayList<BRANCH> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_GET_TREE_BRANCH(?,?) }");
                        proc_stmt.setInt(1, pBRANCH_ID);
                        proc_stmt.setInt(2, pLANGUAGE);
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_GET_TREE_BRANCH", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            BRANCH tempItem = new BRANCH();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.PARENT_ID = rs.getInt("PARENT_ID");
                            tempItem.LEVEL_ID = rs.getInt("LV");
                            tempItem.NAME = EscapeUtils.CheckTextNull(rs.getString("NAME"));
                            tempItem.REMARK = EscapeUtils.CheckTextNull(rs.getString("DESC"));
                            tempList.add(tempItem);
                        }
                        List<Integer> list = new ArrayList<>();
                        for(int i=0; i<tempList.size(); i++) {
                            list.add(tempList.get(i).LEVEL_ID);
                        }
                        int iCountParent = CommonFunction.findMaxList(list);
                        String sPrefix = "";
                        if(iCountParent > 1) {
                            int n;
                            if(sLevelBranch.equals("")) {
                                n = 4;
                            } else if(sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CA)) {
                                n = 3;
                            } else if(sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CHILREN_ONE)) {
                                n = 2;
                            } else {
                                n = 2;
                            }
                            for(int i=n; i<=iCountParent; i++)
                            {
                                sPrefix = sPrefix + "&nbsp;&nbsp;&nbsp;";
                                for(int j=0; j<tempList.size(); j++)
                                {
                                    if(tempList.get(j).LEVEL_ID == i)
                                    {
                                        tempList.get(j).NAME = sPrefix +"+ "+tempList.get(j).NAME;
                                    }
                                }
                            }
                        }
                        response[0] = new BRANCH[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CHECK_BRANCH_APPROVED">
    public int S_BO_CHECK_BRANCH_APPROVED(int pCERTIFICATION_ATTR_ID, int pBRANCH_ID, String pBRANCH_LIST_ID)
            throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CHECK_BRANCH_APPROVED(?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ATTR_ID);
                        proc_stmt.setInt(2, pBRANCH_ID);
                        if(!"".equals(pBRANCH_LIST_ID)) {
                            proc_stmt.setString(3, pBRANCH_LIST_ID);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CHECK_BRANCH_APPROVED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(4);
                        // 1 - chua duyet, 0 - chua duoc phep duyet , 2 - da duyet qua
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_TOKENSIM_ACTIVATION">
    public int S_BO_API_TOKENSIM_ACTIVATION(String pACTIVATION_CODE, String pUSERNAME_BY,
        int[] pCERTIFICATION_ID, int[] pCERTIFICATION_ATTR_ID) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_TOKENSIM_ACTIVATION(?,?,?,?,?) }");
//                        proc_stmt.setString(1, pTOKEN_SN);
                        proc_stmt.setString(1, pACTIVATION_CODE);
                        proc_stmt.setString(2, pUSERNAME_BY);
                        proc_stmt.registerOutParameter(3, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter(5, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_TOKENSIM_ACTIVATION", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(3);
                        pCERTIFICATION_ID[0] = proc_stmt.getInt(4);
                        pCERTIFICATION_ATTR_ID[0] = proc_stmt.getInt(5);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_SIM_CERTIFICATION_GENERATED">
    public int S_BO_API_SIM_CERTIFICATION_GENERATED(int pCERTFICATION_ATTR_ID, String pCSR, String pVALUE,
        String pTOKEN_SN, String pUSERNAME_BY) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_SIM_CERTIFICATION_GENERATED(?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTFICATION_ATTR_ID);
                        proc_stmt.setString(2, pCSR);
                        proc_stmt.setString(3, pVALUE);
                        proc_stmt.setString(4, pTOKEN_SN);
                        proc_stmt.setString(5, pUSERNAME_BY);
                        proc_stmt.registerOutParameter(6, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_SIM_CERTIFICATION_GENERATED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(6);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_API_SIM_CERTIFICATION_ATTR_UPDATE">
    public int S_BO_API_SIM_CERTIFICATION_ATTR_UPDATE(int pCERTFICATION_ATTR_ID, String pVALUE, String pUSERNAME_BY)
        throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_API_SIM_CERTIFICATION_ATTR_UPDATE(?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTFICATION_ATTR_ID);
                        proc_stmt.setString(2, pVALUE);
                        proc_stmt.setString(3, pUSERNAME_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_API_SIM_CERTIFICATION_ATTR_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(4);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    // neac synch
    //<editor-fold defaultstate="collapsed" desc="S_BO_NEAC_SYNC_STATE_COMBOBOX">
    public void S_BO_NEAC_SYNC_STATE_COMBOBOX(String pLanguage, NEAC_SYNC_STATE[][] response) throws Exception {
        ArrayList<NEAC_SYNC_STATE> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_NEAC_SYNC_STATE_COMBOBOX(?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pLanguage));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            NEAC_SYNC_STATE tempItem = new NEAC_SYNC_STATE();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.REMARK = rs.getString("NEAC_SYNC_STATE_DESC");
                            tempList.add(tempItem);
                        }
                        response[0] = new NEAC_SYNC_STATE[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_NEAC_LOG_TOTAL">
    public int S_BO_NEAC_LOG_TOTAL(String strFrom, String strTo, String pStatusID, String pSN, String attrTpeID, String pLIST_BRANCH_ID,
        String pCERTIFICATION_PROFILE_ID, String pCERTIFICATION_PURPOSE_ID) throws Exception {
        Connection conns = null;
        int ss = 0;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_NEAC_LOG_TOTAL(?,?,?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pStatusID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pStatusID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pSN)) {
                            proc_stmt.setString(4, pSN);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(attrTpeID)) {
                            proc_stmt.setInt(5, Integer.parseInt(attrTpeID));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        if (!"".equals(pLIST_BRANCH_ID)) {
                            proc_stmt.setString(6, pLIST_BRANCH_ID);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        if (!"".equals(pCERTIFICATION_PROFILE_ID)) {
                            proc_stmt.setInt(7, Integer.parseInt(pCERTIFICATION_PROFILE_ID));
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        if (!"".equals(pCERTIFICATION_PURPOSE_ID)) {
                            proc_stmt.setInt(8, Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        } else {
                            proc_stmt.setString(8, null);
                        }
                        proc_stmt.registerOutParameter(9, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_NEAC_LOG_TOTAL", proc_stmt.toString());
                        proc_stmt.execute();
                        ss = proc_stmt.getInt(9);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return ss;
    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="S_BO_NEAC_LOG_LIST">
    public void S_BO_NEAC_LOG_LIST(String strFrom, String strTo, String pStatusID, String pSN, String attrTpeID, String pLanguage,
        String pLIST_BRANCH_ID, NEAC_LOG[][] response, int sPage, int sSum, String pCERTIFICATION_PROFILE_ID, String pCERTIFICATION_PURPOSE_ID)
        throws Exception {
        ArrayList<NEAC_LOG> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_NEAC_LOG_LIST(?,?,?,?,?,?,?,?,?,?,?) }");
                        if (!"".equals(strFrom)) {
                            proc_stmt.setString(1, strFrom);
                        } else {
                            proc_stmt.setString(1, null);
                        }
                        if (!"".equals(strTo)) {
                            proc_stmt.setString(2, strTo);
                        } else {
                            proc_stmt.setString(2, null);
                        }
                        if (!"".equals(pStatusID)) {
                            proc_stmt.setInt(3, Integer.parseInt(pStatusID));
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if (!"".equals(pSN)) {
                            proc_stmt.setString(4, pSN);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        if (!"".equals(attrTpeID)) {
                            proc_stmt.setInt(5, Integer.parseInt(attrTpeID));
                        } else {
                            proc_stmt.setString(5, null);
                        }
                        proc_stmt.setInt(6, Integer.parseInt(pLanguage));
                        if (!"".equals(pLIST_BRANCH_ID)) {
                            proc_stmt.setString(7, pLIST_BRANCH_ID);
                        } else {
                            proc_stmt.setString(7, null);
                        }
                        proc_stmt.setInt(8, sPage);
                        proc_stmt.setInt(9, sSum);
                        if (!"".equals(pCERTIFICATION_PROFILE_ID)) {
                            proc_stmt.setInt(10, Integer.parseInt(pCERTIFICATION_PROFILE_ID));
                        } else {
                            proc_stmt.setString(10, null);
                        }
                        if (!"".equals(pCERTIFICATION_PURPOSE_ID)) {
                            proc_stmt.setInt(11, Integer.parseInt(pCERTIFICATION_PURPOSE_ID));
                        } else {
                            proc_stmt.setString(11, null);
                        }
                        CommonFunction.LogDebugString(log, "S_BO_NEAC_LOG_LIST", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            NEAC_LOG tempItem = new NEAC_LOG();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.CERTIFICATION_ID = rs.getInt("CERTIFICATION_ID");
                            tempItem.NEAC_SYNC_STATE_ID = rs.getInt("NEAC_SYNC_STATE_ID");
                            tempItem.CERTIFICATION_SN = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_SN"));
                            tempItem.CERTIFICATION_ATTR_TYPE_REMARK = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_ATTR_TYPE_DESC"));
                            tempItem.NEAC_SYNC_STATE_REMARK = EscapeUtils.CheckTextNull(rs.getString("NEAC_SYNC_STATE_DESC"));
                            tempItem.CREATED_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_DT"));
                            tempItem.MODIFIED_DT = EscapeUtils.CheckTextNull(rs.getString("MODIFIED_DT"));
                            tempItem.CERTIFICATION_PROFILE_NAME = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_NAME"));
                            tempItem.CERTIFICATION_PROFILE_DESC = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_PROFILE_DESC"));
                            tempList.add(tempItem);
                        }
                        response[0] = new NEAC_LOG[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_NEAC_LOG_SCAN">
    public void S_BO_NEAC_LOG_SCAN(java.sql.Timestamp pFROM_DT, java.sql.Timestamp pTO_DT, NEAC_LOG[][] response)
        throws Exception {
        ArrayList<NEAC_LOG> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_NEAC_LOG_SCAN(?,?) }");
                        proc_stmt.setObject(1, pFROM_DT);
                        proc_stmt.setObject(2, pTO_DT);
                        CommonFunction.LogDebugString(log, "S_BO_NEAC_LOG_SCAN", proc_stmt.toString());
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            NEAC_LOG tempItem = new NEAC_LOG();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.CERTIFICATION_ID = rs.getInt("CERTIFICATION_ID");
                            tempItem.CERTIFICATION_ATTR_TYPE_ID = rs.getInt("CERTIFICATION_ATTR_TYPE_ID");
                            tempItem.REMAINING_COUNTER = rs.getInt("REMAINING_COUNTER");
                            tempList.add(tempItem);
                        }
                        response[0] = new NEAC_LOG[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_NEAC_LOG_UPDATE">
    public int S_BO_NEAC_LOG_UPDATE(int pNEAC_LOG_ID, int pNEAC_SYNC_STATE_ID, String pREQUEST_DATA, String pRESPONSE_DATA, int pREMAINING_COUNTER,
        String pUSERNAME_BY) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_NEAC_LOG_UPDATE(?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pNEAC_LOG_ID);
                        proc_stmt.setInt(2, pNEAC_SYNC_STATE_ID);
                        if(!"".equals(pREQUEST_DATA)){
                            proc_stmt.setString(3, pREQUEST_DATA);
                        } else {
                            proc_stmt.setString(3, null);
                        }
                        if(!"".equals(pRESPONSE_DATA)){
                            proc_stmt.setString(4, pRESPONSE_DATA);
                        } else {
                            proc_stmt.setString(4, null);
                        }
                        proc_stmt.setString(5, pUSERNAME_BY);
                        if(pREMAINING_COUNTER == -1) {
                            proc_stmt.setString(6, null);
                        } else {
                            proc_stmt.setInt(6, pREMAINING_COUNTER);
                        }
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_NEAC_LOG_UPDATE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(7);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_NEAC_LOG_DETAIL">
    public void S_BO_NEAC_LOG_DETAIL(String pID, String pLANGUAGE, NEAC_LOG[][] response)
        throws Exception {
        ArrayList<NEAC_LOG> tempList = new ArrayList<>();
        Connection conns = null;
        ResultSet rs = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_NEAC_LOG_DETAIL(?,?) }");
                        proc_stmt.setInt(1, Integer.parseInt(pID));
                        proc_stmt.setInt(2, Integer.parseInt(pLANGUAGE));
                        rs = proc_stmt.executeQuery();
                        while (rs.next()) {
                            NEAC_LOG tempItem = new NEAC_LOG();
                            tempItem.ID = rs.getInt("ID");
                            tempItem.CERTIFICATION_ID = rs.getInt("CERTIFICATION_ID");
                            tempItem.NEAC_SYNC_STATE_ID = rs.getInt("NEAC_SYNC_STATE_ID");
                            tempItem.CERTIFICATION_ATTR_TYPE_ID = rs.getInt("CERTIFICATION_ATTR_TYPE_ID");
                            tempItem.REMAINING_COUNTER = rs.getInt("REMAINING_COUNTER");
                            tempItem.CERTIFICATION_SN = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_SN"));
                            tempItem.CERTIFICATION_ATTR_TYPE_REMARK = EscapeUtils.CheckTextNull(rs.getString("CERTIFICATION_ATTR_TYPE_DESC"));
                            tempItem.NEAC_SYNC_STATE_REMARK = EscapeUtils.CheckTextNull(rs.getString("NEAC_SYNC_STATE_DESC"));
                            tempItem.REQUEST_DATA = EscapeUtils.CheckTextNull(rs.getString("REQUEST_DATA"));
                            tempItem.RESPONSE_DATA = EscapeUtils.CheckTextNull(rs.getString("RESPONSE_DATA"));
                            tempItem.MODIFIED_DT = EscapeUtils.CheckTextNull(rs.getString("MODIFIED_DT"));
                            tempItem.CREATED_DT = EscapeUtils.CheckTextNull(rs.getString("CREATED_DT"));
                            tempItem.MODIFIED_BY = EscapeUtils.CheckTextNull(rs.getString("MODIFIED_BY"));
                            tempItem.CREATED_BY = EscapeUtils.CheckTextNull(rs.getString("CREATED_BY"));
                            tempList.add(tempItem);
                        }
                        response[0] = new NEAC_LOG[tempList.size()];
                        response[0] = tempList.toArray(response[0]);
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_RESIGNING_CONFIRMATION_PAPER_ENABLED">
    public int S_BO_CERTIFICATION_UPDATE_RESIGNING_CONFIRMATION_PAPER_ENABLED(int pCERTIFICATION_ID, String pVALUE,
        String pUSERNAME_BY) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_UPDATE_RESIGNING_CONFIRMATION_PAPER_ENABLED(?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ID);
                        proc_stmt.setString(2, pVALUE);
                        proc_stmt.setString(3, pUSERNAME_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE_RESIGNING_CONFIRMATION_PAPER_ENABLED", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(4);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_ATTRIBUTE_UPDATE_BLACK_LIST">
    public int S_BO_CERTIFICATION_ATTRIBUTE_UPDATE_BLACK_LIST(String pEMAIL_CONTRACT, String pPHONE_CONTRACT, int pUSER_ID) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_ATTRIBUTE_UPDATE_BLACK_LIST(?,?,?) }");
                        proc_stmt.setString(1, pEMAIL_CONTRACT);
                        proc_stmt.setString(2, pPHONE_CONTRACT);
                        proc_stmt.setInt(3, pUSER_ID);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_ATTRIBUTE_UPDATE_BLACK_LIST", proc_stmt.toString());
                        proc_stmt.execute();
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CHECK_ENFORCE_UNIQUE_DN">
    public int S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH(int pOWNER_TYPE_ID, String pENTERPRISE_ID, String pPERSONAL_ID,
        String pEMAIL_CONTRACT, String pPUBLIC_KEY_HASH, int pOWNER_ID) throws Exception {
        Connection conns = null;
        int sResult = 0;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH(?,?,?,?,?,?,?) }");
                        proc_stmt.setInt(1, pOWNER_TYPE_ID);
                        proc_stmt.setString(2, pENTERPRISE_ID);
                        proc_stmt.setString(3, pPERSONAL_ID);
                        proc_stmt.setString(4, pEMAIL_CONTRACT);
                        proc_stmt.setString(5, pPUBLIC_KEY_HASH);
                        if(pOWNER_ID != 0) {
                            proc_stmt.setInt(6, pOWNER_ID);
                        } else {
                            proc_stmt.setString(6, null);
                        }
                        proc_stmt.registerOutParameter(7, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH", proc_stmt.toString());
                        proc_stmt.execute();
                        sResult = proc_stmt.getInt(7);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return sResult;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_CSR_INFO">
    public int S_BO_CERTIFICATION_UPDATE_CSR_INFO(int pCERTIFICATION_ID, String pPUBLIC_KEY_HASH,
            String pUSERNAME_BY) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_UPDATE_CSR_INFO(?,?,?,?) }");
                        proc_stmt.setInt(1, pCERTIFICATION_ID);
                        proc_stmt.setString(2, pPUBLIC_KEY_HASH);
                        proc_stmt.setString(3, pUSERNAME_BY);
                        proc_stmt.registerOutParameter(4, java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE_CSR_INFO", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt(4);
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_PROFILE_ATTR_UPDATE_OPTION_ONLY">
    public int S_BO_CERTIFICATION_PROFILE_ATTR_UPDATE_OPTION_ONLY(int pCERTIFICATION_PROFILE_ID, int pOPTION,
            String pUSERNAME_BY) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_PROFILE_ATTR_UPDATE_OPTION_ONLY(?,?,?,?) }");
                        proc_stmt.setInt("pCERTIFICATION_PROFILE_ID", pCERTIFICATION_PROFILE_ID);
                        proc_stmt.setInt("pOPTION", pOPTION);
                        proc_stmt.setString("pUSERNAME_BY", pUSERNAME_BY);
                        proc_stmt.registerOutParameter("pRESULT", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_PROFILE_ATTR_UPDATE_OPTION_ONLY", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt("pRESULT");
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CHECK_ARLAM_FORBIDEN_REVOKE">
    public int S_BO_CHECK_ARLAM_FORBIDEN_REVOKE(int pCERTIFICATION_ID) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CHECK_ARLAM_FORBIDEN_REVOKE(?,?) }");
                        proc_stmt.setInt("pCERTIFICATION_ID", pCERTIFICATION_ID);
                        proc_stmt.registerOutParameter("pRESULT", java.sql.Types.INTEGER);
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt("pRESULT");
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CHECK_LIMIT_REVOKE">
    public int S_BO_CHECK_LIMIT_REVOKE(int pBRANCH_ID, int pCERTIFICATION_ID, String[] pNOTIFY) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CHECK_LIMIT_REVOKE(?,?,?,?) }");
                        proc_stmt.setInt("pBRANCH_ID", pBRANCH_ID);
                        proc_stmt.setInt("pCERTIFICATION_ID", pCERTIFICATION_ID);
                        proc_stmt.registerOutParameter("pRESULT", java.sql.Types.INTEGER);
                        proc_stmt.registerOutParameter("pNOTIFY", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_CHECK_LIMIT_REVOKE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt("pRESULT");
                        pNOTIFY[0] = proc_stmt.getString("pNOTIFY");
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_BRANCH_UPDATE_LIMIT_REVOKE">
    public int S_BO_BRANCH_UPDATE_LIMIT_REVOKE(int pBRANCH_ID, String pVALUE, String pUSERNAME_BY) throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_BRANCH_UPDATE_LIMIT_REVOKE(?,?,?,?) }");
                        proc_stmt.setInt("pBRANCH_ID", pBRANCH_ID);
                        proc_stmt.setString("pVALUE", pVALUE);
                        proc_stmt.setString("pUSERNAME_BY", pUSERNAME_BY);
                        proc_stmt.registerOutParameter("pRESULT", java.sql.Types.INTEGER);
                        CommonFunction.LogDebugString(log, "S_BO_BRANCH_UPDATE_LIMIT_REVOKE", proc_stmt.toString());
                        proc_stmt.execute();
                        convrtr = proc_stmt.getInt("pRESULT");
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="S_BO_CERTIFICATION_UPDATE_NO_CANCEL_COMMITMENT">
    public int S_BO_CERTIFICATION_UPDATE_NO_CANCEL_COMMITMENT(int pCERTIFICATION_ID, String pNO_CANCEL_COMMITMENT, String pUSER_BY)
        throws Exception {
        int convrtr = 0;
        Connection conns = null;
        try {
            if (null != Choise_TypeDB.trim()) {
                switch (Choise_TypeDB.trim()) {
                    case "1":
                        conns = OpenDatabase();
                        proc_stmt = conns.prepareCall("{ call S_BO_CERTIFICATION_UPDATE_NO_CANCEL_COMMITMENT(?,?,?) }");
                        proc_stmt.setInt("pCERTIFICATION_ID", pCERTIFICATION_ID);
                        proc_stmt.setString("pNO_CANCEL_COMMITMENT", pNO_CANCEL_COMMITMENT);
                        proc_stmt.setInt("pUSER_BY", Integer.parseInt(pUSER_BY));
                        CommonFunction.LogDebugString(log, "S_BO_CERTIFICATION_UPDATE_NO_CANCEL_COMMITMENT", proc_stmt.toString());
                        proc_stmt.execute();
                        break;
                    case "2":
                        break;
                    default:
                        break;
                }
            }
        } finally {
            if (proc_stmt != null) {
                proc_stmt.close();
            }
            Connection[] temp_connection = new Connection[]{conns};
            CloseDatabase(temp_connection);
        }
        return convrtr;
    }
    //</editor-fold>
    
}
