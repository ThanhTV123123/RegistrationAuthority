/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vn.ra.process;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.xml.bind.DatatypeConverter;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.io.IOUtils;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.log4j.Logger;
import vn.mobileid.fms.client.JCRConfig;
import vn.mobileid.fms.client.JCRFile;
import vn.ra.object.ATTRIBUTE_DATA;
import vn.ra.object.ATTRIBUTE_VALUES;
import vn.ra.object.BACKOFFICE_USER;
import vn.ra.object.BRANCH;
import vn.ra.object.BranchInfo;
import vn.ra.object.CERTIFICATION;
import vn.ra.object.CERTIFICATION_COMMENT;
import vn.ra.object.CERTIFICATION_DATA_ATTR;
import vn.ra.object.CERTIFICATION_OWNER_COMMENT;
import vn.ra.object.CERTIFICATION_OWNER_DATA_ATTR;
import vn.ra.object.CERTIFICATION_POLICY_DATA;
import vn.ra.object.CERTIFICATION_PROFILE;
import vn.ra.object.CERTIFICATION_PROPERTIES_JSON;
import vn.ra.object.CERTIFICATION_TYPE_COMPONENT;
import vn.ra.object.CITY_PROVINCE;
import vn.ra.object.CertificateAuthorityInfo;
import vn.ra.object.CertificateBriefInfo;
import vn.ra.object.CertificateComponentInfo;
import vn.ra.object.CertificateExpireSoonInfo;
import vn.ra.object.CertificateInfo;
import vn.ra.object.CertificateNEACReportInfo;
import vn.ra.object.CertificateOwnerInfo;
import vn.ra.object.CertificateOwnerStateInfo;
import vn.ra.object.CertificateOwnerTypeInfo;
import vn.ra.object.CertificateProfileInfo;
import vn.ra.object.CertificatePurposeInfo;
import vn.ra.object.CertificateReportInfo;
import vn.ra.object.CertificateRevocationReasonInfo;
import vn.ra.object.CertificateStateInfo;
import vn.ra.object.CityProvinceInfo;
import vn.ra.object.FILE_MANAGER;
import vn.ra.object.FILE_PROFILE_JSON;
import vn.ra.object.FileManagerInfo;
import vn.ra.object.FileTypeInfo;
import vn.ra.object.FormFactorSNInfo;
import vn.ra.object.FormFactorSNError;
import vn.ra.object.FormFactorTokenInfo;
import vn.ra.object.FormFactorUnblockInfo;
import vn.ra.object.FormfactorInfo;
import vn.ra.object.GENERAL_POLICY;
import vn.ra.object.JSON_USER_BRANCH_DEFAULT;
import vn.ra.object.MENULINK_TOKEN;
import vn.ra.object.MenuLinkAPI;
import vn.ra.object.PUSH_TOKEN;
import vn.ra.object.PeriodicReportInfo;
import vn.ra.object.ProfileContactInfoJson;
import vn.ra.object.PushNotificationAPI;
import vn.ra.object.QueueStateInfo;
import vn.ra.object.QueueTypeInfo;
import vn.ra.object.RESPONSE_CODE;
import vn.ra.object.RESPONSE_LOG;
import vn.ra.object.ReconciliationReportInfo;
import vn.ra.object.RequestStateInfo;
import vn.ra.object.SYSTEM_LOG;
import vn.ra.object.ServiceRequestExpand;
import vn.ra.object.TOKEN;
import vn.ra.object.TOKEN_CHANGE_LOG;
import vn.ra.object.UserInfo;
import vn.ra.object.UserRoleInfo;
import vn.ra.rssp.restful.RSSPRestCommon;
import vn.ra.thread.ThreadCallbackApproved;
import vn.ra.utility.Config;
import vn.ra.utility.Definitions;
import vn.ra.utility.EscapeUtils;
import vn.ra.utility.PropertiesContent;
import vn.ra.ws.RAServiceReq;
import vn.ra.ws.RAServiceResp;

/**
 *
 * @author USER
 */
public class RACoreWSProcess {

    //<editor-fold defaultstate="collapsed" desc="### getBranchProcess">
    public void getBranchProcess(String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES, String sIP_Request,
            RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_BRANCH;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            BranchInfo[][] branchInfo = new BranchInfo[1][];
            db.S_BO_API_BRANCH_LIST(EscapeUtils.CheckTextNull(raServiceReq.branchCode), raServiceReq.language, branchInfo);
            if (branchInfo[0].length > 0) {
                raServiceResp.branchInfo = branchInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getUserRoleProcess">
    public void getUserRoleProcess(String sCA_ENABLED, String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
            String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_USER_ROLE;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            UserRoleInfo[][] userRoleInfo = new UserRoleInfo[1][];
            db.S_BO_API_ROLE_LIST(sCA_ENABLED, raServiceReq.language, userRoleInfo);
            if (userRoleInfo[0].length > 0) {
                raServiceResp.userRoleInfo = userRoleInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getUserProcess">
    public void getUserProcess(String pBRANCH_NAME, String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
            String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_USER;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            UserInfo[][] userInfo = new UserInfo[1][];
            db.S_BO_API_USER_LIST(EscapeUtils.CheckTextNull(raServiceReq.userName), pBRANCH_NAME,
                EscapeUtils.CheckTextNull(raServiceReq.userRoleCode), raServiceReq.language, userInfo);
            if (userInfo[0].length > 0) {
                raServiceResp.userInfo = userInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCityProvinceProcess">
    public void getCityProvinceProcess(String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CITY_PROVINCE;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            CityProvinceInfo[][] cityInfo = new CityProvinceInfo[1][];
            db.S_BO_API_PROVINCE_LIST(EscapeUtils.CheckTextNull(raServiceReq.cityProvinceCode), raServiceReq.language, cityInfo);
            if (cityInfo[0].length > 0) {
                raServiceResp.cityProvinceInfo = cityInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
 
    //<editor-fold defaultstate="collapsed" desc="### getCertificateAuthorityProcess">
    public void getCertificateAuthorityProcess(String sCERT_PROFILE_PROPERTIES, String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTIFICATION_AUTHORITY;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList = new ArrayList<>();
            //<editor-fold defaultstate="collapsed" desc="### GET PROFILE LIST ACCESS">
            CERTIFICATION_POLICY_DATA[][] resPolicyData_Old = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getProfileCertList(sCERT_PROFILE_PROPERTIES, resPolicyData_Old);
            for(CERTIFICATION_POLICY_DATA resPolicyCertData_Old1 : resPolicyData_Old[0])
            {
                if(resPolicyCertData_Old1.attributeType.equals(Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST))
                {
                    CERTIFICATION_PROFILE[][] resProfileDB = new CERTIFICATION_PROFILE[1][];
                    db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(resPolicyCertData_Old1.name), resProfileDB);
                    if(resProfileDB[0].length > 0)
                    {
                        CERTIFICATION_POLICY_DATA itemProfileAccess = new CERTIFICATION_POLICY_DATA();
                        itemProfileAccess.name = resProfileDB[0][0].NAME;
                        itemProfileAccess.certificateAuthority = EscapeUtils.CheckTextNull(resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME);
                        itemProfileAccess.certificatePurpose = EscapeUtils.CheckTextNull(resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME);
                        itemProfileAccess.remark = resPolicyCertData_Old1.remark;
                        itemProfileAccess.remarkEn = resPolicyCertData_Old1.remarkEn;
                        itemProfileAccess.attributeType = Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST;
                        tempProfileList.add(itemProfileAccess);
                    }
                }
            }
            //</editor-fold>

            CertificateAuthorityInfo[][] caInfo = new CertificateAuthorityInfo[1][];
            db.S_BO_API_CERTIFICATION_AUTHORITY_LIST(EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode),
                    raServiceReq.language, caInfo, sCERT_PROFILE_PROPERTIES, tempProfileList);
            if (caInfo[0].length > 0) {
                raServiceResp.certificateAuthorityInfo = caInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCertificatePurposeProcess">
    public void getCertificatePurposeProcess(String sCERT_PROFILE_PROPERTIES, String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTIFICATION_PURPOSE;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList = new ArrayList<>();
            //<editor-fold defaultstate="collapsed" desc="### GET PROFILE LIST ACCESS">
            CERTIFICATION_POLICY_DATA[][] resPolicyData_Old = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getProfileCertList(sCERT_PROFILE_PROPERTIES, resPolicyData_Old);
            for(CERTIFICATION_POLICY_DATA resPolicyCertData_Old1 : resPolicyData_Old[0])
            {
                if(resPolicyCertData_Old1.attributeType.equals(Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST))
                {
                    CERTIFICATION_PROFILE[][] resProfileDB = new CERTIFICATION_PROFILE[1][];
                    db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(resPolicyCertData_Old1.name), resProfileDB);
                    if(resProfileDB[0].length > 0)
                    {
                        CERTIFICATION_POLICY_DATA itemProfileAccess = new CERTIFICATION_POLICY_DATA();
                        itemProfileAccess.name = resProfileDB[0][0].NAME;
                        itemProfileAccess.certificateAuthority = EscapeUtils.CheckTextNull(resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME);
                        itemProfileAccess.certificatePurpose = EscapeUtils.CheckTextNull(resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME);
                        itemProfileAccess.remark = resPolicyCertData_Old1.remark;
                        itemProfileAccess.remarkEn = resPolicyCertData_Old1.remarkEn;
                        itemProfileAccess.attributeType = Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST;
                        tempProfileList.add(itemProfileAccess);
                    }
                }
            }
            //</editor-fold>

            CertificatePurposeInfo[][] certPurposeInfo = new CertificatePurposeInfo[1][];
            db.S_BO_API_CERTIFICATION_PURPOSE_LIST(EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode),
                raServiceReq.language, certPurposeInfo, sCERT_PROFILE_PROPERTIES, tempProfileList);
            if (certPurposeInfo[0].length > 0) {
                raServiceResp.certificatePurposeInfo = certPurposeInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCertificateProfileProcess">
    public void getCertificateProfileProcess(String sCERT_PROFILE_PROPERTIES, String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTIFICATION_PROFILE;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList = new ArrayList<>();
            //<editor-fold defaultstate="collapsed" desc="### GET PROFILE LIST ACCESS">
            CERTIFICATION_POLICY_DATA[][] resPolicyData_Old = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getProfileCertList(sCERT_PROFILE_PROPERTIES, resPolicyData_Old);
            for(CERTIFICATION_POLICY_DATA resPolicyCertData_Old1 : resPolicyData_Old[0])
            {
                if(resPolicyCertData_Old1.attributeType.equals(Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST))
                {
                    CERTIFICATION_PROFILE[][] resProfileDB = new CERTIFICATION_PROFILE[1][];
                    db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(resPolicyCertData_Old1.name), resProfileDB);
                    if(resProfileDB[0].length > 0)
                    {
                        CERTIFICATION_POLICY_DATA itemProfileAccess = new CERTIFICATION_POLICY_DATA();
                        itemProfileAccess.name = resProfileDB[0][0].NAME;
                        itemProfileAccess.certificateAuthority = EscapeUtils.CheckTextNull(resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME);
                        itemProfileAccess.certificatePurpose = EscapeUtils.CheckTextNull(resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME);
                        itemProfileAccess.remark = resPolicyCertData_Old1.remark;
                        itemProfileAccess.remarkEn = resPolicyCertData_Old1.remarkEn;
                        itemProfileAccess.attributeType = Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST;
                        tempProfileList.add(itemProfileAccess);
                    }
                }
            }
            //</editor-fold>

            CertificateProfileInfo[][] certProfileInfo = new CertificateProfileInfo[1][];
            int intRenewProfile = raServiceReq.renewProfileEnabled ? 1 : 0;
            db.S_BO_API_CERTIFICATION_PROFILE_LIST(EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode),
                    EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode), EscapeUtils.CheckTextNull(raServiceReq.formFactorCode),
                    intRenewProfile, raServiceReq.language, certProfileInfo, sCERT_PROFILE_PROPERTIES, tempProfileList);
            if (certProfileInfo[0].length > 0) {
                raServiceResp.certificateProfileInfo = certProfileInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCertificateComponentProcess">
    public void getCertificateComponentProcess(String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTIFICATION_COMPONENT;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            CertificateProfileInfo[][] certProfileInfo = new CertificateProfileInfo[1][];
            db.S_BO_API_CERTIFICATION_PROFILE_GET_PROPERTIES(EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode),
                    EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode),
                    EscapeUtils.CheckTextNull(raServiceReq.formFactorCode), certProfileInfo);
            if (certProfileInfo[0].length > 0) {
                raServiceResp.durationFree = certProfileInfo[0][0].durationFree;
                raServiceResp.amount = certProfileInfo[0][0].amount;
                String sProperties = EscapeUtils.CheckTextNull(certProfileInfo[0][0].certificateProfileProperties);
                if (!"".equals(sProperties)) {
                    CertificateComponentInfo[][] response = new CertificateComponentInfo[1][];
                    CommonFunction.getJsonAPIComponentForCert(sProperties, response, raServiceReq.language);
                    raServiceResp.certificateComponentInfo = response[0];
                }
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCertificateComponent2Process">
    public void getCertificateComponent2Process(String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTIFICATION_COMPONENT2;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            CertificateProfileInfo[][] certProfileInfo = new CertificateProfileInfo[1][];
            db.S_BO_API_CERTIFICATION_PROFILE_GET_PROPERTIES(EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode),
                    EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode),
                    EscapeUtils.CheckTextNull(raServiceReq.formFactorCode), certProfileInfo);
            if (certProfileInfo[0].length > 0) {
                raServiceResp.durationFree = certProfileInfo[0][0].durationFree;
                raServiceResp.amount = certProfileInfo[0][0].amount;
                String sProperties = EscapeUtils.CheckTextNull(certProfileInfo[0][0].certificateProfileProperties);
                if (!"".equals(sProperties)) {
                    CertificateComponentInfo[][] response = new CertificateComponentInfo[1][];
                    CommonFunction.getJsonAPIComponent2ForCert(sProperties, response, raServiceReq.language);
                    raServiceResp.certificateComponentInfo = response[0];
                }
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCertificateFileListProcess">
    public void getCertificateFileListProcess(String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTIFICATION_FILE_LIST;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            CertificatePurposeInfo[][] certPurposeInfo = new CertificatePurposeInfo[1][];
            db.S_BO_API_CERTIFICATION_PURPOSE_GET_FILE_PROPERTIES(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode), certPurposeInfo);
            if (certPurposeInfo[0].length > 0) {
                String sProperties = EscapeUtils.CheckTextNull(certPurposeInfo[0][0].certificatePurposeFileProperties);
                if (!"".equals(sProperties)) {
                    ObjectMapper objectMapper = new ObjectMapper();
                    FILE_PROFILE_JSON itemParsePush = objectMapper.readValue(sProperties, FILE_PROFILE_JSON.class);
                    FileManagerInfo[][] response = new FileManagerInfo[1][];
                    ArrayList<FileManagerInfo> tempList = new ArrayList<>();
                    int j = 1;
                    for (FILE_PROFILE_JSON.Attribute attribute : itemParsePush.getAttributes()) {
                        if (attribute.getEnabled() == true) {
                            FileManagerInfo mh = new FileManagerInfo();
                            mh.id = j++;
                            mh.fileTypeCode = EscapeUtils.CheckTextNull(attribute.getName());
                            if (raServiceReq.language == Definitions.CONFIG_LANGUAGE_ENGLISH) {
                                mh.fileTypeName = EscapeUtils.CheckTextNull(attribute.getRemarkEn());
                            } else {
                                mh.fileTypeName = EscapeUtils.CheckTextNull(attribute.getRemark());
                            }
                            mh.requireEnabled = attribute.getIsRequire();
                            mh.enabled = attribute.getEnabled();
                            tempList.add(mh);
                        }
                    }
                    response[0] = new FileManagerInfo[tempList.size()];
                    response[0] = tempList.toArray(response[0]);
                    raServiceResp.fileManagerInfo = response[0];
                }
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getFormFactorProcess">
    public void getFormFactorProcess(String sCERT_POLICY_PROPERTIES, String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_FORMFACTOR;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            FormfactorInfo[][] certPurposeInfo = new FormfactorInfo[1][];
            db.S_BO_API_PKI_FORMFACTOR_LIST(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode),
                raServiceReq.language, certPurposeInfo, sCERT_POLICY_PROPERTIES);
            if (certPurposeInfo[0].length > 0) {
                raServiceResp.formfactorInfo = certPurposeInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCertificateStateProcess">
    public void getCertificateStateProcess(String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTIFICATION_STATE;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            CertificateStateInfo[][] stateInfo = new CertificateStateInfo[1][];
            db.S_BO_API_CERTIFICATION_STATE_LIST(EscapeUtils.CheckTextNull(raServiceReq.certificateStateCode),
                    raServiceReq.language, stateInfo);
            if (stateInfo[0].length > 0) {
                raServiceResp.certificateStateInfo = stateInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getRequestStateProcess">
    public void getRequestStateProcess(String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDbPhaseTwo dbTwo = new ConnectDbPhaseTwo();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_REQUEST_STATE;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            RequestStateInfo[][] stateInfo = new RequestStateInfo[1][];
            dbTwo.S_BO_API_CERTIFICATION_ATTR_STATE_LIST(EscapeUtils.CheckTextNull(raServiceReq.requestStateCode),
                    raServiceReq.language, stateInfo);
            if (stateInfo[0].length > 0) {
                raServiceResp.requestStateInfo = stateInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCertificateRevocationReasonProcess">
    public void getCertificateRevocationReasonProcess(String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTIFICATION_REVOCATION_REASON;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            String pREASON_NAME_FIND = "";
            CertificateRevocationReasonInfo[][] reasonInfo = new CertificateRevocationReasonInfo[1][];
            db.S_BO_API_CERTIFICATION_REVOCATION_REASON_LIST(pREASON_NAME_FIND, raServiceReq.language, reasonInfo);
            if (reasonInfo[0].length > 0) {
                raServiceResp.certificateRevocationReasonInfo = reasonInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCertificateInfoProcess">
    public void getCertificateInfoProcess(String pBeneficiaryUserDefault, int[] System_Log_ID, String[] System_Log_BillCode,
        String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq,
        RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTICATION_INFO;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        ObjectMapper objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "",
            EscapeUtils.CheckTextNull(raReqTemp.certificateSN), sFunctionWS, objectMapper.writeValueAsString(raReqTemp),
            pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            CertificateInfo[][] certInfo = new CertificateInfo[1][];
            int[] pRESPONSE_CODE = new int[1];
            if(raServiceReq.activationCodeEnabled == true) {
                String sActivation = EscapeUtils.CheckTextNull(raServiceReq.activationCode);
                if(!"".equals(sActivation)) {
                    int[] pCERTIFICATION_ID = new int[1];
                    int[] pCERTIFICATION_ATTR_ID = new int[1];
                    if(!"".equals(sActivation)) {
                        int checkAC = db.S_BO_API_TOKENSIM_ACTIVATION(sActivation, pBeneficiaryUserDefault, pCERTIFICATION_ID, pCERTIFICATION_ATTR_ID);
                        switch (checkAC) {
                            case 0:
                                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "","", "", pCERTIFICATION_ID[0],
                                    "","", raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                break;
                            case 5:
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACTIVATION_CODE_EXPIRE;
                                break;
                            default:
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACTIVATION_CODE_INVALID;
                                break;
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACTIVATION_CODE_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
                }
            } else {
                if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.taxCode)) || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.pid))
                    || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.socialInsuranceCode)) || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.unitCode))
                    || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.budgetCode)) || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.passport))
                    || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.citizenId)) || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.decision))
                    || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.personalTaxCode)) || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.personalSocialInsuranceCode))
                    || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN)) || raServiceReq.certificateID != 0) {
                    String[] sUIDResult = new String[2];
                    CommonReferServlet.collectFieldToUIDAPI(EscapeUtils.CheckTextNull(raServiceReq.taxCode), EscapeUtils.CheckTextNull(raServiceReq.budgetCode),
                        EscapeUtils.CheckTextNull(raServiceReq.decision), EscapeUtils.CheckTextNull(raServiceReq.socialInsuranceCode),
                        EscapeUtils.CheckTextNull(raServiceReq.unitCode), EscapeUtils.CheckTextNull(raServiceReq.pid),
                        EscapeUtils.CheckTextNull(raServiceReq.passport), EscapeUtils.CheckTextNull(raServiceReq.citizenId),
                        EscapeUtils.CheckTextNull(raServiceReq.personalTaxCode), EscapeUtils.CheckTextNull(raServiceReq.personalSocialInsuranceCode), sUIDResult);
                    String sEnterpriseCert = sUIDResult[0];
                    String sPersonalCert = sUIDResult[1];
                    db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "",
                        EscapeUtils.CheckTextNull(raServiceReq.certificateSN), raServiceReq.certificateID,
                        EscapeUtils.CheckTextNull(raServiceReq.certificateStateCode),
                        EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), raServiceReq.language, pRESPONSE_CODE,
                        certInfo, "", "", sEnterpriseCert, sPersonalCert);
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
                }
            }
            
            if (certInfo[0] != null && certInfo[0].length > 0) {
                for(CertificateInfo certInfo1 : certInfo[0])
                {
                    BACKOFFICE_USER[][] rsUser = new BACKOFFICE_USER[1][];
                    db.S_BO_USER_DETAIL(String.valueOf(certInfo1.createdId), String.valueOf(raServiceReq.language), rsUser);
                    if (rsUser[0].length > 0) {
                        certInfo1.beneficiaryUser = rsUser[0][0].USERNAME;
                    }
                    certInfo1.certificateDN = certInfo1.certificateDN.replace(Definitions.CONFIG_COMPONENT_DN_TAG_UID, Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE);
                    //certInfo1.certificateDN = certInfo1.certificateDN.replace(Definitions.CONFIG_COMPONENT_DN_SUBSTRING_CN_VALUE, ",");
                    if(certInfo1.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_NEW)
                    {
                        if(!"".equals(certInfo1.value))
                        {
                            objectMapper = new ObjectMapper();
                            ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(certInfo1.value, ATTRIBUTE_VALUES.class);
                            String sReasonDeclineValue = EscapeUtils.CheckTextNull(valueATTR_Frist.getCerttificateDeclineReason());
                            if(!"".equals(sReasonDeclineValue))
                            {
                                certInfo1.declineReason = sReasonDeclineValue;
                            }
                            String sReasonRevokeValue = EscapeUtils.CheckTextNull(valueATTR_Frist.getCerttificateRevokeReason());
                            if(!"".equals(sReasonRevokeValue))
                            {
                                certInfo1.certificateRevocationReason = sReasonRevokeValue;
                            }
                            String sApproveUserValue = EscapeUtils.CheckTextNull(valueATTR_Frist.getApproveCAUser());
                            if(!"".equals(sApproveUserValue))
                            {
                                certInfo1.approveUser = sApproveUserValue;
                            }
                        }
                    } else {
                        if(!"".equals(certInfo1.comment))
                        {
                            CERTIFICATION_COMMENT valueATTR_Frist = objectMapper.readValue(certInfo1.comment, CERTIFICATION_COMMENT.class);
                            certInfo1.declineReason = EscapeUtils.CheckTextNull(valueATTR_Frist.certificateDeclineReason);
                            //certInfo1.certificateRevocationReason = EscapeUtils.CheckTextNull(valueATTR_Frist.certificateRevokeReason);
                        }
                        if(!"".equals(certInfo1.value))
                        {
                            objectMapper = new ObjectMapper();
                            ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(certInfo1.value, ATTRIBUTE_VALUES.class);
                            String sApproveUserValue = EscapeUtils.CheckTextNull(valueATTR_Frist.getApproveCAUser());
                            if(!"".equals(sApproveUserValue))
                            {
                                certInfo1.approveUser = sApproveUserValue;
                            }
                        }
                    }
                    /*if(!"".equals(certInfo1.subjectAlternativeName))
                    {
                        objectMapper = new ObjectMapper();
                        String strDNSArray = "";
                        CERTIFICATION_PROPERTIES_JSON itemParsePush = objectMapper.readValue(certInfo1.subjectAlternativeName, CERTIFICATION_PROPERTIES_JSON.class);
                        if(itemParsePush.getAttributes().size() > 0) {
                            for (int i = 0; i < itemParsePush.getAttributes().size(); i++) {
                                strDNSArray += EscapeUtils.CheckTextNull(itemParsePush.getAttributes().get(i).getKey()) + "=" + EscapeUtils.CheckTextNull(itemParsePush.getAttributes().get(i).getValue()).replace(",", "\\,") + ", ";
                            }
                            strDNSArray = CommonFunction.subLastCharater(strDNSArray);
                        }
                        certInfo1.subjectAlternativeName = strDNSArray;
                    }*/
                    if(certInfo1.certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT))
                    {
                        certInfo1.deviceUUID = certInfo1.deviceUUID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBCLIENT, "");
                    }
                    if(certInfo1.certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER))
                    {
                        certInfo1.deviceUUID = certInfo1.deviceUUID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBSERVER, "");
                    }
                    if(certInfo1.certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV))
                    {
                        certInfo1.deviceUUID = certInfo1.deviceUUID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CODE_SIGNING, "");
                    }
                    if(certInfo1.certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH))
                    {
                        certInfo1.deviceUUID = certInfo1.deviceUUID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_AUTH, "");
                    }
                    if(certInfo1.certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                    {
                        certInfo1.deviceUUID = certInfo1.deviceUUID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_SIGN, "");
                    }
                }
                raServiceResp.certificateInfo = certInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN))
                    && !"".equals(EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML)))
                {
                    if(certInfo[0].length > 0) {
                        ServiceRequestExpand jsonReqExpand = objectMapper.readValue(EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML), ServiceRequestExpand.class);
                        String sRsspAgreementUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspAgreementUUID);
                        String sRsspRelyingParty = EscapeUtils.CheckTextNull(jsonReqExpand.rsspRelyingParty);
                        String sRsspCertificateUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspCertificateUUID);
                        String sRsspConnectWSMode = EscapeUtils.CheckTextNull(jsonReqExpand.rsspConnectWSMode);
                        for(CertificateInfo certInfoUpdate : certInfo[0]) {
                            if(certInfoUpdate.formFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)
                                && certInfoUpdate.certificateStateCode.equals(Definitions.CONFIG_CERTIFICATION_STATE_CODE_OPERATED)
                                && !"".equals(certInfoUpdate.value)) {
                                ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(certInfoUpdate.value, ATTRIBUTE_VALUES.class);
                                if(!"".equals(sRsspAgreementUUID)) {
                                    valueATTR_Frist.setRsspAgreementUUID(sRsspAgreementUUID);
                                }
                                if(!"".equals(sRsspRelyingParty)) {
                                    valueATTR_Frist.setRsspRelyingParty(sRsspRelyingParty);
                                }
                                if(!"".equals(sRsspCertificateUUID)) {
                                    valueATTR_Frist.setRsspCertificateUUID(sRsspCertificateUUID);
                                }
                                if(!"".equals(sRsspConnectWSMode)) {
                                    valueATTR_Frist.setRsspConnectWSMode(sRsspConnectWSMode);
                                }
                                db.S_BO_API_SIM_CERTIFICATION_ATTR_UPDATE(certInfoUpdate.requestId, CommonFunction.GenJSONTokenATTR(valueATTR_Frist), pBeneficiaryUserDefault);
                            }
                        }
                    }
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
            
//            if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.taxCode)) || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.pid))
//                || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.budgetCode)) || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.passport))
//                || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.citizenId)) || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.decision))
//                || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN)) || raServiceReq.certificateID != 0) {
//                
//                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
//                    db.S_BO_API_CERTIFICATION_GET_INFO(EscapeUtils.CheckTextNull(raServiceReq.taxCode), EscapeUtils.CheckTextNull(raServiceReq.pid),
//                        EscapeUtils.CheckTextNull(raServiceReq.budgetCode), EscapeUtils.CheckTextNull(raServiceReq.passport),
//                        EscapeUtils.CheckTextNull(raServiceReq.certificateSN), raServiceReq.certificateID,
//                        EscapeUtils.CheckTextNull(raServiceReq.certificateStateCode),
//                        EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), raServiceReq.language, pRESPONSE_CODE,
//                        certInfo, EscapeUtils.CheckTextNull(raServiceReq.citizenId), EscapeUtils.CheckTextNull(raServiceReq.decision));
//                    
//                }
//            } else {
//                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
//            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getFileTypeProcess">
    public void getFileTypeProcess(String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_FILE_TYPE;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            FileTypeInfo[][] fileTypeInfo = new FileTypeInfo[1][];
            db.S_BO_API_FILE_PROFILE_LIST(raServiceReq.language, fileTypeInfo);
            if (fileTypeInfo[0].length > 0) {
                raServiceResp.fileTypeInfo = fileTypeInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCertificateAttachmentProcess">
    public void getCertificateAttachmentProcess(String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTIFICATION_ATTACHMENT;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN))) {
                CertificateInfo[][] certInfo = new CertificateInfo[1][];
                int[] pRESPONSE_CODE = new int[1];
                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.certificateSN),
                        0, "", "", raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                if (certInfo[0].length > 0) {
                    int pCERTIFICATION_ID = certInfo[0][0].certificateID;
                    if (pCERTIFICATION_ID > 0) {
                        FILE_MANAGER[][] fileManager = new FILE_MANAGER[1][];
                        db.S_BO_API_FILE_MANAGER_BY_CERTIFICATION_ID(pCERTIFICATION_ID, EscapeUtils.CheckTextNull(raServiceReq.fileTypeCode),
                            raServiceReq.language, fileManager);
                        if (fileManager[0].length > 0) {
                            FileManagerInfo[][] response = new FileManagerInfo[1][];
                            ArrayList<FileManagerInfo> tempList = new ArrayList<>();
                            for (FILE_MANAGER fileTemp : fileManager[0]) {
                                String sJRBConfig = EscapeUtils.CheckTextNull(fileTemp.DMS_PROPERTIES);
                                String sUUID = EscapeUtils.CheckTextNull(fileTemp.UUID);
                                InputStream inStream = CommonFunction.getStreamFromServerFile(sUUID, sJRBConfig);
                                FileManagerInfo mh = new FileManagerInfo();
                                mh.fileTypeCode = EscapeUtils.CheckTextNull(fileTemp.FILE_PROFILE_NAME);
                                mh.fileTypeName = EscapeUtils.CheckTextNull(fileTemp.FILE_PROFILE_DESC);
                                mh.fileName = EscapeUtils.CheckTextNull(fileTemp.FILE_NAME);
                                mh.fileByte = IOUtils.toByteArray(inStream);
                                tempList.add(mh);
                            }
                            response[0] = new FileManagerInfo[tempList.size()];
                            response[0] = tempList.toArray(response[0]);
                            raServiceResp.fileManagerInfo = response[0];
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### registerCertificateProcess">
    public void registerCertificateProcess(String sCERT_PROFILE_PROPERTIES, String sCERT_POLICY_PROPERTIES,
        String pApproveCAUser, boolean autoApproveCAServer, int[] System_Log_ID, String[] System_Log_BillCode,
        String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, String sISSUE_P12_ENABLED, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
    throws Exception {
        String sTOKEN_SN = "";
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_REGISTRATION_CERTIFICATION;
        raServiceReq.certificateFormatType = EscapeUtils.CheckTextNull(raServiceReq.certificateFormatType);
        ObjectMapper objectMapper = new ObjectMapper();
        RAServiceReq raReqTemp = new RAServiceReq();
        raReqTemp.certificateComponentInfo = raServiceReq.certificateComponentInfo;
        raReqTemp.beneficiaryUser = raServiceReq.beneficiaryUser;
        raReqTemp.emailContact = raServiceReq.emailContact;
        raReqTemp.phoneContact = raServiceReq.phoneContact;
        raReqTemp.formFactorCode = raServiceReq.formFactorCode;
        raReqTemp.activationCodeEnabled = raServiceReq.activationCodeEnabled;
        raReqTemp.beneficiaryBranch = raServiceReq.beneficiaryBranch;
        raReqTemp.promotionDuration = raServiceReq.promotionDuration;
        raReqTemp.certificateOwnerID = raServiceReq.certificateOwnerID;
        raReqTemp.certificateProfileCode = raServiceReq.certificateProfileCode;
        raReqTemp.backupKeyEnabled = raServiceReq.backupKeyEnabled;
        raReqTemp.certificateNotificationEnabled = raServiceReq.certificateNotificationEnabled;
        raReqTemp.p12EmailEnabled = raServiceReq.p12EmailEnabled;
        raReqTemp.approveEnabled = raServiceReq.approveEnabled;
        raReqTemp.language = raServiceReq.language;
        raReqTemp.csr = raServiceReq.csr;
        raReqTemp.effectiveTime = raServiceReq.effectiveTime;
        raReqTemp.userName = raServiceReq.userName;
        raReqTemp.expandFutureParamXML = raServiceReq.expandFutureParamXML;
        raReqTemp.certificateFormatType = raServiceReq.certificateFormatType;
        raReqTemp.credentialData = raServiceReq.credentialData;
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, sTOKEN_SN, "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), raServiceReq.beneficiaryUser,
            System_Log_ID, sIP_Request, System_Log_BillCode);
        
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            String pCERTIFICATION_ATTR_TYPE_CODE = String.valueOf(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION);
            boolean autoApproveCAClient = raServiceReq.approveEnabled;
            String strDNSName = "";
            GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
            db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
            ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList;
            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH and USER">
            if (!"".equals(raServiceReq.beneficiaryBranch)) {
                UserInfo[][] rsUserBranch;
                int[] pResonseUser;
                String sCreateAgencyDefault = "0";
                String sCreateUserDefault = "0";
                String sValueUserBranch = "";
                String sUserPassDefault = "";
                String sBranchPolicyProper = "";
                if (rsPolicy[0].length > 0) {
                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_API_AUTOCREATE_BENEFICIARY_BRANCH)) {
                            sCreateAgencyDefault = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_API_AUTOCREATE_BENEFICIARY_USER)) {
                            sCreateUserDefault = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_API_DEFAULT_INFO_BENEFICIARY_USER)) {
                            sValueUserBranch = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DEFAULT_CERTIFICATION_PROFILE_PROPERTIES_FOR_BRANCH_ROLE)) {
                            sBranchPolicyProper = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DEFAULT_PASSWORD_ACCOUNT)) {
                            sUserPassDefault = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                    }
                }
                rsUserBranch = new UserInfo[1][];
                pResonseUser = new int[1];
                db.S_BO_API_GET_USERNAME_BY_BRANCH_CODE(raServiceReq.beneficiaryBranch, pResonseUser, rsUserBranch);
                if(pResonseUser[0] == 0 && rsUserBranch[0].length > 0) {
                    if (!"".equals(raServiceReq.beneficiaryUser)) {
                        String sResponseCheckBranch = db.S_BO_API_CHECK_USERNAME_AND_BRANCH_CODE(raServiceReq.beneficiaryBranch, raServiceReq.beneficiaryUser);
                        if(!"0".equals(sResponseCheckBranch)) {
                            rsUserBranch = new UserInfo[1][];
                            db.S_BO_API_USER_DETAIL(raServiceReq.beneficiaryUser, raServiceReq.language, rsUserBranch);
                            if(rsUserBranch != null && rsUserBranch[0].length > 0) {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_USERNAME_BY_INVALID;
                            } else {
                                if("1".equals(sCreateUserDefault)) {
                                    String userPhone = "";
                                    String userEmail = "";
                                    String userRemark = "";
                                    String userRole = Definitions.CONFIG_ROLE_CODE_AGENT_ADMIN;
                                    JSON_USER_BRANCH_DEFAULT[][] rsCertType = new JSON_USER_BRANCH_DEFAULT[1][];
                                    CommonFunction.getJsonUserBranchDefault(sValueUserBranch, rsCertType);
                                    for(JSON_USER_BRANCH_DEFAULT rsCertType1 : rsCertType[0])
                                    {
                                        if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_USER_DEFAULT_INFO_TAG))
                                        {
                                            userPhone = rsCertType1.MSISDN;
                                            userEmail = rsCertType1.EMAIL;
                                            userRemark = rsCertType1.REMARK;
                                        }
                                    }
                                    String[] pRESPONSE_CODE = new String[1];
                                    int[] pUSER_ID = new int[1];
                                    db.S_BO_API_USER_INSERT(raServiceReq.beneficiaryUser, sUserPassDefault, userRemark, 
                                        userRole, raServiceReq.beneficiaryBranch,
                                        userEmail, userPhone, raServiceReq.approveUser, pRESPONSE_CODE, pUSER_ID);
                                    // tao user
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                                }
                            }
                        }
                    } else {
                        if(!"".equals(rsUserBranch[0][0].userName)) {
                            raServiceReq.beneficiaryUser = rsUserBranch[0][0].userName;
                        } else {
                            if("1".equals(sCreateUserDefault)) {
                                String userPhone = "";
                                String userEmail = "";
                                String userRemark = "";
                                String userRole = Definitions.CONFIG_ROLE_CODE_AGENT_ADMIN;
                                JSON_USER_BRANCH_DEFAULT[][] rsCertType = new JSON_USER_BRANCH_DEFAULT[1][];
                                CommonFunction.getJsonUserBranchDefault(sValueUserBranch, rsCertType);
                                for(JSON_USER_BRANCH_DEFAULT rsCertType1 : rsCertType[0]) {
                                    if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_USER_DEFAULT_INFO_TAG)) {
                                        userPhone = rsCertType1.MSISDN;
                                        userEmail = rsCertType1.EMAIL;
                                        userRemark = rsCertType1.REMARK;
                                    }
                                }
                                String[] pRESPONSE_CODE = new String[1];
                                int[] pUSER_ID = new int[1];
                                raServiceReq.beneficiaryUser = raServiceReq.beneficiaryBranch.toLowerCase() + "_admin";
                                db.S_BO_API_USER_INSERT(raServiceReq.beneficiaryUser, sUserPassDefault, userRemark, 
                                    userRole, raServiceReq.beneficiaryBranch,
                                    userEmail, userPhone, raServiceReq.approveUser, pRESPONSE_CODE, pUSER_ID);
                                // tao user
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                            }
                        }
                    }
                } else {
                    if("1".equals(sCreateAgencyDefault)) {
                        if (!"".equals(raServiceReq.beneficiaryUser)) {
                            rsUserBranch = new UserInfo[1][];
                            db.S_BO_API_USER_LIST(raServiceReq.beneficiaryUser, "", "", raServiceReq.language, rsUserBranch);
                            if(rsUserBranch[0].length > 0) {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                            } else {
                                if("1".equals(sCreateUserDefault)) {
                                    String branchPhone = "";
                                    String branchEmail = "";
                                    String branchRemark = "";
                                    String branchParentName = "";
                                    String branchProvince = "";
                                    String branchDISCOUNT_RATE_PROFILE = "FEDERAL";
                                    String branchRole = "FEDERAL";
                                    String userPhone = "";
                                    String userEmail = "";
                                    String userRemark = "";
                                    String userRole = Definitions.CONFIG_ROLE_CODE_AGENT_ADMIN;
                                    JSON_USER_BRANCH_DEFAULT[][] rsCertType = new JSON_USER_BRANCH_DEFAULT[1][];
                                    CommonFunction.getJsonUserBranchDefault(sValueUserBranch, rsCertType);
                                    for(JSON_USER_BRANCH_DEFAULT rsCertType1 : rsCertType[0])
                                    {
                                        if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_BRANCH_DEFAULT_INFO_TAG))
                                        {
                                            branchPhone = rsCertType1.MSISDN;
                                            branchEmail = rsCertType1.EMAIL;
                                            branchRemark = rsCertType1.REMARK;
                                            branchParentName = rsCertType1.PARENT_NAME;
                                            branchProvince = rsCertType1.PROVINCE_NAME;
                                        }
                                        if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_USER_DEFAULT_INFO_TAG))
                                        {
                                            userPhone = rsCertType1.MSISDN;
                                            userEmail = rsCertType1.EMAIL;
                                            userRemark = rsCertType1.REMARK;
                                        }
                                    }
                                    int[] pBRANCH_ID = new int[1];
                                    String sParam = db.S_BO_API_BRANCH_INSERT(raServiceReq.beneficiaryBranch, branchProvince,
                                        branchRemark, branchRemark, branchParentName, raServiceReq.approveUser,
                                        EscapeUtils.escapeHtml(branchPhone), "", EscapeUtils.escapeHtml(branchEmail),
                                        "", "", "", null, branchDISCOUNT_RATE_PROFILE, sBranchPolicyProper, branchRole, pBRANCH_ID);
                                    if("0".equals(sParam)) {
                                        String[] pRESPONSE_CODE = new String[1];
                                        int[] pUSER_ID = new int[1];
                                        db.S_BO_API_USER_INSERT(raServiceReq.beneficiaryUser, sUserPassDefault, userRemark, 
                                            userRole, raServiceReq.beneficiaryBranch,
                                            userEmail, userPhone, raServiceReq.approveUser, pRESPONSE_CODE, pUSER_ID);
                                    }
                                    // tao branch (dc truyen vao)
                                    // tao user (dc truyen vao)
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_USERNAME_BY_INVALID;
                                }
                            }
                        } else {
                            if("1".equals(sCreateUserDefault)) {
                                String branchPhone = "";
                                String branchEmail = "";
                                String branchRemark = "";
                                String branchParentName = "";
                                String branchProvince = "";
                                String branchDISCOUNT_RATE_PROFILE = "FEDERAL";
                                String branchRole = "FEDERAL";
                                String userPhone = "";
                                String userEmail = "";
                                String userRemark = "";
                                String userRole = Definitions.CONFIG_ROLE_CODE_AGENT_ADMIN;
                                JSON_USER_BRANCH_DEFAULT[][] rsCertType = new JSON_USER_BRANCH_DEFAULT[1][];
                                CommonFunction.getJsonUserBranchDefault(sValueUserBranch, rsCertType);
                                for(JSON_USER_BRANCH_DEFAULT rsCertType1 : rsCertType[0])
                                {
                                    if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_BRANCH_DEFAULT_INFO_TAG))
                                    {
                                        branchPhone = rsCertType1.MSISDN;
                                        branchEmail = rsCertType1.EMAIL;
                                        branchRemark = rsCertType1.REMARK;
                                        branchParentName = rsCertType1.PARENT_NAME;
                                        branchProvince = rsCertType1.PROVINCE_NAME;
                                    }
                                    if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_USER_DEFAULT_INFO_TAG))
                                    {
                                        userPhone = rsCertType1.MSISDN;
                                        userEmail = rsCertType1.EMAIL;
                                        userRemark = rsCertType1.REMARK;
                                    }
                                }
                                int[] pBRANCH_ID = new int[1];
                                String sParam = db.S_BO_API_BRANCH_INSERT(raServiceReq.beneficiaryBranch, branchProvince,
                                    branchRemark, branchRemark, branchParentName, raServiceReq.approveUser,
                                    EscapeUtils.escapeHtml(branchPhone), "", EscapeUtils.escapeHtml(branchEmail),
                                    "", "", "", null, branchDISCOUNT_RATE_PROFILE, sBranchPolicyProper, branchRole, pBRANCH_ID);
                                if("0".equals(sParam))
                                {
                                    raServiceReq.beneficiaryUser = raServiceReq.beneficiaryBranch.toLowerCase() + "_admin";
                                    String[] pRESPONSE_CODE = new String[1];
                                    int[] pUSER_ID = new int[1];
                                    db.S_BO_API_USER_INSERT(raServiceReq.beneficiaryUser, sUserPassDefault, userRemark, 
                                        userRole, raServiceReq.beneficiaryBranch,
                                        userEmail, userPhone, raServiceReq.approveUser, pRESPONSE_CODE, pUSER_ID);
                                }
                                // tao branch (dc truyen vao)
                                // tao user (tu gen)
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_USERNAME_BY_INVALID;
                            }
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
                }
            } else {
                String sAgencyDefault = "";
                if (rsPolicy[0].length > 0) {
                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_API_DEFAULT_BENEFICIARY_BRANCH)) {
                            sAgencyDefault = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                            break;
                        }
                    }
                }
                if(!"".equals(sAgencyDefault)) {
                    raServiceReq.beneficiaryBranch = sAgencyDefault;
                    UserInfo[][] rsUserBranch = new UserInfo[1][];
                    int[] pResonseUser = new int[1];
                    db.S_BO_API_GET_USERNAME_BY_BRANCH_CODE(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryBranch), pResonseUser, rsUserBranch);
                    if(pResonseUser[0] == 0 && rsUserBranch[0].length > 0) {
                        raServiceReq.beneficiaryUser = rsUserBranch[0][0].userName;
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                }
            }
            //</editor-fold>

            CERTIFICATION_PROFILE[][] resProfileDB;
            //<editor-fold defaultstate="collapsed" desc="### CHECK PROFILE VALID">
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_PROFILE_INVALID;
                resProfileDB = new CERTIFICATION_PROFILE[1][];
                db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), resProfileDB);
                if(resProfileDB[0].length > 0)
                {
                    raServiceReq.certificateAuthorityCode = resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME;
                    raServiceReq.certificatePurposeCode = resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME;
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                }
            }
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_PROFILE_INVALID;
                boolean accessProfileAll = CommonFunction.checkAPIAccessProfileAll(sCERT_PROFILE_PROPERTIES);
                if (accessProfileAll == true) {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                } else {
                    tempProfileList = new ArrayList<>();
                    //<editor-fold defaultstate="collapsed" desc="### GET PROFILE LIST ACCESS">
                    CERTIFICATION_POLICY_DATA[][] resPolicyData_Old = new CERTIFICATION_POLICY_DATA[1][];
                    CommonFunction.getProfileCertList(sCERT_PROFILE_PROPERTIES, resPolicyData_Old);
                    for(CERTIFICATION_POLICY_DATA resPolicyCertData_Old1 : resPolicyData_Old[0])
                    {
                        if(resPolicyCertData_Old1.attributeType.equals(Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST))
                        {
                            resProfileDB = new CERTIFICATION_PROFILE[1][];
                            db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(resPolicyCertData_Old1.name), resProfileDB);
                            if(resProfileDB[0].length > 0)
                            {
                                CERTIFICATION_POLICY_DATA itemProfileAccess = new CERTIFICATION_POLICY_DATA();
                                itemProfileAccess.name = resProfileDB[0][0].NAME;
                                itemProfileAccess.certificateAuthority = resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME;
                                itemProfileAccess.certificatePurpose = resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME;
                                itemProfileAccess.remark = resPolicyCertData_Old1.remark;
                                itemProfileAccess.remarkEn = resPolicyCertData_Old1.remarkEn;
                                itemProfileAccess.attributeType = Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST;
                                tempProfileList.add(itemProfileAccess);
                            }
                        }
                    }
                    //</editor-fold>

                    if(tempProfileList.size() > 0)
                    {
                        for (CERTIFICATION_POLICY_DATA tempProfileList1 : tempProfileList)
                        {
                            if(tempProfileList1.certificateAuthority.equals(raServiceReq.certificateAuthorityCode)
                                && tempProfileList1.certificatePurpose.equals(raServiceReq.certificatePurposeCode)
                                && tempProfileList1.name.equals(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode)))
                            {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                break;
                            }
                        }
                    }
                }
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                String sRegexPolicy = "";
                String sDiscountRateOption = "0";
                String checkChangeEffectiveDT = "0";
                String dayChangeEffectiveDT = "0";
                if (rsPolicy[0].length > 0) {
                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_REGEX_FOR_PHONE_EMAIL)) {
                            sRegexPolicy = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_DISCOUNT_RATE_PROFILE_OPTION)) {
                            sDiscountRateOption = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if(rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_OPTION_FOR_CHANGING_EFFECTIVE_DT)) {
                            checkChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if(rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_MAX_NUMBERS_DAY_ISSUE_CERTIFICATE_FUTURE)) {
                            dayChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                    }
                }
                //<editor-fold defaultstate="collapsed" desc="### POLICY CHECK PHONE, EMAIL CUSTORMER, DISCOUNT RATE">
                String sREGEX_PHONE = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_PHONE);
                if ("".equals(sREGEX_PHONE.trim())) {
                    sREGEX_PHONE = Definitions.CONFIG_DEFAULT_VALUE_REGEX_PHONE;
                }
                if (CommonFunction.regexPhoneValid(EscapeUtils.CheckTextNull(raServiceReq.phoneContact), sREGEX_PHONE) == false) {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CUSTOMER_PHONE_INVALID;
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                }
                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                    if ("".equals(sREGEX_EMAIL.trim())) {
                        sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                    }
                    if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(raServiceReq.emailContact), sREGEX_EMAIL) == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CUSTOMER_EMAIL_INVALID;
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                    }
                }
                //</editor-fold>

                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    //<editor-fold defaultstate="collapsed" desc="### DNS List for SSL Check CLOSE">
                    /*if(EscapeUtils.CheckTextNull(raReqTemp.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN))
                    {
                        if(EscapeUtils.CheckTextNull(raReqTemp.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_SSL))
                        {
                            String sDNSValue = EscapeUtils.CheckTextNull(raServiceReq.dnsName);
                            if("".equals(sDNSValue))
                            {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SSL_DNS_INVALID;
                            } else {
                                List<CERTIFICATION_PROPERTIES_JSON.Attribute> attributes = new ArrayList<>();
                                CERTIFICATION_PROPERTIES_JSON.Attribute attribute = new CERTIFICATION_PROPERTIES_JSON.Attribute();
                                attribute.setKey(CERTIFICATION_PROPERTIES_JSON.Attribute.SUBJECT_ALT_NAMES);
                                attribute.setValue(sDNSValue);
                                attributes.add(attribute);
                                strDNSName = "{\"attributes\":" + objectMapper.writeValueAsString(attributes) + "}";
                            }
                            if("".equals(strDNSName))
                            {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SSL_DNS_INVALID;
                            }
                        }
                    }*/
                    //</editor-fold>

                    java.sql.Timestamp pEFFECTIVE_DT = null;
                    //<editor-fold defaultstate="collapsed" desc="### CHECK EFFECCTIVE_DT">
                    if("1".equals(checkChangeEffectiveDT)) {
                        String sEffectiveTime = EscapeUtils.CheckTextNull(raServiceReq.effectiveTime);
                        if(!"".equals(sEffectiveTime)) {
                            if(CommonFunction.checkDatePatternValid(sEffectiveTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                if(CommonFunction.checkDateAddDayCurrent(sEffectiveTime, Integer.parseInt(dayChangeEffectiveDT), Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                    if(CommonFunction.checkDateBiggerCurrent(sEffectiveTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                        pEFFECTIVE_DT = CommonFunction.ConvertStringToTimeStamp(sEffectiveTime);
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                            }
                        }
                    }
                    //</editor-fold>

                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        if (raServiceReq.certificateComponentInfo.length > 0) {
                            int intOUCheckClient = 0;
                            for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                if (EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                    intOUCheckClient = intOUCheckClient + 1;
                                }
                            }
                            CertificateProfileInfo[][] certProfileInfo = new CertificateProfileInfo[1][];
                            db.S_BO_API_CERTIFICATION_PROFILE_GET_PROPERTIES(EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode),
                                    EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode),
                                    EscapeUtils.CheckTextNull(raServiceReq.formFactorCode), certProfileInfo);
                            if (certProfileInfo[0].length > 0) {
                                boolean sCheckRequire = true;
                                //<editor-fold defaultstate="collapsed" desc="### Update isreqiure, commonname certificateComponentInfo">
                                String sPropertiesCert = EscapeUtils.CheckTextNull(certProfileInfo[0][0].certificateProfileProperties);
                                if (!"".equals(sPropertiesCert)) {
                                    CertificateComponentInfo[][] infoCompNew = new CertificateComponentInfo[1][];
                                    ArrayList<CertificateComponentInfo> listCompNew = new ArrayList<>();
                                    CERTIFICATION_TYPE_COMPONENT[][] resProfileData = new CERTIFICATION_TYPE_COMPONENT[1][];
                                    CommonFunction.getJsonComponentForCert(sPropertiesCert, resProfileData);
                                    int intCompOUSrv = 0;
                                    for(CERTIFICATION_TYPE_COMPONENT resProfileData1 : resProfileData[0])
                                    {
                                        if(EscapeUtils.CheckTextNull(resProfileData1.name).equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID))
                                        {
                                            boolean hasComponent = false;
                                            for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                String sCodeInfoOld = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                if (sCodeInfoOld.equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE)) {
                                                    sCodeInfoOld = sCodeInfoOld.replace(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE, Definitions.CONFIG_COMPONENT_DN_TAG_UID);
                                                }
                                                if (EscapeUtils.CheckTextNull(resProfileData1.prefix).equals(EscapeUtils.CheckTextNull(certComponentInfo1.prefix)))
                                                {
                                                    hasComponent = true;
                                                    CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                    itemCompNew.code = sCodeInfoOld;
                                                    itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                    itemCompNew.requireEnabled = resProfileData1.require;
                                                    itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                    itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                    itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                    listCompNew.add(itemCompNew);
                                                    break;
                                                }
                                            }
                                            if(hasComponent == false)
                                            {
                                                CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                itemCompNew.requireEnabled = resProfileData1.require;
                                                itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                itemCompNew.value = "";
                                                itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                listCompNew.add(itemCompNew);
                                            }
                                        } else {
                                            if(!EscapeUtils.CheckTextNull(resProfileData1.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN))
                                            {
                                                if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                                    boolean hasComponent = false;
                                                    intCompOUSrv = intCompOUSrv + 1;
                                                    int intCompOUClient = 0;
                                                    for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                                            hasComponent = true;
                                                            intCompOUClient = intCompOUClient + 1;
                                                            if(intCompOUSrv == intCompOUClient) {
                                                                CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                                itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                                itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                                itemCompNew.requireEnabled = resProfileData1.require;
                                                                itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                                itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                                itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                                listCompNew.add(itemCompNew);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    if(hasComponent == false) {
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                        itemCompNew.value = "";
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                    }
                                                } else {
                                                    boolean hasComponent = false;
                                                    for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                        if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(EscapeUtils.CheckTextNull(certComponentInfo1.code))) {
                                                            hasComponent = true;
                                                            CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                            itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                            itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                            itemCompNew.requireEnabled = resProfileData1.require;
                                                            itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                            itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                            itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                            listCompNew.add(itemCompNew);
                                                            break;
                                                        }
                                                    }
                                                    if(hasComponent == false)
                                                    {
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                        itemCompNew.value = "";
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                    }
                                                }
                                            } else {
                                                boolean hasComponent = false;
                                                for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                    if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(EscapeUtils.CheckTextNull(certComponentInfo1.code))) {
                                                        hasComponent = true;
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN;
                                                        itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                        break;
                                                    }
                                                }
                                                if(hasComponent == false)
                                                {
                                                    CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                    itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                    itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                    itemCompNew.requireEnabled = resProfileData1.require;
                                                    itemCompNew.attributeType = Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN;
                                                    itemCompNew.value = "";
                                                    itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                    listCompNew.add(itemCompNew);
                                                }
                                            }
                                        }
                                    }
                                    infoCompNew[0] = new CertificateComponentInfo[listCompNew.size()];
                                    infoCompNew[0] = listCompNew.toArray(infoCompNew[0]);
                                    raServiceReq.certificateComponentInfo = infoCompNew[0];
                                    if(intOUCheckClient > intCompOUSrv) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_TEMPLATE_CERT_EMPTY;
                                }
                                //</editor-fold>

                                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                    String sCommomNameType = "";
                                    String sCompanyCompoment = "";
                                    String sDomainCompoment = "";
                                    String sPersonalCompoment = "";
                                    String sMSTCompoment = "";
                                    String sMSTCompomentCN = "";
                                    String sQDCompoment = "";
                                    String sBHXHCompoment = "";
                                    String sBHXHCompomentCN = "";
                                    String sMDVCompoment = "";
                                    String sMNSCompoment = "";
                                    String sCMNDCompoment = "";
                                    String sCCCDCompoment = "";
                                    String sDeviceUUID = "";
                                    String sHCCompoment = "";
                                    String sProvinceCodeComponent = "";
                                    String sProvinceNameComponent = "";
                                    String sDNResult = "";
                                    String sCoreCASubject = "";
                                    boolean isEmailCertValid = true;
                                    boolean checkCSRNotExists = true;
                                    //<editor-fold defaultstate="collapsed" desc="### Get info component from certificateComponentInfo">
                                    // CHECK REQUIRE FOR UID
                                    boolean hasCompanyUID = false;
                                    boolean hasPesonalUID = false;
                                    boolean hasCompanyValue = false;
                                    boolean hasPesonalValue = false;
                                    for (CertificateComponentInfo compCheckUID : raServiceReq.certificateComponentInfo) {
                                        if (EscapeUtils.CheckTextNull(compCheckUID.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY)) {
                                            hasCompanyUID = true;
                                            if (compCheckUID.requireEnabled == true) {
                                                if (!"".equals(EscapeUtils.CheckTextNull(compCheckUID.value))) {
                                                    hasCompanyValue = true;
                                                    break;
                                                } else {hasCompanyValue = false;}
                                            } else {hasCompanyValue = true;}
                                        }
                                    }
                                    for (CertificateComponentInfo compCheckUID : raServiceReq.certificateComponentInfo) {
                                        if (EscapeUtils.CheckTextNull(compCheckUID.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL)) {
                                            hasPesonalUID = true;
                                            if (compCheckUID.requireEnabled == true) {
                                                if (!"".equals(EscapeUtils.CheckTextNull(compCheckUID.value))) {
                                                    hasPesonalValue = true;
                                                    break;
                                                } else {hasPesonalValue = false;}
                                            } else {hasPesonalValue = true;}
                                        }
                                    }
                                    if(hasCompanyUID == true) {
                                        if(hasCompanyValue == false) {
                                            sCheckRequire = false;
                                        }
                                    }
                                    if(hasPesonalUID == true) {
                                        if(hasPesonalValue == false) {
                                            sCheckRequire = false;
                                        }
                                    }
                                    if (sCheckRequire == true) {
                                        String sSubjectEmail = "";
                                        String sSANEmail = "";
                                        boolean isHasSANEmail = false;
                                        List<CERTIFICATION_PROPERTIES_JSON.Attribute> attributesSan = new ArrayList<>();
                                        if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                            for (CertificateComponentInfo certComponentInfo2 : raServiceReq.certificateComponentInfo) {
                                                if (!EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN))
                                                {
                                                    // check require
                                                    if (certComponentInfo2.requireEnabled == true) {
                                                        if (!EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY)
                                                                && !EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL)) {
                                                            if ("".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value))) {
                                                                sCheckRequire = false;
                                                                break;
                                                            }
                                                        } else {
                                                        }
                                                    }
                                                    // get city province name
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_ST)) {
                                                        sProvinceCodeComponent = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        if("".equals(sProvinceCodeComponent) || Definitions.CONFIG_GRID_STRING_NA.equals(sProvinceCodeComponent)) {
                                                            sProvinceCodeComponent = "";
                                                        }
                                                        if(!"".equals(sProvinceCodeComponent)) {
                                                            CityProvinceInfo[][] cityInfo = new CityProvinceInfo[1][];
                                                            db.S_BO_API_PROVINCE_LIST(sProvinceCodeComponent, raServiceReq.language, cityInfo);
                                                            if (cityInfo[0].length > 0) {
                                                                certComponentInfo2.value = EscapeUtils.CheckTextNull(cityInfo[0][0].cityProvinceName);
                                                                sProvinceNameComponent = EscapeUtils.CheckTextNull(cityInfo[0][0].cityProvinceName);
                                                            }
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_L)) {
                                                        String sValueL = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        if("".equals(sValueL) || Definitions.CONFIG_GRID_STRING_NA.equals(sValueL)) {
                                                            certComponentInfo2.value = "";
                                                        }
                                                    }
                                                    // get company, personal name
                                                    if (!"".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value))) {
                                                        if(CommonFunction.checkCertCharacterSpecial(certComponentInfo2.value) == false) {
                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_COMPONENT_CHARACTER_SPECIAL;
                                                            break;
                                                        }
                                                        sDNResult += EscapeUtils.CheckTextNull(certComponentInfo2.code) + "=" + EscapeUtils.CheckTextNull(certComponentInfo2.prefix)
                                                            + CommonFunction.replaceStringCharaterSpecialDN(EscapeUtils.CheckTextNull(certComponentInfo2.value), true, false) + ", ";
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_CN)) {
                                                        sCommomNameType = EscapeUtils.CheckTextNull(certComponentInfo2.commomNameType);
                                                        if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_COMPANY)) {
                                                            sCompanyCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_PERSON)) {
                                                            sPersonalCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_DOMAIN_NAME)) {
                                                            sDomainCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBCLIENT + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBSERVER + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_AUTH + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CODE_SIGNING + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_SIGN + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                    }
    //                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_Domain)) {
    //                                                    sDomainCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
    //                                                }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_O)) {
                                                        if (!"".equals(sCommomNameType)) {
                                                            if (EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN)) {
                                                                sCompanyCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY))
                                                    {
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE))
                                                        {
                                                            if(!"".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value)))
                                                            {
                                                                sDeviceUUID = EscapeUtils.CheckTextNull(certComponentInfo2.prefix) + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                        } else {
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_TAX_CODE + ":")) {
                                                                sMSTCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_BUDGET_CODE + ":")) {
                                                                sMNSCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_DECISION + ":")) {
                                                                sQDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_SOCIAL_INSURANCE_CODE + ":")) {
                                                                sBHXHCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_UNIT_CODE + ":")) {
                                                                sMDVCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                        }
                                                    }
                                                    if(EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL))
                                                    {
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_CODE + ":")) {
                                                            sCMNDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_PASSPORT_CODE + ":")) {
                                                            sHCCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_CITIZEN_CODE + ":")) {
                                                            sCCCDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_SOCIAL_INSURANCE_CODE + ":")) {
                                                            sBHXHCompomentCN = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_TAX_CODE + ":")) {
                                                            sMSTCompomentCN = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_E)) {
                                                        sSubjectEmail = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                } else {
                                                    // PROPERTIES SAN
                                                    String sValueSan = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    if (certComponentInfo2.requireEnabled == true) {
                                                        if ("".equals(sValueSan)) {
                                                            sCheckRequire = false;
                                                            break;
                                                        }
                                                    }
                                                    if(!"".equals(sValueSan)) {
                                                        String sCodeSan = EscapeUtils.CheckTextNull(certComponentInfo2.code);
                                                        String sKey = "";
                                                        if(!"".equals(sCodeSan)) {
                                                            sKey = sCodeSan;
                                                        }
                                                        CERTIFICATION_PROPERTIES_JSON.Attribute attribute = new CERTIFICATION_PROPERTIES_JSON.Attribute();
                                                        attribute.setKey(sKey);
                                                        attribute.setValue(sValueSan);
                                                        attributesSan.add(attribute);
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_SAN_TAG_rfc822Name)) {
                                                        sSANEmail = sValueSan;
                                                        isHasSANEmail = true;
                                                    }
                                                }
                                            }
                                        }
                                        if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                            //<editor-fold defaultstate="collapsed" desc="### CHECK EMAIL CERT VALID">
                                            if(!"".equals(sSubjectEmail)) {
                                                String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                                                if ("".equals(sREGEX_EMAIL.trim())) {
                                                    sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                                                }
                                                if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(sSubjectEmail), sREGEX_EMAIL) == false) {
                                                    isEmailCertValid = false;
                                                }
                                            }
                                            if(!"".equals(sSANEmail)) {
                                                String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                                                if ("".equals(sREGEX_EMAIL.trim())) {
                                                    sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                                                }
                                                if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(sSANEmail), sREGEX_EMAIL) == false) {
                                                    isEmailCertValid = false;
                                                }
                                            }
                                            //</editor-fold>

                                            if(isEmailCertValid == true) {
                                                if(attributesSan.size() > 0) {
                                                    strDNSName = "{\"attributes\":" + objectMapper.writeValueAsString(attributesSan) + "}";
                                                }
                                                CommonFunction.LogDebugString(log, "SAN_Properties", strDNSName);
                                                if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF))
                                                {
                                                    if(!"".equals(sMSTCompoment) && !"".equals(sMNSCompoment) && !"".equals(sQDCompoment)
                                                        && !"".equals(sBHXHCompoment) && !"".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sMSTCompoment) && "".equals(sMNSCompoment) && "".equals(sQDCompoment)
                                                        && "".equals(sBHXHCompoment) && "".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if(!"".equals(sCMNDCompoment) && !"".equals(sHCCompoment) && !"".equals(sCCCDCompoment)
                                                        && !"".equals(sBHXHCompomentCN) && !"".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sCMNDCompoment) && "".equals(sHCCompoment) && "".equals(sCCCDCompoment)
                                                        && "".equals(sBHXHCompomentCN) && "".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTTYPE_DESC_ENTERPRISE)) {
                                                    if(!"".equals(sMSTCompoment) && !"".equals(sMNSCompoment) && !"".equals(sQDCompoment)
                                                        && !"".equals(sBHXHCompoment) && !"".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sMSTCompoment) && "".equals(sMNSCompoment) && "".equals(sQDCompoment)
                                                        && "".equals(sBHXHCompoment) && "".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTTYPE_DESC_PERSONAL))
                                                {
                                                    if(!"".equals(sCMNDCompoment) && !"".equals(sHCCompoment) && !"".equals(sCCCDCompoment)
                                                        && !"".equals(sBHXHCompomentCN) && !"".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sCMNDCompoment) && "".equals(sHCCompoment) && "".equals(sCCCDCompoment)
                                                        && "".equals(sBHXHCompomentCN) && "".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE))
                                                {
                                                    if("".equals(sDeviceUUID))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_PERSONAL_GOV)
                                                    || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV))
                                                {

                                                } else if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                    || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                    || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                    || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                    || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                {
                                                    if("".equals(sDeviceUUID))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                }
                                                sDNResult = CommonFunction.subLastCharater(sDNResult);
                                                CommonFunction.LogDebugString(log, sFunctionWS + " - Parser Cert Info", "sCommomNameType: " + sCommomNameType
                                                    + ";sCompanyCompoment: " + sCompanyCompoment + ";sDomainCompoment: " + sDomainCompoment
                                                    + ";sPersonalCompoment: " + sPersonalCompoment + ";sCMNDCompoment: " + sCMNDCompoment
                                                    + ";sCCCDCompoment: " + sCCCDCompoment + ";sHCCompoment: " + sHCCompoment
                                                    + ";sMSTCompoment: " + sMSTCompoment + ";sMNSCompoment: " + sMNSCompoment + ";sQDCompoment: " + sQDCompoment
                                                    + ";sDeviceUUID: " + sDeviceUUID+ ";sBHXHCompoment: " + sBHXHCompoment + ";sMDVCompoment: " + sMDVCompoment
                                                    + ";sMSTCompomentCN: " + sMSTCompomentCN+ ";sBHXHCompomentCN: " + sBHXHCompomentCN + ";sDNResult: " + sDNResult);
                                            }
                                        }
                                    }
                                    //</editor-fold>
                                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                        boolean isHasFileClient = false;
                                        if (sCheckRequire == true) {
                                            if (isEmailCertValid == true) {
                                                if (!"".equals(sDNResult)) {
                                                    //<editor-fold defaultstate="collapsed" desc="### GET FULLNAME">
                                                    String raFullnameCreate = "";
                                                    String raFullname = "";
                                                    UserInfo[][] userInfo = new UserInfo[1][];
                                                    db.S_BO_API_USER_LIST(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", raServiceReq.language, userInfo);
                                                    if (userInfo[0].length > 0) {
                                                        raFullnameCreate = EscapeUtils.CheckTextNull(userInfo[0][0].fullName);
                                                    }
                                                    UserInfo[][] userDetail = new UserInfo[1][];
                                                    db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                                                    if (userDetail[0].length > 0) {
                                                        raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                                                    }
                                                    //</editor-fold>

                                                    tempProfileList = new ArrayList<>();
                                                    String dnUniqueEnabled = "0";
                                                    CertificateAuthorityInfo[][] caInfo = new CertificateAuthorityInfo[1][];
                                                    db.S_BO_API_CERTIFICATION_AUTHORITY_LIST(EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode),
                                                            raServiceReq.language, caInfo, "", tempProfileList);
                                                    if (caInfo[0].length > 0) {
                                                        sCoreCASubject = EscapeUtils.CheckTextNull(caInfo[0][0].certificateAuthorityCoreCASubject);
                                                        dnUniqueEnabled = caInfo[0][0].dnUniqueEnabled;
                                                    }
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                    
                                                    String idenType="";
                                                    String identification = "";
                                                    String sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                                                    //<editor-fold defaultstate="collapsed" desc="### OWNER PROCESS">
                                                    if(raServiceReq.certificateOwnerID == 0)
                                                    {
                                                        String sEnterpriseID = "";
                                                        String sPersonalID = "";
                                                        int pCERTIFICATION_OWNER_TYPE_ID = 0;
                                                        String sCERTIFICATION_OWNER_TYPE = "";
                                                        if(!"".equals(sMSTCompoment)) {
                                                            sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE + sMSTCompoment;
                                                            idenType = Definitions.CONFIG_RSSP_REST_IDENTIFICATION_TYPE_TAXCODE;
                                                            identification = sMSTCompoment;
                                                        }
                                                        if(!"".equals(sMNSCompoment)) {
                                                            sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_BUDGETCODE + sMNSCompoment;
                                                            idenType = Definitions.CONFIG_RSSP_REST_IDENTIFICATION_TYPE_BUDGETCODE;
                                                            identification = sMNSCompoment;
                                                        }
                                                        if(!"".equals(sQDCompoment)) {
                                                            sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_DECISION + sQDCompoment;
                                                        }
                                                        if(!"".equals(sBHXHCompoment)) {
                                                            sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_SOCIAL_INSURANCE_CODE + sBHXHCompoment;
                                                        }
                                                        if(!"".equals(sMDVCompoment)) {
                                                            sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_UNIT_CODE + sMDVCompoment;
                                                        }
                                                        if(!"".equals(sCMNDCompoment)) {
                                                            sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CMND + sCMNDCompoment;
                                                            idenType = Definitions.CONFIG_RSSP_REST_IDENTIFICATION_TYPE_CMND;
                                                            identification = sCMNDCompoment;
                                                        }
                                                        if(!"".equals(sHCCompoment)) {
                                                            sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_PASSPORT + sHCCompoment;
                                                            idenType = Definitions.CONFIG_RSSP_REST_IDENTIFICATION_TYPE_PASSPORT;
                                                            identification = sHCCompoment;
                                                        }
                                                        if(!"".equals(sCCCDCompoment)) {
                                                            sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CITIZEN_ID + sCCCDCompoment;
                                                            idenType = Definitions.CONFIG_RSSP_REST_IDENTIFICATION_TYPE_CITIZEN_ID;
                                                            identification = sCCCDCompoment;
                                                        }
                                                        if(!"".equals(sMSTCompomentCN)) {
                                                            sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE + sMSTCompomentCN;
                                                        }
                                                        if(!"".equals(sBHXHCompomentCN)) {
                                                            sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_SOCIAL_INSURANCE_CODE + sBHXHCompomentCN;
                                                        }
                                                        if(!EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_PERSONAL_GOV)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV))
                                                        {
                                                            if(!"".equals(sEnterpriseID) && "".equals(sPersonalID)) {
                                                                sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_ENTERPRISE;
                                                                pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_ENTERPRISE;
                                                            }
                                                            if("".equals(sEnterpriseID) && !"".equals(sPersonalID)) {
                                                                sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_PERSONAL;
                                                                pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_PERSONAL;
                                                            }
                                                            if(!"".equals(sEnterpriseID) && !"".equals(sPersonalID)) {
                                                                sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_PERSONAL;
                                                                pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_PERSONAL;
                                                            }
                                                        } else {
                                                            if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV))
                                                            {
                                                                sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_ENTERPRISE_GOV;
                                                                pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_ENTERPRISE_GOV;
                                                            } else {
                                                                sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_PERSONAL_GOV;
                                                                pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_PERSONAL_GOV;
                                                            }
                                                        }
                                                        if(pCERTIFICATION_OWNER_TYPE_ID != 0) {
                                                            if("1".equals(dnUniqueEnabled)) {
                                                                int isCheckUnique = db.S_BO_CHECK_ENFORCE_UNIQUE_DN(pCERTIFICATION_OWNER_TYPE_ID, sEnterpriseID,
                                                                    sPersonalID, EscapeUtils.CheckTextNull(raServiceReq.emailContact), sDNResult, 0);
                                                                if(isCheckUnique != 0) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_SUBJECT_DN_INVALID;
                                                                }
                                                            }
                                                            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                                if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                                                        || (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)
                                                                            && sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SN_FORMFACTOR_ESIGNCLOUD)))
                                                                {
                                                                    if (!"".equals(sCSR)) {
                                                                        Config conf = new Config();
                                                                        String sIsCA = conf.GetTryPropertybyCode(Definitions.CONFIG_IS_WHICH_ABOUT_CA);
                                                                        if(!sIsCA.equals(Definitions.CONFIG_IS_WHICH_ABOUT_CA_VGCA)){
                                                                            String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                                            int checkPublicKey = db.S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH(pCERTIFICATION_OWNER_TYPE_ID, sEnterpriseID,
                                                                                sPersonalID, EscapeUtils.CheckTextNull(raServiceReq.emailContact), sPublicKeyHard, 0);
                                                                            if(checkPublicKey == 0) {
                                                                                checkCSRNotExists = true;
                                                                            } else {
                                                                                checkCSRNotExists = false;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                            String sLocation = CommonFunction.getLocationInDN(sDNResult).trim();
                                                            String sAddress;
                                                            if(!"".equals(sLocation)) {
                                                                sAddress = CommonFunction.replaceStringCharaterSpecialDN(sLocation, true, true) + ", " + CommonFunction.getStateOrProvinceInDN(sDNResult);
                                                            } else {
                                                                sAddress = CommonFunction.getStateOrProvinceInDN(sDNResult).trim();
                                                            }
                                                            String pMESSAGE_QUEUE_TYPE_CODE = Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_CODE_REGISTRATION_OWNER;
                                                            String sOwnerUUID = CommonFunction.getUUIDV4();

                                                            //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR ">
                                                            CERTIFICATION_OWNER_DATA_ATTR tempLogReqOwner = new CERTIFICATION_OWNER_DATA_ATTR();
                                                            tempLogReqOwner.personalName = raServiceReq.personalName;
                                                            tempLogReqOwner.companyName = raServiceReq.companyName;
                                                            tempLogReqOwner.taxCode = sMSTCompoment;
                                                            tempLogReqOwner.budgetCode = sMNSCompoment;
                                                            tempLogReqOwner.decision = sQDCompoment;
                                                            tempLogReqOwner.personalCode = sCMNDCompoment;
                                                            tempLogReqOwner.passportCode = sHCCompoment;
                                                            tempLogReqOwner.enterpriseID = sEnterpriseID;
                                                            tempLogReqOwner.personalID = sPersonalID;
                                                            tempLogReqOwner.citizenID = sCCCDCompoment;
                                                            tempLogReqOwner.emailContract = raServiceReq.emailContact;
                                                            tempLogReqOwner.phoneContract = raServiceReq.phoneContact;
                                                            tempLogReqOwner.address = raServiceReq.address;
                                                            tempLogReqOwner.representative = "";
                                                            tempLogReqOwner.representativePosition = "";
                                                            tempLogReqOwner.typeName = pMESSAGE_QUEUE_TYPE_CODE;
                                                            tempLogReqOwner.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PENDING;
                                                            tempLogReqOwner.createUser = raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")";
                                                            tempLogReqOwner.createDt = new Date();
                                                            //</editor-fold>
                                                            int[] pCERTIFICATION_OWNER_ID = new int[1];
                                                            int[] pOWNER_ATTR_ID = new int[1];
                                                            String[] pRESPONSE_CODE = new String[1];
                                                            db.S_BO_API_CERTIFICATION_OWNER_INSERT(sPersonalCompoment, sCompanyCompoment, sEnterpriseID,
                                                                sPersonalID, sCERTIFICATION_OWNER_TYPE, raServiceReq.phoneContact, raServiceReq.emailContact,
                                                                raServiceReq.beneficiaryUser, sAddress, "", "", pMESSAGE_QUEUE_TYPE_CODE,
                                                                objectMapper.writeValueAsString(tempLogReqOwner), sOwnerUUID, pRESPONSE_CODE,
                                                                pCERTIFICATION_OWNER_ID, pOWNER_ATTR_ID);
                                                            if (!"0".equals(pRESPONSE_CODE[0])) {
                                                                if(pRESPONSE_CODE[0].trim().equals(String.valueOf(Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_EXISTS)))
                                                                {
                                                                    raServiceReq.certificateOwnerID = pCERTIFICATION_OWNER_ID[0];
                                                                } else {
                                                                    raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE[0]);
                                                                }
                                                            } else {
                                                                raServiceReq.certificateOwnerID = pCERTIFICATION_OWNER_ID[0];
                                                            }
                                                        }
                                                    } else {
                                                        if("1".equals(dnUniqueEnabled)) {
                                                            int isCheckUnique = db.S_BO_CHECK_ENFORCE_UNIQUE_DN(0, null, null, null, null, raServiceReq.certificateOwnerID);
                                                            if(isCheckUnique != 0) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_SUBJECT_DN_INVALID;
                                                            }
                                                        }
                                                        if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                            if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                                                || (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)
                                                                    && sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SN_FORMFACTOR_ESIGNCLOUD)))
                                                            {
                                                                if (!"".equals(sCSR)) {
                                                                    Config conf = new Config();
                                                                    String sIsCA = conf.GetTryPropertybyCode(Definitions.CONFIG_IS_WHICH_ABOUT_CA);
                                                                    if(!sIsCA.equals(Definitions.CONFIG_IS_WHICH_ABOUT_CA_VGCA)) {
                                                                        String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                                        int checkPublicKey = db.S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH(0, null, null, null, sPublicKeyHard, raServiceReq.certificateOwnerID);
                                                                        if(checkPublicKey == 0) {
                                                                            checkCSRNotExists = true;
                                                                        } else {
                                                                            checkCSRNotExists = false;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    //</editor-fold>
                                                    
                                                    //<editor-fold defaultstate="collapsed" desc="### RSSP REST OWNER">
                                                    Config conf = new Config();
                                                    String sRsspAgreementUUID = "";
                                                    String enableRSSPRest = conf.GetPropertybyCode(Definitions.CONFIG_RSSP_REST_SIM_ENABLED);
                                                    if("1".equals(enableRSSPRest)) {
                                                        int[] sResCodeRSSP;
                                                        String[] sResMessRSSP;
                                                        sResCodeRSSP= new int[1];
                                                        sResCodeRSSP[0] = 0;
                                                        if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                                            String sUsernameRSSP = EscapeUtils.CheckTextNull(raServiceReq.userName);
                                                            if(!"".equals(sUsernameRSSP)) {
                                                                RSSPRestCommon clsRSSPRest = new RSSPRestCommon();
                                                                sResCodeRSSP= new int[1]; sResMessRSSP = new String[1];
                                                                clsRSSPRest.authLoginRSSPRest(sResCodeRSSP, sResMessRSSP);
                                                                String tokenRSSPRest = "";
                                                                if(sResCodeRSSP[0] == 0) {
                                                                    // owner create
                                                                    tokenRSSPRest = sResMessRSSP[0];
                                                                    sResCodeRSSP= new int[1]; sResMessRSSP = new String[1];
                                                                    String sFullnameRSSP = sPersonalCompoment;
                                                                    if("".equals(sFullnameRSSP)){
                                                                        sFullnameRSSP = sCompanyCompoment;
                                                                    }
                                                                    clsRSSPRest.createOwnerRSSPRest(tokenRSSPRest, sUsernameRSSP, sFullnameRSSP,
                                                                        EscapeUtils.CheckTextNull(raServiceReq.emailContact), EscapeUtils.CheckTextNull(raServiceReq.phoneContact),
                                                                        idenType, identification, sResCodeRSSP, sResMessRSSP);
                                                                    if(sResCodeRSSP[0] == Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_REST_RETURN_TOKEN_EXPIRED) {
                                                                        sResCodeRSSP= new int[1]; sResMessRSSP = new String[1];
                                                                        clsRSSPRest.authLoginRSSPRest(sResCodeRSSP, sResMessRSSP);
                                                                        if(sResCodeRSSP[0] == 0) {
                                                                            tokenRSSPRest = sResMessRSSP[0];
                                                                            sResCodeRSSP= new int[1]; sResMessRSSP = new String[1];
                                                                            clsRSSPRest.createOwnerRSSPRest(tokenRSSPRest, sUsernameRSSP, sFullnameRSSP,
                                                                                EscapeUtils.CheckTextNull(raServiceReq.emailContact), EscapeUtils.CheckTextNull(raServiceReq.phoneContact),
                                                                                idenType, identification, sResCodeRSSP, sResMessRSSP);
                                                                        }
                                                                    }
//                                                                    if(sResCodeRSSP[0] == Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_REST_RETURN_USERNAME_EXISTS) {
//                                                                        sResCodeRSSP[0] = 0;
//                                                                    }
//                                                                    if(sResCodeRSSP[0] == 0) {
//                                                                        // agreement assign
//                                                                        sRsspAgreementUUID = CommonFunction.getUUIDV4();
//                                                                        clsRSSPRest.assignAgreementRSSPRest(tokenRSSPRest, sUsernameRSSP,
//                                                                            sRsspAgreementUUID, sResCodeRSSP, sResMessRSSP);
//                                                                        if(sResCodeRSSP[0] == Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_REST_RETURN_TOKEN_EXPIRED) {
//                                                                            sResCodeRSSP= new int[1]; sResMessRSSP = new String[1];
//                                                                            clsRSSPRest.authLoginRSSPRest(sResCodeRSSP, sResMessRSSP);
//                                                                            if(sResCodeRSSP[0] == 0) {
//                                                                                sResCodeRSSP= new int[1]; sResMessRSSP = new String[1];
//                                                                                tokenRSSPRest = sResMessRSSP[0];
//                                                                                clsRSSPRest.assignAgreementRSSPRest(tokenRSSPRest, sUsernameRSSP,
//                                                                                    sRsspAgreementUUID, sResCodeRSSP, sResMessRSSP);
//                                                                            }
//                                                                        }
//                                                                    }
                                                                }
                                                                if(sResCodeRSSP[0] == Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_REST_RETURN_USERNAME_EXISTS) {
                                                                    sResCodeRSSP[0] = 0;
                                                                }
                                                                raServiceResp.responseCode = sResCodeRSSP[0];
                                                                if(sResCodeRSSP[0] != 0) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_REST_RETURN_ERROR;
                                                                    raServiceResp.responseMessage = sResMessRSSP[0];
                                                                }
                                                            }
//                                                            else {
//                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_REST_USERNAME_INVALID;
//                                                            }
                                                        }
                                                    }
                                                    //</editor-fold>

                                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                        //<editor-fold defaultstate="collapsed" desc="### File manager Modules">
                                                        boolean isHasReqFile = false;
                                                        String sPropertiesFile = "";
                                                        CertificatePurposeInfo[][] certPurposeInfo = new CertificatePurposeInfo[1][];
                                                        db.S_BO_API_CERTIFICATION_PURPOSE_GET_FILE_PROPERTIES(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode), certPurposeInfo);
                                                        if (certPurposeInfo[0].length > 0) {
                                                            sPropertiesFile = EscapeUtils.CheckTextNull(certPurposeInfo[0][0].certificatePurposeFileProperties);
                                                        }
                                                        if (raServiceReq.fileManagerInfo != null) {
                                                            if (raServiceReq.fileManagerInfo.length > 0) {
                                                                isHasFileClient = true;
                                                            }
                                                        }
                                                        if (isHasFileClient == true) {
                                                            if (!"".equals(sPropertiesFile)) {
                                                                objectMapper = new ObjectMapper();
                                                                FILE_PROFILE_JSON itemParsePush = objectMapper.readValue(sPropertiesFile, FILE_PROFILE_JSON.class);
                                                                for (FileManagerInfo fileManagerInfo1 : raServiceReq.fileManagerInfo) {
                                                                    for (FILE_PROFILE_JSON.Attribute attribute : itemParsePush.getAttributes()) {
                                                                        if (EscapeUtils.CheckTextNull(fileManagerInfo1.fileTypeCode).equals(attribute.getName())) {
                                                                            fileManagerInfo1.requireEnabled = attribute.getIsRequire();
                                                                        }
                                                                        if (attribute.getIsRequire() == true) {
                                                                            isHasReqFile = true;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_TEMPLATE_FILE_EMPTY;
                                                            }
                                                        } else {
                                                            if (!"".equals(sPropertiesFile)) {
                                                                objectMapper = new ObjectMapper();
                                                                FILE_PROFILE_JSON itemParsePush = objectMapper.readValue(sPropertiesFile, FILE_PROFILE_JSON.class);
                                                                for (FILE_PROFILE_JSON.Attribute attribute : itemParsePush.getAttributes()) {
                                                                    if (attribute.getIsRequire() == true) {
                                                                        isHasReqFile = true;
                                                                    }
                                                                }
                                                            } else {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_TEMPLATE_FILE_EMPTY;
                                                            }
                                                        }
                                                        if (isHasFileClient == true) {
                                                            for (FileManagerInfo fileManagerCheck : raServiceReq.fileManagerInfo) {
                                                                // check require
                                                                if (fileManagerCheck.requireEnabled == true) {
                                                                    if (fileManagerCheck.fileByte == null) {
                                                                        sCheckRequire = false;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            if (sCheckRequire == true) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                            } else {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_FILE_EMPTY;
                                                            }
                                                        } else {
                                                            if (isHasReqFile == true) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_TEMPLATE_FILE_EMPTY;
                                                            }
                                                        }
                                                        //</editor-fold>
                                                    }
                                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                        if("".equals(sProvinceCodeComponent)) {
                                                            sProvinceCodeComponent = Definitions.CONFIG_GRID_STRING_NA;
                                                            sProvinceNameComponent = Definitions.CONFIG_GRID_STRING_NA;
                                                            // GET CITIPROVINCE from BeneficiaryBranch if "ST" not exists
                                                            /*BRANCH[][] rsBeneficiaryBranch = new BRANCH[1][];
                                                            db.S_BO_API_BRANCH_GET_INFO(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryBranch), rsBeneficiaryBranch);
                                                            if(rsBeneficiaryBranch[0].length > 0) {
                                                                CITY_PROVINCE[][] rsBeneficiaryCity = new CITY_PROVINCE[1][];
                                                                db.S_BO_PROVINCE_DETAIL(String.valueOf(rsBeneficiaryBranch[0][0].PROVINCE_ID), rsBeneficiaryCity);
                                                                if(rsBeneficiaryCity[0].length > 0)
                                                                {
                                                                    sProvinceCodeComponent = EscapeUtils.CheckTextNull(rsBeneficiaryCity[0][0].NAME);
                                                                    sProvinceNameComponent = EscapeUtils.CheckTextNull(rsBeneficiaryCity[0][0].REMARK);
                                                                }
                                                            }*/
                                                        }
                                                        // get corecasubject
                                                        String CheckCHANGE_KEY = "1";
                                                        String CheckPRIVATE_KEY;
                                                        String sCERTIFICATION_SN = "";
                                                        String pPAST_CERTIFICATION_SN = "";
                                                        if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)) {
                                                            if (EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_SSL)) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_SSL_SN;
                                                            } else if (EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING)) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_CODESIGNNING_SN;
                                                            } else if (EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE)) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_DEVICE_SN;
                                                            } else {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_SIGNSERVER_SN;
                                                            }
                                                        } else if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
//                                                            sTOKEN_SN = Definitions.CONFIG_TOKEN_SN_FORMFACTOR_ESIGNCLOUD;
                                                            if(raServiceReq.inHouseEnabled == true) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_SN_FORMFACTOR_ESIGNCLOUD;
                                                            } else {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_UNASSIGN_SN;
                                                            }
                                                        } else if (CommonFunction.checkHardTokenEnabled(EscapeUtils.CheckTextNull(raServiceReq.formFactorCode)) == true) {
                                                            if(raServiceReq.inHouseEnabled == true) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_SN_INHOUSE;
                                                            } else {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_UNASSIGN_SN;
                                                            }
                                                        } else if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                                            if(raServiceReq.inHouseEnabled == true) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_SN_INHOUSE;
                                                            } else {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_UNASSIGN_SN;
                                                            }
                                                        } else if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN)) {
                                                            sTOKEN_SN = Definitions.CONFIG_TOKEN_SIGNSERVER_SN;
                                                        } else {
                                                            sTOKEN_SN = "";
                                                        }
                                                        String sPromotionDuration = "";
                                                        if(raServiceReq.promotionDuration != -1) {
                                                            sPromotionDuration = String.valueOf(raServiceReq.promotionDuration);
                                                        }
                                                        //<editor-fold defaultstate="collapsed" desc="### EXPAND PARAM PROCESS">
                                                        String sRsspRelyingParty = "";
                                                        String sRsspCertificateUUID = "";
                                                        String sRsspConnectWSMode = "";
                                                        String sRepresentative = "";
                                                        String sRepresentativePosition = "";
                                                        String sExpandParam = EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML);
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)
                                                            && raServiceReq.inHouseEnabled == true) {
                                                            if(!"".equals(sExpandParam)) {
                                                                ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                                                sRsspAgreementUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspAgreementUUID);
                                                                sRsspRelyingParty = EscapeUtils.CheckTextNull(jsonReqExpand.rsspRelyingParty);
                                                                sRsspCertificateUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspCertificateUUID);
                                                                sRsspConnectWSMode = EscapeUtils.CheckTextNull(jsonReqExpand.rsspConnectWSMode);
                                                            }
                                                            if(!"".equals(sRsspConnectWSMode)) {
                                                                if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_REST)) {
                                                                    if("".equals(sRsspCertificateUUID) || "".equals(sRsspRelyingParty)) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                    }
                                                                } else if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_SOAP)) {
                                                                    if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                    }
                                                                } else {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                }
                                                            } else {
                                                                if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                }
                                                            }
                                                        }
                                                        String sRepresentEnabled = conf.GetTryPropertybyCode(Definitions.CONFIG_REGISTER_REPRESENT_FORM_ENABLED);
                                                        CommonFunction.LogDebugString(log, sFunctionWS, sRepresentEnabled);
                                                        if("1".equals(sRepresentEnabled)) {
                                                            ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                                            if (EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTTYPE_DESC_ENTERPRISE)) {
                                                                if(!"".equals(CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.businessLicenseAddress), true))
                                                                    || !"".equals(CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.personalID), true))
                                                                    || !"".equals(CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.representativePosition), true))
                                                                    || !"".equals(CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.representative), true))) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_LEGAL_REPRESENTATIVE_DATA_INVALID;
                                                                }
                                                            } else if (EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTTYPE_DESC_PERSONAL)) {
                                                                if(!"".equals(CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.permanentResidence), true))
                                                                    || !"".equals(CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.personalID), true))
                                                                    || !"".equals(CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.representative), true))) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_LEGAL_REPRESENTATIVE_DATA_INVALID;
                                                                }
                                                            }
                                                            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                                String sDateIssuance = EscapeUtils.CheckTextNull(jsonReqExpand.dateIssuance);
                                                                if(!"".equals(sDateIssuance)) {
                                                                    if(CommonFunction.checkDatePatternValid(sDateIssuance, Definitions.CONFIG_DATE_PATTERN_DATE_DDMMYYYY) == true) {
                                                                        if(CommonFunction.checkDateLesserCurrent(sDateIssuance, Definitions.CONFIG_DATE_PATTERN_DATE_DDMMYYYY) == false) {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_LEGAL_REPRESENTATIVE_TIME_INVALID;
                                                                        }
                                                                    } else {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_LEGAL_REPRESENTATIVE_TIME_INVALID;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        //</editor-fold>

                                                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                            if(!"".equals(sExpandParam)) {
                                                                ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                                                sRepresentative = EscapeUtils.CheckTextNull(jsonReqExpand.representative);
                                                                sRepresentativePosition = EscapeUtils.CheckTextNull(jsonReqExpand.representativePosition);
                                                            }
                                                            String[] sUIDResult = new String[2];
                                                            CommonReferServlet.collectFieldToUIDAPI(sMSTCompoment, sMNSCompoment, sQDCompoment, sBHXHCompoment, sMDVCompoment, 
                                                                sCMNDCompoment, sHCCompoment, sCCCDCompoment, sMSTCompomentCN, sBHXHCompomentCN, sUIDResult);
                                                            String sEnterpriseCert = sUIDResult[0];
                                                            String sPersonalCert = sUIDResult[1];
                                                            //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR ">
                                                            CERTIFICATION_DATA_ATTR tempLogReq = new CERTIFICATION_DATA_ATTR();
                                                            tempLogReq.personalName = sPersonalCompoment;
                                                            tempLogReq.companyName = sCompanyCompoment;
                                                            tempLogReq.enterpriseID = sEnterpriseCert;
                                                            tempLogReq.personalID = sPersonalCert;
                                                            tempLogReq.emailContract = raServiceReq.emailContact;
                                                            tempLogReq.phoneContract = raServiceReq.phoneContact;
                                                            tempLogReq.issuerSubject = sCoreCASubject;
                                                            tempLogReq.subjectDn = sDNResult;
                                                            tempLogReq.tokenSn = sTOKEN_SN;
                                                            tempLogReq.provinceName = sProvinceNameComponent;
                                                            tempLogReq.pkiFromFactorCode = raServiceReq.formFactorCode;
                                                            tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                                                            ATTRIBUTE_VALUES valueATTR;
                                                            ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                                                            dataATTR.setCertificationData(tempLogReq);
                                                            valueATTR = new ATTRIBUTE_VALUES();
                                                            valueATTR.setTokenSn(sTOKEN_SN);
                                                            boolean sChangeKeyEnabled = "1".equals(CheckCHANGE_KEY);
                                                            valueATTR.setChangeKeyEnabled(sChangeKeyEnabled);
                                                            valueATTR.setKeepCertificateSNEnabled(false);
                                                            valueATTR.setTypeName(pCERTIFICATION_ATTR_TYPE_CODE);
                                                            valueATTR.setPromotionDuration(sPromotionDuration);
                                                            if(!"".equals(sRsspAgreementUUID)) {
                                                                valueATTR.setRsspAgreementUUID(sRsspAgreementUUID);
                                                            }
                                                            if(!"".equals(sRsspRelyingParty)) {
                                                                valueATTR.setRsspRelyingParty(sRsspRelyingParty);
                                                            }
                                                            if(!"".equals(sRsspCertificateUUID)) {
                                                                valueATTR.setRsspCertificateUUID(sRsspCertificateUUID);
                                                            }
                                                            if(!"".equals(sRsspConnectWSMode)) {
                                                                valueATTR.setRsspConnectWSMode(sRsspConnectWSMode);
                                                            }
                                                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                                            valueATTR.setCreateUser(raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                                                            valueATTR.setCreateDt(new Date());
                                                            valueATTR.setAttributeData(dataATTR);
                                                            //</editor-fold>

                                                            String strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                            //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                                                            // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                                                            int intLevelApprove = 0;
                                                            if (autoApproveCAServer == false && autoApproveCAClient == false) {
                                                                intLevelApprove = 0;
                                                            } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                                                                intLevelApprove = 1;
                                                            } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                                                                intLevelApprove = 0;
                                                            } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                                                                intLevelApprove = 2;
                                                            }
                                                            //</editor-fold>

                                                            int[] pCERTIFICATE_ATTR_ID = new int[1];
                                                            int[] pCERTIFICATION_ID = new int[1];
                                                            String[] pRESPONSE_CODE_NAME = new String[1];
                                                            if (CommonFunction.checkHardTokenEnabled(EscapeUtils.CheckTextNull(raServiceReq.formFactorCode)) == true
                                                                || EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)
                                                                || (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)
                                                                    && sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_UNASSIGN_SN)))
                                                            {
                                                                //<editor-fold defaultstate="collapsed" desc="### GET POLICY">
                                                                int intOTPNumn = 8;
                                                                if (rsPolicy[0].length > 0) {
                                                                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                                        if (EscapeUtils.CheckTextNull(rsPolicy1.NAME).equals(Definitions.CONFIG_POLICY_FO_DEFAULT_ACTIVATION_CODE_LENGTH)) {
                                                                            intOTPNumn = Integer.parseInt(rsPolicy1.VALUE);
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                                //</editor-fold>
                                                                if (raServiceReq.backupKeyEnabled == true) {
                                                                    CheckPRIVATE_KEY = "1";
                                                                } else {
                                                                    CheckPRIVATE_KEY = "0";
                                                                }
                                                                pRESPONSE_CODE_NAME[0] = "10000";
                                                                //<editor-fold defaultstate="collapsed" desc="### INSERT CERT AND ACTIVATION CODE">
                                                                while ("10000".equals(pRESPONSE_CODE_NAME[0])) {
                                                                    try {
                                                                        String sOTP = "";
                                                                        sOTP = CommonFunction.getRandomOTP(intOTPNumn);
                                                                        if(raServiceReq.activationCodeEnabled == true) {
                                                                            raServiceResp.activationCode = sOTP;
                                                                        }
                                                                        db.S_BO_API_CERTIFICATION_INSERT(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), sTOKEN_SN,
                                                                            sCERTIFICATION_SN, sPersonalCompoment, sCompanyCompoment, sDomainCompoment,
                                                                            sDNResult, sCoreCASubject, EscapeUtils.CheckTextNull(raServiceReq.phoneContact),
                                                                            EscapeUtils.CheckTextNull(raServiceReq.emailContact),
                                                                            sProvinceCodeComponent, pPAST_CERTIFICATION_SN, sOTP, pCERTIFICATION_ATTR_TYPE_CODE,
                                                                            strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser),
                                                                            EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), sCSR,
                                                                            EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode), CheckCHANGE_KEY, CheckPRIVATE_KEY,
                                                                            EscapeUtils.CheckTextNull(raServiceReq.formFactorCode), sDeviceUUID.trim(), sPromotionDuration, pRESPONSE_CODE_NAME, pCERTIFICATION_ID,
                                                                            pCERTIFICATE_ATTR_ID, raServiceReq.certificateOwnerID, pEFFECTIVE_DT, null, sEnterpriseCert, sPersonalCert);
                                                                        CommonFunction.LogDebugString(log, sTOKEN_SN + " - S_BO_API_CERTIFICATION_INSERT - RESULT", pRESPONSE_CODE_NAME[0]);
                                                                    } catch (Exception e) {
                                                                        if (e.getMessage().contains(Definitions.CONFIG_MYSQL_UNIQUE_ACTIVATION_CODE)) {
                                                                            pRESPONSE_CODE_NAME[0] = "10000";
                                                                        } else {
                                                                            pRESPONSE_CODE_NAME[0] = String.valueOf(Definitions.CONFIG_WS_RESPONSE_CODE_EXCEPTION);
                                                                            CommonFunction.LogExceptionServlet(log, e.getMessage().trim(), e);
                                                                        }
                                                                    }
                                                                }
                                                                //</editor-fold>

                                                                if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                                                    raServiceResp.certificateID = pCERTIFICATION_ID[0];
                                                                    raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                    if(!"".equals(strDNSName)) {
                                                                        db.S_BO_CERTIFICATION_UPDATE_PROPERTIES(String.valueOf(pCERTIFICATION_ID[0]), strDNSName, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                                    }
                                                                    if("1".equals(sRepresentEnabled)) {
                                                                        //<editor-fold defaultstate="collapsed" desc="### REPRESENTIVE PROCESS">
                                                                        ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                                                        ProfileContactInfoJson profileContact = new ProfileContactInfoJson();
                                                                        profileContact.RepresentativeName = CommonFunction.replaceCharaterSpecialJson(sRepresentative, true);
                                                                        profileContact.Position = CommonFunction.replaceCharaterSpecialJson(sRepresentativePosition, true);
                                                                        profileContact.RepresentativePhone = "";
                                                                        profileContact.PIDIssuedBy = CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.placeIssuance), true);
                                                                        profileContact.PIDDate = EscapeUtils.CheckTextNull(jsonReqExpand.dateIssuance);
                                                                        profileContact.PID = EscapeUtils.CheckTextNull(jsonReqExpand.personalID);
                                                                        profileContact.AddressLicense = CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.businessLicenseAddress), true);
                                                                        profileContact.RepresentativeEmail = "";
                                                                        profileContact.ContactName = "";
                                                                        profileContact.Address = CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.permanentResidence), true);
                                                                        objectMapper = new ObjectMapper();
                                                                        BACKOFFICE_USER[][] rsUserID = new BACKOFFICE_USER[1][0];
                                                                        db.S_BO_USER_GET_BY_USERNAME(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), rsUserID);
                                                                        if(rsUserID != null && rsUserID[0].length > 0){
                                                                            db.S_BO_CERTIFICATION_UPDATE_CONTACT_INFO(pCERTIFICATION_ID[0], objectMapper.writeValueAsString(profileContact), String.valueOf(rsUserID[0][0].ID));
                                                                        }
                                                                        //</editor-fold>
                                                                    }
                                                                    
                                                                    //<editor-fold defaultstate="collapsed" desc="### File Attach: Check Add to JRB">
                                                                    if (isHasFileClient == true) {
                                                                        String sJRBConfig = "";
                                                                        if (rsPolicy[0].length > 0) {
                                                                            for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                                                if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DMS_PROPERTIES_CURRENT)) {
                                                                                    sJRBConfig = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                        if (!"".equals(sJRBConfig)) {
                                                                            String sJRB_Source = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_SOURCE);
                                                                            if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_EFY)) {
                                                                                String sIP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_IP);
                                                                                String sHTTP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PROTOCOL);
                                                                                String sCONTEXT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_CONTEXT);
                                                                                String sPORT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PORT);
                                                                                String sDEFAULT_USER = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERNAME);
                                                                                String sDEFAULT_PASS = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PASSWORD);
                                                                                String sOWNERCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_OWNERCODE);
                                                                                String sAPPCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_APPCODE);
                                                                                String sFUNCTION_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_FUNCTION_UP);
                                                                                String idUUID_Temp = Definitions.CONFIG_JACK_RABBIT_UUID_SAMPLE;
                                                                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                    String sFileData = new String(Base64.encodeBase64(fileManagerInsert.fileByte), "UTF-8"); //EscapeUtils.CheckTextNull(mhIP.FILE_URL);//CommonFunction.encodeFileToBase64Binary(fileUp);
                                                                                    CloseableHttpResponse pHttpRes = ConnectFileToPartner.upFileParner(sIP_CONNECT, sHTTP_CONNECT,
                                                                                            sCONTEXT_CONNECT, Integer.parseInt(sPORT_CONNECT), sDEFAULT_USER,
                                                                                            sDEFAULT_PASS, sOWNERCODE_CONNECT, sAPPCODE_CONNECT, sFUNCTION_CONNECT, idUUID_Temp,
                                                                                            fileManagerInsert.fileName, sFileData);
                                                                                    InputStream isStr = pHttpRes.getEntity().getContent();
                                                                                    String resultUUID = IOUtils.toString(isStr);
                                                                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", resultUUID);
                                                                                    String sMimeType = fileManagerInsert.mimeType;
                                                                                    int[] pFILE_MANAGER_ID = new int[1];
                                                                                    db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, resultUUID, sJRBConfig,
                                                                                            sMimeType, fileManagerInsert.fileName, fileManagerInsert.fileByte.length,
                                                                                            pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                }
                                                                            } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_JRB)) {
                                                                                String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                    String sMimeType = fileManagerInsert.mimeType;
                                                                                    JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
                                                                                            Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                    InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
                                                                                    JCRFile jrbFile = JackRabbitCommon.getInstance(jcrConfig).uploadFile(fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                    if(jrbFile != null){
                                                                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", jrbFile.getUuid());
                                                                                    int[] pFILE_MANAGER_ID = new int[1];
                                                                                    db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, jrbFile.getUuid(), sJRBConfig,
                                                                                            jrbFile.getMimeType(), jrbFile.getFileName(), fileManagerInsert.fileByte.length,
                                                                                            pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                    }
                                                                                }
                                                                            } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_MID)) {
                                                                                String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                    String sMimeType = fileManagerInsert.mimeType;
        //                                                                            JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
        //                                                                                Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                    InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
        //                                                                            JCRFile jrbFile = JackRabbitCommon.uploadFile(jcrConfig, fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                    ConnectJackRabbitNew openJRB = new ConnectJackRabbitNew(sJRB_Host, sJRB_UserID, sJRB_UserPass,
                                                                                            Integer.parseInt(sJRB_MaxSession), Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                    String[] sReturnJRB = new String[2];
                                                                                    vn.mobileid.fms.client.JCRFile jrbFile = openJRB.uploadFile(EscapeUtils.CheckTextNull(fileManagerInsert.fileName),
                                                                                            EscapeUtils.CheckTextNull(sMimeType), isFILE_STREAM, sReturnJRB);
                                                                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", sReturnJRB[0].trim());
                                                                                    int[] pFILE_MANAGER_ID = new int[1];
                                                                                    db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, sReturnJRB[0].trim(), sJRBConfig,
                                                                                            sMimeType, sReturnJRB[1].trim(), fileManagerInsert.fileByte.length,
                                                                                            pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                }
                                                                            } else {
                                                                            }
                                                                        }
                                                                    }
                                                                    //</editor-fold>

                                                                    //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                                                    if (intLevelApprove == 1 || intLevelApprove == 2) {
                                                                        String sLevelBranch = db.S_BO_API_GET_LEVEL_BY_BRANCH_CODE(raServiceReq.beneficiaryBranch);
                                                                        if(!sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CA) && !sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CHILREN_ONE))
                                                                        {
                                                                            int approveChilrenID = 0;
                                                                            String approveChilrenUser = raServiceReq.approveUser;
                                                                            String approveChilrenFullname = raFullname;
                                                                            BRANCH[][] rsBranch = new BRANCH[1][];
                                                                            BACKOFFICE_USER[][] rsUserApprove;
                                                                            rsUserApprove = new BACKOFFICE_USER[1][];
                                                                            String roleUserID = "";
                                                                            db.S_BO_USER_GET_BY_USERNAME(raServiceReq.beneficiaryUser, rsUserApprove);
                                                                            if(rsUserApprove[0].length > 0){
                                                                                roleUserID = String.valueOf(rsUserApprove[0][0].ROLE_ID);
                                                                            }
                                                                            if(roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN) || roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                approveChilrenID = rsUserApprove[0][0].ID;
                                                                                approveChilrenUser = rsUserApprove[0][0].USERNAME;
                                                                                approveChilrenFullname = rsUserApprove[0][0].FULL_NAME;
                                                                            } else {
                                                                                rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                db.S_BO_USER_GET_BY_USERNAME(raServiceReq.approveUser, rsUserApprove);
                                                                                if(rsUserApprove[0].length > 0) {
                                                                                    approveChilrenID = rsUserApprove[0][0].ID;
                                                                                }
                                                                                db.S_BO_API_BRANCH_GET_INFO(raServiceReq.beneficiaryBranch, rsBranch);
                                                                                if(rsBranch[0].length > 0) {
                                                                                    rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                    db.S_BO_GET_USER_BRANCH_ALL(String.valueOf(rsBranch[0][0].ID), rsUserApprove);
                                                                                    if(rsUserApprove[0].length > 0) {
                                                                                        boolean isHasAdmin = false;
                                                                                        for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                            if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN)) {
                                                                                                isHasAdmin = true;
                                                                                                approveChilrenID = item.ID;
                                                                                                approveChilrenUser = item.USERNAME;
                                                                                                approveChilrenFullname = item.FULL_NAME;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        if(isHasAdmin == false){
                                                                                            for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                                if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                                    approveChilrenID = item.ID;
                                                                                                    approveChilrenUser = item.USERNAME;
                                                                                                    approveChilrenFullname = item.FULL_NAME;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                                                            valueATTR.setApproveUser(approveChilrenFullname + " (" + approveChilrenUser + ")");
                                                                            valueATTR.setApproveDt(new Date());
                                                                            strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                            db.S_BO_CERTIFICATION_PRE_APPROVED_BY_LOW_LEVEL_BRANCH(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, raServiceReq.approveUser, approveChilrenID);
                                                                        }

                                                                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                                                        valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                        valueATTR.setApproveDt(new Date());
                                                                        strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                        String sPRE_APPROVED = db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                        if("0".equals(sPRE_APPROVED)) {
                                                                            raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                        } else {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                        }
                                                                    }
                                                                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                                        if (intLevelApprove == 2) {
                                                                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                                                            valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                            valueATTR.setApproveCADt(new Date());
                                                                            strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                            String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                            if ("0".equals(sApprove)) {
                                                                                // DISCOUNT RATE
                                                                                if ("1".equals(sDiscountRateOption)) {
                                                                                    CommonReferServlet.updateDiscountRateImportCert(String.valueOf(raServiceResp.certificateID),
                                                                                        EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode),
                                                                                        "", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.approveUser),
                                                                                        "", "", sEnterpriseCert, sPersonalCert);
                                                                                }
                                                                                // SET COMMIT_ENABLED TRUE of FILE
                                                                                db.S_BO_API_CERTIFICATION_SUPPLEMENT_FILE(pCERTIFICATE_ATTR_ID[0], raServiceReq.approveUser, pRESPONSE_CODE_NAME);
                                                                                String pushNoticeEnabled = "0";
                                                                                boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                                                                if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                                                                    pushNoticeEnabled = "1";
                                                                                }
                                                                                db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                // select get cert with pCERTIFICATION_ID[0]
                                                                                int[] pRESPONSE_CODE = new int[1];
                                                                                CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                                                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0], "", "",
                                                                                        raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                                                if (certInfo[0].length > 0) {
                                                                                    raServiceResp.certificate = certInfo[0][0].certificate;
                                                                                }
                                                                                if ("1".equals(pushNoticeEnabled)) {
                                                                                    int[] intRes = new int[1];
                                                                                    String[] sRes = new String[1];
                                                                                    ConnectConnector.SendMailOTP(String.valueOf(pCERTIFICATION_ID[0]), intRes, sRes);
                                                                                }
                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                            } else {
                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                            }
                                                                        } else {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                        }
                                                                    }
                                                                    //</editor-fold>
                                                                } else {
                                                                    raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                                                }
                                                            } else if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                                                || (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)
                                                                    && sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SN_FORMFACTOR_ESIGNCLOUD)))
                                                            {
                                                                String strPasswordP12 = "";
                                                                //// check if signserver cert
                                                                boolean isValidCSR = true;
                                                                //<editor-fold defaultstate="collapsed" desc="### CSR: check valid">
                                                                if (!"".equals(sCSR)) {
                                                                    CheckPRIVATE_KEY = "0";
                                                                    String sIsCA = conf.GetTryPropertybyCode(Definitions.CONFIG_IS_WHICH_ABOUT_CA);
                                                                    if(!sIsCA.equals(Definitions.CONFIG_IS_WHICH_ABOUT_CA_VGCA)) {
                                                                        String sKeySizeDB;
                                                                        isValidCSR = false;
                                                                        CERTIFICATION[][] rsCert = new CERTIFICATION[1][];
                                                                        db.S_BO_API_GET_ALGORITHM_KEY_SIZE(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), rsCert);
                                                                        if (rsCert[0].length > 0) {
                                                                            sKeySizeDB = EscapeUtils.CheckTextNull(rsCert[0][0].KEY_SIZE);
                                                                            String sKeySizeCSR = CommonFunction.getKeySizeFromCSR(sCSR);
                                                                            isValidCSR = sKeySizeDB.equals(sKeySizeCSR);
                                                                        }
                                                                    }
//                                                                    if(isValidCSR == true) {
//                                                                        String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
//                                                                        int checkPublicKey = db.S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH("", "", sPublicKeyHard);
//                                                                        // call store cert Operation check exist sPublicKeyHard
//                                                                        if(checkPublicKey == 0) {
//                                                                            checkCSRNotExists = true;
//                                                                        } else {
//                                                                            checkCSRNotExists = false;
//                                                                        }
//                                                                    }
                                                                } else {
                                                                    CheckPRIVATE_KEY = "1";
                                                                    if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                                                        strPasswordP12 = EscapeUtils.CheckTextNull(raServiceReq.p12Password);
                                                                    } else {
                                                                        strPasswordP12 = CommonFunction.randomPasswordP12(8);
                                                                    }
                                                                }
                                                                if(EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)){
                                                                    if(sISSUE_P12_ENABLED.equals("0")) {
                                                                        if ("".equals(sCSR)) {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EMPTY;
                                                                        }
                                                                    }
                                                                }
                                                                //</editor-fold>
                                                                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                                    if (isValidCSR == true) {
                                                                        if (checkCSRNotExists == true) {
                                                                            db.S_BO_API_CERTIFICATION_INSERT(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), sTOKEN_SN,
                                                                                sCERTIFICATION_SN, sPersonalCompoment, sCompanyCompoment, sDomainCompoment,
                                                                                sDNResult, sCoreCASubject, EscapeUtils.CheckTextNull(raServiceReq.phoneContact), EscapeUtils.CheckTextNull(raServiceReq.emailContact),
                                                                                sProvinceCodeComponent, pPAST_CERTIFICATION_SN, "", pCERTIFICATION_ATTR_TYPE_CODE,
                                                                                strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), sCSR,
                                                                                EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode), CheckCHANGE_KEY, CheckPRIVATE_KEY,
                                                                                EscapeUtils.CheckTextNull(raServiceReq.formFactorCode), sDeviceUUID, sPromotionDuration,
                                                                                pRESPONSE_CODE_NAME, pCERTIFICATION_ID, pCERTIFICATE_ATTR_ID, raServiceReq.certificateOwnerID,
                                                                                pEFFECTIVE_DT, null, sEnterpriseCert, sPersonalCert);
                                                                            CommonFunction.LogDebugString(log, sTOKEN_SN + " - S_BO_API_CERTIFICATION_INSERT - RESULT", pRESPONSE_CODE_NAME[0]);
                                                                            if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                                                                // PROPERTIES SAN
                                                                                if(!"".equals(strDNSName)) {
                                                                                    db.S_BO_CERTIFICATION_UPDATE_PROPERTIES(String.valueOf(pCERTIFICATION_ID[0]), strDNSName, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                                                }
                                                                                if("1".equals(sRepresentEnabled)) {
                                                                                    //<editor-fold defaultstate="collapsed" desc="### REPRESENTIVE PROCESS">
                                                                                    ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                                                                    ProfileContactInfoJson profileContact = new ProfileContactInfoJson();
                                                                                    profileContact.RepresentativeName = CommonFunction.replaceCharaterSpecialJson(sRepresentative, true);
                                                                                    profileContact.Position = CommonFunction.replaceCharaterSpecialJson(sRepresentativePosition, true);
                                                                                    profileContact.RepresentativePhone = "";
                                                                                    profileContact.PIDIssuedBy = CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.placeIssuance), true);
                                                                                    profileContact.PIDDate = EscapeUtils.CheckTextNull(jsonReqExpand.dateIssuance);
                                                                                    profileContact.PID = EscapeUtils.CheckTextNull(jsonReqExpand.personalID);
                                                                                    profileContact.AddressLicense = CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.businessLicenseAddress), true);
                                                                                    profileContact.RepresentativeEmail = "";
                                                                                    profileContact.ContactName = "";
                                                                                    profileContact.Address = CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.permanentResidence), true);
                                                                                    objectMapper = new ObjectMapper();
                                                                                    BACKOFFICE_USER[][] rsUserID = new BACKOFFICE_USER[1][0];
                                                                                    db.S_BO_USER_GET_BY_USERNAME(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), rsUserID);
                                                                                    if(rsUserID != null && rsUserID[0].length > 0) {
                                                                                        db.S_BO_CERTIFICATION_UPDATE_CONTACT_INFO(pCERTIFICATION_ID[0], objectMapper.writeValueAsString(profileContact), String.valueOf(rsUserID[0][0].ID));
                                                                                    }
                                                                                    //</editor-fold>
                                                                                }
                                                                                /*if(!"".equals(sRepresentative) || !"".equals(sRepresentativePosition)) {
                                                                                    ProfileContactInfoJson profileContact = new ProfileContactInfoJson();
                                                                                    profileContact.RepresentativeName = CommonFunction.replaceCharaterSpecialJson(sRepresentative, true);
                                                                                    profileContact.Position = CommonFunction.replaceCharaterSpecialJson(sRepresentativePosition, true);
                                                                                    objectMapper = new ObjectMapper();
                                                                                    BACKOFFICE_USER[][] rsUserID = new BACKOFFICE_USER[1][0];
                                                                                    db.S_BO_USER_GET_BY_USERNAME(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), rsUserID);
                                                                                    if(rsUserID != null && rsUserID[0].length > 0){
                                                                                        db.S_BO_CERTIFICATION_UPDATE_CONTACT_INFO(pCERTIFICATION_ID[0], objectMapper.writeValueAsString(profileContact), String.valueOf(rsUserID[0][0].ID));
                                                                                    }
                                                                                }*/

                                                                                //<editor-fold defaultstate="collapsed" desc="### PUBLIC KEY HASH">
                                                                                if(!"".equals(sCSR)) {
                                                                                    String sKeySizeCSR = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                                                    db.S_BO_CERTIFICATION_UPDATE_CSR_INFO(pCERTIFICATION_ID[0], sKeySizeCSR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                                                }
                                                                                //</editor-fold>

                                                                                raServiceResp.certificateID = pCERTIFICATION_ID[0];
                                                                                raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                                //<editor-fold defaultstate="collapsed" desc="### File Attach: Check Add to JRB">
                                                                                if (isHasFileClient == true) {
                                                                                    String sJRBConfig = "";
                                                                                    if (rsPolicy[0].length > 0) {
                                                                                        for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                                                            if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DMS_PROPERTIES_CURRENT)) {
                                                                                                sJRBConfig = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if (!"".equals(sJRBConfig)) {
                                                                                        String sJRB_Source = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_SOURCE);
                                                                                        if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_EFY)) {
                                                                                            String sIP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_IP);
                                                                                            String sHTTP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PROTOCOL);
                                                                                            String sCONTEXT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_CONTEXT);
                                                                                            String sPORT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PORT);
                                                                                            String sDEFAULT_USER = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERNAME);
                                                                                            String sDEFAULT_PASS = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PASSWORD);
                                                                                            String sOWNERCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_OWNERCODE);
                                                                                            String sAPPCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_APPCODE);
                                                                                            String sFUNCTION_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_FUNCTION_UP);
                                                                                            String idUUID_Temp = Definitions.CONFIG_JACK_RABBIT_UUID_SAMPLE;
                                                                                            for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                                String sFileData = new String(Base64.encodeBase64(fileManagerInsert.fileByte), "UTF-8"); //EscapeUtils.CheckTextNull(mhIP.FILE_URL);//CommonFunction.encodeFileToBase64Binary(fileUp);
                                                                                                CloseableHttpResponse pHttpRes = ConnectFileToPartner.upFileParner(sIP_CONNECT, sHTTP_CONNECT,
                                                                                                        sCONTEXT_CONNECT, Integer.parseInt(sPORT_CONNECT), sDEFAULT_USER,
                                                                                                        sDEFAULT_PASS, sOWNERCODE_CONNECT, sAPPCODE_CONNECT, sFUNCTION_CONNECT, idUUID_Temp,
                                                                                                        fileManagerInsert.fileName, sFileData);
                                                                                                InputStream isStr = pHttpRes.getEntity().getContent();
                                                                                                String resultUUID = IOUtils.toString(isStr);
                                                                                                CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", resultUUID);
                                                                                                String sMimeType = fileManagerInsert.mimeType;
                                                                                                int[] pFILE_MANAGER_ID = new int[1];
                                                                                                db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, resultUUID, sJRBConfig,
                                                                                                        sMimeType, fileManagerInsert.fileName, fileManagerInsert.fileByte.length,
                                                                                                        pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                            }
                                                                                        } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_JRB)) {
                                                                                            String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                            String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                            String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                            String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                            String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                            String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                            String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                            for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                                String sMimeType = fileManagerInsert.mimeType;
                                                                                                JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
                                                                                                        Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                                InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
                                                                                                JCRFile jrbFile = JackRabbitCommon.getInstance(jcrConfig).uploadFile(fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                                if(jrbFile != null){
                                                                                                CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", jrbFile.getUuid());
                                                                                                int[] pFILE_MANAGER_ID = new int[1];
                                                                                                db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, jrbFile.getUuid(), sJRBConfig,
                                                                                                        jrbFile.getMimeType(), jrbFile.getFileName(), fileManagerInsert.fileByte.length,
                                                                                                        pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                                }
                                                                                            }
                                                                                        } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_MID)) {
                                                                                            String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                            String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                            String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                            String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                            String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                            String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                            String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                            for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                                String sMimeType = fileManagerInsert.mimeType;
                //                                                                                JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
                //                                                                                    Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                                InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
                //                                                                                JCRFile jrbFile = JackRabbitCommon.uploadFile(jcrConfig, fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                                ConnectJackRabbitNew openJRB = new ConnectJackRabbitNew(sJRB_Host, sJRB_UserID, sJRB_UserPass,
                                                                                                        Integer.parseInt(sJRB_MaxSession), Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                                String[] sReturnJRB = new String[2];
                                                                                                vn.mobileid.fms.client.JCRFile jrbFile = openJRB.uploadFile(EscapeUtils.CheckTextNull(fileManagerInsert.fileName),
                                                                                                        EscapeUtils.CheckTextNull(sMimeType), isFILE_STREAM, sReturnJRB);
                                                                                                CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", jrbFile.getUuid());
                                                                                                int[] pFILE_MANAGER_ID = new int[1];
                                                                                                db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, sReturnJRB[0].trim(), sJRBConfig,
                                                                                                        sMimeType, sReturnJRB[1].trim(), fileManagerInsert.fileByte.length,
                                                                                                        pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                            }
                                                                                        } else {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                //</editor-fold>

                                                                                //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                                                                if (intLevelApprove == 1 || intLevelApprove == 2) {
                                                                                    String sLevelBranch = db.S_BO_API_GET_LEVEL_BY_BRANCH_CODE(raServiceReq.beneficiaryBranch);
                                                                                    if(!sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CA) && !sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CHILREN_ONE))
                                                                                    {
                                                                                        int approveChilrenID = 0;
                                                                                        String approveChilrenUser = raServiceReq.approveUser;
                                                                                        String approveChilrenFullname = raFullname;
                                                                                        BRANCH[][] rsBranch = new BRANCH[1][];
                                                                                        BACKOFFICE_USER[][] rsUserApprove;
                                                                                        rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                        String roleUserID = "";
                                                                                        db.S_BO_USER_GET_BY_USERNAME(raServiceReq.beneficiaryUser, rsUserApprove);
                                                                                        if(rsUserApprove[0].length > 0){
                                                                                            roleUserID = String.valueOf(rsUserApprove[0][0].ROLE_ID);
                                                                                        }
                                                                                        if(roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN) || roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                            approveChilrenID = rsUserApprove[0][0].ID;
                                                                                            approveChilrenUser = rsUserApprove[0][0].USERNAME;
                                                                                            approveChilrenFullname = rsUserApprove[0][0].FULL_NAME;
                                                                                        } else {
                                                                                            rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                            db.S_BO_USER_GET_BY_USERNAME(raServiceReq.approveUser, rsUserApprove);
                                                                                            if(rsUserApprove[0].length > 0) {
                                                                                                approveChilrenID = rsUserApprove[0][0].ID;
                                                                                            }
                                                                                            db.S_BO_API_BRANCH_GET_INFO(raServiceReq.beneficiaryBranch, rsBranch);
                                                                                            if(rsBranch[0].length > 0) {
                                                                                                rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                                db.S_BO_GET_USER_BRANCH_ALL(String.valueOf(rsBranch[0][0].ID), rsUserApprove);
                                                                                                if(rsUserApprove[0].length > 0) {
                                                                                                    boolean isHasAdmin = false;
                                                                                                    for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                                        if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN)) {
                                                                                                            isHasAdmin = true;
                                                                                                            approveChilrenID = item.ID;
                                                                                                            approveChilrenUser = item.USERNAME;
                                                                                                            approveChilrenFullname = item.FULL_NAME;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    if(isHasAdmin == false){
                                                                                                        for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                                            if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                                                approveChilrenID = item.ID;
                                                                                                                approveChilrenUser = item.USERNAME;
                                                                                                                approveChilrenFullname = item.FULL_NAME;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                                                                        valueATTR.setApproveUser(approveChilrenFullname + " (" + approveChilrenUser + ")");
                                                                                        valueATTR.setApproveDt(new Date());
                                                                                        strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                                        db.S_BO_CERTIFICATION_PRE_APPROVED_BY_LOW_LEVEL_BRANCH(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, raServiceReq.approveUser, approveChilrenID);
                                                                                    }
                                                                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                                                                    valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                                    valueATTR.setApproveDt(new Date());
                                                                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                                    String sPRE_APPROVED = db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                    if("0".equals(sPRE_APPROVED)) {
                                                                                        raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                                    } else {
                                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                                    }
                                                                                }
                                                                                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                                                    if (intLevelApprove == 2) {
                                                                                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                                                                        valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                                        valueATTR.setApproveCADt(new Date());
                                                                                        strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                                        String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                        if ("0".equals(sApprove)) {
                                                                                            // DISCOUNT RATE
                                                                                            if ("1".equals(sDiscountRateOption)) {
                                                                                                CommonReferServlet.updateDiscountRateImportCert(String.valueOf(raServiceResp.certificateID),
                                                                                                    EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode),
                                                                                                    "", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.approveUser), "", "", sEnterpriseCert, sPersonalCert);
                                                                                            }
                                                                                            // SET COMMIT_ENABLED TRUE of FILE
                                                                                            db.S_BO_API_CERTIFICATION_SUPPLEMENT_FILE(pCERTIFICATE_ATTR_ID[0], raServiceReq.approveUser, pRESPONSE_CODE_NAME);

                                                                                            //<editor-fold defaultstate="collapsed" desc="### UPDATE SEND EMAIL CERT">
                                                                                            if (sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SIGNSERVER_SN) || sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SN_FORMFACTOR_ESIGNCLOUD)) {
                                                                                                if (!"".equals(sCSR)) {
                                                                                                    String pushNoticeEnabled = "0";
                                                                                                    boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                                                                                    if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                                                                                        pushNoticeEnabled = "1";
                                                                                                    }
                                                                                                    db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                                } else {
                                                                                                    String p12EmailEnabled = "0";
                                                                                                    boolean p12EmailCertServer = CommonFunction.getP12EmailEnabledCert(sCERT_POLICY_PROPERTIES);
                                                                                                    if (raServiceReq.p12EmailEnabled == true && p12EmailCertServer == true) {
                                                                                                        p12EmailEnabled = "1";
                                                                                                    }
                                                                                                    db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", p12EmailEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                                }
                                                                                            } else {
                                                                                                String pushNoticeEnabled = "0";
                                                                                                boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                                                                                if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                                                                                    pushNoticeEnabled = "1";
                                                                                                }
                                                                                                db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                            }
                                                                                            //</editor-fold>

                                                                                            ConnectDbPhaseTwo dbTwo = new ConnectDbPhaseTwo();
                                                                                            dbTwo.S_BO_CERTIFICATION_ATTR_UPDATE_ACTIVATED_ENABLED(pCERTIFICATE_ATTR_ID[0], 1);

                                                                                            int[] intWSRes = new int[1];
                                                                                            String[] sWSRes = new String[1];
                                                                                            ConnectConnector.EnrollCertificate(sTOKEN_SN, strPasswordP12, String.valueOf(pCERTIFICATE_ATTR_ID[0]), intWSRes, sWSRes);
                                                                                            if (intWSRes[0] == 0) {
                                                                                                // select get cert with pCERTIFICATION_ID[0]
                                                                                                int[] pRESPONSE_CODE = new int[1];
                                                                                                CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                                                                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0], "", "",
                                                                                                        raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                                                                if (certInfo[0].length > 0) {
                                                                                                    raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                                                                    raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                                                                    if(EscapeUtils.CheckTextNull(raServiceReq.certificateFormatType).equals("CERT")){
                                                                                                        byte[] sXML = DatatypeConverter.parseBase64Binary(certInfo[0][0].certificate);
                                                                                                        raServiceResp.byteCertificate = sXML;
                                                                                                    } else {
                                                                                                        raServiceResp.certificate = certInfo[0][0].certificate;
                                                                                                    }
                                                                                                }
                                                                                                if (!"".equals(strPasswordP12)) {
                                                                                                    int[] intRes = new int[1];
                                                                                                    String[] sRes = new String[1];
                                                                                                    byte[] sP12Return = ConnectConnector.generateKeystore(strPasswordP12, false, String.valueOf(pCERTIFICATION_ID[0]), intRes, sRes);
                                                                                                    raServiceResp.p12Certificate = sP12Return;
                                                                                                }
                                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                                            } else {
                                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                                                                            }
                                                                                        } else {
                                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                                        }
                                                                                    } else {
                                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                                    }
                                                                                }
                                                                                //</editor-fold>

                                                                                // return pass p12
                                                                                if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                                                                    if (!"".equals(strPasswordP12)) {
                                                                                        raServiceResp.p12Password = strPasswordP12;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                                                            }
                                                                        } else {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EXISTS;
                                                                        }
                                                                    } else {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_KEYSIZE;
                                                                    }
                                                                }
                                                            } else if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN)
                                                                && sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SIGNSERVER_SN))
                                                            {
                                                                if (raServiceReq.backupKeyEnabled == true) {
                                                                    CheckPRIVATE_KEY = "1";
                                                                } else {
                                                                    CheckPRIVATE_KEY = "0";
                                                                }
                                                                sCSR = "";
                                                                //<editor-fold defaultstate="collapsed" desc="### INSERT CERT">
                                                                db.S_BO_API_CERTIFICATION_INSERT(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), sTOKEN_SN,
                                                                    sCERTIFICATION_SN, sPersonalCompoment, sCompanyCompoment, sDomainCompoment,
                                                                    sDNResult, sCoreCASubject, EscapeUtils.CheckTextNull(raServiceReq.phoneContact),
                                                                    EscapeUtils.CheckTextNull(raServiceReq.emailContact),
                                                                    sProvinceCodeComponent, pPAST_CERTIFICATION_SN, "", pCERTIFICATION_ATTR_TYPE_CODE,
                                                                    strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser),
                                                                    EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), sCSR,
                                                                    EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode), CheckCHANGE_KEY, CheckPRIVATE_KEY,
                                                                    EscapeUtils.CheckTextNull(raServiceReq.formFactorCode), sDeviceUUID.trim(), sPromotionDuration, pRESPONSE_CODE_NAME, pCERTIFICATION_ID,
                                                                    pCERTIFICATE_ATTR_ID, raServiceReq.certificateOwnerID, pEFFECTIVE_DT, null, sEnterpriseCert, sPersonalCert);
                                                                
                                                                //</editor-fold>

                                                                if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                                                    raServiceResp.certificateID = pCERTIFICATION_ID[0];
                                                                    raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                    if(!"".equals(strDNSName)) {
                                                                        db.S_BO_CERTIFICATION_UPDATE_PROPERTIES(String.valueOf(pCERTIFICATION_ID[0]), strDNSName, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                                    }
                                                                    if("1".equals(sRepresentEnabled)) {
                                                                        //<editor-fold defaultstate="collapsed" desc="### REPRESENTIVE PROCESS">
                                                                        ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                                                        ProfileContactInfoJson profileContact = new ProfileContactInfoJson();
                                                                        profileContact.RepresentativeName = CommonFunction.replaceCharaterSpecialJson(sRepresentative, true);
                                                                        profileContact.Position = CommonFunction.replaceCharaterSpecialJson(sRepresentativePosition, true);
                                                                        profileContact.RepresentativePhone = "";
                                                                        profileContact.PIDIssuedBy = CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.placeIssuance), true);
                                                                        profileContact.PIDDate = EscapeUtils.CheckTextNull(jsonReqExpand.dateIssuance);
                                                                        profileContact.PID = EscapeUtils.CheckTextNull(jsonReqExpand.personalID);
                                                                        profileContact.AddressLicense = CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.businessLicenseAddress), true);
                                                                        profileContact.RepresentativeEmail = "";
                                                                        profileContact.ContactName = "";
                                                                        profileContact.Address = CommonFunction.replaceCharaterSpecialJson(EscapeUtils.CheckTextNull(jsonReqExpand.permanentResidence), true);
                                                                        objectMapper = new ObjectMapper();
                                                                        BACKOFFICE_USER[][] rsUserID = new BACKOFFICE_USER[1][0];
                                                                        db.S_BO_USER_GET_BY_USERNAME(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), rsUserID);
                                                                        if(rsUserID != null && rsUserID[0].length > 0) {
                                                                            db.S_BO_CERTIFICATION_UPDATE_CONTACT_INFO(pCERTIFICATION_ID[0], objectMapper.writeValueAsString(profileContact), String.valueOf(rsUserID[0][0].ID));
                                                                        }
                                                                        //</editor-fold>
                                                                    }
                                                                    /*if(!"".equals(sRepresentative) || !"".equals(sRepresentativePosition)) {
                                                                        ProfileContactInfoJson profileContact = new ProfileContactInfoJson();
                                                                        profileContact.RepresentativeName = CommonFunction.replaceCharaterSpecialJson(sRepresentative, true);
                                                                        profileContact.Position = CommonFunction.replaceCharaterSpecialJson(sRepresentativePosition, true);
                                                                        objectMapper = new ObjectMapper();
                                                                        BACKOFFICE_USER[][] rsUserID = new BACKOFFICE_USER[1][0];
                                                                        db.S_BO_USER_GET_BY_USERNAME(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), rsUserID);
                                                                        if(rsUserID != null && rsUserID[0].length > 0){
                                                                            db.S_BO_CERTIFICATION_UPDATE_CONTACT_INFO(pCERTIFICATION_ID[0], objectMapper.writeValueAsString(profileContact), String.valueOf(rsUserID[0][0].ID));
                                                                        }
                                                                    }*/
                                                                    
                                                                    //<editor-fold defaultstate="collapsed" desc="### File Attach: Check Add to JRB">
                                                                    if (isHasFileClient == true) {
                                                                        String sJRBConfig = "";
                                                                        if (rsPolicy[0].length > 0) {
                                                                            for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                                                if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DMS_PROPERTIES_CURRENT)) {
                                                                                    sJRBConfig = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                        if (!"".equals(sJRBConfig)) {
                                                                            String sJRB_Source = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_SOURCE);
                                                                            if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_EFY)) {
                                                                                String sIP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_IP);
                                                                                String sHTTP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PROTOCOL);
                                                                                String sCONTEXT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_CONTEXT);
                                                                                String sPORT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PORT);
                                                                                String sDEFAULT_USER = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERNAME);
                                                                                String sDEFAULT_PASS = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PASSWORD);
                                                                                String sOWNERCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_OWNERCODE);
                                                                                String sAPPCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_APPCODE);
                                                                                String sFUNCTION_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_FUNCTION_UP);
                                                                                String idUUID_Temp = Definitions.CONFIG_JACK_RABBIT_UUID_SAMPLE;
                                                                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                    String sFileData = new String(Base64.encodeBase64(fileManagerInsert.fileByte), "UTF-8"); //EscapeUtils.CheckTextNull(mhIP.FILE_URL);//CommonFunction.encodeFileToBase64Binary(fileUp);
                                                                                    CloseableHttpResponse pHttpRes = ConnectFileToPartner.upFileParner(sIP_CONNECT, sHTTP_CONNECT,
                                                                                            sCONTEXT_CONNECT, Integer.parseInt(sPORT_CONNECT), sDEFAULT_USER,
                                                                                            sDEFAULT_PASS, sOWNERCODE_CONNECT, sAPPCODE_CONNECT, sFUNCTION_CONNECT, idUUID_Temp,
                                                                                            fileManagerInsert.fileName, sFileData);
                                                                                    InputStream isStr = pHttpRes.getEntity().getContent();
                                                                                    String resultUUID = IOUtils.toString(isStr);
                                                                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", resultUUID);
                                                                                    String sMimeType = fileManagerInsert.mimeType;
                                                                                    int[] pFILE_MANAGER_ID = new int[1];
                                                                                    db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, resultUUID, sJRBConfig,
                                                                                            sMimeType, fileManagerInsert.fileName, fileManagerInsert.fileByte.length,
                                                                                            pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                }
                                                                            } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_JRB)) {
                                                                                String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                    String sMimeType = fileManagerInsert.mimeType;
                                                                                    JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
                                                                                            Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                    InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
                                                                                    JCRFile jrbFile = JackRabbitCommon.getInstance(jcrConfig).uploadFile(fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                    if(jrbFile != null){
                                                                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", jrbFile.getUuid());
                                                                                    int[] pFILE_MANAGER_ID = new int[1];
                                                                                    db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, jrbFile.getUuid(), sJRBConfig,
                                                                                            jrbFile.getMimeType(), jrbFile.getFileName(), fileManagerInsert.fileByte.length,
                                                                                            pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                    }
                                                                                }
                                                                            } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_MID)) {
                                                                                String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                    String sMimeType = fileManagerInsert.mimeType;
        //                                                                            JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
        //                                                                                Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                    InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
        //                                                                            JCRFile jrbFile = JackRabbitCommon.uploadFile(jcrConfig, fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                    ConnectJackRabbitNew openJRB = new ConnectJackRabbitNew(sJRB_Host, sJRB_UserID, sJRB_UserPass,
                                                                                            Integer.parseInt(sJRB_MaxSession), Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                    String[] sReturnJRB = new String[2];
                                                                                    vn.mobileid.fms.client.JCRFile jrbFile = openJRB.uploadFile(EscapeUtils.CheckTextNull(fileManagerInsert.fileName),
                                                                                            EscapeUtils.CheckTextNull(sMimeType), isFILE_STREAM, sReturnJRB);
                                                                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", sReturnJRB[0].trim());
                                                                                    int[] pFILE_MANAGER_ID = new int[1];
                                                                                    db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, sReturnJRB[0].trim(), sJRBConfig,
                                                                                            sMimeType, sReturnJRB[1].trim(), fileManagerInsert.fileByte.length,
                                                                                            pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                }
                                                                            } else {
                                                                            }
                                                                        }
                                                                    }
                                                                    //</editor-fold>

                                                                    //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                                                    if (intLevelApprove == 1 || intLevelApprove == 2) {
                                                                        String sLevelBranch = db.S_BO_API_GET_LEVEL_BY_BRANCH_CODE(raServiceReq.beneficiaryBranch);
                                                                        if(!sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CA) && !sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CHILREN_ONE)) {
                                                                            int approveChilrenID = 0;
                                                                            String approveChilrenUser = raServiceReq.approveUser;
                                                                            String approveChilrenFullname = raFullname;
                                                                            BRANCH[][] rsBranch = new BRANCH[1][];
                                                                            BACKOFFICE_USER[][] rsUserApprove;
                                                                            rsUserApprove = new BACKOFFICE_USER[1][];
                                                                            String roleUserID = "";
                                                                            db.S_BO_USER_GET_BY_USERNAME(raServiceReq.beneficiaryUser, rsUserApprove);
                                                                            if(rsUserApprove[0].length > 0){
                                                                                roleUserID = String.valueOf(rsUserApprove[0][0].ROLE_ID);
                                                                            }
                                                                            if(roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN) || roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                approveChilrenID = rsUserApprove[0][0].ID;
                                                                                approveChilrenUser = rsUserApprove[0][0].USERNAME;
                                                                                approveChilrenFullname = rsUserApprove[0][0].FULL_NAME;
                                                                            } else {
                                                                                rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                db.S_BO_USER_GET_BY_USERNAME(raServiceReq.approveUser, rsUserApprove);
                                                                                if(rsUserApprove[0].length > 0) {
                                                                                    approveChilrenID = rsUserApprove[0][0].ID;
                                                                                }
                                                                                db.S_BO_API_BRANCH_GET_INFO(raServiceReq.beneficiaryBranch, rsBranch);
                                                                                if(rsBranch[0].length > 0) {
                                                                                    rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                    db.S_BO_GET_USER_BRANCH_ALL(String.valueOf(rsBranch[0][0].ID), rsUserApprove);
                                                                                    if(rsUserApprove[0].length > 0) {
                                                                                        boolean isHasAdmin = false;
                                                                                        for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                            if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN)) {
                                                                                                isHasAdmin = true;
                                                                                                approveChilrenID = item.ID;
                                                                                                approveChilrenUser = item.USERNAME;
                                                                                                approveChilrenFullname = item.FULL_NAME;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        if(isHasAdmin == false){
                                                                                            for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                                if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                                    approveChilrenID = item.ID;
                                                                                                    approveChilrenUser = item.USERNAME;
                                                                                                    approveChilrenFullname = item.FULL_NAME;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                                                            valueATTR.setApproveUser(approveChilrenFullname + " (" + approveChilrenUser + ")");
                                                                            valueATTR.setApproveDt(new Date());
                                                                            strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                            db.S_BO_CERTIFICATION_PRE_APPROVED_BY_LOW_LEVEL_BRANCH(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, raServiceReq.approveUser, approveChilrenID);
                                                                        }

                                                                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                                                        valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                        valueATTR.setApproveDt(new Date());
                                                                        strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                        String sPRE_APPROVED = db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                        if("0".equals(sPRE_APPROVED)) {
                                                                            raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                        } else {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                        }
                                                                    }
                                                                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                                        if (intLevelApprove == 2) {
                                                                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                                                            valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                            valueATTR.setApproveCADt(new Date());
                                                                            strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                            String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                            if ("0".equals(sApprove)) {
                                                                                // DISCOUNT RATE
                                                                                if ("1".equals(sDiscountRateOption)) {
                                                                                    CommonReferServlet.updateDiscountRateImportCert(String.valueOf(raServiceResp.certificateID),
                                                                                        EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode),
                                                                                        "", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.approveUser),
                                                                                        "", "", sEnterpriseCert, sPersonalCert);
                                                                                }
                                                                                // SET COMMIT_ENABLED TRUE of FILE
                                                                                db.S_BO_API_CERTIFICATION_SUPPLEMENT_FILE(pCERTIFICATE_ATTR_ID[0], raServiceReq.approveUser, pRESPONSE_CODE_NAME);
                                                                                String pushNoticeEnabled = "0";
                                                                                db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                                String urlCallback = "";
                                                                                String requestType = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION;
                                                                                BRANCH[][] rsBranch = new BRANCH[1][];
                                                                                db.S_BO_API_BRANCH_GET_INFO(raServiceReq.beneficiaryBranch, rsBranch);
                                                                                if(rsBranch != null && rsBranch[0].length > 0){
                                                                                    urlCallback = rsBranch[0][0].CALLBACK_URL_APPROVED;
                                                                                }
                                                                                ThreadCallbackApproved thhreadLog = new ThreadCallbackApproved(String.valueOf(pCERTIFICATION_ID[0]),
                                                                                    urlCallback, Definitions.CONFIG_OPERATION_TYPE_APPROVED, "", requestType);
                                                                                Thread t = new Thread(thhreadLog);
                                                                                t.start();
                                                                            } else {
                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                            }
                                                                        } else {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                        }
                                                                    }
                                                                    //</editor-fold>
                                                                } else {
                                                                    raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                                                }
                                                            } else {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_NO_DN;
                                                }
                                            } else {
                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_EMAIL_INCERT_INVALID;
                                            }
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_EMPTY;
                                        }
                                    }
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CA_PROFILE_INVALID;
                            }
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_TEMPLATE_CERT_EMPTY;
                        }
                    }
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### registerCertificate2Process">
    public void registerCertificate2Process(String sCERT_PROFILE_PROPERTIES, String sCERT_POLICY_PROPERTIES,
        String pApproveCAUser, boolean autoApproveCAServer, int[] System_Log_ID, String[] System_Log_BillCode,
        String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
    throws Exception {
        String sTOKEN_SN = "";
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_REGISTRATION_CERTIFICATION2;
        ObjectMapper objectMapper = new ObjectMapper();
        RAServiceReq raReqTemp = new RAServiceReq();
        raReqTemp.certificateComponentInfo = raServiceReq.certificateComponentInfo;
        raReqTemp.beneficiaryUser = raServiceReq.beneficiaryUser;
        raReqTemp.emailContact = raServiceReq.emailContact;
        raReqTemp.phoneContact = raServiceReq.phoneContact;
        raReqTemp.formFactorCode = raServiceReq.formFactorCode;
        raReqTemp.activationCodeEnabled = raServiceReq.activationCodeEnabled;
        raReqTemp.beneficiaryBranch = raServiceReq.beneficiaryBranch;
        raReqTemp.promotionDuration = raServiceReq.promotionDuration;
        raReqTemp.certificateOwnerID = raServiceReq.certificateOwnerID;
        raReqTemp.certificateProfileCode = raServiceReq.certificateProfileCode;
        raReqTemp.backupKeyEnabled = raServiceReq.backupKeyEnabled;
        raReqTemp.certificateNotificationEnabled = raServiceReq.certificateNotificationEnabled;
        raReqTemp.p12EmailEnabled = raServiceReq.p12EmailEnabled;
        raReqTemp.approveEnabled = raServiceReq.approveEnabled;
        raReqTemp.language = raServiceReq.language;
        raReqTemp.csr = raServiceReq.csr;
        raReqTemp.effectiveTime = raServiceReq.effectiveTime;
        raReqTemp.expandFutureParamXML = raServiceReq.expandFutureParamXML;
        raReqTemp.credentialData = raServiceReq.credentialData;
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, sTOKEN_SN, "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), raServiceReq.beneficiaryUser,
            System_Log_ID, sIP_Request, System_Log_BillCode);
        
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            String pCERTIFICATION_ATTR_TYPE_CODE = String.valueOf(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION);
            boolean autoApproveCAClient = raServiceReq.approveEnabled;
            String strDNSName = "";
            GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
            db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
            ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList;
            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH and USER">
            if (!"".equals(raServiceReq.beneficiaryBranch)) {
                UserInfo[][] rsUserBranch;
                int[] pResonseUser;
                String sCreateAgencyDefault = "0";
                String sCreateUserDefault = "0";
                String sValueUserBranch = "";
                String sUserPassDefault = "";
                String sBranchPolicyProper = "";
                if (rsPolicy[0].length > 0) {
                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_API_AUTOCREATE_BENEFICIARY_BRANCH)) {
                            sCreateAgencyDefault = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_API_AUTOCREATE_BENEFICIARY_USER)) {
                            sCreateUserDefault = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_API_DEFAULT_INFO_BENEFICIARY_USER)) {
                            sValueUserBranch = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DEFAULT_CERTIFICATION_PROFILE_PROPERTIES_FOR_BRANCH_ROLE)) {
                            sBranchPolicyProper = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DEFAULT_PASSWORD_ACCOUNT)) {
                            sUserPassDefault = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                    }
                }
                rsUserBranch = new UserInfo[1][];
                pResonseUser = new int[1];
                db.S_BO_API_GET_USERNAME_BY_BRANCH_CODE(raServiceReq.beneficiaryBranch, pResonseUser, rsUserBranch);
                if(pResonseUser[0] == 0 && rsUserBranch[0].length > 0) {
                    if (!"".equals(raServiceReq.beneficiaryUser)) {
                        String sResponseCheckBranch = db.S_BO_API_CHECK_USERNAME_AND_BRANCH_CODE(raServiceReq.beneficiaryBranch, raServiceReq.beneficiaryUser);
                        if(!"0".equals(sResponseCheckBranch)) {
                            rsUserBranch = new UserInfo[1][];
                            db.S_BO_API_USER_DETAIL(raServiceReq.beneficiaryUser, raServiceReq.language, rsUserBranch);
                            if(rsUserBranch != null && rsUserBranch[0].length > 0) {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_USERNAME_BY_INVALID;
                            } else {
                                if("1".equals(sCreateUserDefault)) {
                                    String userPhone = "";
                                    String userEmail = "";
                                    String userRemark = "";
                                    String userRole = Definitions.CONFIG_ROLE_CODE_AGENT_ADMIN;
                                    JSON_USER_BRANCH_DEFAULT[][] rsCertType = new JSON_USER_BRANCH_DEFAULT[1][];
                                    CommonFunction.getJsonUserBranchDefault(sValueUserBranch, rsCertType);
                                    for(JSON_USER_BRANCH_DEFAULT rsCertType1 : rsCertType[0])
                                    {
                                        if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_USER_DEFAULT_INFO_TAG))
                                        {
                                            userPhone = rsCertType1.MSISDN;
                                            userEmail = rsCertType1.EMAIL;
                                            userRemark = rsCertType1.REMARK;
                                        }
                                    }
                                    String[] pRESPONSE_CODE = new String[1];
                                    int[] pUSER_ID = new int[1];
                                    db.S_BO_API_USER_INSERT(raServiceReq.beneficiaryUser, sUserPassDefault, userRemark, 
                                        userRole, raServiceReq.beneficiaryBranch,
                                        userEmail, userPhone, raServiceReq.approveUser, pRESPONSE_CODE, pUSER_ID);
                                    // tao user
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                                }
                            }
                        }
                    } else {
                        if(!"".equals(rsUserBranch[0][0].userName)) {
                            raServiceReq.beneficiaryUser = rsUserBranch[0][0].userName;
                        } else {
                            if("1".equals(sCreateUserDefault)) {
                                String userPhone = "";
                                String userEmail = "";
                                String userRemark = "";
                                String userRole = Definitions.CONFIG_ROLE_CODE_AGENT_ADMIN;
                                JSON_USER_BRANCH_DEFAULT[][] rsCertType = new JSON_USER_BRANCH_DEFAULT[1][];
                                CommonFunction.getJsonUserBranchDefault(sValueUserBranch, rsCertType);
                                for(JSON_USER_BRANCH_DEFAULT rsCertType1 : rsCertType[0])
                                {
                                    if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_USER_DEFAULT_INFO_TAG))
                                    {
                                        userPhone = rsCertType1.MSISDN;
                                        userEmail = rsCertType1.EMAIL;
                                        userRemark = rsCertType1.REMARK;
                                    }
                                }
                                String[] pRESPONSE_CODE = new String[1];
                                int[] pUSER_ID = new int[1];
                                raServiceReq.beneficiaryUser = raServiceReq.beneficiaryBranch.toLowerCase() + "_admin";
                                db.S_BO_API_USER_INSERT(raServiceReq.beneficiaryUser, sUserPassDefault, userRemark, 
                                    userRole, raServiceReq.beneficiaryBranch,
                                    userEmail, userPhone, raServiceReq.approveUser, pRESPONSE_CODE, pUSER_ID);
                                // tao user
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                            }
                        }
                    }
                } else {
                    if("1".equals(sCreateAgencyDefault)) {
                        if (!"".equals(raServiceReq.beneficiaryUser)) {
                            rsUserBranch = new UserInfo[1][];
                            db.S_BO_API_USER_LIST(raServiceReq.beneficiaryUser, "", "", raServiceReq.language, rsUserBranch);
                            if(rsUserBranch[0].length > 0) {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                            } else {
                                if("1".equals(sCreateUserDefault)) {
                                    String branchPhone = "";
                                    String branchEmail = "";
                                    String branchRemark = "";
                                    String branchParentName = "";
                                    String branchProvince = "";
                                    String branchDISCOUNT_RATE_PROFILE = "FEDERAL";
                                    String branchRole = "FEDERAL";
                                    String userPhone = "";
                                    String userEmail = "";
                                    String userRemark = "";
                                    String userRole = Definitions.CONFIG_ROLE_CODE_AGENT_ADMIN;
                                    JSON_USER_BRANCH_DEFAULT[][] rsCertType = new JSON_USER_BRANCH_DEFAULT[1][];
                                    CommonFunction.getJsonUserBranchDefault(sValueUserBranch, rsCertType);
                                    for(JSON_USER_BRANCH_DEFAULT rsCertType1 : rsCertType[0])
                                    {
                                        if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_BRANCH_DEFAULT_INFO_TAG))
                                        {
                                            branchPhone = rsCertType1.MSISDN;
                                            branchEmail = rsCertType1.EMAIL;
                                            branchRemark = rsCertType1.REMARK;
                                            branchParentName = rsCertType1.PARENT_NAME;
                                            branchProvince = rsCertType1.PROVINCE_NAME;
                                        }
                                        if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_USER_DEFAULT_INFO_TAG))
                                        {
                                            userPhone = rsCertType1.MSISDN;
                                            userEmail = rsCertType1.EMAIL;
                                            userRemark = rsCertType1.REMARK;
                                        }
                                    }
                                    int[] pBRANCH_ID = new int[1];
                                    String sParam = db.S_BO_API_BRANCH_INSERT(raServiceReq.beneficiaryBranch, branchProvince,
                                        branchRemark, branchRemark, branchParentName, raServiceReq.approveUser,
                                        EscapeUtils.escapeHtml(branchPhone), "", EscapeUtils.escapeHtml(branchEmail),
                                        "", "", "", null, branchDISCOUNT_RATE_PROFILE, sBranchPolicyProper, branchRole, pBRANCH_ID);
                                    if("0".equals(sParam))
                                    {
                                        String[] pRESPONSE_CODE = new String[1];
                                        int[] pUSER_ID = new int[1];
                                        db.S_BO_API_USER_INSERT(raServiceReq.beneficiaryUser, sUserPassDefault, userRemark, 
                                            userRole, raServiceReq.beneficiaryBranch,
                                            userEmail, userPhone, raServiceReq.approveUser, pRESPONSE_CODE, pUSER_ID);
                                    }
                                    // tao branch (dc truyen vao)
                                    // tao user (dc truyen vao)
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_USERNAME_BY_INVALID;
                                }
                            }
                        } else {
                            if("1".equals(sCreateUserDefault)) {
                                String branchPhone = "";
                                String branchEmail = "";
                                String branchRemark = "";
                                String branchParentName = "";
                                String branchProvince = "";
                                String branchDISCOUNT_RATE_PROFILE = "FEDERAL";
                                String branchRole = "FEDERAL";
                                String userPhone = "";
                                String userEmail = "";
                                String userRemark = "";
                                String userRole = Definitions.CONFIG_ROLE_CODE_AGENT_ADMIN;
                                JSON_USER_BRANCH_DEFAULT[][] rsCertType = new JSON_USER_BRANCH_DEFAULT[1][];
                                CommonFunction.getJsonUserBranchDefault(sValueUserBranch, rsCertType);
                                for(JSON_USER_BRANCH_DEFAULT rsCertType1 : rsCertType[0])
                                {
                                    if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_BRANCH_DEFAULT_INFO_TAG))
                                    {
                                        branchPhone = rsCertType1.MSISDN;
                                        branchEmail = rsCertType1.EMAIL;
                                        branchRemark = rsCertType1.REMARK;
                                        branchParentName = rsCertType1.PARENT_NAME;
                                        branchProvince = rsCertType1.PROVINCE_NAME;
                                    }
                                    if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_USER_DEFAULT_INFO_TAG))
                                    {
                                        userPhone = rsCertType1.MSISDN;
                                        userEmail = rsCertType1.EMAIL;
                                        userRemark = rsCertType1.REMARK;
                                    }
                                }
                                int[] pBRANCH_ID = new int[1];
                                String sParam = db.S_BO_API_BRANCH_INSERT(raServiceReq.beneficiaryBranch, branchProvince,
                                    branchRemark, branchRemark, branchParentName, raServiceReq.approveUser,
                                    EscapeUtils.escapeHtml(branchPhone), "", EscapeUtils.escapeHtml(branchEmail),
                                    "", "", "", null, branchDISCOUNT_RATE_PROFILE, sBranchPolicyProper, branchRole, pBRANCH_ID);
                                if("0".equals(sParam))
                                {
                                    raServiceReq.beneficiaryUser = raServiceReq.beneficiaryBranch.toLowerCase() + "_admin";
                                    String[] pRESPONSE_CODE = new String[1];
                                    int[] pUSER_ID = new int[1];
                                    db.S_BO_API_USER_INSERT(raServiceReq.beneficiaryUser, sUserPassDefault, userRemark, 
                                        userRole, raServiceReq.beneficiaryBranch,
                                        userEmail, userPhone, raServiceReq.approveUser, pRESPONSE_CODE, pUSER_ID);
                                }
                                // tao branch (dc truyen vao)
                                // tao user (tu gen)
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_USERNAME_BY_INVALID;
                            }
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
                }
            } else {
                String sAgencyDefault = "";
                if (rsPolicy[0].length > 0) {
                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_API_DEFAULT_BENEFICIARY_BRANCH)) {
                            sAgencyDefault = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                            break;
                        }
                    }
                }
                if(!"".equals(sAgencyDefault)) {
                    raServiceReq.beneficiaryBranch = sAgencyDefault;
                    UserInfo[][] rsUserBranch = new UserInfo[1][];
                    int[] pResonseUser = new int[1];
                    db.S_BO_API_GET_USERNAME_BY_BRANCH_CODE(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryBranch), pResonseUser, rsUserBranch);
                    if(pResonseUser[0] == 0 && rsUserBranch[0].length > 0) {
                        raServiceReq.beneficiaryUser = rsUserBranch[0][0].userName;
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                }
            }
            //</editor-fold>

            CERTIFICATION_PROFILE[][] resProfileDB;
            int profileDuration = 0;
            int profilePromotion = 0;
            //<editor-fold defaultstate="collapsed" desc="### CHECK PROFILE VALID">
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_PROFILE_INVALID;
                resProfileDB = new CERTIFICATION_PROFILE[1][];
                db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), resProfileDB);
                if(resProfileDB[0].length > 0)
                {
                    profileDuration = resProfileDB[0][0].DURATION;
                    profilePromotion = resProfileDB[0][0].DURATION_FREE;
                    raServiceReq.certificateAuthorityCode = resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME;
                    raServiceReq.certificatePurposeCode = resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME;
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                }
            }
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_PROFILE_INVALID;
                boolean accessProfileAll = CommonFunction.checkAPIAccessProfileAll(sCERT_PROFILE_PROPERTIES);
                if (accessProfileAll == true) {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                } else {
                    tempProfileList = new ArrayList<>();
                    //<editor-fold defaultstate="collapsed" desc="### GET PROFILE LIST ACCESS">
                    CERTIFICATION_POLICY_DATA[][] resPolicyData_Old = new CERTIFICATION_POLICY_DATA[1][];
                    CommonFunction.getProfileCertList(sCERT_PROFILE_PROPERTIES, resPolicyData_Old);
                    for(CERTIFICATION_POLICY_DATA resPolicyCertData_Old1 : resPolicyData_Old[0])
                    {
                        if(resPolicyCertData_Old1.attributeType.equals(Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST))
                        {
                            resProfileDB = new CERTIFICATION_PROFILE[1][];
                            db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(resPolicyCertData_Old1.name), resProfileDB);
                            if(resProfileDB[0].length > 0)
                            {
                                CERTIFICATION_POLICY_DATA itemProfileAccess = new CERTIFICATION_POLICY_DATA();
                                itemProfileAccess.name = resProfileDB[0][0].NAME;
                                itemProfileAccess.certificateAuthority = resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME;
                                itemProfileAccess.certificatePurpose = resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME;
                                itemProfileAccess.remark = resPolicyCertData_Old1.remark;
                                itemProfileAccess.remarkEn = resPolicyCertData_Old1.remarkEn;
                                itemProfileAccess.attributeType = Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST;
                                tempProfileList.add(itemProfileAccess);
                            }
                        }
                    }
                    //</editor-fold>

//                            CERTIFICATION_POLICY_DATA[][] resPolicyData1 = new CERTIFICATION_POLICY_DATA[1][];
//                            CommonFunction.getProfileCertNewList(sCERT_POLICY_PROPERTIES, resPolicyData1);
                    if(tempProfileList.size() > 0)
                    {
                        for (CERTIFICATION_POLICY_DATA tempProfileList1 : tempProfileList)
                        {
                            if(tempProfileList1.certificateAuthority.equals(raServiceReq.certificateAuthorityCode)
                                && tempProfileList1.certificatePurpose.equals(raServiceReq.certificatePurposeCode)
                                && tempProfileList1.name.equals(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode)))
                            {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                break;
                            }
                        }
                    }
                }
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                String sRegexPolicy = "";
                String sDiscountRateOption = "0";
                String checkChangeEffectiveDT = "0";
                String dayChangeEffectiveDT = "0";
                //<editor-fold defaultstate="collapsed" desc="### POLICY">
                if (rsPolicy[0].length > 0) {
                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_REGEX_FOR_PHONE_EMAIL)) {
                            sRegexPolicy = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_DISCOUNT_RATE_PROFILE_OPTION)) {
                            sDiscountRateOption = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if(rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_OPTION_FOR_CHANGING_EFFECTIVE_DT)) {
                            checkChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if(rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_MAX_NUMBERS_DAY_ISSUE_CERTIFICATE_FUTURE)) {
                            dayChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                    }
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### CHECK PHONE, EMAIL CUSTORMER, DISCOUNT RATE">
                String sREGEX_PHONE = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_PHONE);
                if ("".equals(sREGEX_PHONE.trim())) {
                    sREGEX_PHONE = Definitions.CONFIG_DEFAULT_VALUE_REGEX_PHONE;
                }
                if (CommonFunction.regexPhoneValid(EscapeUtils.CheckTextNull(raServiceReq.phoneContact), sREGEX_PHONE) == false) {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CUSTOMER_PHONE_INVALID;
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                }
                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                    if ("".equals(sREGEX_EMAIL.trim())) {
                        sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                    }
                    if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(raServiceReq.emailContact), sREGEX_EMAIL) == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CUSTOMER_EMAIL_INVALID;
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                    }
                }
                //</editor-fold>

                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {

                    java.sql.Timestamp pEFFECTIVE_DT = null;
                    java.sql.Timestamp pEXPIRATION_DT = null;
                    //<editor-fold defaultstate="collapsed" desc="### CHECK EFFECCTIVE_DT AND EXPIRATION_DT">
                    if("1".equals(checkChangeEffectiveDT)) {
                        String sEffectiveTime = EscapeUtils.CheckTextNull(raServiceReq.effectiveTime);
                        if(!"".equals(sEffectiveTime)) {
                            if(CommonFunction.checkDatePatternValid(sEffectiveTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                if(CommonFunction.checkDateAddDayCurrent(sEffectiveTime, Integer.parseInt(dayChangeEffectiveDT), Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                    if(CommonFunction.checkDateBiggerCurrent(sEffectiveTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                        pEFFECTIVE_DT = CommonFunction.ConvertStringToTimeStamp(sEffectiveTime);
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                            }
                        }
                        if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                            String sExpirationTime = EscapeUtils.CheckTextNull(raServiceReq.expirationTime);
                            if(!"".equals(sExpirationTime)) {
                                if(pEFFECTIVE_DT == null) {
                                    Date currentDate = new Date();
                                    pEFFECTIVE_DT = new java.sql.Timestamp(currentDate.getTime());
                                }
                                if(CommonFunction.checkDatePatternValid(sExpirationTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                    if(CommonFunction.checkExpirationWithProfile(sExpirationTime, pEFFECTIVE_DT, profileDuration, profilePromotion,
                                        Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                        pEXPIRATION_DT = CommonFunction.ConvertStringToTimeStamp(sExpirationTime);
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EXPIRATION_INVALID;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EXPIRATION_INVALID;
                                }
                            }
                        }
                    }
                    //</editor-fold>

                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        if (raServiceReq.certificateComponentInfo.length > 0) {
                            int intOUCheckClient = 0;
                            for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                if (EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                    intOUCheckClient = intOUCheckClient + 1;
                                }
                                if(EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID)
                                    || EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE)) {
                                    certComponentInfo1.prefix = CommonFunction.convertPrefixENForAPI(EscapeUtils.CheckTextNull(certComponentInfo1.prefix), false);
                                }
                            }
                            CertificateProfileInfo[][] certProfileInfo = new CertificateProfileInfo[1][];
                            db.S_BO_API_CERTIFICATION_PROFILE_GET_PROPERTIES(EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode),
                                    EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode),
                                    EscapeUtils.CheckTextNull(raServiceReq.formFactorCode), certProfileInfo);
                            if (certProfileInfo[0].length > 0) {
                                boolean sCheckRequire = true;
                                //<editor-fold defaultstate="collapsed" desc="### Update isreqiure, commonname certificateComponentInfo">
                                String sPropertiesCert = EscapeUtils.CheckTextNull(certProfileInfo[0][0].certificateProfileProperties);
                                if (!"".equals(sPropertiesCert)) {
                                    CertificateComponentInfo[][] infoCompNew = new CertificateComponentInfo[1][];
                                    ArrayList<CertificateComponentInfo> listCompNew = new ArrayList<>();
                                    CERTIFICATION_TYPE_COMPONENT[][] resProfileData = new CERTIFICATION_TYPE_COMPONENT[1][];
                                    CommonFunction.getJsonComponentForCert(sPropertiesCert, resProfileData);
                                    int intCompOUSrv = 0;
                                    for(CERTIFICATION_TYPE_COMPONENT resProfileData1 : resProfileData[0])
                                    {
                                        if(EscapeUtils.CheckTextNull(resProfileData1.name).equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID))
                                        {
                                            boolean hasComponent = false;
                                            for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                String sCodeInfoOld = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                if (sCodeInfoOld.equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE)) {
                                                    sCodeInfoOld = sCodeInfoOld.replace(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE, Definitions.CONFIG_COMPONENT_DN_TAG_UID);
                                                }
                                                if (EscapeUtils.CheckTextNull(resProfileData1.prefix).equals(EscapeUtils.CheckTextNull(certComponentInfo1.prefix)))
                                                {
                                                    hasComponent = true;
                                                    CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                    itemCompNew.code = sCodeInfoOld;
                                                    itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                    itemCompNew.requireEnabled = resProfileData1.require;
                                                    itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                    itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                    itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                    listCompNew.add(itemCompNew);
                                                    break;
                                                }
                                            }
                                            if(hasComponent == false)
                                            {
                                                CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                itemCompNew.requireEnabled = resProfileData1.require;
                                                itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                itemCompNew.value = "";
                                                itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                listCompNew.add(itemCompNew);
                                            }
                                        } else {
                                            if(!EscapeUtils.CheckTextNull(resProfileData1.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN))
                                            {
                                                if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                                    boolean hasComponent = false;
                                                    intCompOUSrv = intCompOUSrv + 1;
                                                    int intCompOUClient = 0;
                                                    for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                                            hasComponent = true;
                                                            intCompOUClient = intCompOUClient + 1;
                                                            if(intCompOUSrv == intCompOUClient) {
                                                                CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                                itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                                itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                                itemCompNew.requireEnabled = resProfileData1.require;
                                                                itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                                itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                                itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                                listCompNew.add(itemCompNew);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    if(hasComponent == false) {
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                        itemCompNew.value = "";
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                    }
                                                } else {
                                                    boolean hasComponent = false;
                                                    for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                        if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(EscapeUtils.CheckTextNull(certComponentInfo1.code))) {
                                                            hasComponent = true;
                                                            CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                            itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                            itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                            itemCompNew.requireEnabled = resProfileData1.require;
                                                            itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                            itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                            itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                            listCompNew.add(itemCompNew);
                                                            break;
                                                        }
                                                    }
                                                    if(hasComponent == false)
                                                    {
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                        itemCompNew.value = "";
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                    }
                                                }
                                            } else {
                                                boolean hasComponent = false;
                                                for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                    if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(EscapeUtils.CheckTextNull(certComponentInfo1.code))) {
                                                        hasComponent = true;
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN;
                                                        itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                        break;
                                                    }
                                                }
                                                if(hasComponent == false)
                                                {
                                                    CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                    itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                    itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                    itemCompNew.requireEnabled = resProfileData1.require;
                                                    itemCompNew.attributeType = Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN;
                                                    itemCompNew.value = "";
                                                    itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                    listCompNew.add(itemCompNew);
                                                }
                                            }
                                        }
                                    }
                                    infoCompNew[0] = new CertificateComponentInfo[listCompNew.size()];
                                    infoCompNew[0] = listCompNew.toArray(infoCompNew[0]);
                                    raServiceReq.certificateComponentInfo = infoCompNew[0];
                                    if(intOUCheckClient > intCompOUSrv) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_TEMPLATE_CERT_EMPTY;
                                }
                                //</editor-fold>

                                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                    String sCommomNameType = "";
                                    String sCompanyCompoment = "";
                                    String sDomainCompoment = "";
                                    String sPersonalCompoment = "";
                                    String sMSTCompoment = "";
                                    String sMNSCompoment = "";
                                    String sQDCompoment = "";
                                    String sCMNDCompoment = "";
                                    String sCCCDCompoment = "";
                                    String sBHXHCompoment = "";
                                    String sBHXHCompomentCN = "";
                                    String sMDVCompoment = "";
                                    String sMSTCompomentCN = "";
                                    String sDeviceUUID = "";
                                    String sHCCompoment = "";
                                    String sProvinceCodeComponent = "";
                                    String sProvinceNameComponent = "";
                                    String sDNResult = "";
                                    String sCoreCASubject = "";
                                    boolean isEmailCertValid = true;
                                    //<editor-fold defaultstate="collapsed" desc="### Get info component from certificateComponentInfo">
                                    // CHECK REQUIRE FOR UID
                                    boolean hasCompanyUID = false;
                                    boolean hasPesonalUID = false;
                                    boolean hasCompanyValue = false;
                                    boolean hasPesonalValue = false;
                                    for (CertificateComponentInfo compCheckUID : raServiceReq.certificateComponentInfo) {
                                        if (EscapeUtils.CheckTextNull(compCheckUID.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY)) {
                                            hasCompanyUID = true;
                                            if (compCheckUID.requireEnabled == true) {
                                                if (!"".equals(EscapeUtils.CheckTextNull(compCheckUID.value))) {
                                                    hasCompanyValue = true;
                                                    break;
                                                } else {hasCompanyValue = false;}
                                            } else {hasCompanyValue = true;}
                                        }
                                    }
                                    for (CertificateComponentInfo compCheckUID : raServiceReq.certificateComponentInfo) {
                                        if (EscapeUtils.CheckTextNull(compCheckUID.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL)) {
                                            hasPesonalUID = true;
                                            if (compCheckUID.requireEnabled == true) {
                                                if (!"".equals(EscapeUtils.CheckTextNull(compCheckUID.value))) {
                                                    hasPesonalValue = true;
                                                    break;
                                                } else {hasPesonalValue = false;}
                                            } else {hasPesonalValue = true;}
                                        }
                                    }
                                    if(hasCompanyUID == true) {
                                        if(hasCompanyValue == false) {
                                            sCheckRequire = false;
                                        }
                                    }
                                    if(hasPesonalUID == true) {
                                        if(hasPesonalValue == false) {
                                            sCheckRequire = false;
                                        }
                                    }
                                    if (sCheckRequire == true) {
                                        String sSubjectEmail = "";
                                        String sSANEmail = "";
                                        boolean isHasSANEmail = false;
                                        List<CERTIFICATION_PROPERTIES_JSON.Attribute> attributesSan = new ArrayList<>();
                                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                            for (CertificateComponentInfo certComponentInfo2 : raServiceReq.certificateComponentInfo) {
                                                if (!EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN))
                                                {
                                                    // check require
                                                    if (certComponentInfo2.requireEnabled == true) {
                                                        if (!EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY)
                                                                && !EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL)) {
                                                            if ("".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value))) {
                                                                sCheckRequire = false;
                                                                break;
                                                            }
                                                        } else {
                                                        }
                                                    }
                                                    // get city province name
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_ST)) {
                                                        sProvinceCodeComponent = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        if("".equals(sProvinceCodeComponent) || Definitions.CONFIG_GRID_STRING_NA.equals(sProvinceCodeComponent)) {
                                                            sProvinceCodeComponent = "";
                                                        }
                                                        if(!"".equals(sProvinceCodeComponent)) {
                                                            CityProvinceInfo[][] cityInfo = new CityProvinceInfo[1][];
                                                            db.S_BO_API_PROVINCE_LIST(sProvinceCodeComponent, raServiceReq.language, cityInfo);
                                                            if (cityInfo[0].length > 0) {
                                                                certComponentInfo2.value = EscapeUtils.CheckTextNull(cityInfo[0][0].cityProvinceName);
                                                                sProvinceNameComponent = EscapeUtils.CheckTextNull(cityInfo[0][0].cityProvinceName);
                                                            }
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_L)) {
                                                        String sValueL = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        if("".equals(sValueL) || Definitions.CONFIG_GRID_STRING_NA.equals(sValueL)) {
                                                            certComponentInfo2.value = "";
                                                        }
                                                    }
                                                    // get company, personal name
                                                    if (!"".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value))) {
                                                        if(CommonFunction.checkCertCharacterSpecial(certComponentInfo2.value) == false) {
                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_COMPONENT_CHARACTER_SPECIAL;
                                                            break;
                                                        }
                                                        sDNResult += EscapeUtils.CheckTextNull(certComponentInfo2.code) + "=" + EscapeUtils.CheckTextNull(certComponentInfo2.prefix)
                                                            + CommonFunction.replaceStringCharaterSpecialDN(EscapeUtils.CheckTextNull(certComponentInfo2.value), true, false) + ", ";
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_CN)) {
                                                        sCommomNameType = EscapeUtils.CheckTextNull(certComponentInfo2.commomNameType);
                                                        if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_COMPANY)) {
                                                            sCompanyCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_PERSON)) {
                                                            sPersonalCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_DOMAIN_NAME)) {
                                                            sDomainCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBCLIENT + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBSERVER + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_AUTH + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CODE_SIGNING + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_SIGN + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                    }
    //                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_Domain)) {
    //                                                    sDomainCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
    //                                                }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_O)) {
                                                        if (!"".equals(sCommomNameType)) {
                                                            if (EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN)) {
                                                                sCompanyCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY))
                                                    {
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE))
                                                        {
                                                            if(!"".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value)))
                                                            {
                                                                sDeviceUUID = EscapeUtils.CheckTextNull(certComponentInfo2.prefix) + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                        } else {
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_TAX_CODE + ":")) {
                                                                sMSTCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_BUDGET_CODE + ":")) {
                                                                sMNSCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_DECISION + ":")) {
                                                                sQDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_SOCIAL_INSURANCE_CODE + ":")) {
                                                                sBHXHCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_UNIT_CODE + ":")) {
                                                                sMDVCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                        }
                                                    }
                                                    if(EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL))
                                                    {
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_CODE + ":")) {
                                                            sCMNDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_PASSPORT_CODE + ":")) {
                                                            sHCCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_CITIZEN_CODE + ":")) {
                                                            sCCCDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_SOCIAL_INSURANCE_CODE + ":")) {
                                                            sBHXHCompomentCN = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_TAX_CODE + ":")) {
                                                            sMSTCompomentCN = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_E)) {
                                                        sSubjectEmail = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                } else {
                                                    // PROPERTIES SAN
                                                    String sValueSan = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    if (certComponentInfo2.requireEnabled == true) {
                                                        if ("".equals(sValueSan)) {
                                                            sCheckRequire = false;
                                                            break;
                                                        }
                                                    }
                                                    if(!"".equals(sValueSan)) {
                                                        String sCodeSan = EscapeUtils.CheckTextNull(certComponentInfo2.code);
                                                        String sKey = "";
                                                        if(!"".equals(sCodeSan)) {
                                                            sKey = sCodeSan;
                                                        }
                                                        CERTIFICATION_PROPERTIES_JSON.Attribute attribute = new CERTIFICATION_PROPERTIES_JSON.Attribute();
                                                        attribute.setKey(sKey);
                                                        attribute.setValue(sValueSan);
                                                        attributesSan.add(attribute);
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_SAN_TAG_rfc822Name)) {
                                                        sSANEmail = sValueSan;
                                                        isHasSANEmail = true;
                                                    }
                                                }
                                            }
                                        }
                                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                            //<editor-fold defaultstate="collapsed" desc="### CHECK EMAIL CERT VALID">
                                            if(!"".equals(sSubjectEmail)) {
                                                String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                                                if ("".equals(sREGEX_EMAIL.trim())) {
                                                    sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                                                }
                                                if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(sSubjectEmail), sREGEX_EMAIL) == false) {
                                                    isEmailCertValid = false;
                                                }
                                            }
                                            if(!"".equals(sSANEmail)) {
                                                String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                                                if ("".equals(sREGEX_EMAIL.trim())) {
                                                    sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                                                }
                                                if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(sSANEmail), sREGEX_EMAIL) == false) {
                                                    isEmailCertValid = false;
                                                }
                                            }
                                            //</editor-fold>

                                            if(isEmailCertValid == true) {
                                                if(attributesSan.size() > 0) {
                                                    strDNSName = "{\"attributes\":" + objectMapper.writeValueAsString(attributesSan) + "}";
                                                }
                                                CommonFunction.LogDebugString(log, "SAN_Properties", strDNSName);
                                                if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF))
                                                {
                                                    if(!"".equals(sMSTCompoment) && !"".equals(sMNSCompoment) && !"".equals(sQDCompoment)
                                                        && !"".equals(sBHXHCompoment) && !"".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sMSTCompoment) && "".equals(sMNSCompoment) && "".equals(sQDCompoment)
                                                        && "".equals(sBHXHCompoment) && "".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if(!"".equals(sCMNDCompoment) && !"".equals(sHCCompoment) && !"".equals(sCCCDCompoment)
                                                        && !"".equals(sBHXHCompomentCN) && !"".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sCMNDCompoment) && "".equals(sHCCompoment) && "".equals(sCCCDCompoment)
                                                        && "".equals(sBHXHCompomentCN) && "".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTTYPE_DESC_ENTERPRISE)) {
                                                    if(!"".equals(sMSTCompoment) && !"".equals(sMNSCompoment) && !"".equals(sQDCompoment)
                                                        && !"".equals(sBHXHCompoment) && !"".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sMSTCompoment) && "".equals(sMNSCompoment) && "".equals(sQDCompoment)
                                                        && "".equals(sBHXHCompoment) && "".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTTYPE_DESC_PERSONAL))
                                                {
                                                    if(!"".equals(sCMNDCompoment) && !"".equals(sHCCompoment) && !"".equals(sCCCDCompoment)
                                                        && !"".equals(sBHXHCompomentCN) && !"".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sCMNDCompoment) && "".equals(sHCCompoment) && "".equals(sCCCDCompoment)
                                                        && "".equals(sBHXHCompomentCN) && "".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE))
                                                {
                                                    if("".equals(sDeviceUUID))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_PERSONAL_GOV)
                                                    || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV))
                                                {

                                                } else if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                    || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                    || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                    || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                    || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                {
                                                    if("".equals(sDeviceUUID))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                }
                                                sDNResult = CommonFunction.subLastCharater(sDNResult);
                                                CommonFunction.LogDebugString(log, sFunctionWS + " - Parser Cert Info", "sCommomNameType: " + sCommomNameType
                                                    + ";sCompanyCompoment: " + sCompanyCompoment + ";sDomainCompoment: " + sDomainCompoment
                                                    + ";sPersonalCompoment: " + sPersonalCompoment + ";sCMNDCompoment: " + sCMNDCompoment
                                                    + ";sCCCDCompoment: " + sCCCDCompoment + ";sHCCompoment: " + sHCCompoment + ";sBHXHCompoment: " + sBHXHCompoment
                                                    + ";sMDVCompoment: " + sMDVCompoment + ";sBHXHCompomentCN: " + sBHXHCompomentCN + ";sMSTCompomentCN: " + sMSTCompomentCN
                                                    + ";sMSTCompoment: " + sMSTCompoment + ";sMNSCompoment: " + sMNSCompoment + ";sQDCompoment: " + sQDCompoment
                                                    + ";sDeviceUUID: " + sDeviceUUID + ";sDNResult: " + sDNResult);
                                            }
                                        }
                                    }
                                    //</editor-fold>
                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                        boolean isHasFileClient = false;
                                        boolean checkCSRNotExists = true;
                                        if (sCheckRequire == true) {
                                            if (isEmailCertValid == true) {
                                                if (!"".equals(sDNResult)) {
                                                    String sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                                                    //<editor-fold defaultstate="collapsed" desc="### GET FULLNAME">
                                                    // get fullname of username param
                                                    String raFullnameCreate = "";
                                                    String raFullname = "";
                                                    UserInfo[][] userInfo = new UserInfo[1][];
                                                    db.S_BO_API_USER_LIST(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", raServiceReq.language, userInfo);
                                                    if (userInfo[0].length > 0) {
                                                        raFullnameCreate = EscapeUtils.CheckTextNull(userInfo[0][0].fullName);
                                                    }
                                                    UserInfo[][] userDetail = new UserInfo[1][];
                                                    db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                                                    if (userDetail[0].length > 0) {
                                                        raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                                                    }
                                                    //</editor-fold>

                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                    String dnUniqueEnabled = "0";
                                                    tempProfileList = new ArrayList<>();
                                                    CertificateAuthorityInfo[][] caInfo = new CertificateAuthorityInfo[1][];
                                                    db.S_BO_API_CERTIFICATION_AUTHORITY_LIST(EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode),
                                                            raServiceReq.language, caInfo, "", tempProfileList);
                                                    if (caInfo[0].length > 0) {
                                                        sCoreCASubject = EscapeUtils.CheckTextNull(caInfo[0][0].certificateAuthorityCoreCASubject);
                                                        dnUniqueEnabled = caInfo[0][0].dnUniqueEnabled;
                                                    }

                                                    //<editor-fold defaultstate="collapsed" desc="### OWNER PROCESS">
                                                    if(raServiceReq.certificateOwnerID == 0)
                                                    {
                                                        String sEnterpriseID = "";
                                                        String sPersonalID = "";
                                                        String sCERTIFICATION_OWNER_TYPE = "";
                                                        int pCERTIFICATION_OWNER_TYPE_ID = 0;
                                                        if(!"".equals(sMSTCompoment)) {
                                                            sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE + sMSTCompoment;
                                                        }
                                                        if(!"".equals(sMNSCompoment)) {
                                                            sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_BUDGETCODE + sMNSCompoment;
                                                        }
                                                        if(!"".equals(sQDCompoment)) {
                                                            sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_DECISION + sQDCompoment;
                                                        }
                                                        if(!"".equals(sBHXHCompoment)) {
                                                            sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_SOCIAL_INSURANCE_CODE + sBHXHCompoment;
                                                        }
                                                        if(!"".equals(sMDVCompoment)) {
                                                            sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_UNIT_CODE + sMDVCompoment;
                                                        }
                                                        if(!"".equals(sCMNDCompoment)) {
                                                            sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CMND + sCMNDCompoment;
                                                        }
                                                        if(!"".equals(sHCCompoment)) {
                                                            sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_PASSPORT + sHCCompoment;
                                                        }
                                                        if(!"".equals(sCCCDCompoment)) {
                                                            sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CITIZEN_ID + sCCCDCompoment;
                                                        }
                                                        if(!"".equals(sMSTCompomentCN)) {
                                                            sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE + sMSTCompomentCN;
                                                        }
                                                        if(!"".equals(sBHXHCompomentCN)) {
                                                            sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_SOCIAL_INSURANCE_CODE + sBHXHCompomentCN;
                                                        }
                                                        if(!EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_PERSONAL_GOV)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV))
                                                        {
                                                            if(!"".equals(sEnterpriseID) && "".equals(sPersonalID)) {
                                                                sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_ENTERPRISE;
                                                                pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_ENTERPRISE;
                                                            }
                                                            if("".equals(sEnterpriseID) && !"".equals(sPersonalID)) {
                                                                sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_PERSONAL;
                                                                pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_PERSONAL;
                                                            }
                                                            if(!"".equals(sEnterpriseID) && !"".equals(sPersonalID)) {
                                                                sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_PERSONAL;
                                                                pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_PERSONAL;
                                                            }
                                                        } else {
                                                            if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV))
                                                            {
                                                                sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_ENTERPRISE_GOV;
                                                                pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_ENTERPRISE_GOV;
                                                            } else {
                                                                sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_PERSONAL_GOV;
                                                                pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_PERSONAL_GOV;
                                                            }
                                                        }
                                                        if(pCERTIFICATION_OWNER_TYPE_ID != 0){
                                                            if("1".equals(dnUniqueEnabled)) {
                                                                int isCheckUnique = db.S_BO_CHECK_ENFORCE_UNIQUE_DN(pCERTIFICATION_OWNER_TYPE_ID, sEnterpriseID,
                                                                    sPersonalID, EscapeUtils.CheckTextNull(raServiceReq.emailContact), sDNResult, raServiceReq.certificateOwnerID);
                                                                if(isCheckUnique != 0) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_SUBJECT_DN_INVALID;
                                                                }
                                                            }
                                                            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                                if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                                                    || EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD))
                                                                {
                                                                    if (!"".equals(sCSR)) {
                                                                        String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                                        int checkPublicKey = db.S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH(pCERTIFICATION_OWNER_TYPE_ID, sEnterpriseID,
                                                                            sPersonalID, EscapeUtils.CheckTextNull(raServiceReq.emailContact), sPublicKeyHard, 0);
                                                                        if(checkPublicKey == 0) {
                                                                            checkCSRNotExists = true;
                                                                        } else {
                                                                            checkCSRNotExists = false;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                            String sLocation = CommonFunction.getLocationInDN(sDNResult).trim();
                                                            String sAddress;
                                                            if(!"".equals(sLocation)) {
                                                                sAddress = CommonFunction.replaceStringCharaterSpecialDN(sLocation, true, true) + ", " + CommonFunction.getStateOrProvinceInDN(sDNResult);
                                                            } else {
                                                                sAddress = CommonFunction.getStateOrProvinceInDN(sDNResult).trim();
                                                            }
                                                            String pMESSAGE_QUEUE_TYPE_CODE = Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_CODE_REGISTRATION_OWNER;
                                                            String sOwnerUUID = CommonFunction.getUUIDV4();

                                                            //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR ">
                                                            CERTIFICATION_OWNER_DATA_ATTR tempLogReqOwner = new CERTIFICATION_OWNER_DATA_ATTR();
                                                            tempLogReqOwner.personalName = raServiceReq.personalName;
                                                            tempLogReqOwner.companyName = raServiceReq.companyName;
                                                            tempLogReqOwner.taxCode = sMSTCompoment;
                                                            tempLogReqOwner.budgetCode = sMNSCompoment;
                                                            tempLogReqOwner.decision = sQDCompoment;
                                                            tempLogReqOwner.personalCode = sCMNDCompoment;
                                                            tempLogReqOwner.passportCode = sHCCompoment;
                                                            tempLogReqOwner.citizenID = sCCCDCompoment;
                                                            tempLogReqOwner.enterpriseID = sEnterpriseID;
                                                            tempLogReqOwner.personalID = sPersonalID;
                                                            tempLogReqOwner.emailContract = raServiceReq.emailContact;
                                                            tempLogReqOwner.phoneContract = raServiceReq.phoneContact;
                                                            tempLogReqOwner.address = raServiceReq.address;
                                                            tempLogReqOwner.representative = "";
                                                            tempLogReqOwner.representativePosition = "";
                                                            tempLogReqOwner.typeName = pMESSAGE_QUEUE_TYPE_CODE;
                                                            tempLogReqOwner.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PENDING;
                                                            tempLogReqOwner.createUser = raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")";
                                                            tempLogReqOwner.createDt = new Date();
                                                            //</editor-fold>
                                                            int[] pCERTIFICATION_OWNER_ID = new int[1];
                                                            int[] pOWNER_ATTR_ID = new int[1];
                                                            String[] pRESPONSE_CODE = new String[1];
                                                            db.S_BO_API_CERTIFICATION_OWNER_INSERT(sPersonalCompoment, sCompanyCompoment, sEnterpriseID, 
                                                                sPersonalID, sCERTIFICATION_OWNER_TYPE, raServiceReq.phoneContact, raServiceReq.emailContact,
                                                                raServiceReq.beneficiaryUser, sAddress, "", "", pMESSAGE_QUEUE_TYPE_CODE,
                                                                objectMapper.writeValueAsString(tempLogReqOwner), sOwnerUUID, pRESPONSE_CODE,
                                                                pCERTIFICATION_OWNER_ID, pOWNER_ATTR_ID);
                                                            if (!"0".equals(pRESPONSE_CODE[0])) {
                                                                if(pRESPONSE_CODE[0].trim().equals(String.valueOf(Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_EXISTS)))
                                                                {
                                                                    raServiceReq.certificateOwnerID = pCERTIFICATION_OWNER_ID[0];
                                                                } else {
                                                                    raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE[0]);
                                                                }
                                                            } else {
                                                                raServiceReq.certificateOwnerID = pCERTIFICATION_OWNER_ID[0];
                                                            }
                                                        }
                                                    } else {
                                                        if("1".equals(dnUniqueEnabled)) {
                                                            int isCheckUnique = db.S_BO_CHECK_ENFORCE_UNIQUE_DN(0, null, null, null, null, raServiceReq.certificateOwnerID);
                                                            if(isCheckUnique != 0) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_SUBJECT_DN_INVALID;
                                                            }
                                                        }
                                                        if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                            if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD))
                                                            {
                                                                if (!"".equals(sCSR)) {
                                                                    String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                                    int checkPublicKey = db.S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH(0, null, null, null, sPublicKeyHard, raServiceReq.certificateOwnerID);
                                                                    if(checkPublicKey == 0) {
                                                                        checkCSRNotExists = true;
                                                                    } else {
                                                                        checkCSRNotExists = false;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    //</editor-fold>

                                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                        //<editor-fold defaultstate="collapsed" desc="### File manager Modules">
                                                        boolean isHasReqFile = false;
                                                        String sPropertiesFile = "";
                                                        CertificatePurposeInfo[][] certPurposeInfo = new CertificatePurposeInfo[1][];
                                                        db.S_BO_API_CERTIFICATION_PURPOSE_GET_FILE_PROPERTIES(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode), certPurposeInfo);
                                                        if (certPurposeInfo[0].length > 0) {
                                                            sPropertiesFile = EscapeUtils.CheckTextNull(certPurposeInfo[0][0].certificatePurposeFileProperties);
                                                        }
                                                        if (raServiceReq.fileManagerInfo != null) {
                                                            if (raServiceReq.fileManagerInfo.length > 0) {
                                                                isHasFileClient = true;
                                                            }
                                                        }
                                                        if (isHasFileClient == true) {
                                                            if (!"".equals(sPropertiesFile)) {
                                                                objectMapper = new ObjectMapper();
                                                                FILE_PROFILE_JSON itemParsePush = objectMapper.readValue(sPropertiesFile, FILE_PROFILE_JSON.class);
                                                                for (FileManagerInfo fileManagerInfo1 : raServiceReq.fileManagerInfo) {
                                                                    for (FILE_PROFILE_JSON.Attribute attribute : itemParsePush.getAttributes()) {
                                                                        if (EscapeUtils.CheckTextNull(fileManagerInfo1.fileTypeCode).equals(attribute.getName())) {
                                                                            fileManagerInfo1.requireEnabled = attribute.getIsRequire();
                                                                        }
                                                                        if (attribute.getIsRequire() == true) {
                                                                            isHasReqFile = true;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_TEMPLATE_FILE_EMPTY;
                                                            }
                                                        } else {
                                                            if (!"".equals(sPropertiesFile)) {
                                                                objectMapper = new ObjectMapper();
                                                                FILE_PROFILE_JSON itemParsePush = objectMapper.readValue(sPropertiesFile, FILE_PROFILE_JSON.class);
                                                                for (FILE_PROFILE_JSON.Attribute attribute : itemParsePush.getAttributes()) {
                                                                    if (attribute.getIsRequire() == true) {
                                                                        isHasReqFile = true;
                                                                    }
                                                                }
                                                            } else {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_TEMPLATE_FILE_EMPTY;
                                                            }
                                                        }
                                                        if (isHasFileClient == true) {
                                                            for (FileManagerInfo fileManagerCheck : raServiceReq.fileManagerInfo) {
                                                                // check require
                                                                if (fileManagerCheck.requireEnabled == true) {
                                                                    if (fileManagerCheck.fileByte == null) {
                                                                        sCheckRequire = false;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            if (sCheckRequire == true) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                            } else {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_FILE_EMPTY;
                                                            }
                                                        } else {
                                                            if (isHasReqFile == true) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_TEMPLATE_FILE_EMPTY;
                                                            }
                                                        }
                                                        //</editor-fold>
                                                    }
                                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                        if("".equals(sProvinceCodeComponent)) {
                                                            sProvinceCodeComponent = Definitions.CONFIG_GRID_STRING_NA;
                                                            sProvinceNameComponent = Definitions.CONFIG_GRID_STRING_NA;
                                                            // GET CITIPROVINCE from BeneficiaryBranch if "ST" not exists
                                                            /*BRANCH[][] rsBeneficiaryBranch = new BRANCH[1][];
                                                            db.S_BO_API_BRANCH_GET_INFO(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryBranch), rsBeneficiaryBranch);
                                                            if(rsBeneficiaryBranch[0].length > 0) {
                                                                CITY_PROVINCE[][] rsBeneficiaryCity = new CITY_PROVINCE[1][];
                                                                db.S_BO_PROVINCE_DETAIL(String.valueOf(rsBeneficiaryBranch[0][0].PROVINCE_ID), rsBeneficiaryCity);
                                                                if(rsBeneficiaryCity[0].length > 0)
                                                                {
                                                                    sProvinceCodeComponent = EscapeUtils.CheckTextNull(rsBeneficiaryCity[0][0].NAME);
                                                                    sProvinceNameComponent = EscapeUtils.CheckTextNull(rsBeneficiaryCity[0][0].REMARK);
                                                                }
                                                            }*/
                                                        }
                                                        // get corecasubject
                                                        String CheckCHANGE_KEY = "1";
                                                        String CheckPRIVATE_KEY;
                                                        String sCERTIFICATION_SN = "";
                                                        String pPAST_CERTIFICATION_SN = "";
                                                        if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)) {
                                                            if (EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_SSL)) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_SSL_SN;
                                                            } else if (EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING)) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_CODESIGNNING_SN;
                                                            } else if (EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE)) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_DEVICE_SN;
                                                            } else {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_SIGNSERVER_SN;
                                                            }
                                                        } else if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                                                            sTOKEN_SN = Definitions.CONFIG_TOKEN_SN_FORMFACTOR_ESIGNCLOUD;
                                                        } else if (CommonFunction.checkHardTokenEnabled(EscapeUtils.CheckTextNull(raServiceReq.formFactorCode)) == true) {
                                                            if(raServiceReq.inHouseEnabled == true) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_SN_INHOUSE;
                                                            } else {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_UNASSIGN_SN;
                                                            }
                                                        } else if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                                            if(raServiceReq.inHouseEnabled == true) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_SN_INHOUSE;
                                                            } else {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_UNASSIGN_SN;
                                                            }
                                                        } else {
                                                            sTOKEN_SN = "";
                                                        }
                                                        String sPromotionDuration = "";

                                                        //<editor-fold defaultstate="collapsed" desc="### EXPAND PARAM PROCESS">
                                                        String sRsspRelyingParty = "";
                                                        String sRsspAgreementUUID = "";
                                                        String sRsspCertificateUUID = "";
                                                        String sRsspConnectWSMode = "";
                                                        String sRepresentative = "";
                                                        String sRepresentativePosition = "";
                                                        String sExpandParam = EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML);
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD))
                                                        {
                                                            if(!"".equals(sExpandParam)) {
                                                                ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                                                sRsspAgreementUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspAgreementUUID);
                                                                sRsspRelyingParty = EscapeUtils.CheckTextNull(jsonReqExpand.rsspRelyingParty);
                                                                sRsspCertificateUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspCertificateUUID);
                                                                sRsspConnectWSMode = EscapeUtils.CheckTextNull(jsonReqExpand.rsspConnectWSMode);
                                                            }
                                                            if(!"".equals(sRsspConnectWSMode)) {
                                                                if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_REST)) {
                                                                    if("".equals(sRsspCertificateUUID) || "".equals(sRsspRelyingParty)) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                    }
                                                                } else if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_SOAP)) {
                                                                    if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                    }
                                                                } else {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                }
                                                            } else {
                                                                if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                }
                                                            }
                                                        }
                                                        if(!"".equals(sExpandParam)) {
                                                            ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                                            sRepresentative = EscapeUtils.CheckTextNull(jsonReqExpand.representative);
                                                            sRepresentativePosition = EscapeUtils.CheckTextNull(jsonReqExpand.representativePosition);
                                                        }
                                                        //</editor-fold>
                                                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                            if(EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM) && !"".equals(sCSR)){
                                                                if("".equals(EscapeUtils.CheckTextNull(raServiceReq.iccid))){
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ICCID_INVALID;
                                                                }
                                                            }
                                                        }

                                                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                            String[] sUIDResult = new String[2];
                                                            CommonReferServlet.collectFieldToUIDAPI(sMSTCompoment, sMNSCompoment, sQDCompoment, sBHXHCompoment, sMDVCompoment,
                                                                sCMNDCompoment, sHCCompoment, sCCCDCompoment, sMSTCompomentCN, sBHXHCompomentCN, sUIDResult);
                                                            String sEnterpriseCert = sUIDResult[0];
                                                            String sPersonalCert = sUIDResult[1];
                                                            
                                                            //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR ">
                                                            CERTIFICATION_DATA_ATTR tempLogReq = new CERTIFICATION_DATA_ATTR();
                                                            tempLogReq.personalName = sPersonalCompoment;
                                                            tempLogReq.companyName = sCompanyCompoment;
                                                            tempLogReq.enterpriseID = sEnterpriseCert;
                                                            tempLogReq.personalID = sPersonalCert;
                                                            tempLogReq.emailContract = raServiceReq.emailContact;
                                                            tempLogReq.phoneContract = raServiceReq.phoneContact;
                                                            tempLogReq.issuerSubject = sCoreCASubject;
                                                            tempLogReq.subjectDn = sDNResult;
                                                            tempLogReq.tokenSn = sTOKEN_SN;
                                                            tempLogReq.provinceName = sProvinceNameComponent;
                                                            tempLogReq.pkiFromFactorCode = raServiceReq.formFactorCode;
                                                            tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                                                            ATTRIBUTE_VALUES valueATTR;
                                                            ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                                                            dataATTR.setCertificationData(tempLogReq);
                                                            valueATTR = new ATTRIBUTE_VALUES();
                                                            valueATTR.setTokenSn(sTOKEN_SN);
                                                            boolean sChangeKeyEnabled = "1".equals(CheckCHANGE_KEY);
                                                            valueATTR.setChangeKeyEnabled(sChangeKeyEnabled);
                                                            valueATTR.setKeepCertificateSNEnabled(false);
                                                            valueATTR.setTypeName(pCERTIFICATION_ATTR_TYPE_CODE);
                                                            valueATTR.setPromotionDuration(sPromotionDuration);
                                                            if(!"".equals(sRsspAgreementUUID)) {
                                                                valueATTR.setRsspAgreementUUID(sRsspAgreementUUID);
                                                            }
                                                            if(!"".equals(sRsspRelyingParty)) {
                                                                valueATTR.setRsspRelyingParty(sRsspRelyingParty);
                                                            }
                                                            if(!"".equals(sRsspCertificateUUID)) {
                                                                valueATTR.setRsspCertificateUUID(sRsspCertificateUUID);
                                                            }
                                                            if(!"".equals(sRsspConnectWSMode)) {
                                                                valueATTR.setRsspConnectWSMode(sRsspConnectWSMode);
                                                            }
                                                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                                            valueATTR.setCreateUser(raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                                                            valueATTR.setCreateDt(new Date());
                                                            valueATTR.setAttributeData(dataATTR);
                                                            //</editor-fold>

                                                            String strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                            //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                                                            // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                                                            int intLevelApprove = 0;
                                                            if (autoApproveCAServer == false && autoApproveCAClient == false) {
                                                                intLevelApprove = 0;
                                                            } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                                                                intLevelApprove = 1;
                                                            } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                                                                intLevelApprove = 0;
                                                            } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                                                                intLevelApprove = 2;
                                                            }
                                                            //</editor-fold>

                                                            int[] pCERTIFICATE_ATTR_ID = new int[1];
                                                            int[] pCERTIFICATION_ID = new int[1];
                                                            String[] pRESPONSE_CODE_NAME = new String[1];
                                                            if (CommonFunction.checkHardTokenEnabled(EscapeUtils.CheckTextNull(raServiceReq.formFactorCode)) == true
                                                                || (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM) && "".equals(sCSR)))
                                                            {
                                                                //<editor-fold defaultstate="collapsed" desc="### GET POLICY"> 
                                                                int intOTPNumn = 8;
                                                                if (rsPolicy[0].length > 0) {
                                                                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                                        if (EscapeUtils.CheckTextNull(rsPolicy1.NAME).equals(Definitions.CONFIG_POLICY_FO_DEFAULT_ACTIVATION_CODE_LENGTH)) {
                                                                            intOTPNumn = Integer.parseInt(rsPolicy1.VALUE);
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                                //</editor-fold>
                                                                if (raServiceReq.backupKeyEnabled == true) {
                                                                    CheckPRIVATE_KEY = "1";
                                                                } else {
                                                                    CheckPRIVATE_KEY = "0";
                                                                }
                                                                pRESPONSE_CODE_NAME[0] = "10000";
                                                                //<editor-fold defaultstate="collapsed" desc="### INSERT CERT AND ACTIVATION CODE">
                                                                while ("10000".equals(pRESPONSE_CODE_NAME[0])) {
                                                                    try {
                                                                        String sOTP = "";
                                                                        sOTP = CommonFunction.getRandomOTP(intOTPNumn);
                                                                        if(raServiceReq.activationCodeEnabled == true) {
                                                                            raServiceResp.activationCode = sOTP;
                                                                        }
                                                                        db.S_BO_API_CERTIFICATION_INSERT(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), sTOKEN_SN,
                                                                            sCERTIFICATION_SN, sPersonalCompoment, sCompanyCompoment, sDomainCompoment,
                                                                            sDNResult, sCoreCASubject, EscapeUtils.CheckTextNull(raServiceReq.phoneContact),
                                                                            EscapeUtils.CheckTextNull(raServiceReq.emailContact),
                                                                            sProvinceCodeComponent, pPAST_CERTIFICATION_SN, sOTP, pCERTIFICATION_ATTR_TYPE_CODE,
                                                                            strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser),
                                                                            EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), sCSR,
                                                                            EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode), CheckCHANGE_KEY, CheckPRIVATE_KEY,
                                                                            EscapeUtils.CheckTextNull(raServiceReq.formFactorCode), sDeviceUUID.trim(), sPromotionDuration, pRESPONSE_CODE_NAME, pCERTIFICATION_ID,
                                                                            pCERTIFICATE_ATTR_ID, raServiceReq.certificateOwnerID, pEFFECTIVE_DT, pEXPIRATION_DT,
                                                                            sEnterpriseCert, sPersonalCert);
                                                                        CommonFunction.LogDebugString(log, sTOKEN_SN + " - S_BO_API_CERTIFICATION_INSERT - RESULT", pRESPONSE_CODE_NAME[0]);
                                                                    } catch (Exception e) {
                                                                        if (e.getMessage().contains(Definitions.CONFIG_MYSQL_UNIQUE_ACTIVATION_CODE)) {
                                                                            pRESPONSE_CODE_NAME[0] = "10000";
                                                                        } else {
                                                                            pRESPONSE_CODE_NAME[0] = String.valueOf(Definitions.CONFIG_WS_RESPONSE_CODE_EXCEPTION);
                                                                            CommonFunction.LogExceptionServlet(log, e.getMessage().trim(), e);
                                                                        }
                                                                    }
                                                                }
                                                                //</editor-fold>

                                                                if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                                                    raServiceResp.certificateID = pCERTIFICATION_ID[0];
                                                                    raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                    if(!"".equals(strDNSName)) {
                                                                        db.S_BO_CERTIFICATION_UPDATE_PROPERTIES(String.valueOf(pCERTIFICATION_ID[0]), strDNSName, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                                    }
                                                                    if(!"".equals(sRepresentative) || !"".equals(sRepresentativePosition)){
                                                                        ProfileContactInfoJson profileContact = new ProfileContactInfoJson();
                                                                        profileContact.RepresentativeName = CommonFunction.replaceCharaterSpecialJson(sRepresentative, true);
                                                                        profileContact.Position = CommonFunction.replaceCharaterSpecialJson(sRepresentativePosition, true);
                                                                        objectMapper = new ObjectMapper();
                                                                        BACKOFFICE_USER[][] rsUserID = new BACKOFFICE_USER[1][0];
                                                                        db.S_BO_USER_GET_BY_USERNAME(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), rsUserID);
                                                                        if(rsUserID != null && rsUserID[0].length > 0){
                                                                            db.S_BO_CERTIFICATION_UPDATE_CONTACT_INFO(pCERTIFICATION_ID[0], objectMapper.writeValueAsString(profileContact), String.valueOf(rsUserID[0][0].ID));
                                                                        }
                                                                    }

                                                                    //<editor-fold defaultstate="collapsed" desc="### File Attach: Check Add to JRB">
                                                                    if (isHasFileClient == true) {
                                                                        String sJRBConfig = "";
                                                                        if (rsPolicy[0].length > 0) {
                                                                            for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                                                if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DMS_PROPERTIES_CURRENT)) {
                                                                                    sJRBConfig = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                        if (!"".equals(sJRBConfig)) {
                                                                            String sJRB_Source = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_SOURCE);
                                                                            if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_EFY)) {
                                                                                String sIP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_IP);
                                                                                String sHTTP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PROTOCOL);
                                                                                String sCONTEXT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_CONTEXT);
                                                                                String sPORT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PORT);
                                                                                String sDEFAULT_USER = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERNAME);
                                                                                String sDEFAULT_PASS = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PASSWORD);
                                                                                String sOWNERCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_OWNERCODE);
                                                                                String sAPPCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_APPCODE);
                                                                                String sFUNCTION_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_FUNCTION_UP);
                                                                                String idUUID_Temp = Definitions.CONFIG_JACK_RABBIT_UUID_SAMPLE;
                                                                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                    String sFileData = new String(Base64.encodeBase64(fileManagerInsert.fileByte), "UTF-8"); //EscapeUtils.CheckTextNull(mhIP.FILE_URL);//CommonFunction.encodeFileToBase64Binary(fileUp);
                                                                                    CloseableHttpResponse pHttpRes = ConnectFileToPartner.upFileParner(sIP_CONNECT, sHTTP_CONNECT,
                                                                                            sCONTEXT_CONNECT, Integer.parseInt(sPORT_CONNECT), sDEFAULT_USER,
                                                                                            sDEFAULT_PASS, sOWNERCODE_CONNECT, sAPPCODE_CONNECT, sFUNCTION_CONNECT, idUUID_Temp,
                                                                                            fileManagerInsert.fileName, sFileData);
                                                                                    InputStream isStr = pHttpRes.getEntity().getContent();
                                                                                    String resultUUID = IOUtils.toString(isStr);
                                                                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", resultUUID);
                                                                                    String sMimeType = fileManagerInsert.mimeType;
                                                                                    int[] pFILE_MANAGER_ID = new int[1];
                                                                                    db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, resultUUID, sJRBConfig,
                                                                                            sMimeType, fileManagerInsert.fileName, fileManagerInsert.fileByte.length,
                                                                                            pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                }
                                                                            } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_JRB)) {
                                                                                String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                    String sMimeType = fileManagerInsert.mimeType;
                                                                                    JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
                                                                                            Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                    InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
                                                                                    JCRFile jrbFile = JackRabbitCommon.getInstance(jcrConfig).uploadFile(fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                    if(jrbFile != null){
                                                                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", jrbFile.getUuid());
                                                                                    int[] pFILE_MANAGER_ID = new int[1];
                                                                                    db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, jrbFile.getUuid(), sJRBConfig,
                                                                                            jrbFile.getMimeType(), jrbFile.getFileName(), fileManagerInsert.fileByte.length,
                                                                                            pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                    }
                                                                                }
                                                                            } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_MID)) {
                                                                                String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                    String sMimeType = fileManagerInsert.mimeType;
        //                                                                            JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
        //                                                                                Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                    InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
        //                                                                            JCRFile jrbFile = JackRabbitCommon.uploadFile(jcrConfig, fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                    ConnectJackRabbitNew openJRB = new ConnectJackRabbitNew(sJRB_Host, sJRB_UserID, sJRB_UserPass,
                                                                                            Integer.parseInt(sJRB_MaxSession), Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                    String[] sReturnJRB = new String[2];
                                                                                    vn.mobileid.fms.client.JCRFile jrbFile = openJRB.uploadFile(EscapeUtils.CheckTextNull(fileManagerInsert.fileName),
                                                                                            EscapeUtils.CheckTextNull(sMimeType), isFILE_STREAM, sReturnJRB);
                                                                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", sReturnJRB[0].trim());
                                                                                    int[] pFILE_MANAGER_ID = new int[1];
                                                                                    db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, sReturnJRB[0].trim(), sJRBConfig,
                                                                                            sMimeType, sReturnJRB[1].trim(), fileManagerInsert.fileByte.length,
                                                                                            pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                }
                                                                            } else {
                                                                            }
                                                                        }
                                                                    }
                                                                    //</editor-fold>

                                                                    //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                                                    if (intLevelApprove == 1 || intLevelApprove == 2) {
                                                                        String sLevelBranch = db.S_BO_API_GET_LEVEL_BY_BRANCH_CODE(raServiceReq.beneficiaryBranch);
                                                                        if(!sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CA) && !sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CHILREN_ONE))
                                                                        {
                                                                            int approveChilrenID = 0;
                                                                            String approveChilrenUser = raServiceReq.approveUser;
                                                                            String approveChilrenFullname = raFullname;
                                                                            BRANCH[][] rsBranch = new BRANCH[1][];
                                                                            BACKOFFICE_USER[][] rsUserApprove;
                                                                            rsUserApprove = new BACKOFFICE_USER[1][];
                                                                            String roleUserID = "";
                                                                            db.S_BO_USER_GET_BY_USERNAME(raServiceReq.beneficiaryUser, rsUserApprove);
                                                                            if(rsUserApprove[0].length > 0){
                                                                                roleUserID = String.valueOf(rsUserApprove[0][0].ROLE_ID);
                                                                            }
                                                                            if(roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN) || roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                approveChilrenID = rsUserApprove[0][0].ID;
                                                                                approveChilrenUser = rsUserApprove[0][0].USERNAME;
                                                                                approveChilrenFullname = rsUserApprove[0][0].FULL_NAME;
                                                                            } else {
                                                                                rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                db.S_BO_USER_GET_BY_USERNAME(raServiceReq.approveUser, rsUserApprove);
                                                                                if(rsUserApprove[0].length > 0) {
                                                                                    approveChilrenID = rsUserApprove[0][0].ID;
                                                                                }
                                                                                db.S_BO_API_BRANCH_GET_INFO(raServiceReq.beneficiaryBranch, rsBranch);
                                                                                if(rsBranch[0].length > 0) {
                                                                                    rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                    db.S_BO_GET_USER_BRANCH_ALL(String.valueOf(rsBranch[0][0].ID), rsUserApprove);
                                                                                    if(rsUserApprove[0].length > 0) {
                                                                                        boolean isHasAdmin = false;
                                                                                        for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                            if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN)) {
                                                                                                isHasAdmin = true;
                                                                                                approveChilrenID = item.ID;
                                                                                                approveChilrenUser = item.USERNAME;
                                                                                                approveChilrenFullname = item.FULL_NAME;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        if(isHasAdmin == false){
                                                                                            for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                                if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                                    approveChilrenID = item.ID;
                                                                                                    approveChilrenUser = item.USERNAME;
                                                                                                    approveChilrenFullname = item.FULL_NAME;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                                                            valueATTR.setApproveUser(approveChilrenFullname + " (" + approveChilrenUser + ")");
                                                                            valueATTR.setApproveDt(new Date());
                                                                            strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                            db.S_BO_CERTIFICATION_PRE_APPROVED_BY_LOW_LEVEL_BRANCH(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, raServiceReq.approveUser, approveChilrenID);
                                                                        }
                                                                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                                                        valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                        valueATTR.setApproveDt(new Date());
                                                                        strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                        String sPRE_APPROVED = db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                        if("0".equals(sPRE_APPROVED)) {
                                                                            raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                        } else {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                        }
                                                                    }
                                                                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                                        if (intLevelApprove == 2) {
                                                                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                                                            valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                            valueATTR.setApproveCADt(new Date());
                                                                            strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                            String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                            if ("0".equals(sApprove)) {
                                                                                // DISCOUNT RATE
                                                                                if ("1".equals(sDiscountRateOption)) {
                                                                                    CommonReferServlet.updateDiscountRateImportCert(String.valueOf(raServiceResp.certificateID),
                                                                                        EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode),
                                                                                        "", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.approveUser),"", "", sEnterpriseCert, sPersonalCert);
                                                                                }
                                                                                // SET COMMIT_ENABLED TRUE of FILE
                                                                                db.S_BO_API_CERTIFICATION_SUPPLEMENT_FILE(pCERTIFICATE_ATTR_ID[0], raServiceReq.approveUser, pRESPONSE_CODE_NAME);
                                                                                String pushNoticeEnabled = "0";
                                                                                boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                                                                if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                                                                    pushNoticeEnabled = "1";
                                                                                }
                                                                                db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                // select get cert with pCERTIFICATION_ID[0]
                                                                                int[] pRESPONSE_CODE = new int[1];
                                                                                CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                                                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0], "", "",
                                                                                        raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                                                if (certInfo[0].length > 0) {
                                                                                    raServiceResp.certificate = certInfo[0][0].certificate;
                                                                                }
                                                                                if ("1".equals(pushNoticeEnabled)) {
                                                                                    int[] intRes = new int[1];
                                                                                    String[] sRes = new String[1];
                                                                                    ConnectConnector.SendMailOTP(String.valueOf(pCERTIFICATION_ID[0]), intRes, sRes);
                                                                                }
                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                            } else {
                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                            }
                                                                        } else {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                        }
                                                                    }
                                                                    //</editor-fold>
                                                                } else {
                                                                    raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                                                }
                                                            } else if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)
                                                                || (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM) && !"".equals(sCSR)))
                                                            {
                                                                String strPasswordP12 = "";
                                                                boolean isValidCSR = true;
                                                                //<editor-fold defaultstate="collapsed" desc="### CSR: check valid">
                                                                if (!"".equals(sCSR)) {
                                                                    CheckPRIVATE_KEY = "0";
                                                                    String sKeySizeDB;
                                                                    isValidCSR = false;
                                                                    CERTIFICATION[][] rsCert = new CERTIFICATION[1][];
                                                                    db.S_BO_API_GET_ALGORITHM_KEY_SIZE(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), rsCert);
                                                                    if (rsCert[0].length > 0) {
                                                                        sKeySizeDB = EscapeUtils.CheckTextNull(rsCert[0][0].KEY_SIZE);
                                                                        String sKeySizeCSR = CommonFunction.getKeySizeFromCSR(sCSR);
                                                                        isValidCSR = sKeySizeDB.equals(sKeySizeCSR);
                                                                    }
//                                                                    if(isValidCSR == true) {
//                                                                        String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
//                                                                        int checkPublicKey = db.S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH("", "", sPublicKeyHard);
//                                                                        // call store cert Operation check exist sPublicKeyHard
//                                                                        if(checkPublicKey == 0) {
//                                                                            checkCSRNotExists = true;
//                                                                        } else {
//                                                                            checkCSRNotExists = false;
//                                                                        }
//                                                                    }
                                                                } else {
                                                                    CheckPRIVATE_KEY = "1";
                                                                    if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                                                        strPasswordP12 = EscapeUtils.CheckTextNull(raServiceReq.p12Password);
                                                                    } else {
                                                                        strPasswordP12 = CommonFunction.randomPasswordP12(8);
                                                                    }
                                                                }
                                                                //</editor-fold>

                                                                if (isValidCSR == true) {
                                                                    if (checkCSRNotExists == true) {
                                                                        db.S_BO_API_CERTIFICATION_INSERT(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), sTOKEN_SN,
                                                                            sCERTIFICATION_SN, sPersonalCompoment, sCompanyCompoment, sDomainCompoment,
                                                                            sDNResult, sCoreCASubject, EscapeUtils.CheckTextNull(raServiceReq.phoneContact), EscapeUtils.CheckTextNull(raServiceReq.emailContact),
                                                                            sProvinceCodeComponent, pPAST_CERTIFICATION_SN, "", pCERTIFICATION_ATTR_TYPE_CODE,
                                                                            strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), sCSR,
                                                                            EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode), CheckCHANGE_KEY, CheckPRIVATE_KEY,
                                                                            EscapeUtils.CheckTextNull(raServiceReq.formFactorCode), sDeviceUUID, sPromotionDuration,
                                                                            pRESPONSE_CODE_NAME, pCERTIFICATION_ID, pCERTIFICATE_ATTR_ID, raServiceReq.certificateOwnerID,
                                                                            pEFFECTIVE_DT, pEXPIRATION_DT, sEnterpriseCert, sPersonalCert);
                                                                        CommonFunction.LogDebugString(log, sTOKEN_SN + " - S_BO_API_CERTIFICATION_INSERT - RESULT", pRESPONSE_CODE_NAME[0]);
                                                                        if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                                                            // PROPERTIES SAN
                                                                            if(!"".equals(strDNSName)) {
                                                                                db.S_BO_CERTIFICATION_UPDATE_PROPERTIES(String.valueOf(pCERTIFICATION_ID[0]), strDNSName, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                                            }
                                                                            if(!"".equals(sRepresentative) || !"".equals(sRepresentativePosition)){
                                                                                ProfileContactInfoJson profileContact = new ProfileContactInfoJson();
                                                                                profileContact.RepresentativeName = CommonFunction.replaceCharaterSpecialJson(sRepresentative, true);
                                                                                profileContact.Position = CommonFunction.replaceCharaterSpecialJson(sRepresentativePosition, true);
                                                                                objectMapper = new ObjectMapper();
                                                                                BACKOFFICE_USER[][] rsUserID = new BACKOFFICE_USER[1][0];
                                                                                db.S_BO_USER_GET_BY_USERNAME(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), rsUserID);
                                                                                if(rsUserID != null && rsUserID[0].length > 0){
                                                                                    db.S_BO_CERTIFICATION_UPDATE_CONTACT_INFO(pCERTIFICATION_ID[0], objectMapper.writeValueAsString(profileContact), String.valueOf(rsUserID[0][0].ID));
                                                                                }
                                                                            }
                                                                            
                                                                            //<editor-fold defaultstate="collapsed" desc="### PUBLIC KEY HASH">
                                                                            if(!"".equals(sCSR)) {
                                                                                String sKeySizeCSR = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                                                db.S_BO_CERTIFICATION_UPDATE_CSR_INFO(pCERTIFICATION_ID[0], sKeySizeCSR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                                            }
                                                                            //</editor-fold>

                                                                            raServiceResp.certificateID = pCERTIFICATION_ID[0];
                                                                            raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                            //<editor-fold defaultstate="collapsed" desc="### File Attach: Check Add to JRB">
                                                                            if (isHasFileClient == true) {
                                                                                String sJRBConfig = "";
                                                                                if (rsPolicy[0].length > 0) {
                                                                                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                                                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DMS_PROPERTIES_CURRENT)) {
                                                                                            sJRBConfig = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if (!"".equals(sJRBConfig)) {
                                                                                    String sJRB_Source = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_SOURCE);
                                                                                    if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_EFY)) {
                                                                                        String sIP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_IP);
                                                                                        String sHTTP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PROTOCOL);
                                                                                        String sCONTEXT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_CONTEXT);
                                                                                        String sPORT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PORT);
                                                                                        String sDEFAULT_USER = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERNAME);
                                                                                        String sDEFAULT_PASS = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PASSWORD);
                                                                                        String sOWNERCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_OWNERCODE);
                                                                                        String sAPPCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_APPCODE);
                                                                                        String sFUNCTION_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_FUNCTION_UP);
                                                                                        String idUUID_Temp = Definitions.CONFIG_JACK_RABBIT_UUID_SAMPLE;
                                                                                        for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                            String sFileData = new String(Base64.encodeBase64(fileManagerInsert.fileByte), "UTF-8"); //EscapeUtils.CheckTextNull(mhIP.FILE_URL);//CommonFunction.encodeFileToBase64Binary(fileUp);
                                                                                            CloseableHttpResponse pHttpRes = ConnectFileToPartner.upFileParner(sIP_CONNECT, sHTTP_CONNECT,
                                                                                                    sCONTEXT_CONNECT, Integer.parseInt(sPORT_CONNECT), sDEFAULT_USER,
                                                                                                    sDEFAULT_PASS, sOWNERCODE_CONNECT, sAPPCODE_CONNECT, sFUNCTION_CONNECT, idUUID_Temp,
                                                                                                    fileManagerInsert.fileName, sFileData);
                                                                                            InputStream isStr = pHttpRes.getEntity().getContent();
                                                                                            String resultUUID = IOUtils.toString(isStr);
                                                                                            CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", resultUUID);
                                                                                            String sMimeType = fileManagerInsert.mimeType;
                                                                                            int[] pFILE_MANAGER_ID = new int[1];
                                                                                            db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, resultUUID, sJRBConfig,
                                                                                                    sMimeType, fileManagerInsert.fileName, fileManagerInsert.fileByte.length,
                                                                                                    pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                        }
                                                                                    } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_JRB)) {
                                                                                        String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                        String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                        String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                        String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                        String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                        String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                        String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                        for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                            String sMimeType = fileManagerInsert.mimeType;
                                                                                            JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
                                                                                                    Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                            InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
                                                                                            JCRFile jrbFile = JackRabbitCommon.getInstance(jcrConfig).uploadFile(fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                            if(jrbFile != null){
                                                                                            CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", jrbFile.getUuid());
                                                                                            int[] pFILE_MANAGER_ID = new int[1];
                                                                                            db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, jrbFile.getUuid(), sJRBConfig,
                                                                                                    jrbFile.getMimeType(), jrbFile.getFileName(), fileManagerInsert.fileByte.length,
                                                                                                    pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                            }
                                                                                        }
                                                                                    } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_MID)) {
                                                                                        String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                        String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                        String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                        String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                        String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                        String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                        String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                        for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                            String sMimeType = fileManagerInsert.mimeType;
            //                                                                                JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
            //                                                                                    Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                            InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
            //                                                                                JCRFile jrbFile = JackRabbitCommon.uploadFile(jcrConfig, fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                            ConnectJackRabbitNew openJRB = new ConnectJackRabbitNew(sJRB_Host, sJRB_UserID, sJRB_UserPass,
                                                                                                    Integer.parseInt(sJRB_MaxSession), Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                            String[] sReturnJRB = new String[2];
                                                                                            vn.mobileid.fms.client.JCRFile jrbFile = openJRB.uploadFile(EscapeUtils.CheckTextNull(fileManagerInsert.fileName),
                                                                                                    EscapeUtils.CheckTextNull(sMimeType), isFILE_STREAM, sReturnJRB);
                                                                                            CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", jrbFile.getUuid());
                                                                                            int[] pFILE_MANAGER_ID = new int[1];
                                                                                            db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, sReturnJRB[0].trim(), sJRBConfig,
                                                                                                    sMimeType, sReturnJRB[1].trim(), fileManagerInsert.fileByte.length,
                                                                                                    pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                        }
                                                                                    } else {
                                                                                    }
                                                                                }
                                                                            }
                                                                            //</editor-fold>

                                                                            //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                                                            if (intLevelApprove == 1 || intLevelApprove == 2) {
                                                                                String sLevelBranch = db.S_BO_API_GET_LEVEL_BY_BRANCH_CODE(raServiceReq.beneficiaryBranch);
                                                                                if(!sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CA) && !sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CHILREN_ONE))
                                                                                {
                                                                                    int approveChilrenID = 0;
                                                                                    String approveChilrenUser = raServiceReq.approveUser;
                                                                                    String approveChilrenFullname = raFullname;
                                                                                    BRANCH[][] rsBranch = new BRANCH[1][];
                                                                                    BACKOFFICE_USER[][] rsUserApprove;
                                                                                    rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                    String roleUserID = "";
                                                                                    db.S_BO_USER_GET_BY_USERNAME(raServiceReq.beneficiaryUser, rsUserApprove);
                                                                                    if(rsUserApprove[0].length > 0){
                                                                                        roleUserID = String.valueOf(rsUserApprove[0][0].ROLE_ID);
                                                                                    }
                                                                                    if(roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN) || roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                        approveChilrenID = rsUserApprove[0][0].ID;
                                                                                        approveChilrenUser = rsUserApprove[0][0].USERNAME;
                                                                                        approveChilrenFullname = rsUserApprove[0][0].FULL_NAME;
                                                                                    } else {
                                                                                        rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                        db.S_BO_USER_GET_BY_USERNAME(raServiceReq.approveUser, rsUserApprove);
                                                                                        if(rsUserApprove[0].length > 0) {
                                                                                            approveChilrenID = rsUserApprove[0][0].ID;
                                                                                        }
                                                                                        db.S_BO_API_BRANCH_GET_INFO(raServiceReq.beneficiaryBranch, rsBranch);
                                                                                        if(rsBranch[0].length > 0) {
                                                                                            rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                            db.S_BO_GET_USER_BRANCH_ALL(String.valueOf(rsBranch[0][0].ID), rsUserApprove);
                                                                                            if(rsUserApprove[0].length > 0) {
                                                                                                boolean isHasAdmin = false;
                                                                                                for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                                    if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN)) {
                                                                                                        isHasAdmin = true;
                                                                                                        approveChilrenID = item.ID;
                                                                                                        approveChilrenUser = item.USERNAME;
                                                                                                        approveChilrenFullname = item.FULL_NAME;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                if(isHasAdmin == false){
                                                                                                    for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                                        if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                                            approveChilrenID = item.ID;
                                                                                                            approveChilrenUser = item.USERNAME;
                                                                                                            approveChilrenFullname = item.FULL_NAME;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                                                                    valueATTR.setApproveUser(approveChilrenFullname + " (" + approveChilrenUser + ")");
                                                                                    valueATTR.setApproveDt(new Date());
                                                                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                                    db.S_BO_CERTIFICATION_PRE_APPROVED_BY_LOW_LEVEL_BRANCH(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, raServiceReq.approveUser, approveChilrenID);
                                                                                }
                                                                                valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                                                                valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                                valueATTR.setApproveDt(new Date());
                                                                                strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                                String sPRE_APPROVED = db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                if("0".equals(sPRE_APPROVED)) {
                                                                                    raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                                } else {
                                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                                }
                                                                            }
                                                                            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                                                if (intLevelApprove == 2) {
                                                                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                                                                    valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                                    valueATTR.setApproveCADt(new Date());
                                                                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                                    String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                    if ("0".equals(sApprove)) {
                                                                                        // DISCOUNT RATE
                                                                                        if ("1".equals(sDiscountRateOption)) {
                                                                                            CommonReferServlet.updateDiscountRateImportCert(String.valueOf(raServiceResp.certificateID),
                                                                                                EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode),
                                                                                                "", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.approveUser), "", "", sEnterpriseCert, sPersonalCert);
                                                                                        }
                                                                                        // SET COMMIT_ENABLED TRUE of FILE
                                                                                        db.S_BO_API_CERTIFICATION_SUPPLEMENT_FILE(pCERTIFICATE_ATTR_ID[0], raServiceReq.approveUser, pRESPONSE_CODE_NAME);

                                                                                        //<editor-fold defaultstate="collapsed" desc="### UPDATE SEND EMAIL CERT">
                                                                                        if (sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SIGNSERVER_SN) || sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SN_FORMFACTOR_ESIGNCLOUD)) {
                                                                                            if (!"".equals(sCSR)) {
                                                                                                String pushNoticeEnabled = "0";
                                                                                                boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                                                                                if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                                                                                    pushNoticeEnabled = "1";
                                                                                                }
                                                                                                db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                            } else {
                                                                                                String p12EmailEnabled = "0";
                                                                                                boolean p12EmailCertServer = CommonFunction.getP12EmailEnabledCert(sCERT_POLICY_PROPERTIES);
                                                                                                if (raServiceReq.p12EmailEnabled == true && p12EmailCertServer == true) {
                                                                                                    p12EmailEnabled = "1";
                                                                                                }
                                                                                                db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", p12EmailEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                            }
                                                                                        } else {
                                                                                            String pushNoticeEnabled = "0";
                                                                                            boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                                                                            if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                                                                                pushNoticeEnabled = "1";
                                                                                            }
                                                                                            db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                        }
                                                                                        //</editor-fold>
                                                                                        
                                                                                        if(EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM) && !"".equals(sCSR)) {
                                                                                            sTOKEN_SN = EscapeUtils.CheckTextNull(raServiceReq.iccid);
                                                                                            db.S_BO_API_SIM_CERTIFICATION_GENERATED(pCERTIFICATE_ATTR_ID[0], sCSR,
                                                                                                strReqValueATTR, sTOKEN_SN, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                        }
                                                                                        ConnectDbPhaseTwo dbTwo = new ConnectDbPhaseTwo();
                                                                                        dbTwo.S_BO_CERTIFICATION_ATTR_UPDATE_ACTIVATED_ENABLED(pCERTIFICATE_ATTR_ID[0], 1);
                                                                                        int[] intWSRes = new int[1];
                                                                                        String[] sWSRes = new String[1];
                                                                                        ConnectConnector.EnrollCertificate(sTOKEN_SN, strPasswordP12, String.valueOf(pCERTIFICATE_ATTR_ID[0]), intWSRes, sWSRes);
                                                                                        if (intWSRes[0] == 0) {
                                                                                            // select get cert with pCERTIFICATION_ID[0]
                                                                                            int[] pRESPONSE_CODE = new int[1];
                                                                                            CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                                                            db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0], "", "",
                                                                                                    raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                                                            if (certInfo[0].length > 0) {
                                                                                                raServiceResp.certificate = certInfo[0][0].certificate;
                                                                                                raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                                                                raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                                                            }
                                                                                            if (!"".equals(strPasswordP12)) {
                                                                                                int[] intRes = new int[1];
                                                                                                String[] sRes = new String[1];
                                                                                                byte[] sP12Return = ConnectConnector.generateKeystore(strPasswordP12, false, String.valueOf(pCERTIFICATION_ID[0]), intRes, sRes);
                                                                                                raServiceResp.p12Certificate = sP12Return;
                                                                                            }
                                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                                        } else {
                                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                                                                        }
                                                                                    } else {
                                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                                    }
                                                                                } else {
                                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                                }
                                                                            }
                                                                            //</editor-fold>

                                                                            // return pass p12
                                                                            if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                                                                if (!"".equals(strPasswordP12)) {
                                                                                    raServiceResp.p12Password = strPasswordP12;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                                                        }
                                                                    } else {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EXISTS;
                                                                    }
                                                                } else {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_KEYSIZE;
                                                                }
                                                            } else {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_NO_DN;
                                                }
                                            } else {
                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_EMAIL_INCERT_INVALID;
                                            }
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_EMPTY;
                                        }
                                    }
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CA_PROFILE_INVALID;
                            }
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_TEMPLATE_CERT_EMPTY;
                        }
                    }
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### renewCertificateProcess">
    public void renewCertificateProcess(String sCERT_PROFILE_PROPERTIES, String sCERT_POLICY_PROPERTIES,
        String pPARENT_ID, int pBRANCH_ID, String pBeneficiaryUserDefault, String pApproveCAUser, boolean  autoApproveCAServer,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_RENEWAL_CERTIFICATION;
        String sTOKEN_SN = "";
        
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        ObjectMapper objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", EscapeUtils.CheckTextNull(raReqTemp.certificateSN),
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean autoApproveCAClient = raServiceReq.approveEnabled;
            String CheckCHANGE_KEY;
            String CheckPRIVATE_KEY;
            //<editor-fold defaultstate="collapsed" desc="### GET POLICY">
            GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
            db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
            String setDeleteOldCertificateEnabled = "1";
            String setRevokeOldCertificateEnabled = "0";
            String sNoAllowTranferToken = "1";
            String sDiscountRateOption = "0";
            String sApproveCertNoChangeKey = "0";
            String checkChangeEffectiveDT = "0";
            String dayChangeEffectiveDT = "0";
            if (rsPolicy[0].length > 0) {
                for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_DISCOUNT_RATE_PROFILE_OPTION)) {
                        sDiscountRateOption = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_RENEWAL_AND_REVISION_AUTO_ISSUE_CERT_FOR_PARTICULAR_REQUEST)) {
                        sApproveCertNoChangeKey = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_NO_AUTO_MOVE_TOKEN_FOR_RENEWAL_REVISION_CERTIFICATE_REQUEST)) {
                        sNoAllowTranferToken = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                    if(rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_OPTION_FOR_CHANGING_EFFECTIVE_DT)) {
                        checkChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                    if(rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_MAX_NUMBERS_DAY_ISSUE_CERTIFICATE_FUTURE)) {
                        dayChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                }
            }
            if(raServiceReq.deleteCertificateEnabled == false) {
                setDeleteOldCertificateEnabled = "0";
            }
//            if(raServiceReq.revokeOldCertificateEnabled == false) {
//                setRevokeOldCertificateEnabled = "0";
//            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE">
            int createdUserID = 0;
            String pCERTIFICATION_SN = "";
            String pCERTIFICATION_PROFILE_CODE = EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode);
            String pCERTIFICATION_AUTHORITY_CODE = "";
            String pCERTIFICATION_PURPOSE_CODE = "";
//            String pCERTIFICATE_PROFILE_ID = "0";
            String sPHONE_CONTRACT = "";
            String sEMAIL_CONTRACT = "";
            String sCoreCASubject = "";
            String sDN_DB = "";
            String pPERSONAL_NAME = "";
            String pCOMPANY_NAME = "";
            String pDOMAIN_NAME = "";
            String pPROPERTIES_SAN = "";
            String pEnterpriseDB = "";
            String pPersonalDB = "";
            String pDeviceUUID = "";
            String pPROVINCE_ID = "";
            String sCSR = "";
            String sProvinceNameComponent = "";
            String sProvinceCodeComponent = "";
            String pCERT_PROFILE_CODE_OLD = "";
            String sPKIFormFactorCode = "";
            String pSHARED_MODE = "";
            String pEXPIRATION_DT_OLD = "";
            String pEXPIRATION_CONTRACT_DT_OLD = "";
            int pPAST_CERTIFICATE_ID = 0;
            int pCERTIFICATION_OWNER_ID = 0;
            int sTokenId_Old = 0;
            int sBranchId_Cert = 0;
            boolean pPrivateKeyEnabled_Old = true;
            String pCERTIFICATION_ATTR_TYPE_CODE = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RENEWAL;
            String pPAST_CERTIFICATE_SN = "";
            int pCERTIFICATE_STATE_ID = 0;
            int sBranchId_New = 0;
            int[] pRESPONSE_CODE = new int[1];
            boolean isValidRequest = false;
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN))) {
                CertificateInfo[][] rsReq = new CertificateInfo[1][];
                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.certificateSN), 0,
                    "", "", raServiceReq.language, pRESPONSE_CODE, rsReq, "", "", "", "");
                if (rsReq[0].length > 0) {
                    for(CertificateInfo rsReqItem : rsReq[0]) {
                        if(rsReqItem.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_OPERATED
                            || rsReqItem.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_EXPIRED)
                        {
                            isValidRequest = true;
                            sPHONE_CONTRACT = rsReqItem.phoneContact; //rsReq[0][0]
                            sEMAIL_CONTRACT = rsReqItem.emailContact;
                            sCoreCASubject = rsReqItem.coreCASubject;
                            sDN_DB = rsReqItem.certificateDN;
                            pPERSONAL_NAME = rsReqItem.personalName;
                            pCOMPANY_NAME = rsReqItem.companyName;
                            pPROPERTIES_SAN = EscapeUtils.CheckTextNull(rsReqItem.subjectAlternativeName);
                            pEnterpriseDB = rsReqItem.enterpriseID;
                            pPersonalDB = rsReqItem.personalID;
                            pDeviceUUID = rsReqItem.deviceUUID;
                            sTOKEN_SN = rsReqItem.tokenSN;
                            pCERTIFICATION_AUTHORITY_CODE = rsReqItem.certificateAuthorityCode;
                            pCERTIFICATION_PURPOSE_CODE = rsReqItem.certificatePurposeCode;
                            pCERT_PROFILE_CODE_OLD = rsReqItem.certificateProfileCode;
                            pDOMAIN_NAME = rsReqItem.domainName;
                            pPROVINCE_ID = String.valueOf(rsReqItem.provinceId);
                            pPAST_CERTIFICATE_SN = rsReqItem.certificateSN;
                            sPKIFormFactorCode = rsReqItem.formFactorCode;
                            createdUserID = rsReqItem.createdId;
                            pCERTIFICATION_OWNER_ID = rsReqItem.certificateOwnerID;
                            sCSR = rsReqItem.csr;
                            pEXPIRATION_DT_OLD = EscapeUtils.CheckTextNull(rsReqItem.expirationTime);
                            pEXPIRATION_CONTRACT_DT_OLD = EscapeUtils.CheckTextNull(rsReqItem.expirationContractTime);
                            pCERTIFICATE_STATE_ID = rsReqItem.certificateStateId;
                            pPrivateKeyEnabled_Old = rsReqItem.backupKeyEnabled;
                            sTokenId_Old = rsReqItem.tokenId;
                            pPAST_CERTIFICATE_ID = rsReqItem.certificateID;
                            sBranchId_Cert = rsReqItem.raId;
                            pSHARED_MODE = rsReqItem.shareMode ? "1" : "0";
                            break;
                        }
                    }
                }
            }
            if(isValidRequest == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
            }
            //</editor-fold>
            
            //<editor-fold defaultstate="collapsed" desc="### CHECK CA-PROFILE CHANGE">
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                if(!"".equals(pCERTIFICATION_PROFILE_CODE)) {
                    if(!pCERTIFICATION_PROFILE_CODE.equals(pCERT_PROFILE_CODE_OLD)) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_PROFILE_INVALID;
                        ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList = new ArrayList<>();
                        //<editor-fold defaultstate="collapsed" desc="### GET PROFILE LIST ACCESS">
                        CERTIFICATION_POLICY_DATA[][] resPolicyData_Old = new CERTIFICATION_POLICY_DATA[1][];
                        CommonFunction.getProfileCertList(sCERT_PROFILE_PROPERTIES, resPolicyData_Old);
                        for(CERTIFICATION_POLICY_DATA resPolicyCertData_Old1 : resPolicyData_Old[0])
                        {
                            if(resPolicyCertData_Old1.attributeType.equals(Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST))
                            {
                                CERTIFICATION_PROFILE[][] resProfileDB = new CERTIFICATION_PROFILE[1][];
                                db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(resPolicyCertData_Old1.name), resProfileDB);
                                if(resProfileDB[0].length > 0)
                                {
                                    CERTIFICATION_POLICY_DATA itemProfileAccess = new CERTIFICATION_POLICY_DATA();
                                    itemProfileAccess.name = resProfileDB[0][0].NAME;
                                    itemProfileAccess.certificateAuthority = resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME;
                                    itemProfileAccess.certificatePurpose = resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME;
                                    itemProfileAccess.remark = resPolicyCertData_Old1.remark;
                                    itemProfileAccess.remarkEn = resPolicyCertData_Old1.remarkEn;
                                    itemProfileAccess.attributeType = Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST;
                                    tempProfileList.add(itemProfileAccess);
                                }
                            }
                        }
                        //</editor-fold>

                        CERTIFICATION_PROFILE[][] rsProfileCheck;
                        rsProfileCheck = new CERTIFICATION_PROFILE[1][];
                        db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(pCERTIFICATION_PROFILE_CODE, rsProfileCheck);
                        if(rsProfileCheck[0].length > 0) {
                            pCERTIFICATION_AUTHORITY_CODE = rsProfileCheck[0][0].CERTIFICATION_AUTHORITY_NAME;
                        }
                        rsProfileCheck = new CERTIFICATION_PROFILE[1][];
                        db.S_BO_API_CERTIFICATION_PROFILE_LIST_HASID(pCERTIFICATION_AUTHORITY_CODE, pCERTIFICATION_PURPOSE_CODE,
                            sPKIFormFactorCode, 1, raServiceReq.language, rsProfileCheck, sCERT_PROFILE_PROPERTIES, tempProfileList);
                        if(rsProfileCheck[0].length > 0) {
                            for(CERTIFICATION_PROFILE rsItem : rsProfileCheck[0]) {
                                if(rsItem.NAME.equals(pCERTIFICATION_PROFILE_CODE)) {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                    break;
                                }
                            }
                        }
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_PROFILE_INVALID;
                }
            }
            //</editor-fold>

            java.sql.Timestamp pEFFECTIVE_DT = null;
            java.sql.Timestamp pEXPIRATION_DT = null;
            //<editor-fold defaultstate="collapsed" desc="### CHECK EFFECCTIVE_DT EXPIRATION_DT">
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                if("1".equals(checkChangeEffectiveDT)) {
                    String sEffectiveTime = EscapeUtils.CheckTextNull(raServiceReq.effectiveTime);
                    if(!"".equals(sEffectiveTime)) {
                        if(CommonFunction.checkDatePatternValid(sEffectiveTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                            if(CommonFunction.checkDateAddDayCurrent(sEffectiveTime, Integer.parseInt(dayChangeEffectiveDT), Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                if(CommonFunction.checkDateBiggerCurrent(sEffectiveTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                    pEFFECTIVE_DT = CommonFunction.ConvertStringToTimeStamp(sEffectiveTime);
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                            }
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                        }
                    }
                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        //pEXPIRATION_CONTRACT_DT_OLD
                        String sExpirationTime = EscapeUtils.CheckTextNull(raServiceReq.expirationTime);
                        if(!"".equals(sExpirationTime)) {
                            if(pEFFECTIVE_DT == null) {
                                Date currentDate = new Date();
                                pEFFECTIVE_DT = new java.sql.Timestamp(currentDate.getTime());
                            }
                            if(CommonFunction.checkDatePatternValid(sExpirationTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                int profileDuration = 0;
                                int profilePromotion = 0;
                                CERTIFICATION_PROFILE[][] rsProfileCheck = new CERTIFICATION_PROFILE[1][];
                                db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(pCERTIFICATION_PROFILE_CODE, rsProfileCheck);
                                if(rsProfileCheck[0].length > 0) {
                                    profileDuration = rsProfileCheck[0][0].DURATION;
                                    profilePromotion = rsProfileCheck[0][0].DURATION_FREE;
                                }
                                if(CommonFunction.checkExpirationWithProfile(sExpirationTime, pEFFECTIVE_DT, profileDuration, profilePromotion,
                                    Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                    pEXPIRATION_DT = CommonFunction.ConvertStringToTimeStamp(sExpirationTime);
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EXPIRATION_INVALID;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EXPIRATION_INVALID;
                            }
                        }
                    }
                }
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK PROFILE and BRANCH VALID">
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_PROFILE_INVALID;
                ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList = new ArrayList<>();
                //<editor-fold defaultstate="collapsed" desc="### GET PROFILE LIST ACCESS">
                CERTIFICATION_POLICY_DATA[][] resPolicyData_Old = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getProfileCertList(sCERT_PROFILE_PROPERTIES, resPolicyData_Old);
                for(CERTIFICATION_POLICY_DATA resPolicyCertData_Old1 : resPolicyData_Old[0])
                {
                    if(resPolicyCertData_Old1.attributeType.equals(Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST))
                    {
                        CERTIFICATION_PROFILE[][] resProfileDB = new CERTIFICATION_PROFILE[1][];
                        db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(resPolicyCertData_Old1.name), resProfileDB);
                        if(resProfileDB[0].length > 0)
                        {
                            CERTIFICATION_POLICY_DATA itemProfileAccess = new CERTIFICATION_POLICY_DATA();
                            itemProfileAccess.name = resProfileDB[0][0].NAME;
                            itemProfileAccess.certificateAuthority = resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME;
                            itemProfileAccess.certificatePurpose = resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME;
                            itemProfileAccess.remark = resPolicyCertData_Old1.remark;
                            itemProfileAccess.remarkEn = resPolicyCertData_Old1.remarkEn;
                            itemProfileAccess.attributeType = Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST;
                            tempProfileList.add(itemProfileAccess);
                        }
                    }
                }
                //</editor-fold>

                CertificateProfileInfo[][] rsProfileCheck = new CertificateProfileInfo[1][];
                db.S_BO_API_CERTIFICATION_PROFILE_LIST(pCERTIFICATION_AUTHORITY_CODE, pCERTIFICATION_PURPOSE_CODE,
                    sPKIFormFactorCode, 1, raServiceReq.language, rsProfileCheck, sCERT_PROFILE_PROPERTIES, tempProfileList);
                if(rsProfileCheck[0].length > 0) {
                    for(CertificateProfileInfo rsProfileCheck1 : rsProfileCheck[0]) {
                        if(pCERTIFICATION_PROFILE_CODE.equals(rsProfileCheck1.certificateProfileCode)) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
            String raFullnameCreate = "";
            String raFullname = "";
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser))) {
                    BACKOFFICE_USER[][] rsUser = new BACKOFFICE_USER[1][];
                    db.S_BO_USER_DETAIL(String.valueOf(createdUserID), String.valueOf(raServiceReq.language), rsUser);
                    if (rsUser[0].length > 0) {
                        raServiceReq.beneficiaryUser = rsUser[0][0].USERNAME;
                        raFullnameCreate = EscapeUtils.CheckTextNull(rsUser[0][0].FULL_NAME);
                    }
                    sBranchId_New = sBranchId_Cert;
                } else {
                    UserInfo[][] userInfo = new UserInfo[1][];
                    db.S_BO_API_USER_LIST(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", raServiceReq.language, userInfo);
                    if (userInfo[0].length > 0) {
                        raFullnameCreate = EscapeUtils.CheckTextNull(userInfo[0][0].fullName);
                        sBranchId_New = userInfo[0][0].raID;
                    }
                }
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT)) {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_New) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    } else {
                        UserInfo[][] userDetail = new UserInfo[1][];
                        db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                        if (userDetail[0].length > 0) {
                            raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                        }
                    }
                }
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                if (pCERTIFICATE_STATE_ID != 0 && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_NEW
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_DECLINED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVOKED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED_EXPIRED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_STOPPED_OPERATION
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_AUTO_REVOKED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVISED_KEEP_SN
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED_KEEP_SN
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVISED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REISSUED
                    && !sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SN_LOST)) {
                    String sProvinceCodeComponentChange = "";
                    String sProvinceNameComponentChange = "";
                    String sCommomNameType = "";
                    String sCompanyCompoment = "";
                    String sPersonalCompoment = "";
                    String sDomainCompoment = "";
                    String sMSTCompoment = "";
                    String sMNSCompoment = "";
                    String sQDCompoment = "";
                    String sCMNDCompoment = "";
                    String sHCCompoment = "";
                    String sCCCDCompoment = "";
                    String sBHXHCompoment = "";
                    String sBHXHCompomentCN = "";
                    String sMDVCompoment = "";
                    String sMSTCompomentCN = "";
                    String sDN = "";
                    //<editor-fold defaultstate="collapsed" desc="### CHANGE_KEY, PRIVATE_KEY, DELETE IN TOKEN of CERT TYPE">
                    String strPasswordP12 = "";
                    String pushNoticeEmail = "0";
                    if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                        || (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)
                            && "".equals(EscapeUtils.CheckTextNull(raServiceReq.csr)))) {
                        if (pPrivateKeyEnabled_Old == true) {
                            if (raServiceReq.changeKeyEnabled == true) {
                                CheckCHANGE_KEY = "1";
                            } else {
                                CheckCHANGE_KEY = "0";
                                setDeleteOldCertificateEnabled = "0";
                            }
                            if (raServiceReq.backupKeyEnabled == true) {
                                CheckPRIVATE_KEY = "1";
                            } else {
                                CheckPRIVATE_KEY = "0";
                            }
                        } else {
                            if (raServiceReq.changeKeyEnabled == true) {
                                CheckCHANGE_KEY = "1";
                                if (raServiceReq.backupKeyEnabled == true) {
                                    CheckPRIVATE_KEY = "1";
                                } else {
                                    CheckPRIVATE_KEY = "0";
                                }
                            } else {
                                CheckCHANGE_KEY = "0";
                                CheckPRIVATE_KEY = "0";
                                setDeleteOldCertificateEnabled = "0";
                            }
                        }
                        boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                        if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                            pushNoticeEmail = "1";
                        }
                    } else if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN))
                    {
                        if (pPrivateKeyEnabled_Old == true) {
                            CheckPRIVATE_KEY = "1";
                            if (raServiceReq.changeKeyEnabled == true) {
                                CheckCHANGE_KEY = "1";
                            } else {
                                CheckCHANGE_KEY = "0";
                            }
                            boolean p12EmailCertServer = CommonFunction.getP12EmailEnabledCert(sCERT_POLICY_PROPERTIES);
                            if (raServiceReq.p12EmailEnabled == true && p12EmailCertServer == true) {
                                pushNoticeEmail = "1";
                            }
                            if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                strPasswordP12 = EscapeUtils.CheckTextNull(raServiceReq.p12Password);
                            } else {
                                strPasswordP12 = CommonFunction.randomPasswordP12(8);
                            }
                        } else {
                            if (raServiceReq.changeKeyEnabled == true) {
                                CheckCHANGE_KEY = "1";
                                sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                                if ("".equals(sCSR)) {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EMPTY;
                                } else {
                                    String sKeySizeDB;
                                    boolean isValidCSR = false;
                                    boolean checkCSRNotExists = true;
                                    Config conf = new Config();
                                    String sIsCA = conf.GetTryPropertybyCode(Definitions.CONFIG_IS_WHICH_ABOUT_CA);
                                    if(!sIsCA.equals(Definitions.CONFIG_IS_WHICH_ABOUT_CA_VGCA)) {
                                        CERTIFICATION[][] rsCert = new CERTIFICATION[1][];
                                        db.S_BO_API_GET_ALGORITHM_KEY_SIZE(pCERTIFICATION_PROFILE_CODE, rsCert);
                                        if (rsCert[0].length > 0) {
                                            sKeySizeDB = EscapeUtils.CheckTextNull(rsCert[0][0].KEY_SIZE);
                                            String sKeySizeCSR = CommonFunction.getKeySizeFromCSR(sCSR);
                                            isValidCSR = sKeySizeDB.equals(sKeySizeCSR);
                                        }
                                    } else {
                                        isValidCSR = true;
                                    }
                                    if(isValidCSR == false) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_KEYSIZE;
                                    } else {
                                        String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                        int checkPublicKey = db.S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH(0, null, null, null, sPublicKeyHard, pCERTIFICATION_OWNER_ID);
                                        if(checkPublicKey == 0) {
                                            checkCSRNotExists = true;
                                        } else {
                                            checkCSRNotExists = false;
                                        }
                                        if(checkCSRNotExists == false) {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EXISTS;
                                        }
                                    }
                                }
                            } else {
                                CheckCHANGE_KEY = "0";
                            }
                            CheckPRIVATE_KEY = "0";
                            boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                            if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                pushNoticeEmail = "1";
                            }
                        }
                    } else if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)
                        || (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)
                            && !"".equals(EscapeUtils.CheckTextNull(raServiceReq.csr)))) {
                        if (raServiceReq.changeKeyEnabled == true) {
                            CheckCHANGE_KEY = "1";
                            sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                            if ("".equals(sCSR)) {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EMPTY;
                            } else {
                                String sKeySizeDB;
                                boolean isValidCSR = false;
                                boolean checkCSRNotExists = true;
                                CERTIFICATION[][] rsCert = new CERTIFICATION[1][];
                                db.S_BO_API_GET_ALGORITHM_KEY_SIZE(pCERTIFICATION_PROFILE_CODE, rsCert);
                                if (rsCert[0].length > 0) {
                                    sKeySizeDB = EscapeUtils.CheckTextNull(rsCert[0][0].KEY_SIZE);
                                    String sKeySizeCSR = CommonFunction.getKeySizeFromCSR(sCSR);
                                    isValidCSR = sKeySizeDB.equals(sKeySizeCSR);
                                }
                                if(isValidCSR == false) {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_KEYSIZE;
                                } else {
                                    String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                    int checkPublicKey = db.S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH(0, null, null, null, sPublicKeyHard, pCERTIFICATION_OWNER_ID);
                                    if(checkPublicKey == 0) {
                                        checkCSRNotExists = true;
                                    } else {
                                        checkCSRNotExists = false;
                                    }
                                    if(checkCSRNotExists == false) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EXISTS;
                                    }
                                }
                            }
                        } else {
                            CheckCHANGE_KEY = "0";
                        }
                        CheckPRIVATE_KEY = "0";
                        boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                        if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                            pushNoticeEmail = "1";
                        }
                    } else if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN)) {
                        if (raServiceReq.changeKeyEnabled == true) {
                            CheckCHANGE_KEY = "1";
                        } else {
                            CheckCHANGE_KEY = "0";
                        }
                        CheckPRIVATE_KEY = "0";
                    } else {
                        CheckCHANGE_KEY = "1";
                        CheckPRIVATE_KEY = "1";
                    }
                    //</editor-fold>
                    
                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        if(raServiceReq.certificateComponentInfo != null) {
                            int intOUCheckClient = 0;
                            for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                if (EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                    intOUCheckClient = intOUCheckClient + 1;
                                }
                            }
                            CertificateProfileInfo[][] certProfileInfo = new CertificateProfileInfo[1][];
                            db.S_BO_API_CERTIFICATION_PROFILE_GET_PROPERTIES(pCERTIFICATION_AUTHORITY_CODE, pCERTIFICATION_PROFILE_CODE, 
                                sPKIFormFactorCode, certProfileInfo);
                            if (certProfileInfo[0].length > 0) {
                                boolean sCheckRequire = true;
                                //<editor-fold defaultstate="collapsed" desc="### Update isreqiure, commonname certificateComponentInfo">
                                String sPropertiesCert = EscapeUtils.CheckTextNull(certProfileInfo[0][0].certificateProfileProperties);
                                if (!"".equals(sPropertiesCert)) {
                                    CertificateComponentInfo[][] infoCompNew = new CertificateComponentInfo[1][];
                                    ArrayList<CertificateComponentInfo> listCompNew = new ArrayList<>();
                                    CERTIFICATION_TYPE_COMPONENT[][] resProfileData = new CERTIFICATION_TYPE_COMPONENT[1][];
                                    CommonFunction.getJsonComponentForCert(sPropertiesCert, resProfileData);
                                    int intCompOUSrv = 0;
                                    for(CERTIFICATION_TYPE_COMPONENT resProfileData1 : resProfileData[0]) {
                                        if(EscapeUtils.CheckTextNull(resProfileData1.name).equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID)) {
                                            boolean hasComponent = false;
                                            for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                String sCodeInfoOld = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                if (sCodeInfoOld.equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE)) {
                                                    sCodeInfoOld = sCodeInfoOld.replace(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE, Definitions.CONFIG_COMPONENT_DN_TAG_UID);
                                                }
                                                if (EscapeUtils.CheckTextNull(resProfileData1.prefix).equals(EscapeUtils.CheckTextNull(certComponentInfo1.prefix)))
                                                {
                                                    hasComponent = true;
                                                    CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                    itemCompNew.code = sCodeInfoOld;
                                                    itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                    itemCompNew.requireEnabled = resProfileData1.require;
                                                    itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                    itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                    itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                    listCompNew.add(itemCompNew);
                                                    break;
                                                }
                                            }
                                            if(hasComponent == false)
                                            {
                                                CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                itemCompNew.requireEnabled = resProfileData1.require;
                                                itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                itemCompNew.value = "";
                                                itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                listCompNew.add(itemCompNew);
                                            }
                                        } else {
                                            if(!EscapeUtils.CheckTextNull(resProfileData1.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN))
                                            {
                                                if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                                    boolean hasComponent = false;
                                                    intCompOUSrv = intCompOUSrv + 1;
                                                    int intCompOUClient = 0;
                                                    for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                                            hasComponent = true;
                                                            intCompOUClient = intCompOUClient + 1;
                                                            if(intCompOUSrv == intCompOUClient) {
                                                                CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                                itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                                itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                                itemCompNew.requireEnabled = resProfileData1.require;
                                                                itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                                itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                                itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                                listCompNew.add(itemCompNew);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    if(hasComponent == false) {
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                        itemCompNew.value = "";
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                    }
                                                } else {
                                                    boolean hasComponent = false;
                                                    for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                        if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(EscapeUtils.CheckTextNull(certComponentInfo1.code))) {
                                                            hasComponent = true;
                                                            CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                            itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                            itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                            itemCompNew.requireEnabled = resProfileData1.require;
                                                            itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                            itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                            itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                            listCompNew.add(itemCompNew);
                                                            break;
                                                        }
                                                    }
                                                    if(hasComponent == false)
                                                    {
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                        itemCompNew.value = "";
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                    }
                                                }
                                            } else {
                                                boolean hasComponent = false;
                                                for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                    if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(EscapeUtils.CheckTextNull(certComponentInfo1.code))) {
                                                        hasComponent = true;
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN;
                                                        itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                        break;
                                                    }
                                                }
                                                if(hasComponent == false)
                                                {
                                                    CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                    itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                    itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                    itemCompNew.requireEnabled = resProfileData1.require;
                                                    itemCompNew.attributeType = Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN;
                                                    itemCompNew.value = "";
                                                    itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                    listCompNew.add(itemCompNew);
                                                }
                                            }
                                        }
                                    }
                                    infoCompNew[0] = new CertificateComponentInfo[listCompNew.size()];
                                    infoCompNew[0] = listCompNew.toArray(infoCompNew[0]);
                                    raServiceReq.certificateComponentInfo = infoCompNew[0];
                                    if(intOUCheckClient > intCompOUSrv) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_TEMPLATE_CERT_EMPTY;
                                }
                                //</editor-fold>

                                //<editor-fold defaultstate="collapsed" desc="### Get info component from certificateComponentInfo">
                                // CHECK REQUIRE FOR UID
                                boolean hasCompanyUID = false;
                                boolean hasPesonalUID = false;
                                boolean hasCompanyValue = false;
                                boolean hasPesonalValue = false;
                                for (CertificateComponentInfo compCheckUID : raServiceReq.certificateComponentInfo) {
                                    if (EscapeUtils.CheckTextNull(compCheckUID.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY)) {
                                        hasCompanyUID = true;
                                        if (compCheckUID.requireEnabled == true) {
                                            if (!"".equals(EscapeUtils.CheckTextNull(compCheckUID.value))) {
                                                hasCompanyValue = true;
                                                break;
                                            } else {hasCompanyValue = false;}
                                        } else {hasCompanyValue = true;}
                                    }
                                }
                                for (CertificateComponentInfo compCheckUID : raServiceReq.certificateComponentInfo) {
                                    if (EscapeUtils.CheckTextNull(compCheckUID.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL)) {
                                        hasPesonalUID = true;
                                        if (compCheckUID.requireEnabled == true) {
                                            if (!"".equals(EscapeUtils.CheckTextNull(compCheckUID.value))) {
                                                hasPesonalValue = true;
                                                break;
                                            } else {hasPesonalValue = false;}
                                        } else {hasPesonalValue = true;}
                                    }
                                }
                                if(hasCompanyUID == true) {
                                    if(hasCompanyValue == false) {
                                        sCheckRequire = false;
                                    }
                                }
                                if(hasPesonalUID == true) {
                                    if(hasPesonalValue == false) {
                                        sCheckRequire = false;
                                    }
                                }
                                boolean isEmailCertValid = true;
                                if (sCheckRequire == true) {
                                    String sSubjectEmail = "";
                                    String sSANEmail = "";
                                    boolean isHasSANEmail = false;
                                    List<CERTIFICATION_PROPERTIES_JSON.Attribute> attributesSan = new ArrayList<>();
                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                        for (CertificateComponentInfo certComponentInfo2 : raServiceReq.certificateComponentInfo) {
                                            if (!EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN))
                                            {
                                                // check require
                                                if (certComponentInfo2.requireEnabled == true) {
                                                    if (!certComponentInfo2.attributeType.equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY)
                                                        && !certComponentInfo2.attributeType.equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL))
                                                    {
                                                        if ("".equals(certComponentInfo2.value)) {
                                                            sCheckRequire = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                // get city province name
                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_ST)) {
                                                    sProvinceCodeComponentChange = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    CityProvinceInfo[][] cityInfo = new CityProvinceInfo[1][];
                                                    db.S_BO_API_PROVINCE_LIST(sProvinceCodeComponentChange, raServiceReq.language, cityInfo);
                                                    if (cityInfo[0].length > 0) {
                                                        certComponentInfo2.value = cityInfo[0][0].cityProvinceName;
                                                        sProvinceNameComponentChange = cityInfo[0][0].cityProvinceName;
                                                    }
                                                }
                                                // get company, personal name
                                                if (!"".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value))) {
                                                    if(CommonFunction.checkCertCharacterSpecial(certComponentInfo2.value) == false) {
                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_COMPONENT_CHARACTER_SPECIAL;
                                                        break;
                                                    }
                                                    sDN += EscapeUtils.CheckTextNull(certComponentInfo2.code) + "=" + EscapeUtils.CheckTextNull(certComponentInfo2.prefix)
                                                            + CommonFunction.replaceStringCharaterSpecialDN(EscapeUtils.CheckTextNull(certComponentInfo2.value), true, false) + ", ";
                                                }
                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_CN)) {
                                                    sCommomNameType = EscapeUtils.CheckTextNull(certComponentInfo2.commomNameType);
                                                    if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_COMPANY)) {
                                                        sCompanyCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                    if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_PERSON)) {
                                                        sPersonalCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                    if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_DOMAIN_NAME)) {
                                                        sDomainCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                    if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT))
                                                    {
                                                        pDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBCLIENT + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        sPersonalCompoment = "";
                                                    }
                                                    if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER))
                                                    {
                                                        pDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBSERVER + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        sPersonalCompoment = "";
                                                    }
                                                    if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH))
                                                    {
                                                        pDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_AUTH + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        sPersonalCompoment = "";
                                                    }
                                                    if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV))
                                                    {
                                                        pDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CODE_SIGNING + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        sPersonalCompoment = "";
                                                    }
                                                    if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                    {
                                                        pDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_SIGN + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        sPersonalCompoment = "";
                                                    }
                                                }
                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_O)) {
                                                    if (!"".equals(sCommomNameType)) {
                                                        if (pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF_SIGNSERVER)
                                                            || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF)
                                                            || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                            || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                            || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                            || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                            || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                        {
                                                            sCompanyCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                    }
                                                }
                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY))
                                                {
                                                    if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE))
                                                    {
                                                        if(!"".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value))) {
                                                            pDeviceUUID = EscapeUtils.CheckTextNull(certComponentInfo2.prefix) + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                    } else {
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_TAX_CODE + ":")) {
                                                            sMSTCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_BUDGET_CODE + ":")) {
                                                            sMNSCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_DECISION + ":")) {
                                                            sQDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_SOCIAL_INSURANCE_CODE + ":")) {
                                                            sBHXHCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_UNIT_CODE + ":")) {
                                                            sMDVCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                    }
                                                }
                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL))
                                                {
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_CODE + ":")) {
                                                        sCMNDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_PASSPORT_CODE + ":")) {
                                                        sHCCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_CITIZEN_CODE + ":")) {
                                                        sCCCDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_SOCIAL_INSURANCE_CODE + ":")) {
                                                        sBHXHCompomentCN = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_TAX_CODE + ":")) {
                                                        sMSTCompomentCN = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                }
                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_E)) {
                                                    sSubjectEmail = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                }
                                            } else {
                                                // SAN
                                                String sValueSan = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                if (certComponentInfo2.requireEnabled == true) {
                                                    if ("".equals(sValueSan)) {
                                                        sCheckRequire = false;
                                                        break;
                                                    }
                                                }
                                                if(!"".equals(sValueSan)){
                                                    String sCodeSan = EscapeUtils.CheckTextNull(certComponentInfo2.code);
                                                    String sKey = "";
                                                    if(!"".equals(sCodeSan)) {
                                                        sKey = sCodeSan;
                                                    }
                                                    CERTIFICATION_PROPERTIES_JSON.Attribute attribute = new CERTIFICATION_PROPERTIES_JSON.Attribute();
                                                    attribute.setKey(sKey);
                                                    attribute.setValue(sValueSan);
                                                    attributesSan.add(attribute);
                                                }
                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_SAN_TAG_rfc822Name)) {
                                                    sSANEmail = sValueSan;
                                                    isHasSANEmail = true;
                                                }
                                            }
                                        }
                                    }
                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                        //<editor-fold defaultstate="collapsed" desc="### CHECK EMAIL CERT VALID">
                                        if(!"".equals(sSubjectEmail) || !"".equals(sSANEmail))
                                        {
                                            String sRegexPolicy = "";
                                            if (rsPolicy[0].length > 0) {
                                                for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_REGEX_FOR_PHONE_EMAIL)) {
                                                        sRegexPolicy = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                        break;
                                                    }
                                                }
                                            }
                                            if(!"".equals(sSubjectEmail)) {
                                                String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                                                if ("".equals(sREGEX_EMAIL.trim())) {
                                                    sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                                                }
                                                if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(sSubjectEmail), sREGEX_EMAIL) == false) {
                                                    isEmailCertValid = false;
                                                }
                                            }
                                            if(!"".equals(sSANEmail)) {
                                                String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                                                if ("".equals(sREGEX_EMAIL.trim())) {
                                                    sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                                                }
                                                if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(sSANEmail), sREGEX_EMAIL) == false) {
                                                    isEmailCertValid = false;
                                                }
                                            }
                                        }
                                        //</editor-fold>

                                        if(isEmailCertValid == true) {
                                            if(attributesSan.size() > 0) {
                                                pPROPERTIES_SAN = "{\"attributes\":" + objectMapper.writeValueAsString(attributesSan) + "}";
                                            }
                                            CommonFunction.LogDebugString(log, "SAN_Properties", pPROPERTIES_SAN);
                                            if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF))
                                            {
                                                if(!"".equals(sMSTCompoment) && !"".equals(sMNSCompoment) && !"".equals(sQDCompoment)
                                                    && !"".equals(sBHXHCompoment) && !"".equals(sMDVCompoment))
                                                {
                                                    sCheckRequire = false;
                                                }
                                                if("".equals(sMSTCompoment) && "".equals(sMNSCompoment) && "".equals(sQDCompoment)
                                                    && "".equals(sBHXHCompoment) && "".equals(sMDVCompoment))
                                                {
                                                    sCheckRequire = false;
                                                }
                                                if(!"".equals(sCMNDCompoment) && !"".equals(sHCCompoment) && !"".equals(sCCCDCompoment)
                                                    && !"".equals(sBHXHCompomentCN) && !"".equals(sMSTCompomentCN))
                                                {
                                                    sCheckRequire = false;
                                                }
                                                if("".equals(sCMNDCompoment) && "".equals(sHCCompoment) && "".equals(sCCCDCompoment)
                                                    && "".equals(sBHXHCompomentCN) && "".equals(sMSTCompomentCN))
                                                {
                                                    sCheckRequire = false;
                                                }
                                            } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_ENTERPRISE)) {
                                                if(!"".equals(sMSTCompoment) && !"".equals(sMNSCompoment) && !"".equals(sQDCompoment)
                                                    && !"".equals(sBHXHCompoment) && !"".equals(sMDVCompoment))
                                                {
                                                    sCheckRequire = false;
                                                }
                                                if("".equals(sMSTCompoment) && "".equals(sMNSCompoment) && "".equals(sQDCompoment)
                                                    && "".equals(sBHXHCompoment) && "".equals(sMDVCompoment))
                                                {
                                                    sCheckRequire = false;
                                                }
                                            } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_PERSONAL))
                                            {
                                                if(!"".equals(sCMNDCompoment) && !"".equals(sHCCompoment) && !"".equals(sCCCDCompoment)
                                                    && !"".equals(sBHXHCompomentCN) && !"".equals(sMSTCompomentCN))
                                                {
                                                    sCheckRequire = false;
                                                }
                                                if("".equals(sCMNDCompoment) && "".equals(sHCCompoment) && "".equals(sCCCDCompoment)
                                                    && "".equals(sBHXHCompomentCN) && "".equals(sMSTCompomentCN))
                                                {
                                                    sCheckRequire = false;
                                                }
                                            } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE))
                                            {
                                                if("".equals(pDeviceUUID))
                                                {
                                                    sCheckRequire = false;
                                                }
                                            } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_PERSONAL_GOV)
                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV))
                                            {

                                            } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                            {
                                                if("".equals(pDeviceUUID))
                                                {
                                                    sCheckRequire = false;
                                                }
                                            }
                                            sDN = CommonFunction.subLastCharater(sDN);
                                            CommonFunction.LogDebugString(log, "sDNResult", sDN);
                                        }
                                    }
                                }
                                //</editor-fold>
                                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                    if (sCheckRequire == true) {
                                        if(isEmailCertValid == true) {
                                            if (!"".equals(sDN)) {
                                                Config conf = new Config();
                                                String uidChangeConfig = conf.GetPropertybyCode(Definitions.CONFIG_UID_CHANGE_INFO_API_ENABLED);
                                                boolean isChangeUIDEnable = false;
                                                if("1".equals(uidChangeConfig)) {
                                                    if("1".equals(CheckCHANGE_KEY)) {
                                                        isChangeUIDEnable = true;
                                                    }
                                                }
                                                if(isChangeUIDEnable == false) {
                                                    if(!pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_PERSONAL_GOV)
                                                        && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV)
                                                        && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                        && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                        && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                        && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                        && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN)) {
                                                        if(!pCERTIFICATION_PROFILE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_SSL))
                                                        {
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_TAXCODE, sMSTCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_BUDGET_CODE, sMNSCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_DECISION, sQDCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_SOCIAL_INSURANCE_CODE, sBHXHCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_UNIT_CODE, sMDVCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_TAXCODE, sMSTCompomentCN) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_PERSONAL_CODE, sCMNDCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_PASSPORT, sHCCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_CITIZEN_CODE, sCCCDCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_SOCIAL_INSURANCE_CODE, sBHXHCompomentCN) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_EMAIL_INCERT_INVALID;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                        // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                        int intLevelApprove = 0;
                        if (autoApproveCAServer == false && autoApproveCAClient == false) {
                            intLevelApprove = 0;
                        } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                            intLevelApprove = 1;
                        } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                            intLevelApprove = 0;
                        } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                            intLevelApprove = 2;
                        }
                        //</editor-fold>
                        String sPromotionDuration = "";
                        if(raServiceReq.promotionDuration != -1) {
                            sPromotionDuration = String.valueOf(raServiceReq.promotionDuration);
                        }
                        //<editor-fold defaultstate="collapsed" desc="### EXPAND PARAM PROCESS">
                        String sRsspAgreementUUID = "";
                        String sRsspRelyingParty = "";
                        String sRsspCertificateUUID = "";
                        String sRsspConnectWSMode = "";
                        if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                            String sExpandParam = EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML);
                            if(!"".equals(sExpandParam)) {
                                ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                sRsspAgreementUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspAgreementUUID);
                                sRsspRelyingParty = EscapeUtils.CheckTextNull(jsonReqExpand.rsspRelyingParty);
                                sRsspCertificateUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspCertificateUUID);
                                sRsspConnectWSMode = EscapeUtils.CheckTextNull(jsonReqExpand.rsspConnectWSMode);
                            }
                            if(!"".equals(sRsspConnectWSMode)) {
                                if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_REST)) {
                                    if("".equals(sRsspCertificateUUID) || "".equals(sRsspRelyingParty)) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                    }
                                } else if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_SOAP)) {
                                    if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                }
                            } else {
                                if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                }
                            }
                        }
                        //</editor-fold>

                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                            //<editor-fold defaultstate="collapsed" desc="### GET PROVINCE">
                            CITY_PROVINCE[][] rsProvince = new CITY_PROVINCE[1][];
                            db.S_BO_PROVINCE_DETAIL(pPROVINCE_ID, rsProvince);
                            if (rsProvince[0].length > 0) {
                                sProvinceNameComponent = rsProvince[0][0].REMARK;
                                sProvinceCodeComponent = rsProvince[0][0].NAME;
                            }
                            //</editor-fold>
                            String pTAX_CODE = "";
                            String pTAX_CODE_CN = "";
                            String pSOCIAL_CODE = "";
                            String pSOCIAL_CODE_CN = "";
                            String pBUDGET_CODE = "";
                            String pUNIT_CODE = "";
                            String pDECISION = "";
                            String pP_ID = "";
                            String pPASSPORT = "";
                            String pCCCD = "";
                            String sEnterpriseCert = "";
                            String sPersonalCert = "";
                            if(raServiceReq.certificateComponentInfo != null) {
                                if(!"".equals(sProvinceCodeComponentChange)) {
                                    sProvinceCodeComponent = sProvinceCodeComponentChange;
                                }
                                if(!"".equals(sProvinceNameComponentChange)) {
                                    sProvinceNameComponent = sProvinceNameComponentChange;
                                }
                                pTAX_CODE = sMSTCompoment;
                                pTAX_CODE_CN = sMSTCompomentCN;
                                pSOCIAL_CODE = sBHXHCompoment;
                                pSOCIAL_CODE_CN = sBHXHCompomentCN;
                                pUNIT_CODE = sMDVCompoment;
                                pBUDGET_CODE = sMNSCompoment;
                                pDECISION = sQDCompoment;
                                pP_ID = sCMNDCompoment;
                                pPASSPORT = sHCCompoment;
                                pCCCD = sCCCDCompoment;
                                pPERSONAL_NAME = sPersonalCompoment;
                                pCOMPANY_NAME = sCompanyCompoment;
                                pDOMAIN_NAME = sDomainCompoment;
                                sDN_DB = sDN;
                                String[] sUIDResult = new String[2];
                                CommonReferServlet.collectFieldToUIDAPI(pTAX_CODE, pBUDGET_CODE, pDECISION, pSOCIAL_CODE,
                                    pUNIT_CODE, pP_ID, pPASSPORT, pCCCD, pTAX_CODE_CN, pSOCIAL_CODE_CN, sUIDResult);
                                sEnterpriseCert = sUIDResult[0];
                                sPersonalCert = sUIDResult[1];
                            } else {
                                sEnterpriseCert = pEnterpriseDB;
                                sPersonalCert = pPersonalDB;
                            }
                            //<editor-fold defaultstate="collapsed" desc="### LOG VALUE">
                            CERTIFICATION_DATA_ATTR tempLogReq = new CERTIFICATION_DATA_ATTR();
                            tempLogReq.personalName = pPERSONAL_NAME;
                            tempLogReq.companyName = pCOMPANY_NAME;
                            tempLogReq.domainName = pDOMAIN_NAME;
                            tempLogReq.enterpriseID = sEnterpriseCert;
                            tempLogReq.personalID = sPersonalCert;
                            tempLogReq.deviceUUID = pDeviceUUID;
                            tempLogReq.phoneContract = sPHONE_CONTRACT;
                            tempLogReq.emailContract = sEMAIL_CONTRACT;
                            tempLogReq.issuerSubject = sCoreCASubject;
                            tempLogReq.subjectDn = sDN_DB;
                            tempLogReq.tokenSn = sTOKEN_SN;
                            tempLogReq.provinceName = sProvinceNameComponent;
                            tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                            CommonFunction.LogDebugString(log, sFunctionWS, "REQUEST: " + "CERT_SN: " + EscapeUtils.CheckTextNull(raServiceReq.certificateSN)
                                + "SUBJECT: " + sDN_DB + "; PERSONAL_NAME: " + pPERSONAL_NAME + "; COMPANY_NAME: " + pCOMPANY_NAME + "; sEnterpriseCert: " + sEnterpriseCert
                                + "; sPersonalCert: " + sPersonalCert + "; PAST_CERT_ID: " + pPAST_CERTIFICATE_ID + "; DOMAIN_NAME: " + pDOMAIN_NAME + "; DeviceUUID: " + pDeviceUUID
                                + "; PKIFormFactorCode: " + sPKIFormFactorCode + "; CERT_ATTR_TYPE_CODE: " + pCERTIFICATION_ATTR_TYPE_CODE
                                + "; CERTIF_AUTHORITY_CODE: " + pCERTIFICATION_AUTHORITY_CODE + "; IS_REVOKE_OLD_CERTIFICATE: " + setRevokeOldCertificateEnabled
                                + "; TOKEN_SN_Old: " + sTOKEN_SN + "; TOKE_ID_Old: " + sTokenId_Old + "; EMAIL_CONTRACT: " + sEMAIL_CONTRACT
                                + "; PHONE_CONTRACT: " + sPHONE_CONTRACT + "; IS_CHANGE_KEY: " + CheckCHANGE_KEY
                                + "; KEEP_CERT_SN: " + String.valueOf(raServiceReq.keepCertificateSNEnabled)
                                + "; IS_BACKUP_KEY: " + CheckPRIVATE_KEY + "; IS_DELETE_OLD_CERTIFICATE: " + setDeleteOldCertificateEnabled
                                + "; BENEFICIARIES_USER: " + raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                            ATTRIBUTE_VALUES valueATTR;
                            ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                            dataATTR.setCertificationData(tempLogReq);
                            valueATTR = new ATTRIBUTE_VALUES();
                            valueATTR.setTokenSn(sTOKEN_SN);
                            if(!"".equals(sRsspAgreementUUID)) {
                                valueATTR.setRsspAgreementUUID(sRsspAgreementUUID);
                            }
                            if(!"".equals(sRsspRelyingParty)) {
                                valueATTR.setRsspRelyingParty(sRsspRelyingParty);
                            }
                            if(!"".equals(sRsspCertificateUUID)) {
                                valueATTR.setRsspCertificateUUID(sRsspCertificateUUID);
                            }
                            if(!"".equals(sRsspConnectWSMode)) {
                                valueATTR.setRsspConnectWSMode(sRsspConnectWSMode);
                            }
                            boolean boChangeKeyEnabled = "1".equals(CheckCHANGE_KEY);
                            valueATTR.setChangeKeyEnabled(boChangeKeyEnabled);
                            valueATTR.setKeepCertificateSNEnabled(raServiceReq.keepCertificateSNEnabled);
                            boolean boDeleteOldCertificate = "1".equals(setDeleteOldCertificateEnabled);
                            valueATTR.setDeleteOldCertificateEnabled(boDeleteOldCertificate);
                            boolean boRevokeOldCertificate = "1".equals(setRevokeOldCertificateEnabled);
                            valueATTR.setRevokeOldCertificateEnabled(boRevokeOldCertificate);
                            valueATTR.setTypeName(pCERTIFICATION_ATTR_TYPE_CODE);
                            valueATTR.setPromotionDuration(sPromotionDuration);
                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                            valueATTR.setCreateUser(raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                            valueATTR.setCreateDt(new Date());
                            valueATTR.setAttributeData(dataATTR);
                            String strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                            //</editor-fold>
                            
                            if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN)) {
                                sCSR = "";
                            }
                            int[] pCERTIFICATE_ATTR_ID = new int[1];
                            int[] pCERTIFICATION_ID = new int[1];
                            String[] pRESPONSE_CODE_NAME = new String[1];
                            db.S_BO_API_CERTIFICATION_INSERT(pCERTIFICATION_PROFILE_CODE, sTOKEN_SN,
                                    pCERTIFICATION_SN, pPERSONAL_NAME, pCOMPANY_NAME, pDOMAIN_NAME,
                                    sDN_DB, sCoreCASubject, sPHONE_CONTRACT, sEMAIL_CONTRACT,
                                    sProvinceCodeComponent, pPAST_CERTIFICATE_SN, "", pCERTIFICATION_ATTR_TYPE_CODE,
                                    strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser),
                                    EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), sCSR, pCERTIFICATION_AUTHORITY_CODE,
                                    CheckCHANGE_KEY, CheckPRIVATE_KEY, sPKIFormFactorCode, pDeviceUUID, sPromotionDuration,
                                    pRESPONSE_CODE_NAME, pCERTIFICATION_ID, pCERTIFICATE_ATTR_ID, pCERTIFICATION_OWNER_ID,
                                    pEFFECTIVE_DT, pEXPIRATION_DT, sEnterpriseCert, sPersonalCert);
                            if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                //<editor-fold defaultstate="collapsed" desc="### DNS LIST for SSL">
                                if(!"".equals(pPROPERTIES_SAN)) {
                                    db.S_BO_CERTIFICATION_UPDATE_PROPERTIES(String.valueOf(pCERTIFICATION_ID[0]),
                                        pPROPERTIES_SAN, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                }
                                //</editor-fold>

                                //<editor-fold defaultstate="collapsed" desc="### PUBLIC KEY HASH">
                                if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                    || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)
                                    || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                    if (pPrivateKeyEnabled_Old == false) {
                                        if (raServiceReq.changeKeyEnabled == true) {
                                            sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                                            if(!"".equals(sCSR)) {
                                                String sKeySizeCSR = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                db.S_BO_CERTIFICATION_UPDATE_CSR_INFO(pCERTIFICATION_ID[0], sKeySizeCSR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                            }
                                        }
                                    }
                                }
                                //</editor-fold>

                                raServiceResp.certificateID = pCERTIFICATION_ID[0];
                                raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                db.S_BO_CERTIFICATION_UPDATE(raServiceResp.certificateID, "", "", "", "",
                                    "", "", "", "", "", "", "", "", "",
                                    "", EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", "", "", pSHARED_MODE,
                                    "", "", sEnterpriseCert, sPersonalCert);
                                //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                if (intLevelApprove == 1 || intLevelApprove == 2) {
                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                    valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    valueATTR.setApproveDt(new Date());
                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                    db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                }
                                if (intLevelApprove == 2) {
                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                    valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    valueATTR.setApproveCADt(new Date());
                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                    String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                    if ("0".equals(sApprove)) {
                                        // DISCOUNT RATE
                                        if ("1".equals(sDiscountRateOption)) {
                                            CommonReferServlet.updateDiscountRateImportCert(String.valueOf(raServiceResp.certificateID),
                                                EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pCERTIFICATION_PROFILE_CODE,
                                                "", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.approveUser), "", "", sEnterpriseCert, sPersonalCert);
                                        }
                                        // Transfer token to agancy
                                        if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                                            || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                            if("0".equals(sNoAllowTranferToken)) {
                                                if(sBranchId_New != sBranchId_Cert)
                                                {
                                                    db.S_BO_TOKEN_UPDATE_BRANCH(String.valueOf(sTokenId_Old), String.valueOf(sBranchId_New), raServiceReq.approveUser);
                                                }
                                            }
                                        }
                                        db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEmail, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                        if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                             || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)
                                             || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM))
                                        {
                                            ConnectDbPhaseTwo dbTwo = new ConnectDbPhaseTwo();
                                            dbTwo.S_BO_CERTIFICATION_ATTR_UPDATE_ACTIVATED_ENABLED(pCERTIFICATE_ATTR_ID[0], 1);
                                            if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM) && !"".equals(sCSR)) {
                                                db.S_BO_API_SIM_CERTIFICATION_GENERATED(pCERTIFICATE_ATTR_ID[0], sCSR,
                                                    strReqValueATTR, sTOKEN_SN, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            }
                                            int[] intWSRes = new int[1];
                                            String[] sWSRes = new String[1];
                                            ConnectConnector.EnrollCertificate(sTOKEN_SN, strPasswordP12, String.valueOf(pCERTIFICATE_ATTR_ID[0]), intWSRes, sWSRes);
                                            if (intWSRes[0] == 0) {
                                                // select get cert with pCERTIFICATION_ID[0]
                                                CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0], "", "",
                                                    raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                if (certInfo[0].length > 0) {
                                                    raServiceResp.certificate = certInfo[0][0].certificate;
                                                    raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                    raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                                    raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                }
                                                if(!"".equals(strPasswordP12)) {
                                                    int[] intRes = new int[1];
                                                    String[] sRes = new String[1];
                                                    byte[] sP12Return = ConnectConnector.generateKeystore(strPasswordP12, false, String.valueOf(raServiceResp.certificateID), intRes, sRes);
                                                    raServiceResp.p12Certificate = sP12Return;
                                                }
                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                            } else {
                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                            }
                                        } else if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true) {
                                            if("0".equals(CheckCHANGE_KEY) && "0".equals(CheckPRIVATE_KEY)) {
                                                if("1".equals(sApproveCertNoChangeKey)) {
                                                    // call ws, return cert
                                                    int[] intWSRes = new int[1];
                                                    String[] sWSRes = new String[1];
                                                    ConnectConnector.EnrollCertificate(sTOKEN_SN, "", String.valueOf(pCERTIFICATE_ATTR_ID[0]), intWSRes, sWSRes);
                                                    if (intWSRes[0] == 0) {
                                                        // select get cert with raServiceReq.certificateID
                                                        CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                        db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0], "", "",
                                                            raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                        if (certInfo[0].length > 0) {
                                                            raServiceResp.certificate = certInfo[0][0].certificate;
                                                            raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                            raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                                            raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                        }
                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                    } else {
                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                                    }
                                                } else {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                }
                                            } else {
                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                            }
                                        } else if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN)) {
                                            String urlCallback = "";
                                            String requestType = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RENEWAL;
                                            BRANCH[][] rsBranch = new BRANCH[1][];
                                            db.S_BO_BRANCH_DETAIL(String.valueOf(sBranchId_New), rsBranch);
                                            if(rsBranch != null && rsBranch[0].length > 0){
                                                urlCallback = rsBranch[0][0].CALLBACK_URL_APPROVED;
                                            }
                                            ThreadCallbackApproved thhreadLog = new ThreadCallbackApproved(String.valueOf(pCERTIFICATION_ID[0]),
                                                urlCallback, Definitions.CONFIG_OPERATION_TYPE_APPROVED, "", requestType);
                                            Thread t = new Thread(thhreadLog);
                                            t.start();
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                        }
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                }
                                //</editor-fold>

                                if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                    if (!"".equals(strPasswordP12)) {
                                        raServiceResp.p12Password = strPasswordP12;
                                    }
                                }
                            } else {
                                raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                            }
                        }
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_STATE_INVALID;
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### renewCertificate2Process">
    public void renewCertificate2Process(String sCERT_PROFILE_PROPERTIES, String sCERT_POLICY_PROPERTIES,
        String pPARENT_ID, int pBRANCH_ID, String pBeneficiaryUserDefault, String pApproveCAUser, boolean  autoApproveCAServer,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_RENEWAL_CERTIFICATION2;
        String sTOKEN_SN = "";
        
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        ObjectMapper objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", EscapeUtils.CheckTextNull(raReqTemp.certificateSN),
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean autoApproveCAClient = raServiceReq.approveEnabled;
            String CheckCHANGE_KEY;
            String CheckPRIVATE_KEY;
            //<editor-fold defaultstate="collapsed" desc="### GET POLICY">
            GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
            db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
            String setDeleteOldCertificateEnabled = "1";
            String setRevokeOldCertificateEnabled = "0";
            String sNoAllowTranferToken = "1";
            String sDiscountRateOption = "0";
            String sApproveCertNoChangeKey = "0";
            String checkChangeEffectiveDT = "0";
            String dayChangeEffectiveDT = "0";
            if (rsPolicy[0].length > 0) {
                for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_DISCOUNT_RATE_PROFILE_OPTION)) {
                        sDiscountRateOption = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_RENEWAL_AND_REVISION_AUTO_ISSUE_CERT_FOR_PARTICULAR_REQUEST)) {
                        sApproveCertNoChangeKey = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_NO_AUTO_MOVE_TOKEN_FOR_RENEWAL_REVISION_CERTIFICATE_REQUEST)) {
                        sNoAllowTranferToken = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                    if(rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_OPTION_FOR_CHANGING_EFFECTIVE_DT)) {
                        checkChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                    if(rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_MAX_NUMBERS_DAY_ISSUE_CERTIFICATE_FUTURE)) {
                        dayChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                }
            }
            if(raServiceReq.deleteCertificateEnabled == false) {
                setDeleteOldCertificateEnabled = "0";
            }
//            if(raServiceReq.revokeOldCertificateEnabled == false) {
//                setRevokeOldCertificateEnabled = "0";
//            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE">
            int createdUserID = 0;
            String pCERTIFICATION_SN = "";
            String pCERTIFICATION_PROFILE_CODE = EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode);
            String pCERTIFICATION_AUTHORITY_CODE = "";
            String pCERTIFICATION_PURPOSE_CODE = "";
//            String pCERTIFICATE_PROFILE_ID = "0";
            String sPHONE_CONTRACT = "";
            String sEMAIL_CONTRACT = "";
            String sCoreCASubject = "";
            String sDN_DB = "";
            String pPERSONAL_NAME = "";
            String pCOMPANY_NAME = "";
            String pDOMAIN_NAME = "";
            String pPROPERTIES_SAN = "";
            String pEnterpriseDB = "";
            String pPersonalDB = "";
            String pDeviceUUID = "";
            String pPROVINCE_ID = "";
            String sCSR = "";
            String sProvinceNameComponent = "";
            String sProvinceCodeComponent = "";
            String pCERT_PROFILE_CODE_OLD = "";
            String sPKIFormFactorCode = "";
            String pSHARED_MODE = "";
            String pEXPIRATION_DT_OLD = "";
            String pEXPIRATION_CONTRACT_DT_OLD = "";
            int pPAST_CERTIFICATE_ID = 0;
            int pCERTIFICATION_OWNER_ID = 0;
            int sTokenId_Old = 0;
            int sBranchId_Cert = 0;
            boolean pPrivateKeyEnabled_Old = true;
            String pCERTIFICATION_ATTR_TYPE_CODE = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RENEWAL;
            String pPAST_CERTIFICATE_SN = "";
            int pCERTIFICATE_STATE_ID = 0;
            int sBranchId_New = 0;
            int[] pRESPONSE_CODE = new int[1];
            boolean isValidRequest = false;
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN))) {
                CertificateInfo[][] rsReq = new CertificateInfo[1][];
                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.certificateSN), 0,
                    "", "", raServiceReq.language, pRESPONSE_CODE, rsReq, "", "", "", "");
                if (rsReq[0].length > 0) {
                    for(CertificateInfo rsReqItem : rsReq[0]) {
                        if(rsReqItem.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_OPERATED
                            || rsReqItem.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_EXPIRED)
                        {
                            isValidRequest = true;
                            sPHONE_CONTRACT = rsReqItem.phoneContact; //rsReq[0][0]
                            sEMAIL_CONTRACT = rsReqItem.emailContact;
                            sCoreCASubject = rsReqItem.coreCASubject;
                            sDN_DB = rsReqItem.certificateDN;
                            pPERSONAL_NAME = rsReqItem.personalName;
                            pCOMPANY_NAME = rsReqItem.companyName;
                            pPROPERTIES_SAN = EscapeUtils.CheckTextNull(rsReqItem.subjectAlternativeName);
                            pEnterpriseDB = rsReqItem.enterpriseID;
                            pPersonalDB = rsReqItem.personalID;
                            pDeviceUUID = rsReqItem.deviceUUID;
                            sTOKEN_SN = rsReqItem.tokenSN;
                            pCERTIFICATION_AUTHORITY_CODE = rsReqItem.certificateAuthorityCode;
                            pCERTIFICATION_PURPOSE_CODE = rsReqItem.certificatePurposeCode;
                            pCERT_PROFILE_CODE_OLD = rsReqItem.certificateProfileCode;
                            pDOMAIN_NAME = rsReqItem.domainName;
                            pPROVINCE_ID = String.valueOf(rsReqItem.provinceId);
                            pPAST_CERTIFICATE_SN = rsReqItem.certificateSN;
                            sPKIFormFactorCode = rsReqItem.formFactorCode;
                            createdUserID = rsReqItem.createdId;
                            pCERTIFICATION_OWNER_ID = rsReqItem.certificateOwnerID;
                            sCSR = rsReqItem.csr;
                            pEXPIRATION_DT_OLD = EscapeUtils.CheckTextNull(rsReqItem.expirationTime);
                            pEXPIRATION_CONTRACT_DT_OLD = EscapeUtils.CheckTextNull(rsReqItem.expirationContractTime);
                            pCERTIFICATE_STATE_ID = rsReqItem.certificateStateId;
                            pPrivateKeyEnabled_Old = rsReqItem.backupKeyEnabled;
                            sTokenId_Old = rsReqItem.tokenId;
                            pPAST_CERTIFICATE_ID = rsReqItem.certificateID;
                            sBranchId_Cert = rsReqItem.raId;
                            pSHARED_MODE = rsReqItem.shareMode ? "1" : "0";
                            break;
                        }
                    }
                }
            }
            if(isValidRequest == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
            }
            //</editor-fold>
            
            //<editor-fold defaultstate="collapsed" desc="### CHECK CA-PROFILE CHANGE">
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                if(!"".equals(pCERTIFICATION_PROFILE_CODE)) {
                    if(!pCERTIFICATION_PROFILE_CODE.equals(pCERT_PROFILE_CODE_OLD)) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_PROFILE_INVALID;
                        ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList = new ArrayList<>();
                        //<editor-fold defaultstate="collapsed" desc="### GET PROFILE LIST ACCESS">
                        CERTIFICATION_POLICY_DATA[][] resPolicyData_Old = new CERTIFICATION_POLICY_DATA[1][];
                        CommonFunction.getProfileCertList(sCERT_PROFILE_PROPERTIES, resPolicyData_Old);
                        for(CERTIFICATION_POLICY_DATA resPolicyCertData_Old1 : resPolicyData_Old[0])
                        {
                            if(resPolicyCertData_Old1.attributeType.equals(Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST))
                            {
                                CERTIFICATION_PROFILE[][] resProfileDB = new CERTIFICATION_PROFILE[1][];
                                db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(resPolicyCertData_Old1.name), resProfileDB);
                                if(resProfileDB[0].length > 0)
                                {
                                    CERTIFICATION_POLICY_DATA itemProfileAccess = new CERTIFICATION_POLICY_DATA();
                                    itemProfileAccess.name = resProfileDB[0][0].NAME;
                                    itemProfileAccess.certificateAuthority = resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME;
                                    itemProfileAccess.certificatePurpose = resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME;
                                    itemProfileAccess.remark = resPolicyCertData_Old1.remark;
                                    itemProfileAccess.remarkEn = resPolicyCertData_Old1.remarkEn;
                                    itemProfileAccess.attributeType = Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST;
                                    tempProfileList.add(itemProfileAccess);
                                }
                            }
                        }
                        //</editor-fold>

                        CERTIFICATION_PROFILE[][] rsProfileCheck;
                        rsProfileCheck = new CERTIFICATION_PROFILE[1][];
                        db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(pCERTIFICATION_PROFILE_CODE, rsProfileCheck);
                        if(rsProfileCheck[0].length > 0) {
                            pCERTIFICATION_AUTHORITY_CODE = rsProfileCheck[0][0].CERTIFICATION_AUTHORITY_NAME;
                        }
                        rsProfileCheck = new CERTIFICATION_PROFILE[1][];
                        db.S_BO_API_CERTIFICATION_PROFILE_LIST_HASID(pCERTIFICATION_AUTHORITY_CODE, pCERTIFICATION_PURPOSE_CODE,
                            sPKIFormFactorCode, 1, raServiceReq.language, rsProfileCheck, sCERT_PROFILE_PROPERTIES, tempProfileList);
                        if(rsProfileCheck[0].length > 0) {
                            for(CERTIFICATION_PROFILE rsItem : rsProfileCheck[0]) {
                                if(rsItem.NAME.equals(pCERTIFICATION_PROFILE_CODE)) {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                    break;
                                }
                            }
                        }
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_PROFILE_INVALID;
                }
            }
            //</editor-fold>

            java.sql.Timestamp pEFFECTIVE_DT = null;
            java.sql.Timestamp pEXPIRATION_DT = null;
            //<editor-fold defaultstate="collapsed" desc="### CHECK EFFECCTIVE_DT EXPIRATION_DT">
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                if("1".equals(checkChangeEffectiveDT)) {
                    String sEffectiveTime = EscapeUtils.CheckTextNull(raServiceReq.effectiveTime);
                    if(!"".equals(sEffectiveTime)) {
//                        if(!"".equals(pEXPIRATION_DT_OLD)) {
//                        boolean checkValidExpiration = CommonFunction.checkDateBiggerCurrent(pEXPIRATION_DT_OLD, Definitions.CONFIG_DATETIME_FORMAT_YYYYDDMMHHMMSS);
//                        if(checkValidExpiration == false) {
                        if(CommonFunction.checkDatePatternValid(sEffectiveTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                            if(CommonFunction.checkDateAddDayCurrent(sEffectiveTime, Integer.parseInt(dayChangeEffectiveDT), Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                if(CommonFunction.checkDateBiggerCurrent(sEffectiveTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                    pEFFECTIVE_DT = CommonFunction.ConvertStringToTimeStamp(sEffectiveTime);
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                            }
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                        }
//                        } else {
//                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
//                        }
//                        } else {
//                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
//                        }
                    }
                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        //pEXPIRATION_CONTRACT_DT_OLD
                        String sExpirationTime = EscapeUtils.CheckTextNull(raServiceReq.expirationTime);
                        if(!"".equals(sExpirationTime)) {
                            if(pEFFECTIVE_DT == null) {
                                Date currentDate = new Date();
                                pEFFECTIVE_DT = new java.sql.Timestamp(currentDate.getTime());
                            }
                            if(CommonFunction.checkDatePatternValid(sExpirationTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
//                                long remainDurationOld = 0;
//                                boolean checkValidExpiration = CommonFunction.checkDateBiggerCurrent(pEXPIRATION_DT_OLD, Definitions.CONFIG_DATETIME_FORMAT_YYYYDDMMHHMMSS);
//                                if(checkValidExpiration == true) {
//                                    remainDurationOld = CommonFunction.remainDayWithCurrentTime(pEXPIRATION_DT_OLD, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY);
//                                }
                                int profileDuration = 0;
                                int profilePromotion = 0;
                                CERTIFICATION_PROFILE[][] rsProfileCheck = new CERTIFICATION_PROFILE[1][];
                                db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(pCERTIFICATION_PROFILE_CODE, rsProfileCheck);
                                if(rsProfileCheck[0].length > 0) {
                                    profileDuration = rsProfileCheck[0][0].DURATION;
                                    profilePromotion = rsProfileCheck[0][0].DURATION_FREE;
                                }
                                if(CommonFunction.checkExpirationWithProfile(sExpirationTime, pEFFECTIVE_DT, profileDuration, profilePromotion,
                                    Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                    pEXPIRATION_DT = CommonFunction.ConvertStringToTimeStamp(sExpirationTime);
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EXPIRATION_INVALID;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EXPIRATION_INVALID;
                            }
                        }
                    }
                }
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK PROFILE and BRANCH VALID">
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_PROFILE_INVALID;
                ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList = new ArrayList<>();
                //<editor-fold defaultstate="collapsed" desc="### GET PROFILE LIST ACCESS">
                CERTIFICATION_POLICY_DATA[][] resPolicyData_Old = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getProfileCertList(sCERT_PROFILE_PROPERTIES, resPolicyData_Old);
                for(CERTIFICATION_POLICY_DATA resPolicyCertData_Old1 : resPolicyData_Old[0])
                {
                    if(resPolicyCertData_Old1.attributeType.equals(Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST))
                    {
                        CERTIFICATION_PROFILE[][] resProfileDB = new CERTIFICATION_PROFILE[1][];
                        db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(resPolicyCertData_Old1.name), resProfileDB);
                        if(resProfileDB[0].length > 0)
                        {
                            CERTIFICATION_POLICY_DATA itemProfileAccess = new CERTIFICATION_POLICY_DATA();
                            itemProfileAccess.name = resProfileDB[0][0].NAME;
                            itemProfileAccess.certificateAuthority = resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME;
                            itemProfileAccess.certificatePurpose = resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME;
                            itemProfileAccess.remark = resPolicyCertData_Old1.remark;
                            itemProfileAccess.remarkEn = resPolicyCertData_Old1.remarkEn;
                            itemProfileAccess.attributeType = Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST;
                            tempProfileList.add(itemProfileAccess);
                        }
                    }
                }
                //</editor-fold>

                CertificateProfileInfo[][] rsProfileCheck = new CertificateProfileInfo[1][];
                db.S_BO_API_CERTIFICATION_PROFILE_LIST(pCERTIFICATION_AUTHORITY_CODE, pCERTIFICATION_PURPOSE_CODE,
                    sPKIFormFactorCode, 1, raServiceReq.language, rsProfileCheck, sCERT_PROFILE_PROPERTIES, tempProfileList);
                if(rsProfileCheck[0].length > 0)
                {
                    for(CertificateProfileInfo rsProfileCheck1 : rsProfileCheck[0])
                    {
                        if(pCERTIFICATION_PROFILE_CODE.equals(rsProfileCheck1.certificateProfileCode))
                        {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
            String raFullnameCreate = "";
            String raFullname = "";
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser))) {
                    BACKOFFICE_USER[][] rsUser = new BACKOFFICE_USER[1][];
                    db.S_BO_USER_DETAIL(String.valueOf(createdUserID), String.valueOf(raServiceReq.language), rsUser);
                    if (rsUser[0].length > 0) {
                        raServiceReq.beneficiaryUser = rsUser[0][0].USERNAME;
                        raFullnameCreate = EscapeUtils.CheckTextNull(rsUser[0][0].FULL_NAME);
                    }
                    sBranchId_New = sBranchId_Cert;
                } else {
                    UserInfo[][] userInfo = new UserInfo[1][];
                    db.S_BO_API_USER_LIST(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", raServiceReq.language, userInfo);
                    if (userInfo[0].length > 0) {
                        raFullnameCreate = EscapeUtils.CheckTextNull(userInfo[0][0].fullName);
                        sBranchId_New = userInfo[0][0].raID;
                    }
                }
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT)) {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_New) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    } else {
                        UserInfo[][] userDetail = new UserInfo[1][];
                        db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                        if (userDetail[0].length > 0) {
                            raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                        }
                    }
                }
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                if (pCERTIFICATE_STATE_ID != 0 && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_NEW
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_DECLINED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVOKED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED_EXPIRED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_STOPPED_OPERATION
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_AUTO_REVOKED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVISED_KEEP_SN
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED_KEEP_SN
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVISED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REISSUED
                    && !sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SN_LOST)) {
                    String sProvinceCodeComponentChange = "";
                    String sProvinceNameComponentChange = "";
                    String sCommomNameType = "";
                    String sCompanyCompoment = "";
                    String sPersonalCompoment = "";
                    String sDomainCompoment = "";
                    String sMSTCompoment = "";
                    String sMNSCompoment = "";
                    String sQDCompoment = "";
                    String sCMNDCompoment = "";
                    String sHCCompoment = "";
                    String sCCCDCompoment = "";
                    String sBHXHCompoment = "";
                    String sBHXHCompomentCN = "";
                    String sMDVCompoment = "";
                    String sMSTCompomentCN = "";
                    String sDN = "";
                    //<editor-fold defaultstate="collapsed" desc="### CHANGE_KEY, PRIVATE_KEY, DELETE IN TOKEN of CERT TYPE">
                    String strPasswordP12 = "";
                    String pushNoticeEmail = "0";
                    if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                        || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                        if (pPrivateKeyEnabled_Old == true) {
                            if (raServiceReq.changeKeyEnabled == true) {
                                CheckCHANGE_KEY = "1";
                            } else {
                                CheckCHANGE_KEY = "0";
                                setDeleteOldCertificateEnabled = "0";
                            }
                            if (raServiceReq.backupKeyEnabled == true) {
                                CheckPRIVATE_KEY = "1";
                            } else {
                                CheckPRIVATE_KEY = "0";
                            }
                        } else {
                            if (raServiceReq.changeKeyEnabled == true) {
                                CheckCHANGE_KEY = "1";
                                if (raServiceReq.backupKeyEnabled == true) {
                                    CheckPRIVATE_KEY = "1";
                                } else {
                                    CheckPRIVATE_KEY = "0";
                                }
                            } else {
                                CheckCHANGE_KEY = "0";
                                CheckPRIVATE_KEY = "0";
                                setDeleteOldCertificateEnabled = "0";
                            }
                        }
                        boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                        if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                            pushNoticeEmail = "1";
                        }
                    } else if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                        || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                        if (pPrivateKeyEnabled_Old == true) {
                            CheckPRIVATE_KEY = "1";
                            if (raServiceReq.changeKeyEnabled == true) {
                                CheckCHANGE_KEY = "1";
                            } else {
                                CheckCHANGE_KEY = "0";
                            }
                            boolean p12EmailCertServer = CommonFunction.getP12EmailEnabledCert(sCERT_POLICY_PROPERTIES);
                            if (raServiceReq.p12EmailEnabled == true && p12EmailCertServer == true) {
                                pushNoticeEmail = "1";
                            }
                            if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                strPasswordP12 = EscapeUtils.CheckTextNull(raServiceReq.p12Password);
                            } else {
                                strPasswordP12 = CommonFunction.randomPasswordP12(8);
                            }
                        } else {
                            if (raServiceReq.changeKeyEnabled == true) {
                                CheckCHANGE_KEY = "1";
                                sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                                if ("".equals(sCSR)) {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EMPTY;
                                } else {
                                    String sKeySizeDB;
                                    boolean isValidCSR = false;
                                    boolean checkCSRNotExists = true;
                                    CERTIFICATION[][] rsCert = new CERTIFICATION[1][];
                                    db.S_BO_API_GET_ALGORITHM_KEY_SIZE(pCERTIFICATION_PROFILE_CODE, rsCert);
                                    if (rsCert[0].length > 0) {
                                        sKeySizeDB = EscapeUtils.CheckTextNull(rsCert[0][0].KEY_SIZE);
                                        String sKeySizeCSR = CommonFunction.getKeySizeFromCSR(sCSR);
                                        isValidCSR = sKeySizeDB.equals(sKeySizeCSR);
                                    }
                                    if(isValidCSR == false)
                                    {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_KEYSIZE;
                                    } else {
                                        String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                        int checkPublicKey = db.S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH(0, null, null, null, sPublicKeyHard, pCERTIFICATION_OWNER_ID);
                                        if(checkPublicKey == 0) {
                                            checkCSRNotExists = true;
                                        } else {
                                            checkCSRNotExists = false;
                                        }
                                        if(checkCSRNotExists == false) {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EXISTS;
                                        }
                                    }
                                }
                            } else {
                                CheckCHANGE_KEY = "0";
                            }
                            CheckPRIVATE_KEY = "0";
                            boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                            if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                pushNoticeEmail = "1";
                            }
                        }
                    } else {
                        CheckCHANGE_KEY = "1";
                        CheckPRIVATE_KEY = "1";
                    }
                    //</editor-fold>
                    
                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        if(raServiceReq.certificateComponentInfo != null) {
                            int intOUCheckClient = 0;
                            for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                if (EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                    intOUCheckClient = intOUCheckClient + 1;
                                }
                                if(EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID)
                                    || EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE)) {
                                    certComponentInfo1.prefix = CommonFunction.convertPrefixENForAPI(EscapeUtils.CheckTextNull(certComponentInfo1.prefix), false);
                                }
                            }
                            CertificateProfileInfo[][] certProfileInfo = new CertificateProfileInfo[1][];
                            db.S_BO_API_CERTIFICATION_PROFILE_GET_PROPERTIES(pCERTIFICATION_AUTHORITY_CODE, pCERTIFICATION_PROFILE_CODE, 
                                sPKIFormFactorCode, certProfileInfo);
                            if (certProfileInfo[0].length > 0) {
                                boolean sCheckRequire = true;
                                //<editor-fold defaultstate="collapsed" desc="### Update isreqiure, commonname certificateComponentInfo">
                                String sPropertiesCert = EscapeUtils.CheckTextNull(certProfileInfo[0][0].certificateProfileProperties);
                                if (!"".equals(sPropertiesCert)) {
                                    CertificateComponentInfo[][] infoCompNew = new CertificateComponentInfo[1][];
                                    ArrayList<CertificateComponentInfo> listCompNew = new ArrayList<>();
                                    CERTIFICATION_TYPE_COMPONENT[][] resProfileData = new CERTIFICATION_TYPE_COMPONENT[1][];
                                    CommonFunction.getJsonComponentForCert(sPropertiesCert, resProfileData);
                                    int intCompOUSrv = 0;
                                    for(CERTIFICATION_TYPE_COMPONENT resProfileData1 : resProfileData[0]) {
                                        if(EscapeUtils.CheckTextNull(resProfileData1.name).equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID)) {
                                            boolean hasComponent = false;
                                            for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                String sCodeInfoOld = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                if (sCodeInfoOld.equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE)) {
                                                    sCodeInfoOld = sCodeInfoOld.replace(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE, Definitions.CONFIG_COMPONENT_DN_TAG_UID);
                                                }
                                                if (EscapeUtils.CheckTextNull(resProfileData1.prefix).equals(EscapeUtils.CheckTextNull(certComponentInfo1.prefix)))
                                                {
                                                    hasComponent = true;
                                                    CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                    itemCompNew.code = sCodeInfoOld;
                                                    itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                    itemCompNew.requireEnabled = resProfileData1.require;
                                                    itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                    itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                    itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                    listCompNew.add(itemCompNew);
                                                    break;
                                                }
                                            }
                                            if(hasComponent == false)
                                            {
                                                CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                itemCompNew.requireEnabled = resProfileData1.require;
                                                itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                itemCompNew.value = "";
                                                itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                listCompNew.add(itemCompNew);
                                            }
                                        } else {
                                            if(!EscapeUtils.CheckTextNull(resProfileData1.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN))
                                            {
                                                if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                                    boolean hasComponent = false;
                                                    intCompOUSrv = intCompOUSrv + 1;
                                                    int intCompOUClient = 0;
                                                    for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                                            hasComponent = true;
                                                            intCompOUClient = intCompOUClient + 1;
                                                            if(intCompOUSrv == intCompOUClient) {
                                                                CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                                itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                                itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                                itemCompNew.requireEnabled = resProfileData1.require;
                                                                itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                                itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                                itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                                listCompNew.add(itemCompNew);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    if(hasComponent == false) {
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                        itemCompNew.value = "";
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                    }
                                                } else {
                                                    boolean hasComponent = false;
                                                    for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                        if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(EscapeUtils.CheckTextNull(certComponentInfo1.code))) {
                                                            hasComponent = true;
                                                            CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                            itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                            itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                            itemCompNew.requireEnabled = resProfileData1.require;
                                                            itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                            itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                            itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                            listCompNew.add(itemCompNew);
                                                            break;
                                                        }
                                                    }
                                                    if(hasComponent == false)
                                                    {
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                        itemCompNew.value = "";
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                    }
                                                }
                                            } else {
                                                boolean hasComponent = false;
                                                for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                    if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(EscapeUtils.CheckTextNull(certComponentInfo1.code))) {
                                                        hasComponent = true;
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN;
                                                        itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                        break;
                                                    }
                                                }
                                                if(hasComponent == false)
                                                {
                                                    CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                    itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                    itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                    itemCompNew.requireEnabled = resProfileData1.require;
                                                    itemCompNew.attributeType = Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN;
                                                    itemCompNew.value = "";
                                                    itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                    listCompNew.add(itemCompNew);
                                                }
                                            }
                                        }
                                    }
                                    infoCompNew[0] = new CertificateComponentInfo[listCompNew.size()];
                                    infoCompNew[0] = listCompNew.toArray(infoCompNew[0]);
                                    raServiceReq.certificateComponentInfo = infoCompNew[0];
                                    if(intOUCheckClient > intCompOUSrv) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_TEMPLATE_CERT_EMPTY;
                                }
                                //</editor-fold>

                                //<editor-fold defaultstate="collapsed" desc="### Get info component from certificateComponentInfo">
                                // CHECK REQUIRE FOR UID
                                boolean hasCompanyUID = false;
                                boolean hasPesonalUID = false;
                                boolean hasCompanyValue = false;
                                boolean hasPesonalValue = false;
                                for (CertificateComponentInfo compCheckUID : raServiceReq.certificateComponentInfo) {
                                    if (EscapeUtils.CheckTextNull(compCheckUID.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY)) {
                                        hasCompanyUID = true;
                                        if (compCheckUID.requireEnabled == true) {
                                            if (!"".equals(EscapeUtils.CheckTextNull(compCheckUID.value))) {
                                                hasCompanyValue = true;
                                                break;
                                            } else {hasCompanyValue = false;}
                                        } else {hasCompanyValue = true;}
                                    }
                                }
                                for (CertificateComponentInfo compCheckUID : raServiceReq.certificateComponentInfo) {
                                    if (EscapeUtils.CheckTextNull(compCheckUID.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL)) {
                                        hasPesonalUID = true;
                                        if (compCheckUID.requireEnabled == true) {
                                            if (!"".equals(EscapeUtils.CheckTextNull(compCheckUID.value))) {
                                                hasPesonalValue = true;
                                                break;
                                            } else {hasPesonalValue = false;}
                                        } else {hasPesonalValue = true;}
                                    }
                                }
                                if(hasCompanyUID == true) {
                                    if(hasCompanyValue == false) {
                                        sCheckRequire = false;
                                    }
                                }
                                if(hasPesonalUID == true) {
                                    if(hasPesonalValue == false) {
                                        sCheckRequire = false;
                                    }
                                }
                                boolean isEmailCertValid = true;
                                if (sCheckRequire == true) {
                                    String sSubjectEmail = "";
                                    String sSANEmail = "";
                                    boolean isHasSANEmail = false;
                                    List<CERTIFICATION_PROPERTIES_JSON.Attribute> attributesSan = new ArrayList<>();
                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                        for (CertificateComponentInfo certComponentInfo2 : raServiceReq.certificateComponentInfo) {
                                            if (!EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN))
                                            {
                                                // check require
                                                if (certComponentInfo2.requireEnabled == true) {
                                                    if (!certComponentInfo2.attributeType.equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY)
                                                        && !certComponentInfo2.attributeType.equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL))
                                                    {
                                                        if ("".equals(certComponentInfo2.value)) {
                                                            sCheckRequire = false;
                                                            break;
                                                        }
                                                    }
                                                }
                                                // get city province name
                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_ST)) {
                                                    sProvinceCodeComponentChange = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    CityProvinceInfo[][] cityInfo = new CityProvinceInfo[1][];
                                                    db.S_BO_API_PROVINCE_LIST(sProvinceCodeComponentChange, raServiceReq.language, cityInfo);
                                                    if (cityInfo[0].length > 0) {
                                                        certComponentInfo2.value = cityInfo[0][0].cityProvinceName;
                                                        sProvinceNameComponentChange = cityInfo[0][0].cityProvinceName;
                                                    }
                                                }
                                                // get company, personal name
                                                if (!"".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value))) {
                                                    if(CommonFunction.checkCertCharacterSpecial(certComponentInfo2.value) == false) {
                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_COMPONENT_CHARACTER_SPECIAL;
                                                        break;
                                                    }
                                                    sDN += EscapeUtils.CheckTextNull(certComponentInfo2.code) + "=" + EscapeUtils.CheckTextNull(certComponentInfo2.prefix)
                                                            + CommonFunction.replaceStringCharaterSpecialDN(EscapeUtils.CheckTextNull(certComponentInfo2.value), true, false) + ", ";
                                                }
                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_CN)) {
                                                    sCommomNameType = EscapeUtils.CheckTextNull(certComponentInfo2.commomNameType);
                                                    if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_COMPANY)) {
                                                        sCompanyCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                    if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_PERSON)) {
                                                        sPersonalCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                    if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_DOMAIN_NAME)) {
                                                        sDomainCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                    if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT))
                                                    {
                                                        pDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBCLIENT + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        sPersonalCompoment = "";
                                                    }
                                                    if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER))
                                                    {
                                                        pDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBSERVER + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        sPersonalCompoment = "";
                                                    }
                                                    if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH))
                                                    {
                                                        pDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_AUTH + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        sPersonalCompoment = "";
                                                    }
                                                    if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV))
                                                    {
                                                        pDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CODE_SIGNING + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        sPersonalCompoment = "";
                                                    }
                                                    if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                    {
                                                        pDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_SIGN + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        sPersonalCompoment = "";
                                                    }
                                                }
                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_O)) {
                                                    if (!"".equals(sCommomNameType)) {
                                                        if (pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF_SIGNSERVER)
                                                            || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF)
                                                            || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                            || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                            || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                            || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                            || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                        {
                                                            sCompanyCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                    }
                                                }
                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY))
                                                {
                                                    if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE))
                                                    {
                                                        if(!"".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value))) {
                                                            pDeviceUUID = EscapeUtils.CheckTextNull(certComponentInfo2.prefix) + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                    } else {
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_TAX_CODE + ":")) {
                                                            sMSTCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_BUDGET_CODE + ":")) {
                                                            sMNSCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_DECISION + ":")) {
                                                            sQDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_SOCIAL_INSURANCE_CODE + ":")) {
                                                            sBHXHCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_UNIT_CODE + ":")) {
                                                            sMDVCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                    }
                                                }
                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL))
                                                {
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_CODE + ":")) {
                                                        sCMNDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_PASSPORT_CODE + ":")) {
                                                        sHCCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_CITIZEN_CODE + ":")) {
                                                        sCCCDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_SOCIAL_INSURANCE_CODE + ":")) {
                                                        sBHXHCompomentCN = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_TAX_CODE + ":")) {
                                                        sMSTCompomentCN = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                }
                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_E)) {
                                                    sSubjectEmail = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                }
                                            } else {
                                                // SAN
                                                String sValueSan = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                if (certComponentInfo2.requireEnabled == true) {
                                                    if ("".equals(sValueSan)) {
                                                        sCheckRequire = false;
                                                        break;
                                                    }
                                                }
                                                if(!"".equals(sValueSan)){
                                                    String sCodeSan = EscapeUtils.CheckTextNull(certComponentInfo2.code);
                                                    String sKey = "";
                                                    if(!"".equals(sCodeSan)) {
                                                        sKey = sCodeSan;
                                                    }
                                                    CERTIFICATION_PROPERTIES_JSON.Attribute attribute = new CERTIFICATION_PROPERTIES_JSON.Attribute();
                                                    attribute.setKey(sKey);
                                                    attribute.setValue(sValueSan);
                                                    attributesSan.add(attribute);
                                                }
                                                if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_SAN_TAG_rfc822Name)) {
                                                    sSANEmail = sValueSan;
                                                    isHasSANEmail = true;
                                                }
                                            }
                                        }
                                    }
                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                        //<editor-fold defaultstate="collapsed" desc="### CHECK EMAIL CERT VALID">
                                        if(!"".equals(sSubjectEmail) || !"".equals(sSANEmail))
                                        {
                                            String sRegexPolicy = "";
                                            if (rsPolicy[0].length > 0) {
                                                for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_REGEX_FOR_PHONE_EMAIL)) {
                                                        sRegexPolicy = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                        break;
                                                    }
                                                }
                                            }
                                            if(!"".equals(sSubjectEmail)) {
                                                String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                                                if ("".equals(sREGEX_EMAIL.trim())) {
                                                    sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                                                }
                                                if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(sSubjectEmail), sREGEX_EMAIL) == false) {
                                                    isEmailCertValid = false;
                                                }
                                            }
                                            if(!"".equals(sSANEmail)) {
                                                String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                                                if ("".equals(sREGEX_EMAIL.trim())) {
                                                    sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                                                }
                                                if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(sSANEmail), sREGEX_EMAIL) == false) {
                                                    isEmailCertValid = false;
                                                }
                                            }
                                        }
                                        //</editor-fold>

                                        if(isEmailCertValid == true) {
                                            if(attributesSan.size() > 0) {
                                                pPROPERTIES_SAN = "{\"attributes\":" + objectMapper.writeValueAsString(attributesSan) + "}";
                                            }
                                            CommonFunction.LogDebugString(log, "SAN_Properties", pPROPERTIES_SAN);
                                            if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF))
                                            {
                                                if(!"".equals(sMSTCompoment) && !"".equals(sMNSCompoment) && !"".equals(sQDCompoment)
                                                    && !"".equals(sBHXHCompoment) && !"".equals(sMDVCompoment))
                                                {
                                                    sCheckRequire = false;
                                                }
                                                if("".equals(sMSTCompoment) && "".equals(sMNSCompoment) && "".equals(sQDCompoment)
                                                    && "".equals(sBHXHCompoment) && "".equals(sMDVCompoment))
                                                {
                                                    sCheckRequire = false;
                                                }
                                                if(!"".equals(sCMNDCompoment) && !"".equals(sHCCompoment) && !"".equals(sCCCDCompoment)
                                                    && !"".equals(sBHXHCompomentCN) && !"".equals(sMSTCompomentCN))
                                                {
                                                    sCheckRequire = false;
                                                }
                                                if("".equals(sCMNDCompoment) && "".equals(sHCCompoment) && "".equals(sCCCDCompoment)
                                                    && "".equals(sBHXHCompomentCN) && "".equals(sMSTCompomentCN))
                                                {
                                                    sCheckRequire = false;
                                                }
                                            } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_ENTERPRISE)) {
                                                if(!"".equals(sMSTCompoment) && !"".equals(sMNSCompoment) && !"".equals(sQDCompoment)
                                                    && !"".equals(sBHXHCompoment) && !"".equals(sMDVCompoment))
                                                {
                                                    sCheckRequire = false;
                                                }
                                                if("".equals(sMSTCompoment) && "".equals(sMNSCompoment) && "".equals(sQDCompoment)
                                                    && "".equals(sBHXHCompoment) && "".equals(sMDVCompoment))
                                                {
                                                    sCheckRequire = false;
                                                }
                                            } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_PERSONAL))
                                            {
                                                if(!"".equals(sCMNDCompoment) && !"".equals(sHCCompoment) && !"".equals(sCCCDCompoment)
                                                    && !"".equals(sBHXHCompomentCN) && !"".equals(sMSTCompomentCN))
                                                {
                                                    sCheckRequire = false;
                                                }
                                                if("".equals(sCMNDCompoment) && "".equals(sHCCompoment) && "".equals(sCCCDCompoment)
                                                    && "".equals(sBHXHCompomentCN) && "".equals(sMSTCompomentCN))
                                                {
                                                    sCheckRequire = false;
                                                }
                                            } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE))
                                            {
                                                if("".equals(pDeviceUUID))
                                                {
                                                    sCheckRequire = false;
                                                }
                                            } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_PERSONAL_GOV)
                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV))
                                            {

                                            } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                            {
                                                if("".equals(pDeviceUUID))
                                                {
                                                    sCheckRequire = false;
                                                }
                                            }
                                            sDN = CommonFunction.subLastCharater(sDN);
                                            CommonFunction.LogDebugString(log, "sDNResult", sDN);
                                        }
                                    }
                                }
                                //</editor-fold>
                                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                    if (sCheckRequire == true) {
                                        if(isEmailCertValid == true) {
                                            if (!"".equals(sDN)) {
                                                Config conf = new Config();
                                                String uidChangeConfig = conf.GetPropertybyCode(Definitions.CONFIG_UID_CHANGE_INFO_API_ENABLED);
                                                boolean isChangeUIDEnable = false;
                                                if("1".equals(uidChangeConfig)) {
                                                    if("1".equals(CheckCHANGE_KEY)) {
                                                        isChangeUIDEnable = true;
                                                    }
                                                }
                                                if(isChangeUIDEnable == false) {
                                                    if(!pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_PERSONAL_GOV)
                                                        && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV)
                                                        && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                        && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                        && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                        && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                        && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                    {
                                                        if(!pCERTIFICATION_PROFILE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_SSL))
                                                        {
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_TAXCODE, sMSTCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_BUDGET_CODE, sMNSCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_DECISION, sQDCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_SOCIAL_INSURANCE_CODE, sBHXHCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_UNIT_CODE, sMDVCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_TAXCODE, sMSTCompomentCN) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_PERSONAL_CODE, sCMNDCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_PASSPORT, sHCCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_CITIZEN_CODE, sCCCDCompoment) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                            if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_SOCIAL_INSURANCE_CODE, sBHXHCompomentCN) == false) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_EMAIL_INCERT_INVALID;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                            //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                            // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                            int intLevelApprove = 0;
                            if (autoApproveCAServer == false && autoApproveCAClient == false) {
                                intLevelApprove = 0;
                            } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                                intLevelApprove = 1;
                            } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                                intLevelApprove = 0;
                            } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                                intLevelApprove = 2;
                            }
                            //</editor-fold>
                            String sPromotionDuration = "";
                            if(raServiceReq.promotionDuration != -1) {
                                sPromotionDuration = String.valueOf(raServiceReq.promotionDuration);
                            }
                            //<editor-fold defaultstate="collapsed" desc="### EXPAND PARAM PROCESS">
                            String sRsspAgreementUUID = "";
                            String sRsspRelyingParty = "";
                            String sRsspCertificateUUID = "";
                            String sRsspConnectWSMode = "";
                            if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                                String sExpandParam = EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML);
                                if(!"".equals(sExpandParam)) {
                                    ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                    sRsspAgreementUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspAgreementUUID);
                                    sRsspRelyingParty = EscapeUtils.CheckTextNull(jsonReqExpand.rsspRelyingParty);
                                    sRsspCertificateUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspCertificateUUID);
                                    sRsspConnectWSMode = EscapeUtils.CheckTextNull(jsonReqExpand.rsspConnectWSMode);
                                }
                                if(!"".equals(sRsspConnectWSMode)) {
                                    if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_REST)) {
                                        if("".equals(sRsspCertificateUUID) || "".equals(sRsspRelyingParty)) {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                        }
                                    } else if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_SOAP)) {
                                        if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                        }
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                    }
                                } else {
                                    if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                    }
                                }
                            }
                            //</editor-fold>

                            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                //<editor-fold defaultstate="collapsed" desc="### GET PROVINCE">
                                CITY_PROVINCE[][] rsProvince = new CITY_PROVINCE[1][];
                                db.S_BO_PROVINCE_DETAIL(pPROVINCE_ID, rsProvince);
                                if (rsProvince[0].length > 0) {
                                    sProvinceNameComponent = rsProvince[0][0].REMARK;
                                    sProvinceCodeComponent = rsProvince[0][0].NAME;
                                }
                                //</editor-fold>
                        
                                String pTAX_CODE = "";
                                String pTAX_CODE_CN = "";
                                String pSOCIAL_CODE = "";
                                String pSOCIAL_CODE_CN = "";
                                String pUNIT_CODE = "";
                                String pDECISION = "";
                                String pBUDGET_CODE = "";
                                String pP_ID = "";
                                String pCCCD = "";
                                String pPASSPORT = "";
                                String sEnterpriseCert ="";
                                String sPersonalCert ="";
                                if(raServiceReq.certificateComponentInfo != null)
                                {
                                    if(!"".equals(sProvinceCodeComponentChange)) {
                                        sProvinceCodeComponent = sProvinceCodeComponentChange;
                                    }
                                    if(!"".equals(sProvinceNameComponentChange)) {
                                        sProvinceNameComponent = sProvinceNameComponentChange;
                                    }
                                    pTAX_CODE = sMSTCompoment;
                                    pTAX_CODE_CN = sMSTCompomentCN;
                                    pSOCIAL_CODE = sBHXHCompoment;
                                    pSOCIAL_CODE_CN = sBHXHCompomentCN;
                                    pUNIT_CODE = sMDVCompoment;
                                    pBUDGET_CODE = sMNSCompoment;
                                    pDECISION = sQDCompoment;
                                    pP_ID = sCMNDCompoment;
                                    pPASSPORT = sHCCompoment;
                                    pCCCD = sCCCDCompoment;
                                    pPERSONAL_NAME = sPersonalCompoment;
                                    pCOMPANY_NAME = sCompanyCompoment;
                                    pDOMAIN_NAME = sDomainCompoment;
                                    sDN_DB = sDN;
                                    String[] sUIDResult = new String[2];
                                    CommonReferServlet.collectFieldToUIDAPI(pTAX_CODE, pBUDGET_CODE, pDECISION, pSOCIAL_CODE,
                                        pUNIT_CODE, pP_ID, pPASSPORT, pCCCD, pTAX_CODE_CN, pSOCIAL_CODE_CN, sUIDResult);
                                    sEnterpriseCert = sUIDResult[0];
                                    sPersonalCert = sUIDResult[1];
                                } else {
                                    sEnterpriseCert = pEnterpriseDB;
                                    sPersonalCert = pPersonalDB;
                                }
                                //<editor-fold defaultstate="collapsed" desc="### LOG VALUE">
                                CERTIFICATION_DATA_ATTR tempLogReq = new CERTIFICATION_DATA_ATTR();
                                tempLogReq.personalName = pPERSONAL_NAME;
                                tempLogReq.companyName = pCOMPANY_NAME;
                                tempLogReq.domainName = pDOMAIN_NAME;
                                tempLogReq.enterpriseID = sEnterpriseCert;
                                tempLogReq.personalID = sPersonalCert;
                                tempLogReq.deviceUUID = pDeviceUUID;
                                tempLogReq.phoneContract = sPHONE_CONTRACT;
                                tempLogReq.emailContract = sEMAIL_CONTRACT;
                                tempLogReq.issuerSubject = sCoreCASubject;
                                tempLogReq.subjectDn = sDN_DB;
                                tempLogReq.tokenSn = sTOKEN_SN;
                                tempLogReq.provinceName = sProvinceNameComponent;
                                tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                                CommonFunction.LogDebugString(log, sFunctionWS, "REQUEST: " + "CERT_SN: " + EscapeUtils.CheckTextNull(raServiceReq.certificateSN)
                                    + "SUBJECT: " + sDN_DB + "; PERSONAL_NAME: " + pPERSONAL_NAME + "; COMPANY_NAME: " + pCOMPANY_NAME + "; sPersonalCert: " + sPersonalCert
                                    + "; sEnterpriseCert: " + sEnterpriseCert + "; PAST_CERT_ID: " + pPAST_CERTIFICATE_ID + "; DOMAIN_NAME: " + pDOMAIN_NAME + "; DeviceUUID: " + pDeviceUUID
                                    + "; PKIFormFactorCode: " + sPKIFormFactorCode
                                    + "; CERT_ATTR_TYPE_CODE: " + pCERTIFICATION_ATTR_TYPE_CODE
                                    + "; CERTIF_AUTHORITY_CODE: " + pCERTIFICATION_AUTHORITY_CODE
                                    + "; TOKEN_SN_Old: " + sTOKEN_SN + "; TOKE_ID_Old: " + sTokenId_Old + "; EMAIL_CONTRACT: " + sEMAIL_CONTRACT
                                    + "; PHONE_CONTRACT: " + sPHONE_CONTRACT + "; IS_CHANGE_KEY: " + CheckCHANGE_KEY
                                    + "; KEEP_CERT_SN: " + String.valueOf(raServiceReq.keepCertificateSNEnabled)
                                    + "; IS_BACKUP_KEY: " + CheckPRIVATE_KEY + "; IS_DELETE_OLD_CERTIFICATE: " + setDeleteOldCertificateEnabled
                                    + "; IS_REVOKE_OLD_CERTIFICATE: " + setRevokeOldCertificateEnabled
                                    + "; BENEFICIARIES_USER: " + raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                                ATTRIBUTE_VALUES valueATTR;
                                ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                                dataATTR.setCertificationData(tempLogReq);
                                valueATTR = new ATTRIBUTE_VALUES();
                                valueATTR.setTokenSn(sTOKEN_SN);
                                if(!"".equals(sRsspAgreementUUID)) {
                                    valueATTR.setRsspAgreementUUID(sRsspAgreementUUID);
                                }
                                if(!"".equals(sRsspRelyingParty)) {
                                    valueATTR.setRsspRelyingParty(sRsspRelyingParty);
                                }
                                if(!"".equals(sRsspCertificateUUID)) {
                                    valueATTR.setRsspCertificateUUID(sRsspCertificateUUID);
                                }
                                if(!"".equals(sRsspConnectWSMode)) {
                                    valueATTR.setRsspConnectWSMode(sRsspConnectWSMode);
                                }
                                boolean boChangeKeyEnabled = "1".equals(CheckCHANGE_KEY);
                                valueATTR.setChangeKeyEnabled(boChangeKeyEnabled);
                                valueATTR.setKeepCertificateSNEnabled(raServiceReq.keepCertificateSNEnabled);
                                boolean boDeleteOldCertificate = "1".equals(setDeleteOldCertificateEnabled);
                                valueATTR.setDeleteOldCertificateEnabled(boDeleteOldCertificate);
                                boolean boRevokeOldCertificate = "1".equals(setRevokeOldCertificateEnabled);
                                valueATTR.setRevokeOldCertificateEnabled(boRevokeOldCertificate);
                                valueATTR.setTypeName(pCERTIFICATION_ATTR_TYPE_CODE);
                                valueATTR.setPromotionDuration(sPromotionDuration);
                                valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                valueATTR.setCreateUser(raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                                valueATTR.setCreateDt(new Date());
                                valueATTR.setAttributeData(dataATTR);
                                String strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                //</editor-fold>
                                
                                int[] pCERTIFICATE_ATTR_ID = new int[1];
                                int[] pCERTIFICATION_ID = new int[1];
                                String[] pRESPONSE_CODE_NAME = new String[1];
                                db.S_BO_API_CERTIFICATION_INSERT(pCERTIFICATION_PROFILE_CODE, sTOKEN_SN,
                                        pCERTIFICATION_SN, pPERSONAL_NAME, pCOMPANY_NAME, pDOMAIN_NAME,
                                        sDN_DB, sCoreCASubject, sPHONE_CONTRACT, sEMAIL_CONTRACT,
                                        sProvinceCodeComponent, pPAST_CERTIFICATE_SN, "", pCERTIFICATION_ATTR_TYPE_CODE,
                                        strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser),
                                        EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), sCSR, pCERTIFICATION_AUTHORITY_CODE,
                                        CheckCHANGE_KEY, CheckPRIVATE_KEY, sPKIFormFactorCode, pDeviceUUID, sPromotionDuration,
                                        pRESPONSE_CODE_NAME, pCERTIFICATION_ID, pCERTIFICATE_ATTR_ID, pCERTIFICATION_OWNER_ID,
                                        pEFFECTIVE_DT, pEXPIRATION_DT, sEnterpriseCert, sPersonalCert);
                                if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                    //<editor-fold defaultstate="collapsed" desc="### DNS LIST for SSL">
                                    if(!"".equals(pPROPERTIES_SAN)) {
                                        db.S_BO_CERTIFICATION_UPDATE_PROPERTIES(String.valueOf(pCERTIFICATION_ID[0]),
                                            pPROPERTIES_SAN, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                    }
                                    //</editor-fold>
                                    
                                    //<editor-fold defaultstate="collapsed" desc="### PUBLIC KEY HASH">
                                    if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                        || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)){
                                        if (pPrivateKeyEnabled_Old == false) {
                                            if (raServiceReq.changeKeyEnabled == true) {
                                                sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                                                if(!"".equals(sCSR)) {
                                                    String sKeySizeCSR = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                    db.S_BO_CERTIFICATION_UPDATE_CSR_INFO(pCERTIFICATION_ID[0], sKeySizeCSR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                }
                                            }
                                        }
                                    }
                                    //</editor-fold>

                                    raServiceResp.certificateID = pCERTIFICATION_ID[0];
                                    raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                    db.S_BO_CERTIFICATION_UPDATE(raServiceResp.certificateID, "", "", "", "",
                                        "", "", "", "", "", "", "", "", "",
                                        "", EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", "", "",
                                        pSHARED_MODE, "", "", sEnterpriseCert, sPersonalCert);
                                    //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                    if (intLevelApprove == 1 || intLevelApprove == 2) {
                                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                        valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                        valueATTR.setApproveDt(new Date());
                                        strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                        db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                    }
                                    if (intLevelApprove == 2) {
                                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                        valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                        valueATTR.setApproveCADt(new Date());
                                        strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                        String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                        if ("0".equals(sApprove)) {
                                            // DISCOUNT RATE
                                            if ("1".equals(sDiscountRateOption)) {
                                                CommonReferServlet.updateDiscountRateImportCert(String.valueOf(raServiceResp.certificateID),
                                                    EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pCERTIFICATION_PROFILE_CODE,
                                                    "", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.approveUser), "", "", sEnterpriseCert, sPersonalCert);
                                            }
                                            // Transfer token to agancy
                                            if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                                                || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                                if("0".equals(sNoAllowTranferToken)) {
                                                    if(sBranchId_New != sBranchId_Cert)
                                                    {
                                                        db.S_BO_TOKEN_UPDATE_BRANCH(String.valueOf(sTokenId_Old), String.valueOf(sBranchId_New), raServiceReq.approveUser);
                                                    }
                                                }
                                            }
                                            db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEmail, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                                 || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD))
                                            {
                                                ConnectDbPhaseTwo dbTwo = new ConnectDbPhaseTwo();
                                                dbTwo.S_BO_CERTIFICATION_ATTR_UPDATE_ACTIVATED_ENABLED(pCERTIFICATE_ATTR_ID[0], 1);
                                                int[] intWSRes = new int[1];
                                                String[] sWSRes = new String[1];
                                                ConnectConnector.EnrollCertificate(sTOKEN_SN, strPasswordP12, String.valueOf(pCERTIFICATE_ATTR_ID[0]), intWSRes, sWSRes);
                                                if (intWSRes[0] == 0) {
                                                    // select get cert with pCERTIFICATION_ID[0]
                                                    CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                    db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0], "", "",
                                                        raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                    if (certInfo[0].length > 0) {
                                                        raServiceResp.certificate = certInfo[0][0].certificate;
                                                        raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                        raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                                        raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                    }
                                                    if(!"".equals(strPasswordP12)) {
                                                        int[] intRes = new int[1];
                                                        String[] sRes = new String[1];
                                                        byte[] sP12Return = ConnectConnector.generateKeystore(strPasswordP12, false, String.valueOf(raServiceResp.certificateID), intRes, sRes);
                                                        raServiceResp.p12Certificate = sP12Return;
                                                    }
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                } else {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                                }
                                            } else if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true) {
                                                if("0".equals(CheckCHANGE_KEY) && "0".equals(CheckPRIVATE_KEY)) {
                                                    if("1".equals(sApproveCertNoChangeKey)) {
                                                        // call ws, return cert
                                                        int[] intWSRes = new int[1];
                                                        String[] sWSRes = new String[1];
                                                        ConnectConnector.EnrollCertificate(sTOKEN_SN, "", String.valueOf(pCERTIFICATE_ATTR_ID[0]), intWSRes, sWSRes);
                                                        if (intWSRes[0] == 0) {
                                                            // select get cert with raServiceReq.certificateID
                                                            CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                            db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0], "", "",
                                                                raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                            if (certInfo[0].length > 0) {
                                                                raServiceResp.certificate = certInfo[0][0].certificate;
                                                                raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                                raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                                                raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                            }
                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                        } else {
                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                                        }
                                                    } else {
                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                    }
                                                } else {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                }
                                            } else {
                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                            }
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                        }
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                    }
                                    //</editor-fold>

                                    if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                        if (!"".equals(strPasswordP12)) {
                                            raServiceResp.p12Password = strPasswordP12;
                                        }
                                    }
                                } else {
                                    raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                }
                            }
                        }
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_STATE_INVALID;
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### changeCertificateProcess">
    public void changeCertificateProcess(String sCERT_PROFILE_PROPERTIES, String sCERT_POLICY_PROPERTIES,
        String pPARENT_ID, int pBRANCH_ID, String pBeneficiaryUserDefault, String pApproveCAUser, boolean  autoApproveCAServer,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_CHANGE_CERTIFICATION_INFO;
        String sTOKEN_SN = "";
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        ObjectMapper objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", EscapeUtils.CheckTextNull(raReqTemp.certificateSN),
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            if (raServiceReq.certificateComponentInfo.length > 0 && !"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN))) {
                boolean autoApproveCAClient = raServiceReq.approveEnabled;
                String CheckCHANGE_KEY;
                String CheckPRIVATE_KEY;
                GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
                db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
                String checkChangeEffectiveDT = "0";
                if (rsPolicy[0].length > 0) {
                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_OPTION_FOR_CHANGING_EFFECTIVE_DT)) {
                            checkChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                            break;
                        }
                    }
                }
                //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE">
                String sCERTIFICATION_SN = "";
                int createdUserID = 0;
                String pCERTIFICATION_PURPOSE_CODE = "";
                String pCERTIFICATION_PROFILE_CODE = "";
                String pCERTIFICATION_AUTHORITY_CODE = "";
                String sPHONE_CONTRACT = "";
                String sEMAIL_CONTRACT = "";
                String sCoreCASubject = "";
                String pEnterpriseDB = "";
                String pPersonalDB = "";
                String sCSR = "";
                String pPAST_CERTIFICATE_SN = "";
                String sPKIFormFactorCode = "";
                String strDNSName = "";
                String pDISCOUNT_RATE="0";
//                String pPROVINCE_ID="0";
                String pSHARED_MODE ="";
                String pVALUE_OLD ="";
                boolean pPrivateKeyEnabled_Old = true;
                int sTokenId_Old = 0;
                int sBranchId_Cert = 0;
                int pCERTIFICATE_STATE_ID = 0;
                int pCERTIFICATION_OWNER_ID = 0;
                int pPAST_CERTIFICATE_ID = 0;
                String pCERTIFICATE_PROFILE_ID = "0";
                java.sql.Timestamp pEFFECTIVE_DT = null;
                int[] pRESPONSE_CODE = new int[1];
                boolean isValidRequest = false;
                if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN))) {
                    CertificateInfo[][] rsReq = new CertificateInfo[1][];
                    db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.certificateSN), 0,
                        Definitions.CONFIG_CERTIFICATION_STATE_CODE_OPERATED, "", raServiceReq.language, pRESPONSE_CODE, rsReq, "", "", "", "");
                    if (rsReq[0].length > 0) {
                        isValidRequest = true;
                        pVALUE_OLD = rsReq[0][0].value;
                        sPHONE_CONTRACT = rsReq[0][0].phoneContact;
                        sEMAIL_CONTRACT = rsReq[0][0].emailContact;
                        sCoreCASubject = rsReq[0][0].coreCASubject;
                        pEnterpriseDB = rsReq[0][0].enterpriseID;
                        pPersonalDB = rsReq[0][0].personalID;
                        sTOKEN_SN = rsReq[0][0].tokenSN;
                        pCERTIFICATION_PURPOSE_CODE = rsReq[0][0].certificatePurposeCode;
                        pCERTIFICATION_PROFILE_CODE = rsReq[0][0].certificateProfileCode;
                        pCERTIFICATION_AUTHORITY_CODE = rsReq[0][0].certificateAuthorityCode;
                        if("1".equals(checkChangeEffectiveDT)) {
                            pEFFECTIVE_DT = CommonFunction.ConvertPatternToTimeStamp(EscapeUtils.CheckTextNull(rsReq[0][0].effectiveTime), Definitions.CONFIG_DATETIME_FORMAT_YYYYDDMMHHMMSS);
                        }
                        pPAST_CERTIFICATE_SN = rsReq[0][0].certificateSN;
                        sPKIFormFactorCode = rsReq[0][0].formFactorCode;
                        createdUserID = rsReq[0][0].createdId;
                        pCERTIFICATE_STATE_ID = rsReq[0][0].certificateStateId;
                        pCERTIFICATE_PROFILE_ID = String.valueOf(rsReq[0][0].certificateProfileId);
                        sCSR = rsReq[0][0].csr;
                        pPrivateKeyEnabled_Old = rsReq[0][0].backupKeyEnabled;
                        sTokenId_Old = rsReq[0][0].tokenId;
//                        pPROVINCE_ID = String.valueOf(rsReq[0][0].provinceId);
                        pPAST_CERTIFICATE_ID = rsReq[0][0].certificateID;
                        sBranchId_Cert = rsReq[0][0].raId;
                        pCERTIFICATION_OWNER_ID = rsReq[0][0].certificateOwnerID;
                        pDISCOUNT_RATE = String.valueOf(rsReq[0][0].discountRate);
                        pSHARED_MODE = rsReq[0][0].shareMode ? "1" : "0";
                    }
                }
                if(isValidRequest == false) {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### CHECK CA CHANGE">
                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    String sCACodeClient = EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode);
                    if(!"".equals(sCACodeClient)) {
                        if(!sCACodeClient.equals(pCERTIFICATION_AUTHORITY_CODE)) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_CA_CHANGE_INVALID;
                            ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList = new ArrayList<>();
                            //<editor-fold defaultstate="collapsed" desc="### GET PROFILE LIST ACCESS">
                            CERTIFICATION_POLICY_DATA[][] resPolicyData_Old = new CERTIFICATION_POLICY_DATA[1][];
                            CommonFunction.getProfileCertList(sCERT_PROFILE_PROPERTIES, resPolicyData_Old);
                            for(CERTIFICATION_POLICY_DATA resPolicyCertData_Old1 : resPolicyData_Old[0])
                            {
                                if(resPolicyCertData_Old1.attributeType.equals(Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST))
                                {
                                    CERTIFICATION_PROFILE[][] resProfileDB = new CERTIFICATION_PROFILE[1][];
                                    db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(resPolicyCertData_Old1.name), resProfileDB);
                                    if(resProfileDB[0].length > 0)
                                    {
                                        CERTIFICATION_POLICY_DATA itemProfileAccess = new CERTIFICATION_POLICY_DATA();
                                        itemProfileAccess.name = resProfileDB[0][0].NAME;
                                        itemProfileAccess.certificateAuthority = resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME;
                                        itemProfileAccess.certificatePurpose = resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME;
                                        itemProfileAccess.remark = resPolicyCertData_Old1.remark;
                                        itemProfileAccess.remarkEn = resPolicyCertData_Old1.remarkEn;
                                        itemProfileAccess.attributeType = Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST;
                                        tempProfileList.add(itemProfileAccess);
                                    }
                                }
                            }
                            //</editor-fold>

                            CERTIFICATION_PROFILE[][] rsProfileCheck = new CERTIFICATION_PROFILE[1][];
                            db.S_BO_API_CERTIFICATION_PROFILE_LIST_HASID(sCACodeClient, pCERTIFICATION_PURPOSE_CODE,
                                sPKIFormFactorCode, 0, raServiceReq.language, rsProfileCheck, sCERT_PROFILE_PROPERTIES, tempProfileList);
                            if(rsProfileCheck[0].length > 0) {
                                int durationProfileOld = 0;
                                CERTIFICATION_PROFILE[][] rsDurationOld = new CERTIFICATION_PROFILE[1][];
                                db.S_BO_CERTIFICATION_PROFILE_DETAIL(pCERTIFICATE_PROFILE_ID, rsDurationOld);
                                if(rsDurationOld[0].length > 0) {
                                    durationProfileOld = rsDurationOld[0][0].DURATION;
                                }
                                for(CERTIFICATION_PROFILE rsProfileCheck1 : rsProfileCheck[0]) {
                                    if(rsProfileCheck1.DURATION == durationProfileOld) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                        pCERTIFICATION_AUTHORITY_CODE = sCACodeClient;
                                        pCERTIFICATION_PROFILE_CODE = rsProfileCheck1.NAME;
                                        pCERTIFICATE_PROFILE_ID = String.valueOf(rsProfileCheck1.ID);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
                String raFullnameCreate = "";
                String raFullname = "";
                int sBranchId_New = 0;
                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser))) {
                        BACKOFFICE_USER[][] rsUser = new BACKOFFICE_USER[1][];
                        db.S_BO_USER_DETAIL(String.valueOf(createdUserID), String.valueOf(raServiceReq.language), rsUser);
                        if (rsUser[0].length > 0) {
                            raServiceReq.beneficiaryUser = rsUser[0][0].USERNAME;
                            raFullnameCreate = EscapeUtils.CheckTextNull(rsUser[0][0].FULL_NAME);
                        }
                        sBranchId_New = sBranchId_Cert;
                    } else {
                        UserInfo[][] userInfo = new UserInfo[1][];
                        db.S_BO_API_USER_LIST(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", raServiceReq.language, userInfo);
                        if (userInfo[0].length > 0) {
                            raFullnameCreate = EscapeUtils.CheckTextNull(userInfo[0][0].fullName);
                            sBranchId_New = userInfo[0][0].raID;
                        }
                    }
                    if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                    {
                        boolean branchAccessOld = false;
                        BRANCH[][] rsBranch;
                        rsBranch = new BRANCH[1][];
                        db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                        if(rsBranch[0].length > 0) {
                            for(BRANCH item : rsBranch[0]) {
                                if(item.ID == sBranchId_New) {
                                    branchAccessOld = true;
                                    break;
                                }
                            }
                        }
                        if(branchAccessOld == false) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                        } else {
                            UserInfo[][] userDetail = new UserInfo[1][];
                            db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                            if (userDetail[0].length > 0) {
                                raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                                raServiceReq.approveUser = pApproveCAUser;
                            }
                        }
                    }
                }
                //</editor-fold>

                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    if (pCERTIFICATE_STATE_ID != 0 && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_NEW
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_DECLINED
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVOKED
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_EXPIRED
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED_EXPIRED
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVISED_KEEP_SN
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED_KEEP_SN
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_STOPPED_OPERATION
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_AUTO_REVOKED
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVISED
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REISSUED
                            && !sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SN_LOST))
                    {
                        if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                            int intOUCheckClient = 0;
                            for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                if (EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                    intOUCheckClient = intOUCheckClient + 1;
                                }
                            }
                            CertificateProfileInfo[][] certProfileInfo = new CertificateProfileInfo[1][];
                            db.S_BO_API_CERTIFICATION_PROFILE_GET_PROPERTIES(pCERTIFICATION_AUTHORITY_CODE, pCERTIFICATION_PROFILE_CODE,
                                    sPKIFormFactorCode, certProfileInfo);
                            if (certProfileInfo[0].length > 0) {
                                boolean sCheckRequire = true;
                                //<editor-fold defaultstate="collapsed" desc="### Update isreqiure, commonname certificateComponentInfo">
                                String sPropertiesCert = EscapeUtils.CheckTextNull(certProfileInfo[0][0].certificateProfileProperties);
                                if (!"".equals(sPropertiesCert)) {
                                    CertificateComponentInfo[][] infoCompNew = new CertificateComponentInfo[1][];
                                    ArrayList<CertificateComponentInfo> listCompNew = new ArrayList<>();
                                    CERTIFICATION_TYPE_COMPONENT[][] resProfileData = new CERTIFICATION_TYPE_COMPONENT[1][];
                                    CommonFunction.getJsonComponentForCert(sPropertiesCert, resProfileData);
                                    int intCompOUSrv = 0;
                                    for(CERTIFICATION_TYPE_COMPONENT resProfileData1 : resProfileData[0])
                                    {
                                        if(EscapeUtils.CheckTextNull(resProfileData1.name).equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID))
                                        {
                                            boolean hasComponent = false;
                                            for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                String sCodeInfoOld = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                if (sCodeInfoOld.equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE)) {
                                                    sCodeInfoOld = sCodeInfoOld.replace(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE, Definitions.CONFIG_COMPONENT_DN_TAG_UID);
                                                }
                                                if (EscapeUtils.CheckTextNull(resProfileData1.prefix).equals(EscapeUtils.CheckTextNull(certComponentInfo1.prefix)))
                                                {
                                                    hasComponent = true;
                                                    CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                    itemCompNew.code = sCodeInfoOld;
                                                    itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                    itemCompNew.requireEnabled = resProfileData1.require;
                                                    itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                    itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                    itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                    listCompNew.add(itemCompNew);
                                                    break;
                                                }
                                            }
                                            if(hasComponent == false)
                                            {
                                                CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                itemCompNew.requireEnabled = resProfileData1.require;
                                                itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                itemCompNew.value = "";
                                                itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                listCompNew.add(itemCompNew);
                                            }
                                        } else {
                                            if(!EscapeUtils.CheckTextNull(resProfileData1.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN))
                                            {
                                                if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                                    boolean hasComponent = false;
                                                    intCompOUSrv = intCompOUSrv + 1;
                                                    int intCompOUClient = 0;
                                                    for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                                            hasComponent = true;
                                                            intCompOUClient = intCompOUClient + 1;
                                                            if(intCompOUSrv == intCompOUClient) {
                                                                CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                                itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                                itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                                itemCompNew.requireEnabled = resProfileData1.require;
                                                                itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                                itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                                itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                                listCompNew.add(itemCompNew);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    if(hasComponent == false) {
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                        itemCompNew.value = "";
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                    }
                                                } else {
                                                    boolean hasComponent = false;
                                                    for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                        if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(EscapeUtils.CheckTextNull(certComponentInfo1.code))) {
                                                            hasComponent = true;
                                                            CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                            itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                            itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                            itemCompNew.requireEnabled = resProfileData1.require;
                                                            itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                            itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                            itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                            listCompNew.add(itemCompNew);
                                                            break;
                                                        }
                                                    }
                                                    if(hasComponent == false)
                                                    {
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                        itemCompNew.value = "";
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                    }
                                                }
                                            } else {
                                                boolean hasComponent = false;
                                                for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                    if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(EscapeUtils.CheckTextNull(certComponentInfo1.code))) {
                                                        hasComponent = true;
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN;
                                                        itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(certComponentInfo1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                        break;
                                                    }
                                                }
                                                if(hasComponent == false)
                                                {
                                                    CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                    itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                    itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                    itemCompNew.requireEnabled = resProfileData1.require;
                                                    itemCompNew.attributeType = Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN;
                                                    itemCompNew.value = "";
                                                    itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                    listCompNew.add(itemCompNew);
                                                }
                                            }
                                        }
                                    }
                                    infoCompNew[0] = new CertificateComponentInfo[listCompNew.size()];
                                    infoCompNew[0] = listCompNew.toArray(infoCompNew[0]);
                                    raServiceReq.certificateComponentInfo = infoCompNew[0];
                                    if(intOUCheckClient > intCompOUSrv) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_TEMPLATE_CERT_EMPTY;
                                }
                                //</editor-fold>
                                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                    String sCommomNameType = "";
                                    String sCompanyCompoment = "";
                                    String sPersonalCompoment = "";
                                    String sDomainCompoment = "";
                                    String sMSTCompoment = "";
                                    String sDeviceUUID = "";
                                    String sMNSCompoment = "";
                                    String sQDCompoment = "";
                                    String sCMNDCompoment = "";
                                    String sHCCompoment = "";
                                    String sCCCDCompoment = "";
                                    String sBHXHCompoment = "";
                                    String sBHXHCompomentCN = "";
                                    String sMDVCompoment = "";
                                    String sMSTCompomentCN = "";
                                    String sProvinceCodeComponent = "";
                                    String sProvinceNameComponent = "";
                                    String sDNResult = "";
                                    String pCERTIFICATION_ATTR_TYPE_CODE = String.valueOf(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_CHANGEINFO);
                                    //<editor-fold defaultstate="collapsed" desc="### Get info component from certificateComponentInfo">
                                    // CHECK REQUIRE FOR UID
                                    boolean hasCompanyUID = false;
                                    boolean hasPesonalUID = false;
                                    boolean hasCompanyValue = false;
                                    boolean hasPesonalValue = false;
                                    for (CertificateComponentInfo compCheckUID : raServiceReq.certificateComponentInfo) {
                                        if (EscapeUtils.CheckTextNull(compCheckUID.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY)) {
                                            hasCompanyUID = true;
                                            if (compCheckUID.requireEnabled == true) {
                                                if (!"".equals(EscapeUtils.CheckTextNull(compCheckUID.value))) {
                                                    hasCompanyValue = true;
                                                    break;
                                                } else {hasCompanyValue = false;}
                                            } else {hasCompanyValue = true;}
                                        }
                                    }
                                    for (CertificateComponentInfo compCheckUID : raServiceReq.certificateComponentInfo) {
                                        if (EscapeUtils.CheckTextNull(compCheckUID.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL)) {
                                            hasPesonalUID = true;
                                            if (compCheckUID.requireEnabled == true) {
                                                if (!"".equals(EscapeUtils.CheckTextNull(compCheckUID.value))) {
                                                    hasPesonalValue = true;
                                                    break;
                                                } else {hasPesonalValue = false;}
                                            } else {hasPesonalValue = true;}
                                        }
                                    }
                                    if(hasCompanyUID == true) {
                                        if(hasCompanyValue == false) {
                                            sCheckRequire = false;
                                        }
                                    }
                                    if(hasPesonalUID == true) {
                                        if(hasPesonalValue == false) {
                                            sCheckRequire = false;
                                        }
                                    }
                                    boolean isEmailCertValid = true;
                                    if (sCheckRequire == true) {
                                        String sSubjectEmail = "";
                                        String sSANEmail = "";
                                        boolean isHasSANEmail = false;
                                        List<CERTIFICATION_PROPERTIES_JSON.Attribute> attributesSan = new ArrayList<>();
                                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                            for (CertificateComponentInfo certComponentInfo2 : raServiceReq.certificateComponentInfo) {
                                                if (!EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN))
                                                {
                                                    if (certComponentInfo2.requireEnabled == true) {
                                                        if (!certComponentInfo2.attributeType.equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY)
                                                            && !certComponentInfo2.attributeType.equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL))
                                                        {
                                                            if ("".equals(certComponentInfo2.value)) {
                                                                sCheckRequire = false;
                                                                break;
                                                            }
                                                        } else {

                                                        }
                                                    }
                                                    // get city province name
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_ST)) {
                                                        sProvinceCodeComponent = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        if("".equals(sProvinceCodeComponent) || Definitions.CONFIG_GRID_STRING_NA.equals(sProvinceCodeComponent)) {
                                                            sProvinceCodeComponent = "";
                                                        }
                                                        if(!"".equals(sProvinceCodeComponent)) {
                                                            CityProvinceInfo[][] cityInfo = new CityProvinceInfo[1][];
                                                            db.S_BO_API_PROVINCE_LIST(sProvinceCodeComponent, raServiceReq.language, cityInfo);
                                                            if (cityInfo[0].length > 0) {
                                                                certComponentInfo2.value = cityInfo[0][0].cityProvinceName;
                                                                sProvinceNameComponent = cityInfo[0][0].cityProvinceName;
                                                            }
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_L)) {
                                                        String sValueL = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        if("".equals(sValueL) || Definitions.CONFIG_GRID_STRING_NA.equals(sValueL)) {
                                                            certComponentInfo2.value = "";
                                                        }
                                                    }
                                                    // get company, personal name
                                                    if (!"".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value))) {
                                                        if(CommonFunction.checkCertCharacterSpecial(certComponentInfo2.value) == false) {
                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_COMPONENT_CHARACTER_SPECIAL;
                                                            break;
                                                        }
                                                        sDNResult += EscapeUtils.CheckTextNull(certComponentInfo2.code) + "=" + EscapeUtils.CheckTextNull(certComponentInfo2.prefix)
                                                                + CommonFunction.replaceStringCharaterSpecialDN(EscapeUtils.CheckTextNull(certComponentInfo2.value), true, false) + ", ";
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_CN)) {
                                                        sCommomNameType = EscapeUtils.CheckTextNull(certComponentInfo2.commomNameType);
                                                        if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_COMPANY)) {
                                                            sCompanyCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_PERSON)) {
                                                            sPersonalCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_DOMAIN_NAME)) {
                                                            sDomainCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBCLIENT + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBSERVER + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_AUTH + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CODE_SIGNING + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_SIGN + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_O)) {
                                                        if (!"".equals(sCommomNameType)) {
                                                            if (pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF_SIGNSERVER)
                                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF)
                                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                            {
                                                                sCompanyCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY))
                                                    {
                                                        if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE))
                                                        {
                                                            if(!"".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value))) {
                                                                sDeviceUUID = EscapeUtils.CheckTextNull(certComponentInfo2.prefix) + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                        } else {
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_TAX_CODE + ":")) {
                                                                sMSTCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_BUDGET_CODE + ":")) {
                                                                sMNSCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_DECISION + ":")) {
                                                                sQDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_SOCIAL_INSURANCE_CODE + ":")) {
                                                                sBHXHCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_UNIT_CODE + ":")) {
                                                                sMDVCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL))
                                                    {
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_CODE + ":")) {
                                                            sCMNDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_PASSPORT_CODE + ":")) {
                                                            sHCCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_CITIZEN_CODE + ":")) {
                                                            sCCCDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_SOCIAL_INSURANCE_CODE + ":")) {
                                                            sBHXHCompomentCN = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_TAX_CODE + ":")) {
                                                            sMSTCompomentCN = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_E)) {
                                                        sSubjectEmail = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                } else {
                                                    // SAN
                                                    String sValueSan = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    if (certComponentInfo2.requireEnabled == true) {
                                                        if ("".equals(sValueSan)) {
                                                            sCheckRequire = false;
                                                            break;
                                                        }
                                                    }
                                                    if(!"".equals(sValueSan)) {
                                                        String sCodeSan = EscapeUtils.CheckTextNull(certComponentInfo2.code);
                                                        String sKey = "";
                                                        if(!"".equals(sCodeSan)) {
                                                            sKey = sCodeSan;
                                                        }
                                                        CERTIFICATION_PROPERTIES_JSON.Attribute attribute = new CERTIFICATION_PROPERTIES_JSON.Attribute();
                                                        attribute.setKey(sKey);
                                                        attribute.setValue(sValueSan);
                                                        attributesSan.add(attribute);
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_SAN_TAG_rfc822Name)) {
                                                        isHasSANEmail = true;
                                                        sSANEmail = sValueSan;
                                                    }
                                                }
                                            }
                                        }
                                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                            //<editor-fold defaultstate="collapsed" desc="### CHECK EMAIL CERT VALID">
                                            if(!"".equals(sSubjectEmail) || !"".equals(sSANEmail))
                                            {
                                                String sRegexPolicy = "";
                                                if (rsPolicy[0].length > 0) {
                                                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_REGEX_FOR_PHONE_EMAIL)) {
                                                            sRegexPolicy = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                            break;
                                                        }
                                                    }
                                                }
                                                if(!"".equals(sSubjectEmail)) {
                                                    String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                                                    if ("".equals(sREGEX_EMAIL.trim())) {
                                                        sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                                                    }
                                                    if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(sSubjectEmail), sREGEX_EMAIL) == false) {
                                                        isEmailCertValid = false;
                                                    }
                                                }
                                                if(!"".equals(sSANEmail)) {
                                                    String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                                                    if ("".equals(sREGEX_EMAIL.trim())) {
                                                        sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                                                    }
                                                    if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(sSANEmail), sREGEX_EMAIL) == false) {
                                                        isEmailCertValid = false;
                                                    }
                                                }
                                            }
                                            //</editor-fold>

                                            if(isEmailCertValid == true) {
                                                if(attributesSan.size() > 0) {
                                                    strDNSName = "{\"attributes\":" + objectMapper.writeValueAsString(attributesSan) + "}";
                                                }
                                                CommonFunction.LogDebugString(log, "SAN_Properties", strDNSName);
                                                if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF))
                                                {
                                                    if(!"".equals(sMSTCompoment) && !"".equals(sMNSCompoment) && !"".equals(sQDCompoment)
                                                        && !"".equals(sBHXHCompoment) && !"".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sMSTCompoment) && "".equals(sMNSCompoment) && "".equals(sQDCompoment)
                                                        && "".equals(sBHXHCompoment) && "".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if(!"".equals(sCMNDCompoment) && !"".equals(sHCCompoment) && !"".equals(sCCCDCompoment)
                                                        && !"".equals(sBHXHCompomentCN) && !"".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sCMNDCompoment) && "".equals(sHCCompoment) && "".equals(sCCCDCompoment)
                                                        && "".equals(sBHXHCompomentCN) && "".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_ENTERPRISE)) {
                                                    if(!"".equals(sMSTCompoment) && !"".equals(sMNSCompoment) && !"".equals(sQDCompoment)
                                                        && !"".equals(sBHXHCompoment) && !"".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sMSTCompoment) && "".equals(sMNSCompoment) && "".equals(sQDCompoment)
                                                        && "".equals(sBHXHCompoment) && "".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_PERSONAL))
                                                {
                                                    if(!"".equals(sCMNDCompoment) && !"".equals(sHCCompoment) && !"".equals(sCCCDCompoment)
                                                        && !"".equals(sBHXHCompomentCN) && !"".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sCMNDCompoment) && "".equals(sHCCompoment) && "".equals(sCCCDCompoment)
                                                        && "".equals(sBHXHCompomentCN) && "".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE))
                                                {
                                                    if("".equals(sDeviceUUID))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_PERSONAL_GOV)
                                                    || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV))
                                                {

                                                } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                    || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                    || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                    || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                    || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                {
                                                    if("".equals(sDeviceUUID))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                }
                                                sDNResult = CommonFunction.subLastCharater(sDNResult);
                                            }
                                        }
                                    }
                                    //</editor-fold>
                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                        CommonFunction.LogDebugString(log, sFunctionWS + " - Parser Cert Info", "sCommomNameType: " + sCommomNameType
                                                + ";sCompanyCompoment: " + sCompanyCompoment + ";sDomainCompoment: " + sDomainCompoment
                                                + ";sPersonalCompoment: " + sPersonalCompoment + ";sCMNDCompoment: " + sCMNDCompoment
                                                + ";sCCCDCompoment: " + sCCCDCompoment + ";sHCCompoment: " + sHCCompoment
                                                + ";sBHXHCompoment: " + sBHXHCompoment + ";sMDVCompoment: " + sMDVCompoment
                                                + ";sBHXHCompomentCN: " + sBHXHCompomentCN + ";sMSTCompomentCN: " + sMSTCompomentCN
                                                + ";sMSTCompoment: " + sMSTCompoment + ";sMNSCompoment: " + sMNSCompoment + ";sQDCompoment: " + sQDCompoment
                                                + ";sDeviceUUID: " + sDeviceUUID + ";sDNResult: " + sDNResult);
                                        if (sCheckRequire == true) {
                                            if (isEmailCertValid == true) {
                                                if (!"".equals(sDNResult)) {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                    //<editor-fold defaultstate="collapsed" desc="### GET POLICY"> 
                                                    String setDeleteOldCertificateEnabled = "1";
                                                    String setRevokeOldCertificateEnabled = "1";
                                                    String sApproveCertNoChangeKey = "0";
                                                    String sNoAllowTranferToken = "1";
                                                    if (rsPolicy[0].length > 0) {
                                                        for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                            if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_RENEWAL_AND_REVISION_AUTO_ISSUE_CERT_FOR_PARTICULAR_REQUEST)) {
                                                                sApproveCertNoChangeKey = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                            }
                                                            if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_NO_AUTO_MOVE_TOKEN_FOR_RENEWAL_REVISION_CERTIFICATE_REQUEST)) {
                                                                sNoAllowTranferToken = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                            }
                                                        }
                                                    }
                                                    if(raServiceReq.deleteCertificateEnabled == false) {
                                                        setDeleteOldCertificateEnabled = "0";
                                                    }
                                                    if(raServiceReq.revokeOldCertificateEnabled == false) {
                                                        setRevokeOldCertificateEnabled = "0";
                                                    }
                                                    //</editor-fold>
                                                    
                                                    //<editor-fold defaultstate="collapsed" desc="### CHANGE_KEY, PRIVATE_KEY, REVOKE_OLD_CERT, DELETE_IN_TOKEN of CERT TYPE">
                                                    String strPasswordP12 = "";
                                                    String pushNoticeEmail = "0";
                                                    if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                                                        || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                                        if (pPrivateKeyEnabled_Old == true) {
                                                            if (raServiceReq.changeKeyEnabled == true) {
                                                                CheckCHANGE_KEY = "1";
                                                            } else {
                                                                setDeleteOldCertificateEnabled = "0";
                                                                CheckCHANGE_KEY = "0";
                                                            }
                                                            if (raServiceReq.backupKeyEnabled == true) {
                                                                CheckPRIVATE_KEY = "1";
                                                            } else {
                                                                CheckPRIVATE_KEY = "0";
                                                            }
                                                        } else {
                                                            if (raServiceReq.changeKeyEnabled == true) {
                                                                CheckCHANGE_KEY = "1";
                                                                if (raServiceReq.backupKeyEnabled == true) {
                                                                    CheckPRIVATE_KEY = "1";
                                                                } else {
                                                                    CheckPRIVATE_KEY = "0";
                                                                }
                                                            } else {
                                                                CheckCHANGE_KEY = "0";
                                                                CheckPRIVATE_KEY = "0";
                                                                setDeleteOldCertificateEnabled = "0";
                                                            }
                                                        }
                                                        boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                                        if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                                            pushNoticeEmail = "1";
                                                        }
                                                    } else if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                                        || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                                                        if (pPrivateKeyEnabled_Old == true) {
                                                            CheckPRIVATE_KEY = "1";
                                                            if (raServiceReq.changeKeyEnabled == true) {
                                                                CheckCHANGE_KEY = "1";
                                                            } else {
                                                                CheckCHANGE_KEY = "0";
                                                            }
                                                            boolean p12EmailCertServer = CommonFunction.getP12EmailEnabledCert(sCERT_POLICY_PROPERTIES);
                                                            if (raServiceReq.p12EmailEnabled == true && p12EmailCertServer == true) {
                                                                pushNoticeEmail = "1";
                                                            }
                                                            if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                                                strPasswordP12 = EscapeUtils.CheckTextNull(raServiceReq.p12Password);
                                                            } else {
                                                                strPasswordP12 = CommonFunction.randomPasswordP12(8);
                                                            }
                                                        } else {
                                                            if (raServiceReq.changeKeyEnabled == true) {
                                                                CheckCHANGE_KEY = "1";
                                                                sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                                                                if ("".equals(sCSR)) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EMPTY;
                                                                } else {
                                                                    String sKeySizeDB;
                                                                    boolean isValidCSR = false;
                                                                    boolean checkCSRNotExists = true;
                                                                    Config conf = new Config();
                                                                    String sIsCA = conf.GetTryPropertybyCode(Definitions.CONFIG_IS_WHICH_ABOUT_CA);
                                                                    if(!sIsCA.equals(Definitions.CONFIG_IS_WHICH_ABOUT_CA_VGCA)) {
                                                                        CERTIFICATION[][] rsCert = new CERTIFICATION[1][];
                                                                        db.S_BO_API_GET_ALGORITHM_KEY_SIZE(pCERTIFICATION_PROFILE_CODE, rsCert);
                                                                        if (rsCert[0].length > 0) {
                                                                            sKeySizeDB = EscapeUtils.CheckTextNull(rsCert[0][0].KEY_SIZE);
                                                                            String sKeySizeCSR = CommonFunction.getKeySizeFromCSR(sCSR);
                                                                            isValidCSR = sKeySizeDB.equals(sKeySizeCSR);
                                                                        }
                                                                    } else {
                                                                        isValidCSR = true;
                                                                    }
                                                                    if(isValidCSR == false) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_KEYSIZE;
                                                                    } else {
                                                                        String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                                        int checkPublicKey = db.S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH(0, null, null,null, sPublicKeyHard, pCERTIFICATION_OWNER_ID);
                                                                        // call store cert Operation check exist sPublicKeyHard
                                                                        if(checkPublicKey == 0) {
                                                                            checkCSRNotExists = true;
                                                                        } else {
                                                                            checkCSRNotExists = false;
                                                                        }
                                                                        if(checkCSRNotExists == false) {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EXISTS;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                CheckCHANGE_KEY = "0";
                                                            }
                                                            CheckPRIVATE_KEY = "0";
                                                            boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                                            if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                                                pushNoticeEmail = "1";
                                                            }
                                                        }
                                                    } else if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN)) {
                                                        if (raServiceReq.changeKeyEnabled == true) {
                                                            CheckCHANGE_KEY = "1";
                                                        } else {
                                                            CheckCHANGE_KEY = "0";
                                                        }
                                                        CheckPRIVATE_KEY = "0";
                                                    } else {
                                                        CheckCHANGE_KEY = "1";
                                                        CheckPRIVATE_KEY = "1";
                                                    }
                                                    //</editor-fold>
                                                    
                                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                        Config conf = new Config();
                                                        String uidChangeConfig = conf.GetPropertybyCode(Definitions.CONFIG_UID_CHANGE_INFO_API_ENABLED);
                                                        boolean isChangeUIDEnable = false;
                                                        if("1".equals(uidChangeConfig)) {
                                                            if("1".equals(CheckCHANGE_KEY)){
                                                                isChangeUIDEnable = true;
                                                            }
                                                        }
                                                        if(isChangeUIDEnable == false) {
                                                            if(!pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_PERSONAL_GOV)
                                                                && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV)
                                                                && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                                && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                                && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                                && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                                && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                            {
                                                                if(!pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_SSL))
                                                                {
                                                                    if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_TAXCODE, sMSTCompoment) == false) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                    }
                                                                    if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_BUDGET_CODE, sMNSCompoment) == false) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                    }
                                                                    if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_DECISION, sQDCompoment) == false) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                    }
                                                                    if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_SOCIAL_INSURANCE_CODE, sBHXHCompoment) == false) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                    }
                                                                    if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_UNIT_CODE, sMDVCompoment) == false) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                    }
                                                                    if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_TAXCODE, sMSTCompomentCN) == false) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                    }
                                                                    if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_PERSONAL_CODE, sCMNDCompoment) == false) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                    }
                                                                    if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_PASSPORT, sHCCompoment) == false) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                    }
                                                                    if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_CITIZEN_CODE, sCCCDCompoment) == false) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                    }
                                                                    if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_SOCIAL_INSURANCE_CODE, sBHXHCompomentCN) == false) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                        //<editor-fold defaultstate="collapsed" desc="### GET FULLNAME AND PROVINCE">
                                                        if("".equals(sProvinceCodeComponent)) {
                                                            sProvinceCodeComponent = Definitions.CONFIG_GRID_STRING_NA;
                                                            sProvinceNameComponent = Definitions.CONFIG_GRID_STRING_NA;
                                                            /*CITY_PROVINCE[][] rsProvince = new CITY_PROVINCE[1][];
                                                            db.S_BO_PROVINCE_DETAIL(pPROVINCE_ID, rsProvince);
                                                            if (rsProvince[0].length > 0) {
                                                                sProvinceNameComponent = rsProvince[0][0].REMARK;
                                                                sProvinceCodeComponent = rsProvince[0][0].NAME;
                                                            }*/
                                                        }
                                                        //</editor-fold>

                                                        if(raServiceReq.keepCertificateSNEnabled == true) {
                                                            setRevokeOldCertificateEnabled = "0";
                                                        }
                                                        //<editor-fold defaultstate="collapsed" desc="### EXPAND PARAM PROCESS">
                                                        String sRsspAgreementUUID = "";
                                                        String sRsspRelyingParty = "";
                                                        String sRsspCertificateUUID = "";
                                                        String sRsspConnectWSMode = "";
                                                        if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                                                            String sExpandParam = EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML);
                                                            if(!"".equals(sExpandParam)) {
                                                                ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                                                sRsspAgreementUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspAgreementUUID);
                                                                sRsspRelyingParty = EscapeUtils.CheckTextNull(jsonReqExpand.rsspRelyingParty);
                                                                sRsspCertificateUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspCertificateUUID);
                                                                sRsspConnectWSMode = EscapeUtils.CheckTextNull(jsonReqExpand.rsspConnectWSMode);
                                                            }
                                                            if(!"".equals(sRsspConnectWSMode)) {
                                                                if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_REST)) {
                                                                    if("".equals(sRsspCertificateUUID) || "".equals(sRsspRelyingParty)) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                    }
                                                                } else if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_SOAP)) {
                                                                    if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                    }
                                                                } else {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                }
                                                            } else {
                                                                if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                }
                                                            }
                                                        }
                                                        //</editor-fold>
                                                        String[] sUIDResult = new String[2];
                                                        CommonReferServlet.collectFieldToUIDAPI(sMSTCompoment, sMNSCompoment, sQDCompoment, sBHXHCompoment,
                                                            sMDVCompoment, sCMNDCompoment, sHCCompoment, sCCCDCompoment, sMSTCompomentCN, sBHXHCompomentCN, sUIDResult);
                                                        String sEnterpriseCert = sUIDResult[0];
                                                        String sPersonalCert = sUIDResult[1];

                                                        CommonFunction.LogDebugString(log, sFunctionWS, "REQUEST: " + "CERT_SN: " + EscapeUtils.CheckTextNull(raServiceReq.certificateSN)
                                                                + "SUBJECT: " + sDNResult + "; PERSONAL_NAME: " + sPersonalCompoment + "; COMPANY_NAME: " + sCompanyCompoment
                                                                + "; sEnterpriseCert: " + sEnterpriseCert + "; sPersonalCert: " + sPersonalCert + "; COMMON_NAME_TYPE: " + sCommomNameType
                                                                + "; CERTE_STATE_ID: " + pCERTIFICATE_STATE_ID + "; DOMAIN_NAME: " + sDomainCompoment
                                                                + "; PAST_CERT_ID: " + pPAST_CERTIFICATE_ID + "; PKIFormFactorCode: " + sPKIFormFactorCode
                                                                + "; CERT_ATTR_TYPE_CODE: " + pCERTIFICATION_ATTR_TYPE_CODE + "; CERTIF_AUTHORITY_CODE: " + pCERTIFICATION_AUTHORITY_CODE
                                                                + "; TOKEN_SN_Old: " + sTOKEN_SN + "; TOKE_ID_Old: " + sTokenId_Old + "; EMAIL_CONTRACT: " + sEMAIL_CONTRACT
                                                                + "; PHONE_CONTRACT: " + sPHONE_CONTRACT + "; IS_CHANGE_KEY: " + CheckCHANGE_KEY
                                                                + "; KEEP_CERT_SN: " + String.valueOf(raServiceReq.keepCertificateSNEnabled)
                                                                + "; IS_BACKUP_KEY: " + CheckPRIVATE_KEY + "; AUTO_APPROVE_CLIENT: " + autoApproveCAClient
                                                                + "; AUTO_APPROVE_USER: " + raServiceReq.approveEnabled + "; IS_DELETE_OLD_CERT: " + setDeleteOldCertificateEnabled
                                                                + "; IS_REVOKE_OLD_CERT: " + setRevokeOldCertificateEnabled + "; CSR: " + sCSR
                                                                + "; BENEFICIARIES_USER: " + raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                                                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                            //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                                                            // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                                                            int intLevelApprove = 0;
                                                            if (autoApproveCAServer == false && autoApproveCAClient == false) {
                                                                intLevelApprove = 0;
                                                            } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                                                                intLevelApprove = 1;
                                                            } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                                                                intLevelApprove = 0;
                                                            } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                                                                intLevelApprove = 2;
                                                            }
                                                            //</editor-fold>
                                                            String sPromotionDuration = "";
                                                            if(!"".equals(pVALUE_OLD)) {
                                                                ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(pVALUE_OLD, ATTRIBUTE_VALUES.class);
                                                                sPromotionDuration = EscapeUtils.CheckTextNull(valueATTR_Frist.getPromotionDuration());
                                                            }
                                                            //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR ">
                                                            CERTIFICATION_DATA_ATTR tempLogReq = new CERTIFICATION_DATA_ATTR();
                                                            tempLogReq.personalName = sPersonalCompoment;
                                                            tempLogReq.companyName = sCompanyCompoment;
                                                            tempLogReq.enterpriseID = sEnterpriseCert;
                                                            tempLogReq.personalID = sPersonalCert;
                                                            tempLogReq.emailContract = sEMAIL_CONTRACT;
                                                            tempLogReq.phoneContract = sPHONE_CONTRACT;
                                                            tempLogReq.issuerSubject = sCoreCASubject;
                                                            tempLogReq.subjectDn = sDNResult;
                                                            tempLogReq.tokenSn = sTOKEN_SN;
                                                            tempLogReq.provinceName = sProvinceNameComponent;
                                                            tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                                                            ATTRIBUTE_VALUES valueATTR;
                                                            ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                                                            dataATTR.setCertificationData(tempLogReq);
                                                            valueATTR = new ATTRIBUTE_VALUES();
                                                            valueATTR.setTokenSn(sTOKEN_SN);
                                                            if(!"".equals(sRsspAgreementUUID)) {
                                                                valueATTR.setRsspAgreementUUID(sRsspAgreementUUID);
                                                            }
                                                            if(!"".equals(sRsspRelyingParty)) {
                                                                valueATTR.setRsspRelyingParty(sRsspRelyingParty);
                                                            }
                                                            if(!"".equals(sRsspCertificateUUID)) {
                                                                valueATTR.setRsspCertificateUUID(sRsspCertificateUUID);
                                                            }
                                                            if(!"".equals(sRsspConnectWSMode)) {
                                                                valueATTR.setRsspConnectWSMode(sRsspConnectWSMode);
                                                            }
                                                            boolean boChangeKeyEnabled = "1".equals(CheckCHANGE_KEY);
                                                            valueATTR.setChangeKeyEnabled(boChangeKeyEnabled);
                                                            valueATTR.setKeepCertificateSNEnabled(raServiceReq.keepCertificateSNEnabled);
                                                            boolean boDeleteOldCertificate = "1".equals(setDeleteOldCertificateEnabled);
                                                            valueATTR.setDeleteOldCertificateEnabled(boDeleteOldCertificate);
                                                            boolean boRevokeOldCertificate = "1".equals(setRevokeOldCertificateEnabled);
                                                            valueATTR.setRevokeOldCertificateEnabled(boRevokeOldCertificate);
                                                            valueATTR.setTypeName(pCERTIFICATION_ATTR_TYPE_CODE);
                                                            valueATTR.setPromotionDuration(sPromotionDuration);
                                                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                                            valueATTR.setCreateUser(raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                                                            valueATTR.setCreateDt(new Date());
                                                            valueATTR.setAttributeData(dataATTR);
                                                            String strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                            //</editor-fold>

                                                            int[] pCERTIFICATE_ATTR_ID = new int[1];
                                                            int[] pCERTIFICATION_ID = new int[1];
                                                            String[] pRESPONSE_CODE_NAME = new String[1];
                                                            if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN)) {
                                                                sCSR = "";
                                                            }
                                                            db.S_BO_API_CERTIFICATION_INSERT(pCERTIFICATION_PROFILE_CODE, sTOKEN_SN,
                                                                    sCERTIFICATION_SN, sPersonalCompoment, sCompanyCompoment, sDomainCompoment,
                                                                    sDNResult, sCoreCASubject, sPHONE_CONTRACT, sEMAIL_CONTRACT,
                                                                    sProvinceCodeComponent, pPAST_CERTIFICATE_SN, "", pCERTIFICATION_ATTR_TYPE_CODE,
                                                                    strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), sCSR,
                                                                    pCERTIFICATION_AUTHORITY_CODE, CheckCHANGE_KEY, CheckPRIVATE_KEY, sPKIFormFactorCode, sDeviceUUID,
                                                                    sPromotionDuration, pRESPONSE_CODE_NAME, pCERTIFICATION_ID, pCERTIFICATE_ATTR_ID,
                                                                    pCERTIFICATION_OWNER_ID, pEFFECTIVE_DT, null, sEnterpriseCert, sPersonalCert);
                                                            if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                                                raServiceResp.certificateID = pCERTIFICATION_ID[0];
                                                                raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                db.S_BO_CERTIFICATION_UPDATE(raServiceResp.certificateID, pCERTIFICATE_PROFILE_ID, "", "", "",
                                                                    "", "", "", "", "", "", "", "", "",
                                                                    "", EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", "", pDISCOUNT_RATE,
                                                                    pSHARED_MODE, "", "", sEnterpriseCert, sPersonalCert);

                                                                if(!"".equals(strDNSName)) {
                                                                    db.S_BO_CERTIFICATION_UPDATE_PROPERTIES(String.valueOf(pCERTIFICATION_ID[0]), strDNSName, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                                }
                                                                
                                                                //<editor-fold defaultstate="collapsed" desc="### PUBLIC KEY HASH">
                                                                if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                                                    || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)){
                                                                    if (pPrivateKeyEnabled_Old == false) {
                                                                        if (raServiceReq.changeKeyEnabled == true) {
                                                                            sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                                                                            if(!"".equals(sCSR)) {
                                                                                String sKeySizeCSR = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                                                db.S_BO_CERTIFICATION_UPDATE_CSR_INFO(pCERTIFICATION_ID[0], sKeySizeCSR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                //</editor-fold>
                                                                
                                                                //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                                                if (intLevelApprove == 1 || intLevelApprove == 2) {
                                                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                                                    valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                    valueATTR.setApproveDt(new Date());
                                                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                    db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                }
                                                                if (intLevelApprove == 2) {
                                                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                                                    valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                    valueATTR.setApproveCADt(new Date());
                                                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                    String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                    if ("0".equals(sApprove)) {
                                                                        db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEmail, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                        if (sTokenId_Old == Definitions.CONFIG_TOKEN_SSL_ID || sTokenId_Old == Definitions.CONFIG_TOKEN_CODESIGNNING_ID
                                                                                || sTokenId_Old == Definitions.CONFIG_TOKEN_SIGNSERVER_ID || sTokenId_Old == Definitions.CONFIG_TOKEN_ESIGNCLOUD_ID
                                                                                || sTokenId_Old == Definitions.CONFIG_TOKEN_DEVICE_ID) {
                                                                            if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN)) {
                                                                                String urlCallback = "";
                                                                                String requestType = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_CHANGEINFO;
                                                                                BRANCH[][] rsBranch = new BRANCH[1][];
                                                                                db.S_BO_BRANCH_DETAIL(String.valueOf(sBranchId_New), rsBranch);
                                                                                if(rsBranch != null && rsBranch[0].length > 0){
                                                                                    urlCallback = rsBranch[0][0].CALLBACK_URL_APPROVED;
                                                                                }
                                                                                ThreadCallbackApproved thhreadLog = new ThreadCallbackApproved(String.valueOf(pCERTIFICATION_ID[0]),
                                                                                    urlCallback, Definitions.CONFIG_OPERATION_TYPE_APPROVED, "", requestType);
                                                                                Thread t = new Thread(thhreadLog);
                                                                                t.start();
                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                            } else {
                                                                                ConnectDbPhaseTwo dbTwo = new ConnectDbPhaseTwo();
                                                                                dbTwo.S_BO_CERTIFICATION_ATTR_UPDATE_ACTIVATED_ENABLED(pCERTIFICATE_ATTR_ID[0], 1);
                                                                                int[] intWSRes = new int[1];
                                                                                String[] sWSRes = new String[1];
                                                                                ConnectConnector.EnrollCertificate(sTOKEN_SN, strPasswordP12, String.valueOf(pCERTIFICATE_ATTR_ID[0]), intWSRes, sWSRes);
                                                                                if (intWSRes[0] == 0) {
                                                                                    // select get cert with pCERTIFICATION_ID[0]
                                                                                    CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                                                    db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0],
                                                                                            "", "", raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                                                    if (certInfo[0].length > 0) {
                                                                                        raServiceResp.certificate = certInfo[0][0].certificate;
                                                                                        raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                                                        raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                                                    }
                                                                                    if(!"".equals(strPasswordP12)) {
                                                                                        int[] intRes = new int[1];
                                                                                        String[] sRes = new String[1];
                                                                                        byte[] sP12Return = ConnectConnector.generateKeystore(strPasswordP12, false,
                                                                                            String.valueOf(raServiceResp.certificateID), intRes, sRes);
                                                                                        raServiceResp.p12Certificate = sP12Return;
                                                                                    }
                                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                                } else {
                                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                                                                                || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                                                                if("0".equals(sNoAllowTranferToken)) {
                                                                                    if(sBranchId_New != sBranchId_Cert) {
                                                                                        db.S_BO_TOKEN_UPDATE_BRANCH(String.valueOf(sTokenId_Old), String.valueOf(sBranchId_New), raServiceReq.approveUser);
                                                                                    }
                                                                                }
                                                                                if(CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true && "0".equals(CheckCHANGE_KEY) && "0".equals(CheckPRIVATE_KEY)) {
                                                                                    if("1".equals(sApproveCertNoChangeKey)) {
                                                                                        // call ws, return cert
                                                                                        int[] intWSRes = new int[1];
                                                                                        String[] sWSRes = new String[1];
                                                                                        ConnectConnector.EnrollCertificate(sTOKEN_SN, "", String.valueOf(pCERTIFICATE_ATTR_ID[0]), intWSRes, sWSRes);
                                                                                        if (intWSRes[0] == 0) {
                                                                                            // select get cert with raServiceReq.certificateID
                                                                                            CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                                                            db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0], "", "",
                                                                                                raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                                                            if (certInfo[0].length > 0) {
                                                                                                raServiceResp.certificate = certInfo[0][0].certificate;
                                                                                                raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                                                                raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                                                                                raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                                                            }
                                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                                        } else {
                                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                                                                        }
                                                                                    } else {
                                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                                    }
                                                                                } else {
                                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                                }
                                                                            } else {
                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                    }
                                                                } else {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                }
                                                                //</editor-fold>

                                                                if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                                                    if (!"".equals(strPasswordP12)) {
                                                                        raServiceResp.p12Password = strPasswordP12;
                                                                    }
                                                                }
                                                            } else {
                                                                raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_NO_DN;
                                                }
                                            } else {
                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_EMAIL_INCERT_INVALID;
                                            }
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_EMPTY;
                                        }
                                    }
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CA_PROFILE_INVALID;
                            }
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_STATE_INVALID;
                    }
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_TEMPLATE_CERT_EMPTY;
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### changeCertificate2Process">
    public void changeCertificate2Process(String sCERT_PROFILE_PROPERTIES, String sCERT_POLICY_PROPERTIES,
        String pPARENT_ID, int pBRANCH_ID, String pBeneficiaryUserDefault, String pApproveCAUser, boolean  autoApproveCAServer,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_CHANGE_CERTIFICATION_INFO2;
        String sTOKEN_SN = "";
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        ObjectMapper objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", EscapeUtils.CheckTextNull(raReqTemp.certificateSN),
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            if (raServiceReq.certificateComponentInfo.length > 0 && !"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN))) {
                boolean autoApproveCAClient = raServiceReq.approveEnabled;
                String CheckCHANGE_KEY;
                String CheckPRIVATE_KEY;
                GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
                db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
                String checkChangeEffectiveDT = "0";
                if (rsPolicy[0].length > 0) {
                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_OPTION_FOR_CHANGING_EFFECTIVE_DT)) {
                            checkChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                            break;
                        }
                    }
                }
                //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE">
                String sCERTIFICATION_SN = "";
                int createdUserID = 0;
                String pCERTIFICATION_PURPOSE_CODE = "";
                String pCERTIFICATION_PROFILE_CODE = "";
                String pCERTIFICATION_AUTHORITY_CODE = "";
                String sPHONE_CONTRACT = "";
                String sEMAIL_CONTRACT = "";
                String sCoreCASubject = "";
                String pEnterpriseDB = "";
            String pPersonalDB = "";
                String sCSR = "";
                String pPAST_CERTIFICATE_SN = "";
                String sPKIFormFactorCode = "";
                String strDNSName = "";
                String pDISCOUNT_RATE="0";
                String pPROVINCE_ID="0";
                String pSHARED_MODE ="";
                String pVALUE_OLD ="";
                boolean pPrivateKeyEnabled_Old = true;
                int sTokenId_Old = 0;
                int sBranchId_Cert = 0;
                int pCERTIFICATE_STATE_ID = 0;
                int pCERTIFICATION_OWNER_ID = 0;
                int pPAST_CERTIFICATE_ID = 0;
                String pCERTIFICATE_PROFILE_ID = "0";
                java.sql.Timestamp pEFFECTIVE_DT = null;
                int[] pRESPONSE_CODE = new int[1];
                boolean isValidRequest = false;
                if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN))) {
                    CertificateInfo[][] rsReq = new CertificateInfo[1][];
                    db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.certificateSN), 0,
                        Definitions.CONFIG_CERTIFICATION_STATE_CODE_OPERATED, "", raServiceReq.language, pRESPONSE_CODE, rsReq, "", "", "", "");
                    if (rsReq[0].length > 0) {
                        isValidRequest = true;
                        pVALUE_OLD = rsReq[0][0].value;
                        sPHONE_CONTRACT = rsReq[0][0].phoneContact;
                        sEMAIL_CONTRACT = rsReq[0][0].emailContact;
                        sCoreCASubject = rsReq[0][0].coreCASubject;
                        pEnterpriseDB = rsReq[0][0].enterpriseID;
                            pPersonalDB = rsReq[0][0].personalID;
                        sTOKEN_SN = rsReq[0][0].tokenSN;
                        pCERTIFICATION_PURPOSE_CODE = rsReq[0][0].certificatePurposeCode;
                        pCERTIFICATION_PROFILE_CODE = rsReq[0][0].certificateProfileCode;
                        pCERTIFICATION_AUTHORITY_CODE = rsReq[0][0].certificateAuthorityCode;
                        if("1".equals(checkChangeEffectiveDT)) {
                           pEFFECTIVE_DT = CommonFunction.ConvertPatternToTimeStamp(EscapeUtils.CheckTextNull(rsReq[0][0].effectiveTime), Definitions.CONFIG_DATETIME_FORMAT_YYYYDDMMHHMMSS);
                        }
                        pPAST_CERTIFICATE_SN = rsReq[0][0].certificateSN;
                        sPKIFormFactorCode = rsReq[0][0].formFactorCode;
                        createdUserID = rsReq[0][0].createdId;
                        pCERTIFICATE_STATE_ID = rsReq[0][0].certificateStateId;
                        pCERTIFICATE_PROFILE_ID = String.valueOf(rsReq[0][0].certificateProfileId);
                        sCSR = rsReq[0][0].csr;
                        pPrivateKeyEnabled_Old = rsReq[0][0].backupKeyEnabled;
                        sTokenId_Old = rsReq[0][0].tokenId;
                        pPROVINCE_ID = String.valueOf(rsReq[0][0].provinceId);
                        pPAST_CERTIFICATE_ID = rsReq[0][0].certificateID;
                        sBranchId_Cert = rsReq[0][0].raId;
                        pCERTIFICATION_OWNER_ID = rsReq[0][0].certificateOwnerID;
                        pDISCOUNT_RATE = String.valueOf(rsReq[0][0].discountRate);
                        pSHARED_MODE = rsReq[0][0].shareMode ? "1" : "0";
                    }
                }
                if(isValidRequest == false) {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### CHECK CA CHANGE">
                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    String sCACodeClient = EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode);
                    if(!"".equals(sCACodeClient)) {
                        if(!sCACodeClient.equals(pCERTIFICATION_AUTHORITY_CODE)) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_CA_CHANGE_INVALID;
                            ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList = new ArrayList<>();
                            //<editor-fold defaultstate="collapsed" desc="### GET PROFILE LIST ACCESS">
                            CERTIFICATION_POLICY_DATA[][] resPolicyData_Old = new CERTIFICATION_POLICY_DATA[1][];
                            CommonFunction.getProfileCertList(sCERT_PROFILE_PROPERTIES, resPolicyData_Old);
                            for(CERTIFICATION_POLICY_DATA resPolicyCertData_Old1 : resPolicyData_Old[0])
                            {
                                if(resPolicyCertData_Old1.attributeType.equals(Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST))
                                {
                                    CERTIFICATION_PROFILE[][] resProfileDB = new CERTIFICATION_PROFILE[1][];
                                    db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(resPolicyCertData_Old1.name), resProfileDB);
                                    if(resProfileDB[0].length > 0)
                                    {
                                        CERTIFICATION_POLICY_DATA itemProfileAccess = new CERTIFICATION_POLICY_DATA();
                                        itemProfileAccess.name = resProfileDB[0][0].NAME;
                                        itemProfileAccess.certificateAuthority = resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME;
                                        itemProfileAccess.certificatePurpose = resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME;
                                        itemProfileAccess.remark = resPolicyCertData_Old1.remark;
                                        itemProfileAccess.remarkEn = resPolicyCertData_Old1.remarkEn;
                                        itemProfileAccess.attributeType = Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST;
                                        tempProfileList.add(itemProfileAccess);
                                    }
                                }
                            }
                            //</editor-fold>

                            CERTIFICATION_PROFILE[][] rsProfileCheck = new CERTIFICATION_PROFILE[1][];
                            db.S_BO_API_CERTIFICATION_PROFILE_LIST_HASID(sCACodeClient, pCERTIFICATION_PURPOSE_CODE,
                                sPKIFormFactorCode, 0, raServiceReq.language, rsProfileCheck, sCERT_PROFILE_PROPERTIES, tempProfileList);
                            if(rsProfileCheck[0].length > 0) {
                                int durationProfileOld = 0;
                                CERTIFICATION_PROFILE[][] rsDurationOld = new CERTIFICATION_PROFILE[1][];
                                db.S_BO_CERTIFICATION_PROFILE_DETAIL(pCERTIFICATE_PROFILE_ID, rsDurationOld);
                                if(rsDurationOld[0].length > 0) {
                                    durationProfileOld = rsDurationOld[0][0].DURATION;
                                }
                                for(CERTIFICATION_PROFILE rsProfileCheck1 : rsProfileCheck[0]) {
                                    if(rsProfileCheck1.DURATION == durationProfileOld) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                        pCERTIFICATION_AUTHORITY_CODE = sCACodeClient;
                                        pCERTIFICATION_PROFILE_CODE = rsProfileCheck1.NAME;
                                        pCERTIFICATE_PROFILE_ID = String.valueOf(rsProfileCheck1.ID);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
                String raFullnameCreate = "";
                String raFullname = "";
                int sBranchId_New = 0;
                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
                {
                    if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser))) {
                        BACKOFFICE_USER[][] rsUser = new BACKOFFICE_USER[1][];
                        db.S_BO_USER_DETAIL(String.valueOf(createdUserID), String.valueOf(raServiceReq.language), rsUser);
                        if (rsUser[0].length > 0) {
                            raServiceReq.beneficiaryUser = rsUser[0][0].USERNAME;
                            raFullnameCreate = EscapeUtils.CheckTextNull(rsUser[0][0].FULL_NAME);
                        }
                        sBranchId_New = sBranchId_Cert;
                    } else {
                        UserInfo[][] userInfo = new UserInfo[1][];
                        db.S_BO_API_USER_LIST(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", raServiceReq.language, userInfo);
                        if (userInfo[0].length > 0) {
                            raFullnameCreate = EscapeUtils.CheckTextNull(userInfo[0][0].fullName);
                            sBranchId_New = userInfo[0][0].raID;
                        }
                    }
                    if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                    {
                        boolean branchAccessOld = false;
                        BRANCH[][] rsBranch;
                        rsBranch = new BRANCH[1][];
                        db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                        if(rsBranch[0].length > 0) {
                            for(BRANCH item : rsBranch[0]) {
                                if(item.ID == sBranchId_New) {
                                    branchAccessOld = true;
                                    break;
                                }
                            }
                        }
                        if(branchAccessOld == false) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                        } else {
                            UserInfo[][] userDetail = new UserInfo[1][];
                            db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                            if (userDetail[0].length > 0) {
                                raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                                raServiceReq.approveUser = pApproveCAUser;
                            }
                        }
                    }
                }
                //</editor-fold>

                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    if (pCERTIFICATE_STATE_ID != 0 && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_NEW
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_DECLINED
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVOKED
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_EXPIRED
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED_EXPIRED
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVISED_KEEP_SN
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED_KEEP_SN
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_STOPPED_OPERATION
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_AUTO_REVOKED
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVISED
                            && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REISSUED
                            && !sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SN_LOST))
                    {

                        if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                            int intOUCheckClient = 0;
                            for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                if (EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                    intOUCheckClient = intOUCheckClient + 1;
                                }
                                if(EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID)
                                    || EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE)) {
                                    certComponentInfo1.prefix = CommonFunction.convertPrefixENForAPI(EscapeUtils.CheckTextNull(certComponentInfo1.prefix), false);
                                }
                            }
                            CertificateProfileInfo[][] certProfileInfo = new CertificateProfileInfo[1][];
                            db.S_BO_API_CERTIFICATION_PROFILE_GET_PROPERTIES(pCERTIFICATION_AUTHORITY_CODE, pCERTIFICATION_PROFILE_CODE,
                                    sPKIFormFactorCode, certProfileInfo);
                            if (certProfileInfo[0].length > 0) {
                                boolean sCheckRequire = true;
                                //<editor-fold defaultstate="collapsed" desc="### Update isreqiure, commonname certificateComponentInfo">
                                String sPropertiesCert = EscapeUtils.CheckTextNull(certProfileInfo[0][0].certificateProfileProperties);
                                if (!"".equals(sPropertiesCert)) {
                                    CertificateComponentInfo[][] infoCompNew = new CertificateComponentInfo[1][];
                                    ArrayList<CertificateComponentInfo> listCompNew = new ArrayList<>();
                                    CERTIFICATION_TYPE_COMPONENT[][] resProfileData = new CERTIFICATION_TYPE_COMPONENT[1][];
                                    CommonFunction.getJsonComponentForCert(sPropertiesCert, resProfileData);
                                    int intCompOUSrv = 0;
                                    for(CERTIFICATION_TYPE_COMPONENT resProfileData1 : resProfileData[0])
                                    {
                                        if(EscapeUtils.CheckTextNull(resProfileData1.name).equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID))
                                        {
                                            boolean hasComponent = false;
                                            for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                String sCodeInfoOld = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                if (sCodeInfoOld.equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE)) {
                                                    sCodeInfoOld = sCodeInfoOld.replace(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE, Definitions.CONFIG_COMPONENT_DN_TAG_UID);
                                                }
                                                if (EscapeUtils.CheckTextNull(resProfileData1.prefix).equals(EscapeUtils.CheckTextNull(certComponentInfo1.prefix)))
                                                {
                                                    hasComponent = true;
                                                    CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                    itemCompNew.code = sCodeInfoOld;
                                                    itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                    itemCompNew.requireEnabled = resProfileData1.require;
                                                    itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                    itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                    itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                    listCompNew.add(itemCompNew);
                                                    break;
                                                }
                                            }
                                            if(hasComponent == false)
                                            {
                                                CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                itemCompNew.requireEnabled = resProfileData1.require;
                                                itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                itemCompNew.value = "";
                                                itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                listCompNew.add(itemCompNew);
                                            }
                                        } else {
                                            if(!EscapeUtils.CheckTextNull(resProfileData1.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN))
                                            {
                                                if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                                    boolean hasComponent = false;
                                                    intCompOUSrv = intCompOUSrv + 1;
                                                    int intCompOUClient = 0;
                                                    for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                                            hasComponent = true;
                                                            intCompOUClient = intCompOUClient + 1;
                                                            if(intCompOUSrv == intCompOUClient) {
                                                                CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                                itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                                itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                                itemCompNew.requireEnabled = resProfileData1.require;
                                                                itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                                itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                                itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                                listCompNew.add(itemCompNew);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    if(hasComponent == false) {
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                        itemCompNew.value = "";
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                    }
                                                } else {
                                                    boolean hasComponent = false;
                                                    for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                        if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(EscapeUtils.CheckTextNull(certComponentInfo1.code))) {
                                                            hasComponent = true;
                                                            CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                            itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                            itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                            itemCompNew.requireEnabled = resProfileData1.require;
                                                            itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                            itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                            itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                            listCompNew.add(itemCompNew);
                                                            break;
                                                        }
                                                    }
                                                    if(hasComponent == false)
                                                    {
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                        itemCompNew.value = "";
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                    }
                                                }
                                            } else {
                                                boolean hasComponent = false;
                                                for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                    if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(EscapeUtils.CheckTextNull(certComponentInfo1.code))) {
                                                        hasComponent = true;
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN;
                                                        itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(certComponentInfo1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                        break;
                                                    }
                                                }
                                                if(hasComponent == false)
                                                {
                                                    CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                    itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                    itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                    itemCompNew.requireEnabled = resProfileData1.require;
                                                    itemCompNew.attributeType = Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN;
                                                    itemCompNew.value = "";
                                                    itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                    listCompNew.add(itemCompNew);
                                                }
                                            }
                                        }
                                    }
                                    infoCompNew[0] = new CertificateComponentInfo[listCompNew.size()];
                                    infoCompNew[0] = listCompNew.toArray(infoCompNew[0]);
                                    raServiceReq.certificateComponentInfo = infoCompNew[0];
                                    if(intOUCheckClient > intCompOUSrv) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_TEMPLATE_CERT_EMPTY;
                                }
                                //</editor-fold>
                                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                    String sCommomNameType = "";
                                    String sCompanyCompoment = "";
                                    String sPersonalCompoment = "";
                                    String sDomainCompoment = "";
                                    String sMSTCompoment = "";
                                    String sDeviceUUID = "";
                                    String sMNSCompoment = "";
                                    String sQDCompoment = "";
                                    String sCMNDCompoment = "";
                                    String sHCCompoment = "";
                                    String sCCCDCompoment = "";
                                    String sBHXHCompoment = "";
                                    String sBHXHCompomentCN = "";
                                    String sMDVCompoment = "";
                                    String sMSTCompomentCN = "";
                                    String sProvinceCodeComponent = "";
                                    String sProvinceNameComponent = "";
                                    String sDNResult = "";
                                    String pCERTIFICATION_ATTR_TYPE_CODE = String.valueOf(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_CHANGEINFO);
                                    //<editor-fold defaultstate="collapsed" desc="### Get info component from certificateComponentInfo">
                                    // CHECK REQUIRE FOR UID
                                    boolean hasCompanyUID = false;
                                    boolean hasPesonalUID = false;
                                    boolean hasCompanyValue = false;
                                    boolean hasPesonalValue = false;
                                    for (CertificateComponentInfo compCheckUID : raServiceReq.certificateComponentInfo) {
                                        if (EscapeUtils.CheckTextNull(compCheckUID.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY)) {
                                            hasCompanyUID = true;
                                            if (compCheckUID.requireEnabled == true) {
                                                if (!"".equals(EscapeUtils.CheckTextNull(compCheckUID.value))) {
                                                    hasCompanyValue = true;
                                                    break;
                                                } else {hasCompanyValue = false;}
                                            } else {hasCompanyValue = true;}
                                        }
                                    }
                                    for (CertificateComponentInfo compCheckUID : raServiceReq.certificateComponentInfo) {
                                        if (EscapeUtils.CheckTextNull(compCheckUID.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL)) {
                                            hasPesonalUID = true;
                                            if (compCheckUID.requireEnabled == true) {
                                                if (!"".equals(EscapeUtils.CheckTextNull(compCheckUID.value))) {
                                                    hasPesonalValue = true;
                                                    break;
                                                } else {hasPesonalValue = false;}
                                            } else {hasPesonalValue = true;}
                                        }
                                    }
                                    if(hasCompanyUID == true) {
                                        if(hasCompanyValue == false) {
                                            sCheckRequire = false;
                                        }
                                    }
                                    if(hasPesonalUID == true) {
                                        if(hasPesonalValue == false) {
                                            sCheckRequire = false;
                                        }
                                    }
                                    boolean isEmailCertValid = true;
                                    if (sCheckRequire == true) {
                                        String sSubjectEmail = "";
                                        String sSANEmail = "";
                                        boolean isHasSANEmail = false;
                                        List<CERTIFICATION_PROPERTIES_JSON.Attribute> attributesSan = new ArrayList<>();
                                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                            for (CertificateComponentInfo certComponentInfo2 : raServiceReq.certificateComponentInfo) {
                                                if (!EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN))
                                                {
                                                    if (certComponentInfo2.requireEnabled == true) {
                                                        if (!certComponentInfo2.attributeType.equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY)
                                                            && !certComponentInfo2.attributeType.equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL))
                                                        {
                                                            if ("".equals(certComponentInfo2.value)) {
                                                                sCheckRequire = false;
                                                                break;
                                                            }
                                                        } else {

                                                        }
                                                    }
                                                    // get city province name
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_ST)) {
                                                        sProvinceCodeComponent = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        if("".equals(sProvinceCodeComponent) || Definitions.CONFIG_GRID_STRING_NA.equals(sProvinceCodeComponent)) {
                                                            sProvinceCodeComponent = "";
                                                        }
                                                        if(!"".equals(sProvinceCodeComponent)) {
                                                            CityProvinceInfo[][] cityInfo = new CityProvinceInfo[1][];
                                                            db.S_BO_API_PROVINCE_LIST(sProvinceCodeComponent, raServiceReq.language, cityInfo);
                                                            if (cityInfo[0].length > 0) {
                                                                certComponentInfo2.value = cityInfo[0][0].cityProvinceName;
                                                                sProvinceNameComponent = cityInfo[0][0].cityProvinceName;
                                                            }
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_L)) {
                                                        String sValueL = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        if("".equals(sValueL) || Definitions.CONFIG_GRID_STRING_NA.equals(sValueL)) {
                                                            certComponentInfo2.value = "";
                                                        }
                                                    }
                                                    // get company, personal name
                                                    if (!"".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value))) {
                                                        if(CommonFunction.checkCertCharacterSpecial(certComponentInfo2.value) == false) {
                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_COMPONENT_CHARACTER_SPECIAL;
                                                            break;
                                                        }
                                                        sDNResult += EscapeUtils.CheckTextNull(certComponentInfo2.code) + "=" + EscapeUtils.CheckTextNull(certComponentInfo2.prefix)
                                                                + CommonFunction.replaceStringCharaterSpecialDN(EscapeUtils.CheckTextNull(certComponentInfo2.value), true, false) + ", ";
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_CN)) {
                                                        sCommomNameType = EscapeUtils.CheckTextNull(certComponentInfo2.commomNameType);
                                                        if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_COMPANY)) {
                                                            sCompanyCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_PERSON)) {
                                                            sPersonalCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_DOMAIN_NAME)) {
                                                            sDomainCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBCLIENT + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBSERVER + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_AUTH + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CODE_SIGNING + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_SIGN + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_O)) {
                                                        if (!"".equals(sCommomNameType)) {
                                                            if (pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF_SIGNSERVER)
                                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF)
                                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                                || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                            {
                                                                sCompanyCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY))
                                                    {
                                                        if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE))
                                                        {
                                                            if(!"".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value))) {
                                                                sDeviceUUID = EscapeUtils.CheckTextNull(certComponentInfo2.prefix) + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                        } else {
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_TAX_CODE + ":")) {
                                                                sMSTCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_BUDGET_CODE + ":")) {
                                                                sMNSCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_DECISION + ":")) {
                                                                sQDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_SOCIAL_INSURANCE_CODE + ":")) {
                                                                sBHXHCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_UNIT_CODE + ":")) {
                                                                sMDVCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL))
                                                    {
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_CODE + ":")) {
                                                            sCMNDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_PASSPORT_CODE + ":")) {
                                                            sHCCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_CITIZEN_CODE + ":")) {
                                                            sCCCDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_SOCIAL_INSURANCE_CODE + ":")) {
                                                            sBHXHCompomentCN = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_TAX_CODE + ":")) {
                                                            sMSTCompomentCN = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_E)) {
                                                        sSubjectEmail = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                } else {
                                                    // SAN
                                                    String sValueSan = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    if (certComponentInfo2.requireEnabled == true) {
                                                        if ("".equals(sValueSan)) {
                                                            sCheckRequire = false;
                                                            break;
                                                        }
                                                    }
                                                    if(!"".equals(sValueSan)) {
                                                        String sCodeSan = EscapeUtils.CheckTextNull(certComponentInfo2.code);
                                                        String sKey = "";
                                                        if(!"".equals(sCodeSan)) {
                                                            sKey = sCodeSan;
                                                        }
                                                        CERTIFICATION_PROPERTIES_JSON.Attribute attribute = new CERTIFICATION_PROPERTIES_JSON.Attribute();
                                                        attribute.setKey(sKey);
                                                        attribute.setValue(sValueSan);
                                                        attributesSan.add(attribute);
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_SAN_TAG_rfc822Name)) {
                                                        isHasSANEmail = true;
                                                        sSANEmail = sValueSan;
                                                    }
                                                }
                                            }
                                        }
                                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                            //<editor-fold defaultstate="collapsed" desc="### CHECK EMAIL CERT VALID">
                                            if(!"".equals(sSubjectEmail) || !"".equals(sSANEmail))
                                            {
                                                String sRegexPolicy = "";
                                                if (rsPolicy[0].length > 0) {
                                                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_REGEX_FOR_PHONE_EMAIL)) {
                                                            sRegexPolicy = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                            break;
                                                        }
                                                    }
                                                }
                                                if(!"".equals(sSubjectEmail)) {
                                                    String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                                                    if ("".equals(sREGEX_EMAIL.trim())) {
                                                        sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                                                    }
                                                    if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(sSubjectEmail), sREGEX_EMAIL) == false) {
                                                        isEmailCertValid = false;
                                                    }
                                                }
                                                if(!"".equals(sSANEmail)) {
                                                    String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                                                    if ("".equals(sREGEX_EMAIL.trim())) {
                                                        sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                                                    }
                                                    if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(sSANEmail), sREGEX_EMAIL) == false) {
                                                        isEmailCertValid = false;
                                                    }
                                                }
                                            }
                                            //</editor-fold>

                                            if(isEmailCertValid == true) {
                                                if(attributesSan.size() > 0) {
                                                    strDNSName = "{\"attributes\":" + objectMapper.writeValueAsString(attributesSan) + "}";
                                                }
                                                CommonFunction.LogDebugString(log, "SAN_Properties", strDNSName);
                                                if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF))
                                                {
                                                    if(!"".equals(sMSTCompoment) && !"".equals(sMNSCompoment) && !"".equals(sQDCompoment)
                                                        && !"".equals(sBHXHCompoment) && !"".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sMSTCompoment) && "".equals(sMNSCompoment) && "".equals(sQDCompoment)
                                                        && "".equals(sBHXHCompoment) && "".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if(!"".equals(sCMNDCompoment) && !"".equals(sHCCompoment) && !"".equals(sCCCDCompoment)
                                                        && !"".equals(sBHXHCompomentCN) && !"".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sCMNDCompoment) && "".equals(sHCCompoment) && "".equals(sCCCDCompoment)
                                                        && "".equals(sBHXHCompomentCN) && "".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_ENTERPRISE)) {
                                                    if(!"".equals(sMSTCompoment) && !"".equals(sMNSCompoment) && !"".equals(sQDCompoment)
                                                        && !"".equals(sBHXHCompoment) && !"".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sMSTCompoment) && "".equals(sMNSCompoment) && "".equals(sQDCompoment)
                                                        && "".equals(sBHXHCompoment) && "".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTTYPE_DESC_PERSONAL))
                                                {
                                                    if(!"".equals(sCMNDCompoment) && !"".equals(sHCCompoment) && !"".equals(sCCCDCompoment)
                                                        && !"".equals(sBHXHCompomentCN) && !"".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sCMNDCompoment) && "".equals(sHCCompoment) && "".equals(sCCCDCompoment)
                                                        && "".equals(sBHXHCompomentCN) && "".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE))
                                                {
                                                    if("".equals(sDeviceUUID))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_PERSONAL_GOV)
                                                    || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV))
                                                {

                                                } else if(pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                    || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                    || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                    || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                    || pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                {
                                                    if("".equals(sDeviceUUID))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                }
                                                sDNResult = CommonFunction.subLastCharater(sDNResult);
                                            }
                                        }
                                    }
                                    //</editor-fold>
                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                        CommonFunction.LogDebugString(log, sFunctionWS + " - Parser Cert Info", "sCommomNameType: " + sCommomNameType
                                                + ";sCompanyCompoment: " + sCompanyCompoment + ";sDomainCompoment: " + sDomainCompoment
                                                + ";sPersonalCompoment: " + sPersonalCompoment + ";sCMNDCompoment: " + sCMNDCompoment
                                                + ";sCCCDCompoment: " + sCCCDCompoment + ";sHCCompoment: " + sHCCompoment
                                                + ";sBHXHCompoment: " + sBHXHCompoment + ";sBHXHCompomentCN: " + sBHXHCompomentCN
                                                + ";sMSTCompomentCN: " + sMSTCompomentCN + ";sMDVCompoment: " + sMDVCompoment
                                                + ";sMSTCompoment: " + sMSTCompoment + ";sMNSCompoment: " + sMNSCompoment + ";sQDCompoment: " + sQDCompoment
                                                + ";sDeviceUUID: " + sDeviceUUID + ";sDNResult: " + sDNResult);
                                        if (sCheckRequire == true) {
                                            if (isEmailCertValid == true) {
                                                if (!"".equals(sDNResult)) {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                    //<editor-fold defaultstate="collapsed" desc="### GET POLICY"> 
                                                    String setDeleteOldCertificateEnabled = "1";
                                                    String setRevokeOldCertificateEnabled = "1";
                                                    String sApproveCertNoChangeKey = "0";
                                                    String sNoAllowTranferToken = "1";
                                                    if (rsPolicy[0].length > 0) {
                                                        for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                            if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_RENEWAL_AND_REVISION_AUTO_ISSUE_CERT_FOR_PARTICULAR_REQUEST)) {
                                                                sApproveCertNoChangeKey = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                            }
                                                            if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_NO_AUTO_MOVE_TOKEN_FOR_RENEWAL_REVISION_CERTIFICATE_REQUEST)) {
                                                                sNoAllowTranferToken = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                            }
                                                        }
                                                    }
                                                    if(raServiceReq.deleteCertificateEnabled == false) {
                                                        setDeleteOldCertificateEnabled = "0";
                                                    }
                                                    if(raServiceReq.revokeOldCertificateEnabled == false) {
                                                        setRevokeOldCertificateEnabled = "0";
                                                    }
                                                    //</editor-fold>
                                                    
                                                    //<editor-fold defaultstate="collapsed" desc="### CHANGE_KEY, PRIVATE_KEY, REVOKE_OLD_CERT, DELETE_IN_TOKEN of CERT TYPE">
                                                    String strPasswordP12 = "";
                                                    String pushNoticeEmail = "0";
                                                    if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                                                        || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                                        if (pPrivateKeyEnabled_Old == true) {
                                                            if (raServiceReq.changeKeyEnabled == true) {
                                                                CheckCHANGE_KEY = "1";
                                                            } else {
                                                                setDeleteOldCertificateEnabled = "0";
                                                                CheckCHANGE_KEY = "0";
                                                            }
                                                            if (raServiceReq.backupKeyEnabled == true) {
                                                                CheckPRIVATE_KEY = "1";
                                                            } else {
                                                                CheckPRIVATE_KEY = "0";
                                                            }
                                                        } else {
                                                            if (raServiceReq.changeKeyEnabled == true) {
                                                                CheckCHANGE_KEY = "1";
                                                                if (raServiceReq.backupKeyEnabled == true) {
                                                                    CheckPRIVATE_KEY = "1";
                                                                } else {
                                                                    CheckPRIVATE_KEY = "0";
                                                                }
                                                            } else {
                                                                CheckCHANGE_KEY = "0";
                                                                CheckPRIVATE_KEY = "0";
                                                                setDeleteOldCertificateEnabled = "0";
                                                            }
                                                        }
                                                        boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                                        if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                                            pushNoticeEmail = "1";
                                                        }
                                                    } else if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                                        || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                                                        if (pPrivateKeyEnabled_Old == true) {
                                                            CheckPRIVATE_KEY = "1";
                                                            if (raServiceReq.changeKeyEnabled == true) {
                                                                CheckCHANGE_KEY = "1";
                                                            } else {
                                                                CheckCHANGE_KEY = "0";
                                                            }
                                                            boolean p12EmailCertServer = CommonFunction.getP12EmailEnabledCert(sCERT_POLICY_PROPERTIES);
                                                            if (raServiceReq.p12EmailEnabled == true && p12EmailCertServer == true) {
                                                                pushNoticeEmail = "1";
                                                            }
                                                            if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                                                strPasswordP12 = EscapeUtils.CheckTextNull(raServiceReq.p12Password);
                                                            } else {
                                                                strPasswordP12 = CommonFunction.randomPasswordP12(8);
                                                            }
                                                        } else {
                                                            if (raServiceReq.changeKeyEnabled == true) {
                                                                CheckCHANGE_KEY = "1";
                                                                sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                                                                if ("".equals(sCSR)) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EMPTY;
                                                                } else {
                                                                    String sKeySizeDB;
                                                                    boolean isValidCSR = false;
                                                                    boolean checkCSRNotExists = true;
                                                                    CERTIFICATION[][] rsCert = new CERTIFICATION[1][];
                                                                    db.S_BO_API_GET_ALGORITHM_KEY_SIZE(pCERTIFICATION_PROFILE_CODE, rsCert);
                                                                    if (rsCert[0].length > 0) {
                                                                        sKeySizeDB = EscapeUtils.CheckTextNull(rsCert[0][0].KEY_SIZE);
                                                                        String sKeySizeCSR = CommonFunction.getKeySizeFromCSR(sCSR);
                                                                        isValidCSR = sKeySizeDB.equals(sKeySizeCSR);
                                                                    }
                                                                    if(isValidCSR == false) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_KEYSIZE;
                                                                    } else {
                                                                        String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                                        int checkPublicKey = db.S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH(0,null,null,null, sPublicKeyHard, pCERTIFICATION_OWNER_ID);
                                                                        // call store cert Operation check exist sPublicKeyHard
                                                                        if(checkPublicKey == 0) {
                                                                            checkCSRNotExists = true;
                                                                        } else {
                                                                            checkCSRNotExists = false;
                                                                        }
                                                                        if(checkCSRNotExists == false) {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EXISTS;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                CheckCHANGE_KEY = "0";
                                                            }
                                                            CheckPRIVATE_KEY = "0";
                                                            boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                                            if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                                                pushNoticeEmail = "1";
                                                            }
                                                        }
                                                    } else {
                                                        CheckCHANGE_KEY = "1";
                                                        CheckPRIVATE_KEY = "1";
                                                    }
                                                    //</editor-fold>
                                                    
                                                    Config conf = new Config();
                                                    String uidChangeConfig = conf.GetPropertybyCode(Definitions.CONFIG_UID_CHANGE_INFO_API_ENABLED);
                                                    boolean isChangeUIDEnable = false;
                                                    if("1".equals(uidChangeConfig)) {
                                                        if("1".equals(CheckCHANGE_KEY)) {
                                                            isChangeUIDEnable = true;
                                                        }
                                                    }
                                                    if(isChangeUIDEnable == false) {
                                                        if(!pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_PERSONAL_GOV)
                                                            && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV)
                                                            && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                            && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                            && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                            && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                            && !pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                        {
                                                            if(!pCERTIFICATION_PURPOSE_CODE.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_SSL))
                                                            {
                                                                if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_TAXCODE, sMSTCompoment) == false) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                }
                                                                if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_BUDGET_CODE, sMNSCompoment) == false) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                }
                                                                if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_DECISION, sQDCompoment) == false) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                }
                                                                if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_SOCIAL_INSURANCE_CODE, sBHXHCompoment) == false) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                }
                                                                if (CommonReferServlet.isSamedPrefixUIDOld(pEnterpriseDB, Definitions.CONFIG_CERTIFICATION_PREFIX_UNIT_CODE, sMDVCompoment) == false) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                }
                                                                if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_TAXCODE, sMSTCompomentCN) == false) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                }
                                                                if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_PERSONAL_CODE, sCMNDCompoment) == false) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                }
                                                                if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_PASSPORT, sHCCompoment) == false) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                }
                                                                if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_CITIZEN_CODE, sCCCDCompoment) == false) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                }
                                                                if (CommonReferServlet.isSamedPrefixUIDOld(pPersonalDB, Definitions.CONFIG_CERTIFICATION_PREFIX_SOCIAL_INSURANCE_CODE, sBHXHCompomentCN) == false) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                        //<editor-fold defaultstate="collapsed" desc="### GET FULLNAME AND PROVINCE">
                                                        if("".equals(sProvinceCodeComponent)) {
                                                            sProvinceCodeComponent = Definitions.CONFIG_GRID_STRING_NA;
                                                            sProvinceNameComponent = Definitions.CONFIG_GRID_STRING_NA;
                                                            /*CITY_PROVINCE[][] rsProvince = new CITY_PROVINCE[1][];
                                                            db.S_BO_PROVINCE_DETAIL(pPROVINCE_ID, rsProvince);
                                                            if (rsProvince[0].length > 0) {
                                                                sProvinceNameComponent = rsProvince[0][0].REMARK;
                                                                sProvinceCodeComponent = rsProvince[0][0].NAME;
                                                            }*/
                                                        }
                                                        //</editor-fold>

                                                        if(raServiceReq.keepCertificateSNEnabled == true) {
                                                            setRevokeOldCertificateEnabled = "0";
                                                        }
                                                        //<editor-fold defaultstate="collapsed" desc="### EXPAND PARAM PROCESS">
                                                        String sRsspAgreementUUID = "";
                                                        String sRsspRelyingParty = "";
                                                        String sRsspCertificateUUID = "";
                                                        String sRsspConnectWSMode = "";
                                                        if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                                                            String sExpandParam = EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML);
                                                            if(!"".equals(sExpandParam)) {
                                                                ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                                                sRsspAgreementUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspAgreementUUID);
                                                                sRsspRelyingParty = EscapeUtils.CheckTextNull(jsonReqExpand.rsspRelyingParty);
                                                                sRsspCertificateUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspCertificateUUID);
                                                                sRsspConnectWSMode = EscapeUtils.CheckTextNull(jsonReqExpand.rsspConnectWSMode);
                                                            }
                                                            if(!"".equals(sRsspConnectWSMode)) {
                                                                if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_REST)) {
                                                                    if("".equals(sRsspCertificateUUID) || "".equals(sRsspRelyingParty)) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                    }
                                                                } else if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_SOAP)) {
                                                                    if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                    }
                                                                } else {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                }
                                                            } else {
                                                                if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                                                }
                                                            }
                                                        }
                                                        //</editor-fold>
                                                        
                                                        String[] sUIDResult = new String[2];
                                                        CommonReferServlet.collectFieldToUIDAPI(sMSTCompoment, sMNSCompoment, sQDCompoment, sBHXHCompoment,
                                                            sMDVCompoment, sCMNDCompoment, sHCCompoment, sCCCDCompoment, sMSTCompomentCN, sBHXHCompomentCN, sUIDResult);
                                                        String sEnterpriseCert = sUIDResult[0];
                                                        String sPersonalCert = sUIDResult[1];

                                                        CommonFunction.LogDebugString(log, sFunctionWS, "REQUEST: " + "CERT_SN: " + EscapeUtils.CheckTextNull(raServiceReq.certificateSN)
                                                                + "SUBJECT: " + sDNResult + "; PERSONAL_NAME: " + sPersonalCompoment + "; COMPANY_NAME: " + sCompanyCompoment
                                                                + "; sEnterpriseCert: " + sEnterpriseCert + "; sPersonalCert: " + sPersonalCert + "; COMMON_NAME_TYPE: " + sCommomNameType
                                                                + "; CERTE_STATE_ID: " + pCERTIFICATE_STATE_ID + "; DOMAIN_NAME: " + sDomainCompoment
                                                                + "; PAST_CERT_ID: " + pPAST_CERTIFICATE_ID + "; PKIFormFactorCode: " + sPKIFormFactorCode
                                                                + "; CERT_ATTR_TYPE_CODE: " + pCERTIFICATION_ATTR_TYPE_CODE + "; CERTIF_AUTHORITY_CODE: " + pCERTIFICATION_AUTHORITY_CODE
                                                                + "; TOKEN_SN_Old: " + sTOKEN_SN + "; TOKE_ID_Old: " + sTokenId_Old + "; EMAIL_CONTRACT: " + sEMAIL_CONTRACT
                                                                + "; PHONE_CONTRACT: " + sPHONE_CONTRACT + "; IS_CHANGE_KEY: " + CheckCHANGE_KEY
                                                                + "; KEEP_CERT_SN: " + String.valueOf(raServiceReq.keepCertificateSNEnabled)
                                                                + "; IS_BACKUP_KEY: " + CheckPRIVATE_KEY + "; AUTO_APPROVE_CLIENT: " + autoApproveCAClient
                                                                + "; AUTO_APPROVE_USER: " + raServiceReq.approveEnabled + "; IS_DELETE_OLD_CERT: " + setDeleteOldCertificateEnabled
                                                                + "; IS_REVOKE_OLD_CERT: " + setRevokeOldCertificateEnabled + "; CSR: " + sCSR
                                                                + "; BENEFICIARIES_USER: " + raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                                                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                            //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                                                            // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                                                            int intLevelApprove = 0;
                                                            if (autoApproveCAServer == false && autoApproveCAClient == false) {
                                                                intLevelApprove = 0;
                                                            } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                                                                intLevelApprove = 1;
                                                            } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                                                                intLevelApprove = 0;
                                                            } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                                                                intLevelApprove = 2;
                                                            }
                                                            //</editor-fold>
                                                            String sPromotionDuration = "";
                                                            if(!"".equals(pVALUE_OLD)) {
                                                                ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(pVALUE_OLD, ATTRIBUTE_VALUES.class);
                                                                sPromotionDuration = EscapeUtils.CheckTextNull(valueATTR_Frist.getPromotionDuration());
                                                            }
                                                            //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR ">
                                                            CERTIFICATION_DATA_ATTR tempLogReq = new CERTIFICATION_DATA_ATTR();
                                                            tempLogReq.personalName = sPersonalCompoment;
                                                            tempLogReq.companyName = sCompanyCompoment;
                                                            tempLogReq.enterpriseID = sEnterpriseCert;
                                                            tempLogReq.personalID = sPersonalCert;
                                                            tempLogReq.emailContract = sEMAIL_CONTRACT;
                                                            tempLogReq.phoneContract = sPHONE_CONTRACT;
                                                            tempLogReq.issuerSubject = sCoreCASubject;
                                                            tempLogReq.subjectDn = sDNResult;
                                                            tempLogReq.tokenSn = sTOKEN_SN;
                                                            tempLogReq.provinceName = sProvinceNameComponent;
                                                            tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                                                            ATTRIBUTE_VALUES valueATTR;
                                                            ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                                                            dataATTR.setCertificationData(tempLogReq);
                                                            valueATTR = new ATTRIBUTE_VALUES();
                                                            valueATTR.setTokenSn(sTOKEN_SN);
                                                            if(!"".equals(sRsspAgreementUUID)) {
                                                                valueATTR.setRsspAgreementUUID(sRsspAgreementUUID);
                                                            }
                                                            if(!"".equals(sRsspRelyingParty)) {
                                                                valueATTR.setRsspRelyingParty(sRsspRelyingParty);
                                                            }
                                                            if(!"".equals(sRsspCertificateUUID)) {
                                                                valueATTR.setRsspCertificateUUID(sRsspCertificateUUID);
                                                            }
                                                            if(!"".equals(sRsspConnectWSMode)) {
                                                                valueATTR.setRsspConnectWSMode(sRsspConnectWSMode);
                                                            }
                                                            boolean boChangeKeyEnabled = "1".equals(CheckCHANGE_KEY);
                                                            valueATTR.setChangeKeyEnabled(boChangeKeyEnabled);
                                                            valueATTR.setKeepCertificateSNEnabled(raServiceReq.keepCertificateSNEnabled);
                                                            boolean boDeleteOldCertificate = "1".equals(setDeleteOldCertificateEnabled);
                                                            valueATTR.setDeleteOldCertificateEnabled(boDeleteOldCertificate);
                                                            boolean boRevokeOldCertificate = "1".equals(setRevokeOldCertificateEnabled);
                                                            valueATTR.setRevokeOldCertificateEnabled(boRevokeOldCertificate);
                                                            valueATTR.setTypeName(pCERTIFICATION_ATTR_TYPE_CODE);
                                                            valueATTR.setPromotionDuration(sPromotionDuration);
                                                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                                            valueATTR.setCreateUser(raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                                                            valueATTR.setCreateDt(new Date());
                                                            valueATTR.setAttributeData(dataATTR);
                                                            String strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                            //</editor-fold>

                                                            int[] pCERTIFICATE_ATTR_ID = new int[1];
                                                            int[] pCERTIFICATION_ID = new int[1];
                                                            String[] pRESPONSE_CODE_NAME = new String[1];
                                                            
                                                            db.S_BO_API_CERTIFICATION_INSERT(pCERTIFICATION_PROFILE_CODE, sTOKEN_SN,
                                                                    sCERTIFICATION_SN, sPersonalCompoment, sCompanyCompoment, sDomainCompoment,
                                                                    sDNResult, sCoreCASubject, sPHONE_CONTRACT, sEMAIL_CONTRACT,
                                                                    sProvinceCodeComponent, pPAST_CERTIFICATE_SN, "", pCERTIFICATION_ATTR_TYPE_CODE,
                                                                    strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), sCSR,
                                                                    pCERTIFICATION_AUTHORITY_CODE, CheckCHANGE_KEY, CheckPRIVATE_KEY, sPKIFormFactorCode, sDeviceUUID,
                                                                    sPromotionDuration, pRESPONSE_CODE_NAME, pCERTIFICATION_ID, pCERTIFICATE_ATTR_ID,
                                                                    pCERTIFICATION_OWNER_ID, pEFFECTIVE_DT, null, sEnterpriseCert, sPersonalCert);
                                                            if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                                                raServiceResp.certificateID = pCERTIFICATION_ID[0];
                                                                raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                db.S_BO_CERTIFICATION_UPDATE(raServiceResp.certificateID, pCERTIFICATE_PROFILE_ID, "", "", "",
                                                                    "", "", "", "", "", "", "", "", "",
                                                                    "", EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", "", pDISCOUNT_RATE, pSHARED_MODE,
                                                                    "", "", sEnterpriseCert, sPersonalCert);
                                                                if(!"".equals(strDNSName)) {
                                                                    db.S_BO_CERTIFICATION_UPDATE_PROPERTIES(String.valueOf(pCERTIFICATION_ID[0]), strDNSName, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                                }
                                                                
                                                                //<editor-fold defaultstate="collapsed" desc="### PUBLIC KEY HASH">
                                                                if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                                                    || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)){
                                                                    if (pPrivateKeyEnabled_Old == false) {
                                                                        if (raServiceReq.changeKeyEnabled == true) {
                                                                            sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                                                                            if(!"".equals(sCSR)) {
                                                                                String sKeySizeCSR = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                                                db.S_BO_CERTIFICATION_UPDATE_CSR_INFO(pCERTIFICATION_ID[0], sKeySizeCSR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                //</editor-fold>
                                                                
                                                                //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                                                if (intLevelApprove == 1 || intLevelApprove == 2) {
                                                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                                                    valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                    valueATTR.setApproveDt(new Date());
                                                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                    db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                }
                                                                if (intLevelApprove == 2) {
                                                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                                                    valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                    valueATTR.setApproveCADt(new Date());
                                                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                    String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                    if ("0".equals(sApprove)) {
                                                                        db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEmail, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                        if (sTokenId_Old == Definitions.CONFIG_TOKEN_SSL_ID || sTokenId_Old == Definitions.CONFIG_TOKEN_CODESIGNNING_ID
                                                                                || sTokenId_Old == Definitions.CONFIG_TOKEN_SIGNSERVER_ID || sTokenId_Old == Definitions.CONFIG_TOKEN_ESIGNCLOUD_ID
                                                                                || sTokenId_Old == Definitions.CONFIG_TOKEN_DEVICE_ID) {
                                                                            ConnectDbPhaseTwo dbTwo = new ConnectDbPhaseTwo();
                                                                            dbTwo.S_BO_CERTIFICATION_ATTR_UPDATE_ACTIVATED_ENABLED(pCERTIFICATE_ATTR_ID[0], 1);
                                                                            int[] intWSRes = new int[1];
                                                                            String[] sWSRes = new String[1];
                                                                            ConnectConnector.EnrollCertificate(sTOKEN_SN, strPasswordP12, String.valueOf(pCERTIFICATE_ATTR_ID[0]), intWSRes, sWSRes);
                                                                            if (intWSRes[0] == 0) {
                                                                                // select get cert with pCERTIFICATION_ID[0]
                                                                                CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                                                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0],
                                                                                        "", "", raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                                                if (certInfo[0].length > 0) {
                                                                                    raServiceResp.certificate = certInfo[0][0].certificate;
                                                                                    raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                                                    raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                                                }
                                                                                if(!"".equals(strPasswordP12)) {
                                                                                    int[] intRes = new int[1];
                                                                                    String[] sRes = new String[1];
                                                                                    byte[] sP12Return = ConnectConnector.generateKeystore(strPasswordP12, false,
                                                                                        String.valueOf(raServiceResp.certificateID), intRes, sRes);
                                                                                    raServiceResp.p12Certificate = sP12Return;
                                                                                }
                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                            } else {
                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                                                            }
                                                                        } else {
                                                                            if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                                                                                || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                                                                if("0".equals(sNoAllowTranferToken)) {
                                                                                    if(sBranchId_New != sBranchId_Cert) {
                                                                                        db.S_BO_TOKEN_UPDATE_BRANCH(String.valueOf(sTokenId_Old), String.valueOf(sBranchId_New), raServiceReq.approveUser);
                                                                                    }
                                                                                }
                                                                                if(CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true && "0".equals(CheckCHANGE_KEY) && "0".equals(CheckPRIVATE_KEY)) {
                                                                                    if("1".equals(sApproveCertNoChangeKey)) {
                                                                                        // call ws, return cert
                                                                                        int[] intWSRes = new int[1];
                                                                                        String[] sWSRes = new String[1];
                                                                                        ConnectConnector.EnrollCertificate(sTOKEN_SN, "", String.valueOf(pCERTIFICATE_ATTR_ID[0]), intWSRes, sWSRes);
                                                                                        if (intWSRes[0] == 0) {
                                                                                            // select get cert with raServiceReq.certificateID
                                                                                            CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                                                            db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0], "", "",
                                                                                                raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                                                            if (certInfo[0].length > 0) {
                                                                                                raServiceResp.certificate = certInfo[0][0].certificate;
                                                                                                raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                                                                raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                                                                                raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                                                            }
                                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                                        } else {
                                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                                                                        }
                                                                                    } else {
                                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                                    }
                                                                                } else {
                                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                                }
                                                                            } else {
                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                            }
                                                                        }
                                                                    } else {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                    }
                                                                } else {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                }
                                                                //</editor-fold>

                                                                if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                                                    if (!"".equals(strPasswordP12)) {
                                                                        raServiceResp.p12Password = strPasswordP12;
                                                                    }
                                                                }
                                                            } else {
                                                                raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_NO_DN;
                                                }
                                            } else {
                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_EMAIL_INCERT_INVALID;
                                            }
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_EMPTY;
                                        }
                                    }
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CA_PROFILE_INVALID;
                            }
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_STATE_INVALID;
                    }
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_TEMPLATE_CERT_EMPTY;
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### revokeCertificateProcess">
    public void revokeCertificateProcess(String pPARENT_ID, int pBRANCH_ID, String pBeneficiaryUserDefault, String pApproveCAUser, boolean  autoApproveCAServer,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_REVOCATION_CERTIFICATION;
        String sTOKEN_SN = "";
        
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        ObjectMapper objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", EscapeUtils.CheckTextNull(raReqTemp.certificateSN),
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean autoApproveCAClient = raServiceReq.approveEnabled;
            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE">
            int createdUserID = 0;
            String pCERTIFICATION_SN = "";
            String pCERTIFICATION_AUTHORITY_CODE = "";
            String sPHONE_CONTRACT = "";
            String sEMAIL_CONTRACT = "";
            String sCoreCASubject = "";
            String sDN = "";
            String pPERSONAL_NAME = "";
            String pCOMPANY_NAME = "";
            String pEnterpriseDB = "";
            String pPersonalDB = "";
            String sPKIFormFactorCode = "";
            String pPROVINCE_ID = "";
            String sProvinceNameComponent = "";
            String pCERTIFICATION_ATTR_TYPE_CODE = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REVOKE;
            int pCertificateId = 0;
            int pRequestId = 0;
            int sTokenId_Old = 0;
            int sBranchId_Cert = 0;
            int pCERTIFICATE_STATE_ID = 0;
            String pCertificateStateCode = "";
            int[] pRESPONSE_CODE = new int[1];
            CertificateInfo[][] rsReq = new CertificateInfo[1][];
            boolean isValidRequest = false;
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN)))
            {
                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.certificateSN), 0,
                    "", "", raServiceReq.language, pRESPONSE_CODE, rsReq, "", "", "", "");
                if (rsReq[0].length > 0) {
                    for(CertificateInfo rsReqItem : rsReq[0])
                    {
                        if(rsReqItem.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_OPERATED
                            || rsReqItem.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_RENEWED
                            || rsReqItem.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_REISSUED
                            || rsReqItem.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_REVISED)
                        {
                            isValidRequest = true;
                            sPHONE_CONTRACT = rsReqItem.phoneContact;
                            sEMAIL_CONTRACT = rsReqItem.emailContact;
                            sCoreCASubject = rsReqItem.coreCASubject;
                            sDN = rsReqItem.certificateDN;
                            pPERSONAL_NAME = rsReqItem.personalName;
                            pCOMPANY_NAME = rsReqItem.companyName;
                            pEnterpriseDB = rsReqItem.enterpriseID;
                            pPersonalDB = rsReqItem.personalID;
                            sTOKEN_SN = rsReqItem.tokenSN;
                            pCERTIFICATION_AUTHORITY_CODE = rsReqItem.certificateAuthorityCode;
                            pPROVINCE_ID = String.valueOf(rsReqItem.provinceId);
                            pCERTIFICATION_SN = rsReqItem.certificateSN;
                            createdUserID = rsReqItem.createdId;
                            pCertificateId = rsReqItem.certificateID;
                            pRequestId = rsReqItem.requestId;
                            sTokenId_Old = rsReqItem.tokenId;
                            pCERTIFICATE_STATE_ID = rsReqItem.certificateStateId;
                            sBranchId_Cert = rsReqItem.raId;
                            sPKIFormFactorCode = rsReqItem.formFactorCode;
                            pCertificateStateCode = rsReqItem.certificateStateCode;
                            break;
                        }
                    }
                }
            }
            if(isValidRequest == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
                }
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                if (pCERTIFICATE_STATE_ID != 0 && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_NEW
                        && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_DECLINED
                        && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVOKED
                        && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED_EXPIRED
                        && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_STOPPED_OPERATION
                        && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_AUTO_REVOKED
                        && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVISED_KEEP_SN
                        && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED_KEEP_SN
                        && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED_EXPIRED)
                {
                    //<editor-fold defaultstate="collapsed" desc="### GET PROVINCE and FULLNAME">
                    CITY_PROVINCE[][] rsProvince = new CITY_PROVINCE[1][];
                    db.S_BO_PROVINCE_DETAIL(pPROVINCE_ID, rsProvince);
                    if (rsProvince[0].length > 0) {
                        sProvinceNameComponent = rsProvince[0][0].REMARK;
                    }
                    String raFullnameCreate = "";
                    String raFullname = "";
                    BACKOFFICE_USER[][] rsUser = new BACKOFFICE_USER[1][];
                    db.S_BO_USER_DETAIL(String.valueOf(createdUserID), String.valueOf(raServiceReq.language), rsUser);
                    if (rsUser[0].length > 0) {
                        raServiceReq.beneficiaryUser = rsUser[0][0].USERNAME;
                        raFullnameCreate = EscapeUtils.CheckTextNull(rsUser[0][0].FULL_NAME);
                    }
                    UserInfo[][] userDetail = new UserInfo[1][];
                    db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                    if (userDetail[0].length > 0) {
                        raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                    }
                    //</editor-fold>

                    CERTIFICATION_DATA_ATTR tempLogReq = new CERTIFICATION_DATA_ATTR();
                    tempLogReq.personalName = pPERSONAL_NAME;
                    tempLogReq.companyName = pCOMPANY_NAME;
                    tempLogReq.enterpriseID = pEnterpriseDB;
                    tempLogReq.personalID = pEnterpriseDB;
                    tempLogReq.phoneContract = sPHONE_CONTRACT;
                    tempLogReq.emailContract = sEMAIL_CONTRACT;
                    tempLogReq.issuerSubject = sCoreCASubject;
                    tempLogReq.subjectDn = sDN;
                    tempLogReq.tokenSn = sTOKEN_SN;
                    tempLogReq.provinceName = sProvinceNameComponent;
                    tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                    String idCertRevokeReasonUser = "";
                    String sCompromiseDate = EscapeUtils.CheckTextNull(raServiceReq.compromiseDate);
                    String idCertRevokeReasonCoreCA = String.valueOf(Definitions.CONFIG_CERTIFICATION_REVOKE_REASON_UNSPECIFIED_ID);
                    if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateRevocationReason))) {
                        CertificateRevocationReasonInfo[][] reReason = new CertificateRevocationReasonInfo[1][];
                        db.S_BO_API_CERTIFICATION_REVOCATION_REASON_LIST(EscapeUtils.CheckTextNull(raServiceReq.certificateRevocationReason),
                                raServiceReq.language, reReason);
                        if (reReason[0].length > 0) {
                            idCertRevokeReasonCoreCA = String.valueOf(reReason[0][0].certificateRevocationReasonId);
                            idCertRevokeReasonUser = EscapeUtils.CheckTextNull(reReason[0][0].certificateRevocationReasonName);
                        } else {
                            idCertRevokeReasonUser = EscapeUtils.CheckTextNull(raServiceReq.certificateRevocationReason);
                        }
                        if (EscapeUtils.CheckTextNull(raServiceReq.certificateRevocationReason).equals(Definitions.CONFIG_CERTIFICATION_REVOKE_REASON_CACOMPROMISE_CODE)) {
                            if (CommonFunction.compromiseDateValid(sCompromiseDate) == false) {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_COMPROMISE_DATE_INVALID;
                            }
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REASON_REVOKE_INVALID;
                    }
                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                        // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                        int intLevelApprove = 0;
                        if (autoApproveCAServer == false && autoApproveCAClient == false) {
                            intLevelApprove = 0;
                        } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                            intLevelApprove = 1;
                        } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                            intLevelApprove = 0;
                        } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                            intLevelApprove = 2;
                        }
                        //</editor-fold>

                        //<editor-fold defaultstate="collapsed" desc="### EXPAND PARAM PROCESS">
                        String sRsspAgreementUUID = "";
                        String sRsspRelyingParty = "";
                        String sRsspCertificateUUID = "";
                        String sRsspConnectWSMode = "";
                        boolean isRevokeSetOldStatus = false;
                        if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)){
                            String sExpandParam = EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML);
                            if(!"".equals(sExpandParam)) {
                                ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                sRsspAgreementUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspAgreementUUID);
                                sRsspRelyingParty = EscapeUtils.CheckTextNull(jsonReqExpand.rsspRelyingParty);
                                sRsspCertificateUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspCertificateUUID);
                                sRsspConnectWSMode = EscapeUtils.CheckTextNull(jsonReqExpand.rsspConnectWSMode);
                                isRevokeSetOldStatus = jsonReqExpand.setOldCertificateToOperated;
                            }
                            if(!"".equals(sRsspConnectWSMode)) {
                                if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_REST)) {
                                    if("".equals(sRsspCertificateUUID) || "".equals(sRsspRelyingParty)) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                    }
                                } else if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_SOAP)) {
                                    if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                }
                            } else {
                                if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                }
                            }
                        }
                        //</editor-fold>

                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                            String CheckDeleteRevoke;
                            if (sTokenId_Old == Definitions.CONFIG_TOKEN_SSL_ID
                                || sTokenId_Old == Definitions.CONFIG_TOKEN_CODESIGNNING_ID
                                || sTokenId_Old == Definitions.CONFIG_TOKEN_DEVICE_ID
                                || sTokenId_Old == Definitions.CONFIG_TOKEN_SIGNSERVER_ID) {
                                CheckDeleteRevoke = "0";
                            } else {
                                if (raServiceReq.deleteCertificateEnabled == true) {
                                    CheckDeleteRevoke = "1";
                                } else {
                                    CheckDeleteRevoke = "0";
                                }
                            }
                            CommonFunction.LogDebugString(log, sFunctionWS, "REQUEST: " + "CERT_SN: " + EscapeUtils.CheckTextNull(raServiceReq.certificateSN)
                                + "; idCertRevokeReasonUser: " + idCertRevokeReasonUser + "; idCertRevokeReasonCoreCA: " + idCertRevokeReasonCoreCA + "; CERTE_STATE_ID: " + pCERTIFICATE_STATE_ID
                                + "; CERT_ID: " + pCertificateId + "; CERT_ATTR_ID: " + pRequestId + "; CERT_ATTR_TYPE_CODE: " + pCERTIFICATION_ATTR_TYPE_CODE
                                + "; CERTIF_AUTHORITY_CODE: " + pCERTIFICATION_AUTHORITY_CODE
                                + "; TOKEN_SN_Old: " + sTOKEN_SN + "; EMAIL_CONTRACT: " + sEMAIL_CONTRACT
                                + "; PHONE_CONTRACT: " + sPHONE_CONTRACT + "; AUTO_APPROVE_CLIENT: " + autoApproveCAClient
                                + "; CompromiseDate: " + sCompromiseDate + "; AUTO_APPROVE_USER: " + raServiceReq.approveEnabled
                                + "; CERT_TOKEN_DELETE_ENABLED: " + CheckDeleteRevoke
                                + "; BENEFICIARIES_USER: " + raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                            // VALUE ATTR
                            ATTRIBUTE_VALUES valueATTR;
                            ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                            dataATTR.setCertificationData(tempLogReq);
                            valueATTR = new ATTRIBUTE_VALUES();
                            valueATTR.setTokenSn(sTOKEN_SN);
                            if(!"".equals(sRsspAgreementUUID)) {
                                valueATTR.setRsspAgreementUUID(sRsspAgreementUUID);
                            }
                            if(!"".equals(sRsspRelyingParty)) {
                                valueATTR.setRsspRelyingParty(sRsspRelyingParty);
                            }
                            if(!"".equals(sRsspCertificateUUID)) {
                                valueATTR.setRsspCertificateUUID(sRsspCertificateUUID);
                            }
                            if(!"".equals(sRsspConnectWSMode)) {
                                valueATTR.setRsspConnectWSMode(sRsspConnectWSMode);
                            }
                            boolean sRevokeDeleteInTokenEnabled = "1".equals(CheckDeleteRevoke);
                            valueATTR.setCertRevokeDeleteInTokenEnabled(sRevokeDeleteInTokenEnabled);
                            valueATTR.setCerttificateRevokeReason(idCertRevokeReasonUser);
                            valueATTR.setCerttificateRevokeEJBCAReason(idCertRevokeReasonCoreCA);
                            valueATTR.setRevokeSetOldStatusEnabled(isRevokeSetOldStatus);
                            valueATTR.setCompromiseDate(sCompromiseDate);
                            valueATTR.setTypeName(pCERTIFICATION_ATTR_TYPE_CODE);
                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                            valueATTR.setCreateUser(raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                            valueATTR.setCreateDt(new Date());
                            valueATTR.setAttributeData(dataATTR);
                            String strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                            // VALUE ATTR
                            int[] pCERTIFICATE_ATTR_ID = new int[1];
                            String[] pRESPONSE_CODE_NAME = new String[1];
                            db.S_BO_API_CERTIFICATION_ATTR_INSERT(EscapeUtils.CheckTextNull(raServiceReq.certificateSN),
                                    Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_ID_REVOKE, strReqValueATTR,
                                    EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pRESPONSE_CODE_NAME, pCERTIFICATE_ATTR_ID);
                            if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                raServiceResp.certificateID = pCertificateId;
                                raServiceResp.certificateStateCode = pCertificateStateCode;
                                //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                if (intLevelApprove == 1 || intLevelApprove == 2) {
                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                    valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    valueATTR.setApproveDt(new Date());
                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                    db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                }
                                if (intLevelApprove == 2) {
                                    // Approve CA
                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                    valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    valueATTR.setApproveCADt(new Date());
                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                    String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                    if ("0".equals(sApprove)) {
                                        int[] intRes = new int[1];
                                        String[] sRes = new String[1];
                                        // add input sCompromiseDate
                                        ConnectConnector.RevokeCertificate(sTOKEN_SN, pCERTIFICATION_SN, Integer.parseInt(idCertRevokeReasonCoreCA),
                                            pCERTIFICATION_AUTHORITY_CODE, sCompromiseDate, intRes, sRes, pCertificateId, pCERTIFICATE_ATTR_ID[0]);
                                        if (intRes[0] == 0) {
                                            db.S_BO_CERTIFICATION_REVOKED(pCERTIFICATE_ATTR_ID[0], Integer.parseInt(CheckDeleteRevoke), EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            //<editor-fold defaultstate="collapsed" desc="### Update Reason Revoke">
/*                                            objectMapper = new ObjectMapper();
                                            CERTIFICATION_COMMENT jsonCertComment = new CERTIFICATION_COMMENT();
                                            jsonCertComment.certificateDeclineReason = "";
                                            jsonCertComment.certificateSuspendReason = "";
                                            jsonCertComment.certificateRevokeReason = idCertRevokeReasonUser;
                                            idCertRevokeReasonUser = objectMapper.writeValueAsString(jsonCertComment);
                                            db.S_BO_CERTIFICATION_UPDATE_REVOKED_REASON(String.valueOf(pCertificateId), idCertRevokeReasonUser, EscapeUtils.CheckTextNull(raServiceReq.approveUser));*/
                                            db.S_BO_API_CERTIFICATION_UPDATE_REVOCATION_REASON(pCertificateId, idCertRevokeReasonUser, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            //</editor-fold>

                                            raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_REVOKED;
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                            if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN)){
                                                String urlCallback = "";
                                                String requestType = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REVOKE;
                                                BRANCH[][] rsBranch = new BRANCH[1][];
                                                db.S_BO_BRANCH_DETAIL(String.valueOf(sBranchId_Cert), rsBranch);
                                                if(rsBranch != null && rsBranch[0].length > 0){
                                                    urlCallback = rsBranch[0][0].CALLBACK_URL_APPROVED;
                                                }
                                                ThreadCallbackApproved thhreadLog = new ThreadCallbackApproved(String.valueOf(pCertificateId),
                                                    urlCallback, Definitions.CONFIG_OPERATION_TYPE_APPROVED, "", requestType);
                                                Thread t = new Thread(thhreadLog);
                                                t.start();
                                            }
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_REVOKE;
                                        }
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                }
                                //</editor-fold>

                            } else {
                                raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                            }
                        }
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_STATE_INVALID;
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### suspendCertificateProcess">
    public void suspendCertificateProcess(String pPARENT_ID, int pBRANCH_ID, String pBeneficiaryUserDefault, String pApproveCAUser, boolean  autoApproveCAServer,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_SUSPEND_CERTIFICATION;
        String sTOKEN_SN = "";
        
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        ObjectMapper objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", EscapeUtils.CheckTextNull(raReqTemp.certificateSN),
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE">
            int createdUserID = 0;
            String pCERTIFICATION_SN = "";
            String pCERTIFICATION_AUTHORITY_CODE = "";
            String sPHONE_CONTRACT = "";
            String sEMAIL_CONTRACT = "";
            String sCoreCASubject = "";
            String sDN = "";
            String pPERSONAL_NAME = "";
            String pCOMPANY_NAME = "";
            String pEnterpriseDB = "";
            String pPersonalDB = "";
            String sPKIFormFactorCode = "";
            String pPROVINCE_ID = "";
            String sProvinceNameComponent = "";
            int pCERT_ATTR_TYPE_ID = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_ID_PERMANENT_DISABLE;
            String sSuspendReason = EscapeUtils.CheckTextNull(raServiceReq.suspendReason);
            java.sql.Timestamp sSUSPEND_TIME_DB = null;
            String pCERTIFICATION_ATTR_TYPE_CODE = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_PERMANENT_DISABLE;
            if(raServiceReq.temporarySuspendEnabled == true) {
                pCERT_ATTR_TYPE_ID = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_ID_TEMPORARY_DISABLE;
                pCERTIFICATION_ATTR_TYPE_CODE = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_TEMPORARY_DISABLE;
                sSUSPEND_TIME_DB = CommonFunction.ConvertStringToTimeStamp(raServiceReq.suspendTime);
            }
            int pCertificateId = 0;
            int sBranchId_Cert = 0;
            String pCertificateStateCode = "";
            String pCertificateStateName = "";
            String requestTypeCode = "";
            int[] pRESPONSE_CODE = new int[1];
            CertificateInfo[][] rsReq = new CertificateInfo[1][];
            boolean isValidRequest = false;
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN))) {
                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.certificateSN), 0,
                    "", "", raServiceReq.language, pRESPONSE_CODE, rsReq, "", "", "", "");
                if (rsReq[0].length > 0) {
                    for(CertificateInfo rsReqItem : rsReq[0]) {
                        if(rsReqItem.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_OPERATED) {
                            isValidRequest = true;
                            sPHONE_CONTRACT = rsReqItem.phoneContact;
                            sEMAIL_CONTRACT = rsReqItem.emailContact;
                            sCoreCASubject = rsReqItem.coreCASubject;
                            sDN = rsReqItem.certificateDN;
                            pPERSONAL_NAME = rsReqItem.personalName;
                            pCOMPANY_NAME = rsReqItem.companyName;
                            pEnterpriseDB = rsReqItem.enterpriseID;
                            pPersonalDB = rsReqItem.personalID;
                            sTOKEN_SN = rsReqItem.tokenSN;
                            pCERTIFICATION_AUTHORITY_CODE = rsReqItem.certificateAuthorityCode;
                            pPROVINCE_ID = String.valueOf(rsReqItem.provinceId);
                            pCERTIFICATION_SN = rsReqItem.certificateSN;
                            createdUserID = rsReqItem.createdId;
                            pCertificateId = rsReqItem.certificateID;
                            sBranchId_Cert = rsReqItem.raId;
                            sPKIFormFactorCode = rsReqItem.formFactorCode;
                            pCertificateStateCode = rsReqItem.certificateStateCode;
                            pCertificateStateName = rsReqItem.certificateStateName;
                            requestTypeCode = rsReqItem.requestTypeCode;
                            break;
                        }
                    }
                }
            }
            if(isValidRequest == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }

//                                if(sBranchId_Cert != pBRANCH_ID)
//                                {
//                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
//                                }
                }
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                boolean autoApproveCAClient = raServiceReq.approveEnabled;
                //<editor-fold defaultstate="collapsed" desc="### GET PROVINCE and FULLNAME">
                CITY_PROVINCE[][] rsProvince = new CITY_PROVINCE[1][];
                db.S_BO_PROVINCE_DETAIL(pPROVINCE_ID, rsProvince);
                if (rsProvince[0].length > 0) {
                    sProvinceNameComponent = rsProvince[0][0].REMARK;
                }
                String raFullnameCreate = "";
                String raFullname = "";
                BACKOFFICE_USER[][] rsUser = new BACKOFFICE_USER[1][];
                db.S_BO_USER_DETAIL(String.valueOf(createdUserID), String.valueOf(raServiceReq.language), rsUser);
                if (rsUser[0].length > 0) {
                    raServiceReq.beneficiaryUser = rsUser[0][0].USERNAME;
                    raFullnameCreate = EscapeUtils.CheckTextNull(rsUser[0][0].FULL_NAME);
                }
                UserInfo[][] userDetail = new UserInfo[1][];
                db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                if (userDetail[0].length > 0) {
                    raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                }
                //</editor-fold>

                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {

                    //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                    // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                    int intLevelApprove = 0;
                    if (autoApproveCAServer == false && autoApproveCAClient == false) {
                        intLevelApprove = 0;
                    } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                        intLevelApprove = 1;
                    } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                        intLevelApprove = 0;
                    } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                        intLevelApprove = 2;
                    }
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="### EXPAND PARAM PROCESS">
                    String sRsspAgreementUUID = "";
                    String sRsspRelyingParty = "";
                    String sRsspCertificateUUID = "";
                    String sRsspConnectWSMode = "";
                    if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD))
                    {
                        String sExpandParam = EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML);
                        if(!"".equals(sExpandParam)) {
                            ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                            sRsspAgreementUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspAgreementUUID);
                            sRsspRelyingParty = EscapeUtils.CheckTextNull(jsonReqExpand.rsspRelyingParty);
                            sRsspCertificateUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspCertificateUUID);
                            sRsspConnectWSMode = EscapeUtils.CheckTextNull(jsonReqExpand.rsspConnectWSMode);
                        }
                        if(!"".equals(sRsspConnectWSMode)) {
                            if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_REST)) {
                                if("".equals(sRsspCertificateUUID) || "".equals(sRsspRelyingParty)) {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                }
                            } else if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_SOAP)) {
                                if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                            }
                        } else {
                            if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                            }
                        }
                    }
                    //</editor-fold>

                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR AND LOG">
                        CommonFunction.LogDebugString(log, sFunctionWS, "REQUEST: " + "CERT_SN: " + EscapeUtils.CheckTextNull(raServiceReq.certificateSN)
                            + "; temporarySuspendEnabled: " + raServiceReq.temporarySuspendEnabled + "; suspendReason: " + raServiceReq.suspendReason
                            + "; suspendTime: " + raServiceReq.suspendTime + "; CertificateId: " + pCertificateId + "; PKIFormFactorCode: " + sPKIFormFactorCode
                            + "; PERSONAL_NAME: " + pPERSONAL_NAME + "; COMPANY_NAME: " + pCOMPANY_NAME + "; pEnterpriseDB: " + pEnterpriseDB
                            + "; pPersonalDB: " + pPersonalDB + "; CertificateStateName: " + pCertificateStateName + "; AUTO_APPROVE_USER: " + raServiceReq.approveEnabled
                            + "; BENEFICIARIES_USER: " + raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                        CERTIFICATION_DATA_ATTR tempLogReq = new CERTIFICATION_DATA_ATTR();
                        tempLogReq.personalName = pPERSONAL_NAME;
                        tempLogReq.companyName = pCOMPANY_NAME;
                        tempLogReq.enterpriseID = pEnterpriseDB;
                        tempLogReq.personalID = pPersonalDB;
                        tempLogReq.phoneContract = sPHONE_CONTRACT;
                        tempLogReq.emailContract = sEMAIL_CONTRACT;
                        tempLogReq.issuerSubject = sCoreCASubject;
                        tempLogReq.subjectDn = sDN;
                        tempLogReq.tokenSn = sTOKEN_SN;
                        tempLogReq.provinceName = sProvinceNameComponent;
                        tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                        ATTRIBUTE_VALUES valueATTR;
                        ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                        dataATTR.setCertificationData(tempLogReq);
                        valueATTR = new ATTRIBUTE_VALUES();
                        valueATTR.setTokenSn(sTOKEN_SN);
                        if(!"".equals(sRsspAgreementUUID)) {
                            valueATTR.setRsspAgreementUUID(sRsspAgreementUUID);
                        }
                        if(!"".equals(sRsspRelyingParty)) {
                            valueATTR.setRsspRelyingParty(sRsspRelyingParty);
                        }
                        if(!"".equals(sRsspCertificateUUID)) {
                            valueATTR.setRsspCertificateUUID(sRsspCertificateUUID);
                        }
                        if(!"".equals(sRsspConnectWSMode)) {
                            valueATTR.setRsspConnectWSMode(sRsspConnectWSMode);
                        }
                        if(sSUSPEND_TIME_DB != null) {
                            valueATTR.setSuspendedTime(sSUSPEND_TIME_DB);
                        }
                        if(!"".equals(sSuspendReason)) {
                            valueATTR.setCerttificateSuspendReason(sSuspendReason);
                        }
                        valueATTR.setTypeName(pCERTIFICATION_ATTR_TYPE_CODE);
                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                        valueATTR.setCreateUser(raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                        valueATTR.setCreateDt(new Date());
                        valueATTR.setAttributeData(dataATTR);
                        //</editor-fold>

                        String strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                        int[] pCERTIFICATE_ATTR_ID = new int[1];
                        String[] pRESPONSE_CODE_NAME = new String[1];
                        db.S_BO_API_CERTIFICATION_ATTR_INSERT(EscapeUtils.CheckTextNull(raServiceReq.certificateSN),
                            pCERT_ATTR_TYPE_ID, strReqValueATTR,
                            EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pRESPONSE_CODE_NAME, pCERTIFICATE_ATTR_ID);
                        if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                            raServiceResp.certificateID = pCertificateId;
                            raServiceResp.certificateStateCode = pCertificateStateCode;
                            raServiceResp.certificateStateName = pCertificateStateName;

                            //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                            if (intLevelApprove == 1 || intLevelApprove == 2) {
                                valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                valueATTR.setApproveDt(new Date());
                                strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                            }
                            if (intLevelApprove == 2) {
                                // Approve CA
                                valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                valueATTR.setApproveCADt(new Date());
                                strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                if ("0".equals(sApprove)) {
                                    int[] intRes = new int[1];
                                    String[] sRes = new String[1];
                                    ConnectConnector.RevokeCertificate(sTOKEN_SN, pCERTIFICATION_SN, Definitions.CONFIG_CERTIFICATION_REVOKE_REASON_CERTIFICATEHOLD_ID,
                                        pCERTIFICATION_AUTHORITY_CODE, "", intRes, sRes, pCertificateId, pCERTIFICATE_ATTR_ID[0]);
                                    if (intRes[0] == 0) {
                                        objectMapper = new ObjectMapper();
                                        CERTIFICATION_COMMENT jsonCertComment = new CERTIFICATION_COMMENT();
                                        jsonCertComment.certificateDeclineReason = "";
                                        jsonCertComment.certificateRevokeReason = "";
                                        jsonCertComment.certificateSuspendReason = sSuspendReason;
                                        String pCOMMENT = objectMapper.writeValueAsString(jsonCertComment);
                                        db.S_BO_CERTIFICATION_DISABLE(String.valueOf(pCERTIFICATE_ATTR_ID[0]), sSUSPEND_TIME_DB, pCOMMENT, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                        // return info
                                        pRESPONSE_CODE = new int[1];
                                        CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                        db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCertificateId, "", "",
                                                raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                        if (certInfo[0].length > 0) {
                                            raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                            raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                        }
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                        if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN)){
                                            String urlCallback = "";
                                            String requestType = "";
                                            if(requestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_PERMANENT_DISABLE)) {
                                                requestType = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_PERMANENT_DISABLE;
                                            } else if(requestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_TEMPORARY_DISABLE)) {
                                                requestType = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_TEMPORARY_DISABLE;
                                            }
                                            BRANCH[][] rsBranch = new BRANCH[1][];
                                            db.S_BO_BRANCH_DETAIL(String.valueOf(sBranchId_Cert), rsBranch);
                                            if(rsBranch != null && rsBranch[0].length > 0){
                                                urlCallback = rsBranch[0][0].CALLBACK_URL_APPROVED;
                                            }
                                            ThreadCallbackApproved thhreadLog = new ThreadCallbackApproved(String.valueOf(pCertificateId),
                                                urlCallback, Definitions.CONFIG_OPERATION_TYPE_APPROVED, "", requestType);
                                            Thread t = new Thread(thhreadLog);
                                            t.start();
                                        }
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_REVOKE;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            }
                            //</editor-fold>
                        } else {
                            raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                        }
                    }
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### recoveryCertificateProcess">
    public void recoveryCertificateProcess(String pPARENT_ID, int pBRANCH_ID, String pBeneficiaryUserDefault, String pApproveCAUser, boolean  autoApproveCAServer,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_RECOVERY_CERTIFICATION;
        String sTOKEN_SN = "";
        boolean autoApproveCAClient = raServiceReq.approveEnabled;
        ObjectMapper objectMapper;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", EscapeUtils.CheckTextNull(raReqTemp.certificateSN),
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE">
            int createdUserID = 0;
            String pCERTIFICATION_SN = "";
            String pCERTIFICATION_AUTHORITY_CODE = "";
            String sPHONE_CONTRACT = "";
            String sEMAIL_CONTRACT = "";
            String sCoreCASubject = "";
            String sDN = "";
            String pPERSONAL_NAME = "";
            String pCOMPANY_NAME = "";
            String pEnterpriseDB = "";
            String pPersonalDB = "";
            String sPKIFormFactorCode = "";
            String pPROVINCE_ID = "";
            String sProvinceNameComponent = "";
            int pCERT_ATTR_TYPE_ID = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_ID_RECOVERED;
            String pCERTIFICATION_ATTR_TYPE_CODE = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RECOVERED;
            int pCertificateId = 0;
            int sBranchId_Cert = 0;
            String pCertificateStateCode = "";
            String pCertificateStateName = "";
            int[] pRESPONSE_CODE = new int[1];
            CertificateInfo[][] rsReq = new CertificateInfo[1][];
            boolean isValidRequest = false;
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN)))
            {
                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.certificateSN), 0,
                    "", "", raServiceReq.language, pRESPONSE_CODE, rsReq, "", "", "", "");
                if (rsReq[0].length > 0) {
                    for(CertificateInfo rsReqItem : rsReq[0])
                    {
                        if(rsReqItem.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_OPERATED_PERMANENT_DISABLE
                            || rsReqItem.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_OPERATED_TEMPORARY_DISABLE
                            || rsReqItem.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_RENEWAL_PERMANENT_DISABLE
                            || rsReqItem.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_RENEWAL_TEMPORARY_DISABLE)
                        {
                            isValidRequest = true;
                            sPHONE_CONTRACT = rsReqItem.phoneContact;
                            sEMAIL_CONTRACT = rsReqItem.emailContact;
                            sCoreCASubject = rsReqItem.coreCASubject;
                            sDN = rsReqItem.certificateDN;
                            pPERSONAL_NAME = rsReqItem.personalName;
                            pCOMPANY_NAME = rsReqItem.companyName;
                            pEnterpriseDB = rsReqItem.enterpriseID;
                            pPersonalDB = rsReqItem.personalID;
                            sTOKEN_SN = rsReqItem.tokenSN;
                            pCERTIFICATION_AUTHORITY_CODE = rsReqItem.certificateAuthorityCode;
                            pPROVINCE_ID = String.valueOf(rsReqItem.provinceId);
                            pCERTIFICATION_SN = rsReqItem.certificateSN;
                            createdUserID = rsReqItem.createdId;
                            pCertificateId = rsReqItem.certificateID;
                            sBranchId_Cert = rsReqItem.raId;
                            sPKIFormFactorCode = rsReqItem.formFactorCode;
                            pCertificateStateCode = rsReqItem.certificateStateCode;
                            pCertificateStateName = rsReqItem.certificateStateName;
                            break;
                        }
                    }
                }
            }
            if(isValidRequest == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
//                                if(sBranchId_Cert != pBRANCH_ID)
//                                {
//                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
//                                }
                }
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                //<editor-fold defaultstate="collapsed" desc="### GET PROVINCE and FULLNAME">
                CITY_PROVINCE[][] rsProvince = new CITY_PROVINCE[1][];
                db.S_BO_PROVINCE_DETAIL(pPROVINCE_ID, rsProvince);
                if (rsProvince[0].length > 0) {
                    sProvinceNameComponent = rsProvince[0][0].REMARK;
                }
                String raFullnameCreate = "";
                String raFullname = "";
                BACKOFFICE_USER[][] rsUser = new BACKOFFICE_USER[1][];
                db.S_BO_USER_DETAIL(String.valueOf(createdUserID), String.valueOf(raServiceReq.language), rsUser);
                if (rsUser[0].length > 0) {
                    raServiceReq.beneficiaryUser = rsUser[0][0].USERNAME;
                    raFullnameCreate = EscapeUtils.CheckTextNull(rsUser[0][0].FULL_NAME);
                }
                UserInfo[][] userDetail = new UserInfo[1][];
                db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                if (userDetail[0].length > 0) {
                    raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                }
                //</editor-fold>

                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {

                    //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                    // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                    int intLevelApprove = 0;
                    if (autoApproveCAServer == false && autoApproveCAClient == false) {
                        intLevelApprove = 0;
                    } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                        intLevelApprove = 1;
                    } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                        intLevelApprove = 0;
                    } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                        intLevelApprove = 2;
                    }
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="### EXPAND PARAM PROCESS">
                    String sRsspAgreementUUID = "";
                    String sRsspRelyingParty = "";
                    String sRsspCertificateUUID = "";
                    String sRsspConnectWSMode = "";
                    if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD))
                    {
                        String sExpandParam = EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML);
                        if(!"".equals(sExpandParam)) {
                            ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                            sRsspAgreementUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspAgreementUUID);
                            sRsspRelyingParty = EscapeUtils.CheckTextNull(jsonReqExpand.rsspRelyingParty);
                            sRsspCertificateUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspCertificateUUID);
                            sRsspConnectWSMode = EscapeUtils.CheckTextNull(jsonReqExpand.rsspConnectWSMode);
                        }
                        if(!"".equals(sRsspConnectWSMode)) {
                            if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_REST)) {
                                if("".equals(sRsspCertificateUUID) || "".equals(sRsspRelyingParty)) {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                }
                            } else if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_SOAP)) {
                                if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                            }
                        } else {
                            if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                            }
                        }
                    }
                    //</editor-fold>

                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR AND LOG">
                        CommonFunction.LogDebugString(log, sFunctionWS, "REQUEST: " + "CERT_SN: " + EscapeUtils.CheckTextNull(raServiceReq.certificateSN)
                            + "; CertificateId: " + pCertificateId + "; PKIFormFactorCode: " + sPKIFormFactorCode
                            + "; PERSONAL_NAME: " + pPERSONAL_NAME + "; COMPANY_NAME: " + pCOMPANY_NAME + "; pEnterpriseDB: " + pEnterpriseDB
                            + "; pPersonalDB: " + pPersonalDB
                            + "; CertificateStateName: " + pCertificateStateName + "; AUTO_APPROVE_USER: " + raServiceReq.approveEnabled
                            + "; BENEFICIARIES_USER: " + raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                        CERTIFICATION_DATA_ATTR tempLogReq = new CERTIFICATION_DATA_ATTR();
                        tempLogReq.personalName = pPERSONAL_NAME;
                        tempLogReq.companyName = pCOMPANY_NAME;
                        tempLogReq.enterpriseID = pEnterpriseDB;
                        tempLogReq.personalID = pPersonalDB;
                        tempLogReq.phoneContract = sPHONE_CONTRACT;
                        tempLogReq.emailContract = sEMAIL_CONTRACT;
                        tempLogReq.issuerSubject = sCoreCASubject;
                        tempLogReq.subjectDn = sDN;
                        tempLogReq.tokenSn = sTOKEN_SN;
                        tempLogReq.provinceName = sProvinceNameComponent;
                        tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                        ATTRIBUTE_VALUES valueATTR;
                        ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                        dataATTR.setCertificationData(tempLogReq);
                        valueATTR = new ATTRIBUTE_VALUES();
                        valueATTR.setTokenSn(sTOKEN_SN);
                        if(!"".equals(sRsspAgreementUUID)) {
                            valueATTR.setRsspAgreementUUID(sRsspAgreementUUID);
                        }
                        if(!"".equals(sRsspRelyingParty)) {
                            valueATTR.setRsspRelyingParty(sRsspRelyingParty);
                        }
                        if(!"".equals(sRsspCertificateUUID)) {
                            valueATTR.setRsspCertificateUUID(sRsspCertificateUUID);
                        }
                        if(!"".equals(sRsspConnectWSMode)) {
                            valueATTR.setRsspConnectWSMode(sRsspConnectWSMode);
                        }
                        valueATTR.setTypeName(pCERTIFICATION_ATTR_TYPE_CODE);
                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                        valueATTR.setCreateUser(raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                        valueATTR.setCreateDt(new Date());
                        valueATTR.setAttributeData(dataATTR);
                        //</editor-fold>

                        String strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                        int[] pCERTIFICATE_ATTR_ID = new int[1];
                        String[] pRESPONSE_CODE_NAME = new String[1];
                        db.S_BO_API_CERTIFICATION_ATTR_INSERT(EscapeUtils.CheckTextNull(raServiceReq.certificateSN),
                            pCERT_ATTR_TYPE_ID, strReqValueATTR,
                            EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pRESPONSE_CODE_NAME, pCERTIFICATE_ATTR_ID);
                        if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                            raServiceResp.certificateID = pCertificateId;
                            raServiceResp.certificateStateCode = pCertificateStateCode;
                            raServiceResp.certificateStateName = pCertificateStateName;

                            //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                            if (intLevelApprove == 1 || intLevelApprove == 2) {
                                valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                valueATTR.setApproveDt(new Date());
                                strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                            }
                            if (intLevelApprove == 2) {
                                // Approve CA
                                valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                valueATTR.setApproveCADt(new Date());
                                strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                if ("0".equals(sApprove)) {
                                    int[] intRes = new int[1];
                                    String[] sRes = new String[1];
                                    ConnectConnector.RevokeCertificate(sTOKEN_SN, pCERTIFICATION_SN, Definitions.CONFIG_CERTIFICATION_REVOKE_REASON_REMOVEFROMCRL_ID,
                                        pCERTIFICATION_AUTHORITY_CODE, "", intRes, sRes, pCertificateId, pCERTIFICATE_ATTR_ID[0]);
                                    if (intRes[0] == 0) {
                                        db.S_BO_CERTIFICATION_RECOVERED(String.valueOf(pCERTIFICATE_ATTR_ID[0]), EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                        // return info
                                        pRESPONSE_CODE = new int[1];
                                        CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                        db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCertificateId, "", "", raServiceReq.language,
                                            pRESPONSE_CODE, certInfo, "", "", "", "");
                                        if (certInfo[0].length > 0) {
                                            raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                            raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                        }
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                        if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN)) {
                                            String urlCallback = "";
                                            String requestType = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RECOVERED;
                                            BRANCH[][] rsBranch = new BRANCH[1][];
                                            db.S_BO_BRANCH_DETAIL(String.valueOf(sBranchId_Cert), rsBranch);
                                            if(rsBranch != null && rsBranch[0].length > 0){
                                                urlCallback = rsBranch[0][0].CALLBACK_URL_APPROVED;
                                            }
                                            ThreadCallbackApproved thhreadLog = new ThreadCallbackApproved(String.valueOf(pCertificateId),
                                                urlCallback, Definitions.CONFIG_OPERATION_TYPE_APPROVED, "", requestType);
                                            Thread t = new Thread(thhreadLog);
                                            t.start();
                                        }
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_REVOKE;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            }
                            //</editor-fold>
                        } else {
                            raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                        }
                    }
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### declineCertificateProcess">
    public void declineCertificateProcess(String pPARENT_ID, int pBRANCH_ID, String pBeneficiaryUserDefault,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_DECLINE_CERTIFICATION;
        String sTOKEN_SN = "";
        ObjectMapper objectMapper;
                    
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp),
            pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE">
            int requestId = 0;
            String pCERTIFICATION_SN = "";
            String pCERTIFICATION_AUTHORITY_CODE = "";
            int pCERTIFICATE_STATE_ID = 0;
            int[] pRESPONSE_CODE = new int[1];
            String sVALUE_OLD = "";
            String sRequestStateCode = "";
            String sRequestTypeCode = "";
            String sFormFactorCode = "";
            String sPAST_CERTIFICATE_ID = "";
            int sBranchId_Cert = 0;
            int pCertificateId = 0;
            boolean sPrivateKey_Enabled = false;
            CertificateInfo[][] rsReq = new CertificateInfo[1][];
            if(raServiceReq.certificateID != 0)
            {
                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", raServiceReq.certificateID, "", "",
                        raServiceReq.language, pRESPONSE_CODE, rsReq, "", "", "", "");
                if (rsReq[0].length > 0) {
                    sTOKEN_SN = rsReq[0][0].tokenSN;
                    pCERTIFICATION_AUTHORITY_CODE = rsReq[0][0].certificateAuthorityCode;
                    sPAST_CERTIFICATE_ID = String.valueOf(rsReq[0][0].pastCertificateId);
                    pCERTIFICATION_SN = rsReq[0][0].certificateSN;
                    requestId = rsReq[0][0].requestId;
                    sRequestStateCode = rsReq[0][0].requestStateCode;
                    sRequestTypeCode = rsReq[0][0].requestTypeCode;
                    pCERTIFICATE_STATE_ID = rsReq[0][0].certificateStateId;
                    sFormFactorCode = rsReq[0][0].formFactorCode;
                    sVALUE_OLD = rsReq[0][0].value;
                    sBranchId_Cert = rsReq[0][0].raId;
                    pCertificateId = rsReq[0][0].certificateID;
                    sPrivateKey_Enabled = rsReq[0][0].backupKeyEnabled;
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT)) {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
                }
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                //<editor-fold defaultstate="collapsed" desc="### CHECK STATE VALID">
                if (pCERTIFICATE_STATE_ID != 0 && pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_NEW) {
                    if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING)
                            || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED)
                            || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED)
                            || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_GENERATED)
                            || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_ERROR_ISSUED)
                            || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_ISSUED)) {
                        if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RENEWAL)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_CHANGEINFO)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REISSUE)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REVOKE)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_PERMANENT_DISABLE)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_TEMPORARY_DISABLE)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RECOVERED)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_SUPPLEMENT_FILE)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_BUY_MORE)) {
                            if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED)
                                    && sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REVOKE)) {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_DECLINE_INVALID;
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            }
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_DECLINE_INVALID;
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_DECLINE_INVALID;
                    }
                } else if (pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_OPERATED
                    || pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_RENEWED
                    || pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_REVISED
                    || pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_REISSUED) {
                    if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING)
                        || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED)
                        || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_GENERATED)
                        || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_ERROR_ISSUED)
                        || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_ISSUED)) {
                        if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REVOKE)
                            || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_PERMANENT_DISABLE)
                            || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_TEMPORARY_DISABLE)
                            || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RECOVERED)
                            || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_SUPPLEMENT_FILE)) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else if(sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REISSUE)) {
                            if(sFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                || sFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                                if(sPrivateKey_Enabled == true)
                                {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_DECLINE_INVALID;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_DECLINE_INVALID;
                            }
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_DECLINE_INVALID;
                        }
                    } else if(sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED))
                    {
                        if(sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_SUPPLEMENT_FILE)
                            || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REISSUE)
                            || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REVOKE))
                        {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_DECLINE_INVALID;
                        }
                    }
                    else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_DECLINE_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_DECLINE_INVALID;
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### DECLINE CERT">
                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    String idDeclineReason = EscapeUtils.CheckTextNull(raServiceReq.declineReason);
//                                BACKOFFICE_USER[][] rsUser = new BACKOFFICE_USER[1][];
//                                db.S_BO_USER_DETAIL(String.valueOf(createdUserID), String.valueOf(raServiceReq.language), rsUser);
//                                if (rsUser[0].length > 0) {
//                                    raServiceReq.beneficiaryUser = EscapeUtils.CheckTextNull(rsUser[0][0].USERNAME);
//                                }
//                                UserInfo[][] userInfo = new UserInfo[1][];
//                                db.S_BO_API_USER_LIST(pApproveCAUser, "", "", raServiceReq.language, userInfo);
//                                if (userInfo[0].length > 0) {
//                                }

                    String sVALUE_NEW = "";
                    String sVALUE_SCAN = "";
                    if (!"".equals(sVALUE_OLD)) {
                        objectMapper = new ObjectMapper();
                        ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(sVALUE_OLD, ATTRIBUTE_VALUES.class);
                        valueATTR_Frist.setCerttificateDeclineReason(idDeclineReason);
                        sVALUE_NEW = CommonFunction.GenJSONTokenATTR(valueATTR_Frist);
                        // certificationAttrId
                        valueATTR_Frist.setCertificationAttrId(String.valueOf(requestId));
                        sVALUE_SCAN = CommonFunction.GenJSONTokenATTR(valueATTR_Frist);
                    }
                    objectMapper = new ObjectMapper();
                    CERTIFICATION_COMMENT jsonCertComment = new CERTIFICATION_COMMENT();
                    jsonCertComment.certificateDeclineReason = idDeclineReason;
                    jsonCertComment.certificateRevokeReason = "";
                    jsonCertComment.certificateSuspendReason = "";
                    idDeclineReason = objectMapper.writeValueAsString(jsonCertComment);
                    System.out.println("declineCertificateForTMSRA-sRequestStateCode: " + sRequestStateCode);
                    if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING)
                        || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED)) {
                        db.S_BO_CERTIFICATION_REMOVED(requestId, idDeclineReason, sVALUE_NEW, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                        if(sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_SUPPLEMENT_FILE))
                        {
                            String[] pRESPONSE_CODE_NAME = new String[1];
                            db.S_BO_API_CERTIFICATION_SUPPLEMENT_FILE_DECLINE(requestId, raServiceReq.approveUser, pRESPONSE_CODE_NAME);
                        }
                    } else if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED)
                            || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_GENERATED)
                            || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_ERROR_ISSUED)) {
                        db.S_BO_CERTIFICATION_REMOVED(requestId, idDeclineReason, sVALUE_NEW, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                        if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REISSUE)) {
                            if (CommonFunction.checkHardTokenEnabled(sFormFactorCode) == true
                                || sFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                String sOLD_TOKEN_ID = "";
                                CERTIFICATION[][] rsGetToken = new CERTIFICATION[1][];
                                db.S_BO_CERTIFICATION_DETAIL(sPAST_CERTIFICATE_ID, String.valueOf(raServiceReq.language), rsGetToken);
                                if (rsGetToken[0].length > 0) {
                                    sOLD_TOKEN_ID = String.valueOf(rsGetToken[0][0].TOKEN_ID);
                                }
                                boolean IsDecline_PERMANENT_INITIALZED = false;
                                String sToken_AtrrID = "";
                                TOKEN[][] rsToken_OLD = new TOKEN[1][];
                                db.S_BO_TOKEN_GET_ATTR(sOLD_TOKEN_ID, String.valueOf(raServiceReq.language), rsToken_OLD);
                                if (rsToken_OLD[0].length > 0) {
                                    for (TOKEN rsToken_OLD1 : rsToken_OLD[0]) {
                                        if (rsToken_OLD1.TOKEN_ATTR_TYPE_ID == Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_PERMANENT_INITIALZED) {
                                            sToken_AtrrID = String.valueOf(rsToken_OLD1.TOKEN_ATTR_ID);
                                            IsDecline_PERMANENT_INITIALZED = true;
                                            break;
                                        }
                                    }
                                }
                                if (IsDecline_PERMANENT_INITIALZED == true) {
                                    db.S_BO_TOKEN_ATTR_DECLINED(Integer.parseInt(sToken_AtrrID), EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                    TOKEN[][] rsTokenDetail = new TOKEN[1][];
                                    db.S_BO_TOKEN_DETAIL(sOLD_TOKEN_ID, rsTokenDetail);
                                    if (rsTokenDetail[0].length > 0) {
                                        if (rsTokenDetail[0][0].TOKEN_STATE_ID == Definitions.CONFIG_TOKEN_STATE_ID_LOST) {
                                            db.S_BO_TOKEN_RECOVERY_STATE(sOLD_TOKEN_ID, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                        }
                                    }
                                }
                            }
                        }
                        if(sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_SUPPLEMENT_FILE))
                        {
                            String[] pRESPONSE_CODE_NAME = new String[1];
                            db.S_BO_API_CERTIFICATION_SUPPLEMENT_FILE_DECLINE(requestId, raServiceReq.approveUser, pRESPONSE_CODE_NAME);
                        }
                    } else if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_ISSUED)) {
                        if(sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_SUPPLEMENT_FILE))
                        {
                            String[] pRESPONSE_CODE_NAME = new String[1];
                            db.S_BO_API_CERTIFICATION_SUPPLEMENT_FILE_DECLINE(requestId, raServiceReq.approveUser, pRESPONSE_CODE_NAME);
                        } else
                        {
                            // RACONNECTOR SCAN
                            int[] intRes = new int[1];
                            String[] sRes = new String[1];
                            Config conf = new Config();
                            String raConnectorScan = conf.GetPropertybyCode(Definitions.CONFIG_RACONNECTOR_SCAN_ENABLED);
                            if("1".equals(raConnectorScan))
                            {
                                //<editor-fold defaultstate="collapsed" desc="### RACONNECTOR SCAN">
                                int[] pCERTIFICATE_ATTR_ID_REFUND = new int[1];
                                int sRefurd = db.S_BO_API_CERTIFICATION_REFUND(pCertificateId, sVALUE_SCAN,
                                        EscapeUtils.CheckTextNull(raServiceReq.approveUser), pCERTIFICATE_ATTR_ID_REFUND);
                                if (sRefurd == 0) {
                                    String sCompromiseDate = "";
                                    ConnectConnector.RevokeCertificate(sTOKEN_SN, pCERTIFICATION_SN,
                                        Definitions.CONFIG_CERTIFICATION_REVOKE_REASON_UNSPECIFIED_ID, pCERTIFICATION_AUTHORITY_CODE,
                                        sCompromiseDate, intRes, sRes, pCertificateId, pCERTIFICATE_ATTR_ID_REFUND[0]);
                                    if (intRes[0] == 0) {
                                        if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REISSUE)) {
                                            if (CommonFunction.checkHardTokenEnabled(sFormFactorCode) == true
                                                || sFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                                String sOLD_TOKEN_ID = "";
                                                CERTIFICATION[][] rsGetToken = new CERTIFICATION[1][];
                                                db.S_BO_CERTIFICATION_DETAIL(sPAST_CERTIFICATE_ID, String.valueOf(raServiceReq.language), rsGetToken);
                                                if (rsGetToken[0].length > 0) {
                                                    sOLD_TOKEN_ID = String.valueOf(rsGetToken[0][0].TOKEN_ID);
                                                }
                                                boolean IsDecline_PERMANENT_INITIALZED = false;
                                                String sToken_AtrrID = "";
                                                TOKEN[][] rsToken_OLD = new TOKEN[1][];
                                                db.S_BO_TOKEN_GET_ATTR(sOLD_TOKEN_ID, String.valueOf(raServiceReq.language), rsToken_OLD);
                                                if (rsToken_OLD[0].length > 0) {
                                                    for (TOKEN rsToken_OLD1 : rsToken_OLD[0]) {
                                                        if (rsToken_OLD1.TOKEN_ATTR_TYPE_ID == Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_PERMANENT_INITIALZED) {
                                                            sToken_AtrrID = String.valueOf(rsToken_OLD1.TOKEN_ATTR_ID);
                                                            IsDecline_PERMANENT_INITIALZED = true;
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (IsDecline_PERMANENT_INITIALZED == true) {
                                                    db.S_BO_TOKEN_ATTR_DECLINED(Integer.parseInt(sToken_AtrrID), EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                    TOKEN[][] rsTokenDetail = new TOKEN[1][];
                                                    db.S_BO_TOKEN_DETAIL(sOLD_TOKEN_ID, rsTokenDetail);
                                                    if (rsTokenDetail[0].length > 0) {
                                                        if (rsTokenDetail[0][0].TOKEN_STATE_ID == Definitions.CONFIG_TOKEN_STATE_ID_LOST) {
                                                            db.S_BO_TOKEN_RECOVERY_STATE(sOLD_TOKEN_ID, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                //</editor-fold>
                            } else {
                                String sCompromiseDate = "";
                                ConnectConnector.RevokeCertificate(sTOKEN_SN, pCERTIFICATION_SN,
                                    Definitions.CONFIG_CERTIFICATION_REVOKE_REASON_UNSPECIFIED_ID, pCERTIFICATION_AUTHORITY_CODE,
                                    sCompromiseDate, intRes, sRes, pCertificateId, requestId);
                                if (intRes[0] == 0) {
                                    db.S_BO_CERTIFICATION_DESTROYED(String.valueOf(requestId), idDeclineReason, sVALUE_NEW,
                                            EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                    if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REISSUE)) {
                                        if (CommonFunction.checkHardTokenEnabled(sFormFactorCode) == true
                                            || sFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                            String sOLD_TOKEN_ID = "";
                                            CERTIFICATION[][] rsGetToken = new CERTIFICATION[1][];
                                            db.S_BO_CERTIFICATION_DETAIL(sPAST_CERTIFICATE_ID, String.valueOf(raServiceReq.language), rsGetToken);
                                            if (rsGetToken[0].length > 0) {
                                                sOLD_TOKEN_ID = String.valueOf(rsGetToken[0][0].TOKEN_ID);
                                            }
                                            boolean IsDecline_PERMANENT_INITIALZED = false;
                                            String sToken_AtrrID = "";
                                            TOKEN[][] rsToken_OLD = new TOKEN[1][];
                                            db.S_BO_TOKEN_GET_ATTR(sOLD_TOKEN_ID, String.valueOf(raServiceReq.language), rsToken_OLD);
                                            if (rsToken_OLD[0].length > 0) {
                                                for (TOKEN rsToken_OLD1 : rsToken_OLD[0]) {
                                                    if (rsToken_OLD1.TOKEN_ATTR_TYPE_ID == Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_PERMANENT_INITIALZED) {
                                                        sToken_AtrrID = String.valueOf(rsToken_OLD1.TOKEN_ATTR_ID);
                                                        IsDecline_PERMANENT_INITIALZED = true;
                                                        break;
                                                    }
                                                }
                                            }
                                            if (IsDecline_PERMANENT_INITIALZED == true) {
                                                db.S_BO_TOKEN_ATTR_DECLINED(Integer.parseInt(sToken_AtrrID), EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                TOKEN[][] rsTokenDetail = new TOKEN[1][];
                                                db.S_BO_TOKEN_DETAIL(sOLD_TOKEN_ID, rsTokenDetail);
                                                if (rsTokenDetail[0].length > 0) {
                                                    if (rsTokenDetail[0][0].TOKEN_STATE_ID == Definitions.CONFIG_TOKEN_STATE_ID_LOST) {
                                                        db.S_BO_TOKEN_RECOVERY_STATE(sOLD_TOKEN_ID, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_DECLINE_INVALID;
                    }
                    raServiceResp.billCode = System_Log_BillCode[0];
                }
                //</editor-fold>
            }
        }
        
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### approveCertificateProcess">
    public void approveCertificateProcess(String sCERT_POLICY_PROPERTIES, String pPARENT_ID, int pBRANCH_ID, String pBeneficiaryUserDefault,
        String pApproveCAUser, boolean  autoApproveCAServer, int[] System_Log_ID, String[] System_Log_BillCode,
        String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_APPROVAL_CERTIFICATION;
        boolean autoApproveCAClient = true;
        String sTOKEN_SN = "";
        ObjectMapper objectMapper;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA,
            Definitions.CONFIG_LOG_SOURCE_API_RA, sTOKEN_SN, "", sFunctionWS, objectMapper.writeValueAsString(raReqTemp),
            pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET POLICY">
            String setDeleteOldCertificateEnabled = "1";
            String setRevokeOldCertificateEnabled = "1";
            String sNoAllowTranferToken = "1";
            String sDiscountRateOption = "0";
            String sApproveCertNoChangeKey = "0";
            String checkChangeEffectiveDT = "0";
            String dayChangeEffectiveDT = "0";
            GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
            db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
            if (rsPolicy[0].length > 0) {
                for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_DISCOUNT_RATE_PROFILE_OPTION)) {
                        sDiscountRateOption = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_RENEWAL_AND_REVISION_AUTO_ISSUE_CERT_FOR_PARTICULAR_REQUEST)) {
                        sApproveCertNoChangeKey = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_NO_AUTO_MOVE_TOKEN_FOR_RENEWAL_REVISION_CERTIFICATE_REQUEST)) {
                        sNoAllowTranferToken = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                    if(rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_OPTION_FOR_CHANGING_EFFECTIVE_DT)) {
                        checkChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                    if(rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_MAX_NUMBERS_DAY_ISSUE_CERTIFICATE_FUTURE)) {
                        dayChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                }
            }
            if(raServiceReq.revokeOldCertificateEnabled == false) {
                setRevokeOldCertificateEnabled = "0";
            }
            if(raServiceReq.deleteCertificateEnabled == false) {
                setDeleteOldCertificateEnabled = "0";
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE">
            int requestId = 0;
            String pCERTIFICATION_SN = "";
            String pCERTIFICATION_AUTHORITY_CODE = "";
            String pCERTIFICATION_PROFILE_CODE = "";
            int pCERTIFICATE_STATE_ID = 0;
            int pPAST_CERTIFICATE_ID = 0;
            int[] pRESPONSE_CODE = new int[1];
            String sVALUE_OLD = "";
            String sCSR_OLD = "";
            String sRequestStateCode = "";
            String sRequestTypeCode = "";
            String pEnterpriseDB = "";
            String pPersonalDB = "";
            String sPKIFormFactorCode = "";
            String sCSR = "";
            String sTokenSN_Old = "";
            String sActivationCode = "";
            int sTokenId_Old = 0;
            int sBranchId_Cert = 0;
            int sUserId_Cert = 0;
            int sCertProfileID = 0;
            int pCertificateId = 0;
            String pEXPIRATION_DT_OLD = "";
            String pCREATE_DT_SRV = "";
            boolean pPrivateKeyEnabled = false;
            CertificateInfo[][] rsReq = new CertificateInfo[1][];
            if(raServiceReq.certificateID != 0)
            {
                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", raServiceReq.certificateID,
                    "", "", raServiceReq.language, pRESPONSE_CODE, rsReq, "", "", "", "");
                if (rsReq[0].length > 0) {
                    sTOKEN_SN = rsReq[0][0].tokenSN;
                    pCERTIFICATION_AUTHORITY_CODE = rsReq[0][0].certificateAuthorityCode;
                    pCERTIFICATION_PROFILE_CODE = rsReq[0][0].certificateProfileCode;
                    pCERTIFICATION_SN = rsReq[0][0].certificateSN;
                    requestId = rsReq[0][0].requestId;
                    sRequestStateCode = rsReq[0][0].requestStateCode;
                    sRequestTypeCode = rsReq[0][0].requestTypeCode;
                    pCERTIFICATE_STATE_ID = rsReq[0][0].certificateStateId;
                    sPKIFormFactorCode = rsReq[0][0].formFactorCode;
                    sVALUE_OLD = rsReq[0][0].value;
                    sCSR_OLD = rsReq[0][0].csr;
                    sTokenId_Old = rsReq[0][0].tokenId;
                    sTokenSN_Old = rsReq[0][0].tokenSN;
                    sCertProfileID = rsReq[0][0].certificateProfileId;
                    pPrivateKeyEnabled = rsReq[0][0].backupKeyEnabled;
                    pEnterpriseDB = rsReq[0][0].enterpriseID;
                    pPersonalDB = rsReq[0][0].personalID;
                    sCSR = rsReq[0][0].csr;
                    sBranchId_Cert = rsReq[0][0].raId;
                    sUserId_Cert = rsReq[0][0].createdId;
                    pCertificateId = rsReq[0][0].certificateID;
                    pPAST_CERTIFICATE_ID = rsReq[0][0].pastCertificateId;
                    sActivationCode = rsReq[0][0].activationCode;
                    pCREATE_DT_SRV = EscapeUtils.CheckTextNull(rsReq[0][0].createdDate);
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
                }
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                //<editor-fold defaultstate="collapsed" desc="### CHECK STATE VALID">
                if (pCERTIFICATE_STATE_ID != 0 && pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_NEW) {
                    if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING)
                            || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED)
                            || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED)
                            || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_GENERATED)
                            || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_ERROR_ISSUED)
                            || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_ISSUED)) {
                        if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RENEWAL)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_CHANGEINFO)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REISSUE)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REVOKE)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_COMPENSATION)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_TEMPORARY_DISABLE)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_PERMANENT_DISABLE)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RECOVERED)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_BUY_MORE)) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            /*if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED)
                                    && sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REVOKE)) {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            }*/
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                    }
                } else if (pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_OPERATED
                    || pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_RENEWED
                    || pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_REISSUED
                    || pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_REVISED)
                {
                    if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING)
                        || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED)) {
                        if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REVOKE)
                            || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_PERMANENT_DISABLE)
                            || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_TEMPORARY_DISABLE)
                            || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RECOVERED)) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else if(sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REISSUE)) {
                            if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD))
                            {
                                if(pPrivateKeyEnabled == true)
                                {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                            }
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                    }
                } else if (pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_OPERATED_PERMANENT_DISABLE
                    || pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_OPERATED_TEMPORARY_DISABLE
                    || pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_RENEWAL_PERMANENT_DISABLE
                    || pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_RENEWAL_TEMPORARY_DISABLE)
                {
                    if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING)
                        || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED)) {
                        if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RECOVERED)) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                    }
                }
                else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### APPROVE CERT">
                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    String CheckCHANGE_KEY = "1";// raServiceReq.changeKeyEnabled == true ? "1" : "0";
                    String CheckPRIVATE_KEY = "1";// raServiceReq.backupKeyEnabled == true ? "1" : "0";
                    String strPasswordP12 = "";
                    String pushNoticeEmail = "0";
                    String idCERT_REVOCATION_REASON = "";
                    String idCERT_APPROVE_REMARK = EscapeUtils.CheckTextNull(raServiceReq.remark);
                    String idCERT_REVOCATION_CORE_REASON="";
                    boolean CheckDeleteRevoke;
                    boolean CheckDeleteOldCert;

                    //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                    // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                    int intLevelApprove = 0;
                    if (autoApproveCAServer == false && autoApproveCAClient == false) {
                        intLevelApprove = 0;
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                    } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                        intLevelApprove = 1;
                        if (!sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING)) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                        }
                    } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                        intLevelApprove = 0;
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                    } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                        intLevelApprove = 2;
                        if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_COMMITED)
                                || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_DECLINED)
                                || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_GENERATED)
                                || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_ERROR_ISSUED)
                                || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_ISSUED)) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                        }
                    }
                    //</editor-fold>

                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        //<editor-fold defaultstate="collapsed" desc="### CHANGE_KEY, PRIVATE_KEY of CERT TYPE">
                        boolean booPrivateKeyEndbled_Old = false;
                        if (!sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION)) {
                            CERTIFICATION[][] rsPassCert = new CERTIFICATION[1][];
                            db.S_BO_CERTIFICATION_DETAIL(String.valueOf(pPAST_CERTIFICATE_ID), String.valueOf(raServiceReq.language), rsPassCert);
                            if (rsPassCert[0].length > 0) {
                                booPrivateKeyEndbled_Old = rsPassCert[0][0].PRIVATE_KEY_ENABLED;
                                sCSR = EscapeUtils.CheckTextNull(rsPassCert[0][0].CSR);
                                pEXPIRATION_DT_OLD = EscapeUtils.CheckTextNull(rsPassCert[0][0].EXPIRATION_DT);
                            }
                        }
                        if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                            || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                            if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REISSUE)) {
                                if(booPrivateKeyEndbled_Old == true)
                                {
                                    if (raServiceReq.changeKeyEnabled == true) {
                                        CheckCHANGE_KEY = "1";
                                    } else {
                                        CheckCHANGE_KEY = "0";
                                        setRevokeOldCertificateEnabled = "0";
                                    }
                                    if (raServiceReq.backupKeyEnabled == true) {
                                        CheckPRIVATE_KEY = "1";
                                    } else {
                                        CheckPRIVATE_KEY = "0";
                                    }
                                } else {
                                    CheckCHANGE_KEY = "1";
                                    if (raServiceReq.backupKeyEnabled == true) {
                                        CheckPRIVATE_KEY = "1";
                                    } else {
                                        CheckPRIVATE_KEY = "0";
                                    }
                                }
                            } else if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RENEWAL)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_COMPENSATION)) {
                                if (booPrivateKeyEndbled_Old == true) {
                                    if (raServiceReq.changeKeyEnabled == true) {
                                        CheckCHANGE_KEY = "1";
                                    } else {
                                        CheckCHANGE_KEY = "0";
                                        setDeleteOldCertificateEnabled = "0";
                                    }
                                    if (raServiceReq.backupKeyEnabled == true) {
                                        CheckPRIVATE_KEY = "1";
                                    } else {
                                        CheckPRIVATE_KEY = "0";
                                    }
                                } else {
                                    if (raServiceReq.changeKeyEnabled == true) {
                                        CheckCHANGE_KEY = "1";
                                        if (raServiceReq.backupKeyEnabled == true) {
                                            CheckPRIVATE_KEY = "1";
                                        } else {
                                            CheckPRIVATE_KEY = "0";
                                        }
                                    } else {
                                        CheckCHANGE_KEY = "0";
                                        CheckPRIVATE_KEY = "0";
                                        setDeleteOldCertificateEnabled = "0";
                                    }
                                }
                            } else if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_CHANGEINFO)) {
                                if (booPrivateKeyEndbled_Old == true) {
                                    if (raServiceReq.changeKeyEnabled == true) {
                                        CheckCHANGE_KEY = "1";
                                    } else {
                                        setDeleteOldCertificateEnabled = "0";
                                        CheckCHANGE_KEY = "0";
                                    }
                                    if (raServiceReq.backupKeyEnabled == true) {
                                        CheckPRIVATE_KEY = "1";
                                    } else {
                                        CheckPRIVATE_KEY = "0";
                                    }
                                } else {
                                    if (raServiceReq.changeKeyEnabled == true) {
                                        CheckCHANGE_KEY = "1";
                                        if (raServiceReq.backupKeyEnabled == true) {
                                            CheckPRIVATE_KEY = "1";
                                        } else {
                                            CheckPRIVATE_KEY = "0";
                                        }
                                    } else {
                                        CheckCHANGE_KEY = "0";
                                        CheckPRIVATE_KEY = "0";
                                        setDeleteOldCertificateEnabled = "0";
                                    }
                                }
                            } else if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION)) {
                                CheckCHANGE_KEY = "1";
                                if (raServiceReq.backupKeyEnabled == true) {
                                    CheckPRIVATE_KEY = "1";
                                } else {
                                    CheckPRIVATE_KEY = "0";
                                }
                            }
                            boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                            if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                pushNoticeEmail = "1";
                            }
                        } else if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                            || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                            if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RENEWAL)
                                || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_COMPENSATION)) {
                                if (booPrivateKeyEndbled_Old == true) {
                                    CheckPRIVATE_KEY = "1";
                                    if (raServiceReq.changeKeyEnabled == true) {
                                        CheckCHANGE_KEY = "1";
                                    } else {
                                        CheckCHANGE_KEY = "0";
                                    }
                                    boolean p12EmailCertServer = CommonFunction.getP12EmailEnabledCert(sCERT_POLICY_PROPERTIES);
                                    if (raServiceReq.p12EmailEnabled == true && p12EmailCertServer == true) {
                                        pushNoticeEmail = "1";
                                    }
                                    if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                        strPasswordP12 = EscapeUtils.CheckTextNull(raServiceReq.p12Password);
                                    } else {
                                        strPasswordP12 = CommonFunction.randomPasswordP12(8);
                                    }
                                } else {
                                    CheckPRIVATE_KEY = "0";
                                    if (raServiceReq.changeKeyEnabled == true) {
                                        CheckCHANGE_KEY = "1";
                                        sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                                        if("".equals(sCSR))
                                        {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EMPTY;
                                        } else {
                                            String sKeySizeDB;
                                            boolean isValidCSR = false;
                                            boolean checkCSRNotExists = true;
                                            Config conf = new Config();
                                            String sIsCA = conf.GetTryPropertybyCode(Definitions.CONFIG_IS_WHICH_ABOUT_CA);
                                            if(!sIsCA.equals(Definitions.CONFIG_IS_WHICH_ABOUT_CA_VGCA)) {
                                                CERTIFICATION[][] rsCert = new CERTIFICATION[1][];
                                                db.S_BO_API_GET_ALGORITHM_KEY_SIZE(pCERTIFICATION_PROFILE_CODE, rsCert);
                                                if (rsCert[0].length > 0) {
                                                    sKeySizeDB = EscapeUtils.CheckTextNull(rsCert[0][0].KEY_SIZE);
                                                    String sKeySizeCSR = CommonFunction.getKeySizeFromCSR(sCSR);
                                                    isValidCSR = sKeySizeDB.equals(sKeySizeCSR);
                                                }
                                            } else {
                                                isValidCSR = true;
                                            }
                                            if(isValidCSR == false)
                                            {
                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_KEYSIZE;
                                            } else {
                                                String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                // call store cert Operation check exist sPublicKeyHard
                                                checkCSRNotExists = true;
                                                if(checkCSRNotExists == false) {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EXISTS;
                                                }
                                            }
                                        }
                                    } else {
                                        CheckCHANGE_KEY = "0";
                                    }
                                    boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                    if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                        pushNoticeEmail = "1";
                                    }
                                }
                            } else if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_CHANGEINFO)) {
                                if (booPrivateKeyEndbled_Old == true) {
                                    CheckPRIVATE_KEY = "1";
                                    if (raServiceReq.changeKeyEnabled == true) {
                                        CheckCHANGE_KEY = "1";
                                    } else {
                                        CheckCHANGE_KEY = "0";
                                    }
                                     boolean p12EmailCertServer = CommonFunction.getP12EmailEnabledCert(sCERT_POLICY_PROPERTIES);
                                    if (raServiceReq.p12EmailEnabled == true && p12EmailCertServer == true) {
                                        pushNoticeEmail = "1";
                                    }
                                    if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                        strPasswordP12 = EscapeUtils.CheckTextNull(raServiceReq.p12Password);
                                    } else {
                                        strPasswordP12 = CommonFunction.randomPasswordP12(8);
                                    }
                                } else {
                                    CheckPRIVATE_KEY = "0";
                                    if (raServiceReq.changeKeyEnabled == true) {
                                        sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                                        if("".equals(sCSR))
                                        {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EMPTY;
                                        } else {
                                            String sKeySizeDB;
                                            boolean isValidCSR = false;
                                            boolean checkCSRNotExists = true;
                                            Config conf = new Config();
                                            String sIsCA = conf.GetTryPropertybyCode(Definitions.CONFIG_IS_WHICH_ABOUT_CA);
                                            if(!sIsCA.equals(Definitions.CONFIG_IS_WHICH_ABOUT_CA_VGCA)) {
                                                CERTIFICATION[][] rsCert = new CERTIFICATION[1][];
                                                db.S_BO_API_GET_ALGORITHM_KEY_SIZE(pCERTIFICATION_PROFILE_CODE, rsCert);
                                                if (rsCert[0].length > 0) {
                                                    sKeySizeDB = EscapeUtils.CheckTextNull(rsCert[0][0].KEY_SIZE);
                                                    String sKeySizeCSR = CommonFunction.getKeySizeFromCSR(sCSR);
                                                    isValidCSR = sKeySizeDB.equals(sKeySizeCSR);
                                                }
                                            } else {
                                                isValidCSR = true;
                                            }
                                            if(isValidCSR == false) {
                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_KEYSIZE;
                                            } else {
                                                String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                // call store cert Operation check exist sPublicKeyHard
                                                checkCSRNotExists = true;
                                                if(checkCSRNotExists == false) {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EXISTS;
                                                }
                                            }
                                        }
                                    } else {
                                        CheckCHANGE_KEY = "0";
                                    }
                                    boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                    if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                        pushNoticeEmail = "1";
                                    }
                                }
                            } else if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION)) {
                                CheckPRIVATE_KEY = "1";
                                if (raServiceReq.changeKeyEnabled == true) {
                                    CheckCHANGE_KEY = "1";
                                    boolean p12EmailCertServer = CommonFunction.getP12EmailEnabledCert(sCERT_POLICY_PROPERTIES);
                                    if (raServiceReq.p12EmailEnabled == true && p12EmailCertServer == true) {
                                        pushNoticeEmail = "1";
                                    }
                                    if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                        strPasswordP12 = EscapeUtils.CheckTextNull(raServiceReq.p12Password);
                                    } else {
                                        strPasswordP12 = CommonFunction.randomPasswordP12(8);
                                    }
                                } else {
                                    CheckCHANGE_KEY = "0";
                                    CheckPRIVATE_KEY = "0";
                                    boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                    if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                        pushNoticeEmail = "1";
                                    }
                                }
                            } else if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REISSUE)) {
                                if (pPrivateKeyEnabled == true) {
                                    CheckCHANGE_KEY = "1";
                                    boolean p12EmailCertServer = CommonFunction.getP12EmailEnabledCert(sCERT_POLICY_PROPERTIES);
                                    if (raServiceReq.p12EmailEnabled == true && p12EmailCertServer == true) {
                                        pushNoticeEmail = "1";
                                    }
                                    if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                        strPasswordP12 = EscapeUtils.CheckTextNull(raServiceReq.p12Password);
                                    } else {
                                        strPasswordP12 = CommonFunction.randomPasswordP12(8);
                                    }
                                }
                            }
                        } else {
                            CheckCHANGE_KEY = "1";
                            CheckPRIVATE_KEY = "1";
                        }
                        //</editor-fold>

                        //<editor-fold defaultstate="collapsed" desc="### GET USER-FULLNAME">
                        String raFullname = "";
                        UserInfo[][] userDetail = new UserInfo[1][];
                        db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                        if (userDetail[0].length > 0) {
                            raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                        }
                        //</editor-fold>

                        //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR">
                        java.sql.Timestamp sSUSPEND_TIME_DB = null;
                        CERTIFICATION_DATA_ATTR tempLogReq;
                        ATTRIBUTE_VALUES valueATTR_Last;
                        // VALUE ATTR_FRIST
                        ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(sVALUE_OLD, ATTRIBUTE_VALUES.class);
                        boolean isKeepSN = false;
                        tempLogReq = valueATTR_Frist.getAttributeData().getCertificationData();
                        String sToken_Frist = valueATTR_Frist.getTokenSn();
                        boolean isRevokeSetOldStatus = valueATTR_Frist.getRevokeSetOldStatusEnabled();
                        String sPromotionDuration = valueATTR_Frist.getPromotionDuration();
                        String sTypeName_Frist = valueATTR_Frist.getTypeName();
                        if(sVALUE_OLD.contains(Definitions.CONFIG_POLICY_VALUE_CONTAIN_CERT_ATTR_KEEP_SN)) {
                            isKeepSN = valueATTR_Frist.getKeepCertificateSNEnabled();
                        }
                        String rsspAgreementUUID_Frist = valueATTR_Frist.getRsspAgreementUUID();
                        String rsspRelyingParty_Frist = valueATTR_Frist.getRsspRelyingParty();
                        String sCreateUser_Frist = valueATTR_Frist.getCreateUser();
                        Date sCreateDt_Frist = valueATTR_Frist.getCreateDt();
                        String sApproveUser_Frist = EscapeUtils.CheckTextNull(valueATTR_Frist.getApproveUser());
                        Date sApproveDt_Frist = valueATTR_Frist.getApproveDt();
                        sSUSPEND_TIME_DB = valueATTR_Frist.getSuspendedTime();
                        String idSUSPEND_REASON = valueATTR_Frist.getCerttificateSuspendReason();
                        String idCompromiseDate = "";
                        if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REVOKE)) {
                            idCERT_REVOCATION_REASON = valueATTR_Frist.getCerttificateRevokeReason();
                            idCERT_REVOCATION_CORE_REASON = valueATTR_Frist.getCerttificateRevokeEJBCAReason();
                            if (Integer.parseInt(idCERT_REVOCATION_CORE_REASON) == Definitions.CONFIG_CERTIFICATION_REVOKE_REASON_CACOMPROMISE_ID) {
                                idCompromiseDate = valueATTR_Frist.getCompromiseDate();
                            }
                        }
                        // VALUE ATTR_LAST
                        valueATTR_Last = new ATTRIBUTE_VALUES();
                        ATTRIBUTE_DATA dataATTR_Last = new ATTRIBUTE_DATA();
                        dataATTR_Last.setCertificationData(tempLogReq);
                        valueATTR_Last.setTokenSn(sToken_Frist);
                        valueATTR_Last.setPromotionDuration(sPromotionDuration);
                        valueATTR_Last.setKeepCertificateSNEnabled(isKeepSN);
                        if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)){
                            String sExpandParam = EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML);
                            if(!"".equals(sExpandParam)) {
                                if(sExpandParam.contains("setOldCertificateToOperated")) {
                                    ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                    isRevokeSetOldStatus = jsonReqExpand.setOldCertificateToOperated;
                                }
                            }
                        }
                        valueATTR_Last.setRevokeSetOldStatusEnabled(isRevokeSetOldStatus);
                        valueATTR_Last.setRsspAgreementUUID(rsspAgreementUUID_Frist);
                        valueATTR_Last.setRsspRelyingParty(rsspRelyingParty_Frist);
                        boolean sChangeKeyEnabled = "1".equals(CheckCHANGE_KEY);
                        valueATTR_Last.setChangeKeyEnabled(sChangeKeyEnabled);
                        if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REVOKE)) {
                            valueATTR_Last.setCerttificateRevokeReason(idCERT_REVOCATION_REASON);
                            valueATTR_Last.setCerttificateRevokeEJBCAReason(idCERT_REVOCATION_CORE_REASON);
                            valueATTR_Last.setCompromiseDate(idCompromiseDate);
                        }
                        valueATTR_Last.setCerttificateDeclineReason("");
                        valueATTR_Last.setTypeName(sTypeName_Frist);
                        valueATTR_Last.setCreateUser(sCreateUser_Frist);
                        valueATTR_Last.setCreateDt(sCreateDt_Frist);
                        if (!"".equals(sApproveUser_Frist)) {
                            valueATTR_Last.setApproveUser(sApproveUser_Frist);
                        } else {
                            valueATTR_Last.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                        }
                        if (sApproveDt_Frist != null) {
                            valueATTR_Last.setApproveDt(sApproveDt_Frist);
                        } else {
                            valueATTR_Last.setApproveDt(new Date());
                        }
                        valueATTR_Last.setAttributeData(dataATTR_Last);
                        //</editor-fold>

                        if (intLevelApprove == 1) {
                            raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                            if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING))
                            {
                                BRANCH[][] rsBranch;
                                rsBranch = new BRANCH[1][];
                                db.S_BO_BRANCH_DETAIL(String.valueOf(sBranchId_Cert), rsBranch);
                                if(rsBranch[0].length > 0) {
                                    String sLevelBranch = db.S_BO_API_GET_LEVEL_BY_BRANCH_CODE(EscapeUtils.CheckTextNull(rsBranch[0][0].NAME));
                                    if(!sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CA) && !sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CHILREN_ONE))
                                    {
                                        String sTreeBranchID = "";
                                        rsBranch = new BRANCH[1][];
                                        db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                                        if(rsBranch[0].length > 0) {
                                            for(BRANCH item : rsBranch[0]) {
                                                sTreeBranchID = sTreeBranchID + item.ID + ",";
                                            }
                                            sTreeBranchID = sTreeBranchID.substring(0, sTreeBranchID.lastIndexOf(","));
                                        }
                                        int intApprove = db.S_BO_CHECK_BRANCH_APPROVED(requestId, sBranchId_Cert, sTreeBranchID);
                                        if(intApprove == 1) {
                                            int approveChilrenID = 0;
                                            String approveChilrenUser = raServiceReq.approveUser;
                                            String approveChilrenFullname = raFullname;
                                            BACKOFFICE_USER[][] rsUserApprove;
                                            rsUserApprove = new BACKOFFICE_USER[1][];
                                            String roleUserID = "";
                                            db.S_BO_USER_DETAIL(String.valueOf(sUserId_Cert), "1", rsUserApprove);
                                            if(rsUserApprove[0].length > 0){
                                                roleUserID = String.valueOf(rsUserApprove[0][0].ROLE_ID);
                                            }
                                            if(roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN) || roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                approveChilrenID = rsUserApprove[0][0].ID;
                                                approveChilrenUser = rsUserApprove[0][0].USERNAME;
                                                approveChilrenFullname = rsUserApprove[0][0].FULL_NAME;
                                            } else {
                                                rsUserApprove = new BACKOFFICE_USER[1][];
                                                db.S_BO_USER_GET_BY_USERNAME(raServiceReq.approveUser, rsUserApprove);
                                                if(rsUserApprove[0].length > 0) {
                                                    approveChilrenID = rsUserApprove[0][0].ID;
                                                }
                                                rsUserApprove = new BACKOFFICE_USER[1][];
                                                db.S_BO_GET_USER_BRANCH_ALL(String.valueOf(sBranchId_Cert), rsUserApprove);
                                                if(rsUserApprove[0].length > 0) {
                                                    boolean isHasAdmin = false;
                                                    for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                        if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN)) {
                                                            isHasAdmin = true;
                                                            approveChilrenID = item.ID;
                                                            approveChilrenUser = item.USERNAME;
                                                            approveChilrenFullname = item.FULL_NAME;
                                                            break;
                                                        }
                                                    }
                                                    if(isHasAdmin == false){
                                                        for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                            if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                approveChilrenID = item.ID;
                                                                approveChilrenUser = item.USERNAME;
                                                                approveChilrenFullname = item.FULL_NAME;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            valueATTR_Last.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                            valueATTR_Last.setApproveUser(approveChilrenFullname + " (" + approveChilrenUser + ")");
                                            valueATTR_Last.setApproveDt(new Date());
                                            db.S_BO_CERTIFICATION_PRE_APPROVED_BY_LOW_LEVEL_BRANCH(requestId, CommonFunction.GenJSONTokenATTR(valueATTR_Last), raServiceReq.approveUser, approveChilrenID);
                                        }
                                    }
                                }

                                valueATTR_Last.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                if (!"".equals(sApproveUser_Frist)) {
                                    valueATTR_Last.setApproveUser(sApproveUser_Frist);
                                } else {
                                    valueATTR_Last.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                }
                                if (sApproveDt_Frist != null) {
                                    valueATTR_Last.setApproveDt(sApproveDt_Frist);
                                } else {
                                    valueATTR_Last.setApproveDt(new Date());
                                }
                                String sPRE_APPROVED = db.S_BO_CERTIFICATION_PRE_APPROVED(requestId, CommonFunction.GenJSONTokenATTR(valueATTR_Last),
                                        EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                if("0".equals(sPRE_APPROVED)) {
                                    if(raServiceReq.activationCodeEnabled == true) {
                                        if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                                            || (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM) && "".equals(sCSR))) {
                                            if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING)
                                                || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED)
                                                || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED)) {
                                                raServiceResp.activationCode = sActivationCode;
                                            }
                                        }
                                    }
                                    raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                }
                            }
                        }
                        if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                            if (intLevelApprove == 2) {
                                if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING)) {
                                    BRANCH[][] rsBranch;
                                    rsBranch = new BRANCH[1][];
                                    db.S_BO_BRANCH_DETAIL(String.valueOf(sBranchId_Cert), rsBranch);
                                    if(rsBranch[0].length > 0) {
                                        String sLevelBranch = db.S_BO_API_GET_LEVEL_BY_BRANCH_CODE(EscapeUtils.CheckTextNull(rsBranch[0][0].NAME));
                                        if(!sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CA) && !sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CHILREN_ONE))
                                        {
                                            String sTreeBranchID = "";
                                            rsBranch = new BRANCH[1][];
                                            db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                                            if(rsBranch[0].length > 0) {
                                                for(BRANCH item : rsBranch[0]) {
                                                    sTreeBranchID = sTreeBranchID + item.ID + ",";
                                                }
                                                sTreeBranchID = sTreeBranchID.substring(0, sTreeBranchID.lastIndexOf(","));
                                            }
                                            int intApprove = db.S_BO_CHECK_BRANCH_APPROVED(requestId, sBranchId_Cert, sTreeBranchID);
                                            if(intApprove == 1) {
                                                int approveChilrenID = 0;
                                                String approveChilrenUser = raServiceReq.approveUser;
                                                String approveChilrenFullname = raFullname;
                                                BACKOFFICE_USER[][] rsUserApprove;
                                                rsUserApprove = new BACKOFFICE_USER[1][];
                                                String roleUserID = "";
                                                db.S_BO_USER_DETAIL(String.valueOf(sUserId_Cert), "1", rsUserApprove);
                                                if(rsUserApprove[0].length > 0){
                                                    roleUserID = String.valueOf(rsUserApprove[0][0].ROLE_ID);
                                                }
                                                if(roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN) || roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                    approveChilrenID = rsUserApprove[0][0].ID;
                                                    approveChilrenUser = rsUserApprove[0][0].USERNAME;
                                                    approveChilrenFullname = rsUserApprove[0][0].FULL_NAME;
                                                } else {
                                                    rsUserApprove = new BACKOFFICE_USER[1][];
                                                    db.S_BO_USER_GET_BY_USERNAME(raServiceReq.approveUser, rsUserApprove);
                                                    if(rsUserApprove[0].length > 0) {
                                                        approveChilrenID = rsUserApprove[0][0].ID;
                                                    }
                                                    rsUserApprove = new BACKOFFICE_USER[1][];
                                                    db.S_BO_GET_USER_BRANCH_ALL(String.valueOf(sBranchId_Cert), rsUserApprove);
                                                    if(rsUserApprove[0].length > 0) {
                                                        boolean isHasAdmin = false;
                                                        for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                            if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN)) {
                                                                isHasAdmin = true;
                                                                approveChilrenID = item.ID;
                                                                approveChilrenUser = item.USERNAME;
                                                                approveChilrenFullname = item.FULL_NAME;
                                                                break;
                                                            }
                                                        }
                                                        if(isHasAdmin == false){
                                                            for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                    approveChilrenID = item.ID;
                                                                    approveChilrenUser = item.USERNAME;
                                                                    approveChilrenFullname = item.FULL_NAME;
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                valueATTR_Last.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                                valueATTR_Last.setApproveUser(approveChilrenFullname + " (" + approveChilrenUser + ")");
                                                valueATTR_Last.setApproveDt(new Date());
                                                db.S_BO_CERTIFICATION_PRE_APPROVED_BY_LOW_LEVEL_BRANCH(requestId, CommonFunction.GenJSONTokenATTR(valueATTR_Last), raServiceReq.approveUser, approveChilrenID);
                                            }
                                        }
                                    }
                                    valueATTR_Last.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                    if (!"".equals(sApproveUser_Frist)) {
                                        valueATTR_Last.setApproveUser(sApproveUser_Frist);
                                    } else {
                                        valueATTR_Last.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    }
                                    if (sApproveDt_Frist != null) {
                                        valueATTR_Last.setApproveDt(sApproveDt_Frist);
                                    } else {
                                        valueATTR_Last.setApproveDt(new Date());
                                    }
                                    db.S_BO_CERTIFICATION_PRE_APPROVED(requestId, CommonFunction.GenJSONTokenATTR(valueATTR_Last),
                                        EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                }
//                                String[] sUIDResult = new String[2];
//                                CommonReferServlet.collectFieldToUID(pTAX_CODE, pBUDGET_CODE, pDECISION, pP_ID, pPASSPORT, pCCCD, sUIDResult);
//                                String sEnterpriseCert = sUIDResult[0];
//                                String sPersonalCert = sUIDResult[1];
                                db.S_BO_CERTIFICATION_UPDATE(raServiceReq.certificateID, String.valueOf(sCertProfileID), "", "", "",
                                    "", "", "", "", "", "", "", "", "", CheckPRIVATE_KEY,
                                    EscapeUtils.CheckTextNull(raServiceReq.approveUser), "", sCSR, "", "", "", "", "", pEnterpriseDB, pPersonalDB);
                                if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REVOKE)) {
                                    //<editor-fold defaultstate="collapsed" desc="### REVOKE PROCESS">
                                    int intCheckDeleteRevoke = "1".equals(setDeleteOldCertificateEnabled) ? 1 : 0;
                                    if (CommonFunction.checkHardTokenOther(sPKIFormFactorCode) == true
                                        && !sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SMART_ID)
                                        && !sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_MOBILE_ID)) {
                                        intCheckDeleteRevoke = 0;
                                        CheckDeleteRevoke = false;
                                    } else {
                                        CheckDeleteRevoke = "1".equals(setDeleteOldCertificateEnabled);
                                    }
                                    valueATTR_Last.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                    valueATTR_Last.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    valueATTR_Last.setApproveCADt(new Date());
                                    valueATTR_Last.setCertRevokeDeleteInTokenEnabled(CheckDeleteRevoke);
                                    String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(requestId, CommonFunction.GenJSONTokenATTR(valueATTR_Last),
                                            EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                    if ("0".equals(sApprove)) {
                                        db.S_BO_CERTIFICATION_UPDATE_AMOUNT(raServiceReq.certificateID, "", pushNoticeEmail, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
//                                                    idCERT_REVOCATION_REASON = valueATTR_Frist.getCerttificateRevokeReason();
//                                                    idCERT_REVOCATION_CORE_REASON = valueATTR_Frist.getCerttificateRevokeEJBCAReason();
//                                                    if (Integer.parseInt(idCERT_REVOCATION_CORE_REASON) == Definitions.CONFIG_CERTIFICATION_REVOKE_REASON_CACOMPROMISE_ID) {
//                                                        idCompromiseDate = valueATTR_Frist.getCompromiseDate();
//                                                    }
                                        int[] intRes = new int[1];
                                        String[] sRes = new String[1];
                                        // input idCompromiseDate
                                        ConnectConnector.RevokeCertificate(sTokenSN_Old, pCERTIFICATION_SN, Integer.parseInt(idCERT_REVOCATION_CORE_REASON),
                                                pCERTIFICATION_AUTHORITY_CODE, idCompromiseDate, intRes, sRes, pCertificateId, requestId);
                                        if (intRes[0] == 0) {
                                            db.S_BO_CERTIFICATION_REVOKED(requestId, intCheckDeleteRevoke, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            //<editor-fold defaultstate="collapsed" desc="### REVOKE REASON UPDATE">
                                            objectMapper = new ObjectMapper();
                                            CERTIFICATION_COMMENT jsonCertComment = new CERTIFICATION_COMMENT();
                                            jsonCertComment.certificateDeclineReason = "";
                                            jsonCertComment.certificateSuspendReason = "";
                                            jsonCertComment.certificateRevokeReason = "";
                                            jsonCertComment.certificateApproveRemark = idCERT_APPROVE_REMARK;
                                            String sJsonComment = objectMapper.writeValueAsString(jsonCertComment);
                                            //db.S_BO_CERTIFICATION_UPDATE_REVOKED_REASON(String.valueOf(raServiceReq.certificateID), sJsonComment, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            db.S_BO_API_CERTIFICATION_UPDATE_REVOCATION_REASON(raServiceReq.certificateID, idCERT_REVOCATION_REASON, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                            db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", raServiceReq.certificateID, "", "",
                                                raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                            if (certInfo[0].length > 0) {
                                                raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                                raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                            }
                                            //</editor-fold>
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_REVOKE;
                                        }
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                    }
                                    //</editor-fold>
                                } else if(sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_PERMANENT_DISABLE)
                                    || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_TEMPORARY_DISABLE))
                                {
                                    //<editor-fold defaultstate="collapsed" desc="### SUSPEND PROCESS">
                                    valueATTR_Last.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                    valueATTR_Last.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    valueATTR_Last.setApproveCADt(new Date());
                                    String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(requestId, CommonFunction.GenJSONTokenATTR(valueATTR_Last),
                                            EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                    if ("0".equals(sApprove)) {
                                        int[] intRes = new int[1];
                                        String[] sRes = new String[1];
                                        // input idCompromiseDate
                                        ConnectConnector.RevokeCertificate(sTokenSN_Old, pCERTIFICATION_SN, Definitions.CONFIG_CERTIFICATION_REVOKE_REASON_CERTIFICATEHOLD_ID,
                                            pCERTIFICATION_AUTHORITY_CODE, "", intRes, sRes, pCertificateId, requestId);
                                        if (intRes[0] == 0) {
                                            objectMapper = new ObjectMapper();
                                            CERTIFICATION_COMMENT jsonCertComment = new CERTIFICATION_COMMENT();
                                            jsonCertComment.certificateDeclineReason = "";
                                            jsonCertComment.certificateRevokeReason = "";
                                            jsonCertComment.certificateSuspendReason = idSUSPEND_REASON;
                                            String pCOMMENT = objectMapper.writeValueAsString(jsonCertComment);
                                            db.S_BO_CERTIFICATION_DISABLE(String.valueOf(requestId), sSUSPEND_TIME_DB, pCOMMENT, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                            db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", raServiceReq.certificateID, "", "",
                                                raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                            if (certInfo[0].length > 0) {
                                                raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                                raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                            }
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_REVOKE;
                                        }
                                    }
                                    //</editor-fold>
                                } else if(sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RECOVERED))
                                {
                                    //<editor-fold defaultstate="collapsed" desc="### RECOVERED PROCESS">
                                    valueATTR_Last.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                    valueATTR_Last.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    valueATTR_Last.setApproveCADt(new Date());
                                    String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(requestId, CommonFunction.GenJSONTokenATTR(valueATTR_Last),
                                            EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                    if ("0".equals(sApprove)) {
                                        int[] intRes = new int[1];
                                        String[] sRes = new String[1];
                                        ConnectConnector.RevokeCertificate(sTokenSN_Old, pCERTIFICATION_SN, Definitions.CONFIG_CERTIFICATION_REVOKE_REASON_REMOVEFROMCRL_ID,
                                            pCERTIFICATION_AUTHORITY_CODE, "", intRes, sRes, pCertificateId, requestId);
                                        if (intRes[0] == 0) {
                                            db.S_BO_CERTIFICATION_RECOVERED(String.valueOf(requestId), EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                            db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", raServiceReq.certificateID, "", "",
                                                raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                            if (certInfo[0].length > 0) {
                                                raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                                raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                            }
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_REVOKE;
                                        }
                                    }
                                    //</editor-fold>
                                } else if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REISSUE)) {
                                    if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                                        || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                        valueATTR_Last.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                        valueATTR_Last.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                        valueATTR_Last.setApproveCADt(new Date());
                                        boolean boRevokeOldCertificate = "1".equals(setRevokeOldCertificateEnabled);
                                        valueATTR_Last.setRevokeOldCertificateEnabled(boRevokeOldCertificate);
                                        String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(requestId, CommonFunction.GenJSONTokenATTR(valueATTR_Last), EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                        if ("0".equals(sApprove)) {
                                            String pushNoticeEnabled = "0";
                                            boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                            if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                                pushNoticeEnabled = "1";
                                            }
                                            db.S_BO_CERTIFICATION_UPDATE_AMOUNT(raServiceReq.certificateID, "", pushNoticeEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            if ("1".equals(pushNoticeEnabled)) {
                                                int[] intRes = new int[1];
                                                String[] sRes = new String[1];
                                                ConnectConnector.SendMailOTP(String.valueOf(raServiceReq.certificateID), intRes, sRes);
                                            }
                                            //<editor-fold defaultstate="collapsed" desc="### REVOKE REASON UPDATE">
                                            objectMapper = new ObjectMapper();
                                            CERTIFICATION_COMMENT jsonCertComment = new CERTIFICATION_COMMENT();
                                            jsonCertComment.certificateDeclineReason = "";
                                            jsonCertComment.certificateSuspendReason = "";
                                            jsonCertComment.certificateRevokeReason = "";
                                            jsonCertComment.certificateApproveRemark = idCERT_APPROVE_REMARK;
                                            String sJsonComment = objectMapper.writeValueAsString(jsonCertComment);
//                                            db.S_BO_CERTIFICATION_UPDATE_REVOKED_REASON(String.valueOf(raServiceReq.certificateID), idCERT_REVOCATION_REASON, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            db.S_BO_API_CERTIFICATION_UPDATE_REVOCATION_REASON(raServiceReq.certificateID, idCERT_REVOCATION_REASON, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            //</editor-fold>

                                            //<editor-fold defaultstate="collapsed" desc="### SET LOST STATE of TOKEN">
                                            if (!sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SN_LOST)) {
                                                TOKEN[][] rsToken_OLD = new TOKEN[1][];
                                                int sTOKEN_STATE_ID_OLD = 0;
                                                String sTOKEN_SN_OLD = "";
                                                db.S_BO_TOKEN_DETAIL(String.valueOf(sTokenId_Old), rsToken_OLD);
                                                if (rsToken_OLD[0].length > 0) {
                                                    sTOKEN_STATE_ID_OLD = rsToken_OLD[0][0].TOKEN_STATE_ID;
                                                    sTOKEN_SN_OLD = EscapeUtils.CheckTextNull(rsToken_OLD[0][0].TOKEN_SN);
                                                }
                                                if (sTOKEN_STATE_ID_OLD != Definitions.CONFIG_TOKEN_STATE_ID_LOST) {
                                                    int[] System_Log_ID_Token = new int[1];
                                                    System_Log_ID_Token[0] = 0;
                                                    String[] System_Log_BillCode_Token = new String[1];
                                                    TOKEN_CHANGE_LOG tempLogReqToken = new TOKEN_CHANGE_LOG();
                                                    tempLogReqToken.setTOKEN_SN(sTOKEN_SN_OLD);
                                                    tempLogReqToken.setIS_LOST("True");
                                                    String strTokenReq = CommonFunction.GenJSONTokenLog(tempLogReqToken);
                                                    db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA,
                                                            Definitions.CONFIG_LOG_SOURCE_API_RA, sTOKEN_SN_OLD, "",
                                                            Definitions.CONFIG_LOG_FUNCTIONALITY_PERMANENT_INITIALZED, strTokenReq,
                                                            EscapeUtils.CheckTextNull(raServiceReq.approveUser), System_Log_ID_Token,
                                                            sIP_Request, System_Log_BillCode_Token);
                                                    ATTRIBUTE_VALUES valueATTR_TOKEN;
                                                    valueATTR_TOKEN = new ATTRIBUTE_VALUES();
                                                    valueATTR_TOKEN.setTokenSn(sTOKEN_SN_OLD);
                                                    valueATTR_TOKEN.setTypeName(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_PERMANENT_INITIALZED);
                                                    valueATTR_TOKEN.setRequestState(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_APPROVED);
                                                    valueATTR_TOKEN.setCreateUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                    valueATTR_TOKEN.setCreateDt(new Date());
                                                    valueATTR_TOKEN.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                    valueATTR_TOKEN.setApproveDt(new Date());
                                                    String strReqTokenATTR = CommonFunction.GenJSONTokenATTR(valueATTR_TOKEN);
                                                    // VALUE ATTR
                                                    int intTOKEN_ATTR_STATE = Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_APPROVED);
                                                    db.S_BO_TOKEN_ATTR_INSERT(sTokenId_Old, Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_PERMANENT_INITIALZED,
                                                            intTOKEN_ATTR_STATE, strReqTokenATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                    db.S_BO_TOKEN_UPDATE(sTokenId_Old,
                                                            String.valueOf(Definitions.CONFIG_TOKEN_STATE_ID_LOST), "", "", "", "",
                                                            EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                    if (System_Log_ID_Token[0] != 0) {
                                                        RESPONSE_CODE[][] rsResponse = new RESPONSE_CODE[1][];
                                                        db.S_BO_RESPONSE_CODE_DETAIL(String.valueOf(Definitions.CONFIG_RESPONSE_CODE_ID_SUCCESS), rsResponse);
                                                        RESPONSE_LOG tempLogRes = new RESPONSE_LOG();
                                                        tempLogRes.ResponseCode = rsResponse[0][0].NAME;
                                                        tempLogRes.ResponseMessage = rsResponse[0][0].REMARK;
                                                        db.S_BO_SYSTEM_LOG_UPDATE(System_Log_ID_Token[0], rsResponse[0][0].NAME,
                                                                objectMapper.writeValueAsString(tempLogRes), "", EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                    }
                                                }
                                            }
                                            //</editor-fold>

                                            raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                        }
                                    } else if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                        || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD))
                                    {
                                        if ("1".equals(CheckPRIVATE_KEY)) {
                                            valueATTR_Last.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                            valueATTR_Last.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                            valueATTR_Last.setApproveCADt(new Date());
                                            boolean boRevokeOldCertificate = "1".equals(setRevokeOldCertificateEnabled);
                                            valueATTR_Last.setRevokeOldCertificateEnabled(boRevokeOldCertificate);
                                            String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(requestId, CommonFunction.GenJSONTokenATTR(valueATTR_Last), EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            if ("0".equals(sApprove)) {
                                                db.S_BO_CERTIFICATION_SOFTTOKEN_REISSUE(requestId, raServiceReq.approveUser);
                                                int[] intRes = new int[1];
                                                String[] sRes = new String[1];
                                                boolean isSendMailP12 = false;
                                                if("1".equals(pushNoticeEmail)) {
                                                    isSendMailP12 = true;
                                                }
                                                byte[] sP12Return = ConnectConnector.generateKeystore(strPasswordP12, isSendMailP12, String.valueOf(raServiceReq.certificateID), intRes, sRes);
                                                raServiceResp.p12Certificate = sP12Return;
                                            } else {
                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                            }
                                            if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                                if (!"".equals(strPasswordP12)) {
                                                    raServiceResp.p12Password = strPasswordP12;
                                                }
                                            }
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
                                        }
                                    }
                                } else if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION)
                                    || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_COMPENSATION)
                                    || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RENEWAL)
                                    || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_BUY_MORE)
                                    || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_CHANGEINFO)) {
                                    //<editor-fold defaultstate="collapsed" desc="### REGISTER-RENEAWL-CHANGEINFO PROCESS">
                                    if (CommonFunction.checkHardTokenOther(sPKIFormFactorCode) == true
                                        && !sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SMART_ID)
                                        && !sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_MOBILE_ID)
                                        && !sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                        setDeleteOldCertificateEnabled = "0";
                                    }
                                    if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION)) {
                                        setDeleteOldCertificateEnabled = "0";
                                    }
                                    valueATTR_Last.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                    valueATTR_Last.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    valueATTR_Last.setApproveCADt(new Date());
                                    boolean boDeleteOldCertificate = "1".equals(setDeleteOldCertificateEnabled);
                                    valueATTR_Last.setDeleteOldCertificateEnabled(boDeleteOldCertificate);
                                    boolean boRevokeOldCertificate = "1".equals(setRevokeOldCertificateEnabled);
                                    valueATTR_Last.setRevokeOldCertificateEnabled(boRevokeOldCertificate);
                                    //<editor-fold defaultstate="collapsed" desc="### UPDATE EFFECCTIVE_DT">
                                    if("1".equals(checkChangeEffectiveDT)) {
                                        /*if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION))
                                        {
                                            String sEffectiveTime = EscapeUtils.CheckTextNull(raServiceReq.effectiveTime);
                                            if(!"".equals(sEffectiveTime)) {
                                                if(CommonFunction.checkDatePatternValid(sEffectiveTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                                    if(CommonFunction.checkDateAddDayCurrent(sEffectiveTime, Integer.parseInt(dayChangeEffectiveDT), Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                                        if(CommonFunction.checkDateBiggerRequest(pCREATE_DT_SRV, sEffectiveTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                                        } else {
                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                                                        }
                                                    } else {
                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                                                    }
                                                } else {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                                                }
                                            }
                                        } else if(sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RENEWAL))
                                        {
                                            String sEffectiveTime = EscapeUtils.CheckTextNull(raServiceReq.effectiveTime);
                                            if(!"".equals(sEffectiveTime)) {
                                                if(!"".equals(pEXPIRATION_DT_OLD)) {
                                                    boolean checkValidExpiration = CommonFunction.checkDateBiggerCurrent(pEXPIRATION_DT_OLD, Definitions.CONFIG_DATETIME_FORMAT_DDMMYYYYHHMMSS);
                                                    if(checkValidExpiration == false) {
                                                        if(CommonFunction.checkDatePatternValid(sEffectiveTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                                            if(CommonFunction.checkDateAddDayCurrent(sEffectiveTime, Integer.parseInt(dayChangeEffectiveDT), Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                                            } else {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                                                            }
                                                        } else {
                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                                                        }
                                                    } else {
                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                                                    }
                                                } else {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                                                }
                                            }
                                        }*/
                                    }
                                    //</editor-fold>

                                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
                                    {
                                        String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(requestId, CommonFunction.GenJSONTokenATTR(valueATTR_Last), EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                        if ("0".equals(sApprove)) {
                                            //<editor-fold defaultstate="collapsed" desc="### UPDATE EFFECCTIVE_DT">
                                            if("1".equals(checkChangeEffectiveDT)) {
                                                /*if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION)
                                                    || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RENEWAL))
                                                {
                                                    String sEffectiveTime = EscapeUtils.CheckTextNull(raServiceReq.effectiveTime);
                                                    if(!"".equals(sEffectiveTime)) {
                                                        java.sql.Timestamp pEFFECTIVE_DT_REQ = CommonFunction.ConvertStringToTimeStamp(sEffectiveTime);
                                                        db.S_BO_CERTIFICATION_UPDATE_DURATION(raServiceReq.certificateID, 0, pEFFECTIVE_DT_REQ, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                    }
                                                }*/
                                            }
                                            //</editor-fold>

                                            if(raServiceReq.activationCodeEnabled == true) {
                                                if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                                                    || (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM) && "".equals(sCSR))) {
                                                    if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING)
                                                        || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED)
                                                        || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED))
                                                    {
                                                        raServiceResp.activationCode = sActivationCode;
                                                    }
                                                }
                                            }
                                            // DISCOUNT RATE
                                            if ("1".equals(sDiscountRateOption)) {
                                                if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION)
                                                    || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RENEWAL)) {
                                                    CommonReferServlet.updateDiscountRate(String.valueOf(raServiceReq.certificateID),
                                                       String.valueOf(sBranchId_Cert), String.valueOf(sCertProfileID),
                                                       "", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.approveUser),
                                                       "", "", pEnterpriseDB, pPersonalDB);
                                                }
                                            }
                                            // SET COMMIT_ENABLED TRUE of FILE
                                            if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION)) {
                                                String[] pRESPONSE_CODE_NAME = new String[1];
                                                db.S_BO_API_CERTIFICATION_SUPPLEMENT_FILE(requestId, raServiceReq.approveUser, pRESPONSE_CODE_NAME);
                                            }
                                            db.S_BO_CERTIFICATION_UPDATE_AMOUNT(raServiceReq.certificateID, "", pushNoticeEmail, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                                                || (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM) && "".equals(sCSR))) {
                                                raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                if(sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RENEWAL))
                                                {
                                                    // transfer token to agency
                                                    if("0".equals(sNoAllowTranferToken)) {
                                                        int sBranchId_Old = 0;
                                                        CERTIFICATION[][] rsPastCert = new CERTIFICATION[1][];
                                                        db.S_BO_CERTIFICATION_DETAIL(String.valueOf(pPAST_CERTIFICATE_ID), String.valueOf(raServiceReq.language), rsPastCert);
                                                        if (rsPastCert[0].length > 0) {
                                                            sBranchId_Old = rsPastCert[0][0].BRANCH_ID;
                                                        }
                                                        if(sBranchId_Cert != sBranchId_Old) {
                                                            db.S_BO_TOKEN_UPDATE_BRANCH(String.valueOf(sTokenId_Old), String.valueOf(sBranchId_Cert), raServiceReq.approveUser);
                                                        }
                                                    }
                                                }
                                                if(sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RENEWAL)
                                                    || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_CHANGEINFO))
                                                {
                                                    if(CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true && "0".equals(CheckCHANGE_KEY) && "0".equals(CheckPRIVATE_KEY)) {
                                                        if("1".equals(sApproveCertNoChangeKey)) {
                                                            int[] intWSRes = new int[1];
                                                            String[] sWSRes = new String[1];
                                                            ConnectConnector.EnrollCertificate(sTOKEN_SN, "", String.valueOf(requestId), intWSRes, sWSRes);
                                                            if (intWSRes[0] == 0) {
                                                                CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", raServiceReq.certificateID, "", "",
                                                                    raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                                if (certInfo[0].length > 0) {
                                                                    raServiceResp.certificate = certInfo[0][0].certificate;
                                                                    raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                                    raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                                                    raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                                }
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                            } else {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                                            }
                                                        } else {
                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                        }
                                                    } else {
                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                    }
                                                } else if(sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_COMPENSATION)) {
                                                    if("0".equals(CheckCHANGE_KEY)) {
                                                        int[] intWSRes = new int[1];
                                                        String[] sWSRes = new String[1];
                                                        ConnectConnector.EnrollCertificate(sTOKEN_SN, "", String.valueOf(requestId), intWSRes, sWSRes);
                                                        if (intWSRes[0] == 0) {
                                                            CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                            db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", raServiceReq.certificateID, "", "",
                                                                raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                            if (certInfo[0].length > 0) {
                                                                raServiceResp.certificate = certInfo[0][0].certificate;
                                                                raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                                raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                                                raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                            }
                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                        } else {
                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                                        }
                                                    }
                                                } else {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                }
                                                if(sTokenId_Old == Definitions.CONFIG_TOKEN_UNASSIGN_ID)
                                                {
                                                    if ("1".equals(pushNoticeEmail)) {
                                                        int[] intRes = new int[1];
                                                        String[] sRes = new String[1];
                                                        ConnectConnector.SendMailOTP(String.valueOf(raServiceReq.certificateID), intRes, sRes);
                                                    }
                                                }
                                            } else if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                                || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)
                                                || (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM) && !"".equals(sCSR))) {
                                                // RACONNECTOR APPROVE
                                                if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM) && !"".equals(sCSR)) {
                                                    db.S_BO_API_SIM_CERTIFICATION_GENERATED(requestId, sCSR,
                                                        CommonFunction.GenJSONTokenATTR(valueATTR_Last), sTOKEN_SN, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                }
                                                int[] intWSRes = new int[1];
                                                String[] sWSRes = new String[1];
                                                ConnectConnector.EnrollCertificate(sTokenSN_Old, strPasswordP12, String.valueOf(requestId), intWSRes, sWSRes);
                                                if (intWSRes[0] == 0) {
                                                    int[] pRESPONSE_CODE_RETURN = new int[1];
                                                    CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                    db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", raServiceReq.certificateID, "", "",
                                                        raServiceReq.language, pRESPONSE_CODE_RETURN, certInfo, "", "", "", "");
                                                    if (certInfo[0].length > 0) {
                                                        raServiceResp.certificate = certInfo[0][0].certificate;
                                                        raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                        raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                    }
                                                    if(!"".equals(strPasswordP12)) {
                                                        int[] intRes = new int[1];
                                                        String[] sRes = new String[1];
                                                        byte[] sP12Return = ConnectConnector.generateKeystore(strPasswordP12, false, String.valueOf(raServiceReq.certificateID), intRes, sRes);
                                                        raServiceResp.p12Certificate = sP12Return;
                                                    }
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                } else {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                                }
                                            }
                                            //<editor-fold defaultstate="collapsed" desc="### REVOKE REASON UPDATE">
                                            objectMapper = new ObjectMapper();
                                            CERTIFICATION_COMMENT jsonCertComment = new CERTIFICATION_COMMENT();
                                            jsonCertComment.certificateDeclineReason = "";
                                            jsonCertComment.certificateSuspendReason = "";
                                            jsonCertComment.certificateRevokeReason = "";
                                            jsonCertComment.certificateApproveRemark = idCERT_APPROVE_REMARK;
                                            idCERT_REVOCATION_REASON = objectMapper.writeValueAsString(jsonCertComment);
                                            db.S_BO_CERTIFICATION_UPDATE_REVOKED_REASON(String.valueOf(raServiceReq.certificateID), idCERT_REVOCATION_REASON, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
//                                            db.S_BO_API_CERTIFICATION_UPDATE_REVOCATION_REASON(raServiceReq.certificateID, idCERT_APPROVE_REMARK, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            //</editor-fold>
                                        } else if("99".equals(sApprove))
                                        {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_USERNAME_BY_INVALID;
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                        }
                                    }
                                    //</editor-fold>
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
                                }
                            }
                        }
                    }
                }
                //</editor-fold>
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### activationCertificateProcess">
    public void activationCertificateProcess(String sCERT_POLICY_PROPERTIES, String pPARENT_ID, int pBRANCH_ID, String pBeneficiaryUserDefault,
        String pApproveCAUser, boolean  autoApproveCAServer, int[] System_Log_ID, String[] System_Log_BillCode,
        String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_ACTIVATION_CERTIFICATION;
        String sTOKEN_SN = "";
        ObjectMapper objectMapper;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA,
            Definitions.CONFIG_LOG_SOURCE_API_RA, sTOKEN_SN, "", sFunctionWS, objectMapper.writeValueAsString(raReqTemp),
            pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE">
            int requestId = 0;
            int[] pRESPONSE_CODE = new int[1];
            String sVALUE_OLD = "";
            String sRequestStateCode = "";
            String sRequestTypeCode = "";
            String sPKIFormFactorCode = "";
            //String sActivation = EscapeUtils.CheckTextNull(raServiceReq.activationCode);
            /*if(!"".equals(sActivation)) {
                if(!"".equals(sICCID)) {
                    int checkAC = db.S_BO_API_TOKENSIM_ACTIVATION(sICCID, sActivation, pBeneficiaryUserDefault, pCERTIFICATION_ID, pCERTIFICATION_ATTR_ID);
                    if(checkAC == 3 || checkAC == 4) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACTIVATION_CODE_INVALID;
                    } else if(checkAC == 5) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACTIVATION_CODE_EXPIRE;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ICCID_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACTIVATION_CODE_INVALID;
            }*/
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                CertificateInfo[][] rsReq = new CertificateInfo[1][];
                String sActiveCode = EscapeUtils.CheckTextNull(raServiceReq.activationCode);
                if(raServiceReq.certificateID != 0 && !"".equals(sActiveCode)) {
                    db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", raServiceReq.certificateID, "", "", raServiceReq.language, pRESPONSE_CODE, rsReq, "", "", "", "");
                    if (rsReq[0].length > 0) {
                        requestId = rsReq[0][0].requestId;
                        sRequestStateCode = rsReq[0][0].requestStateCode;
                        sRequestTypeCode = rsReq[0][0].requestTypeCode;
                        int pCERTIFICATE_STATE_ID = rsReq[0][0].certificateStateId;
                        sPKIFormFactorCode = rsReq[0][0].formFactorCode;
                        sVALUE_OLD = rsReq[0][0].value;
                        if (pCERTIFICATE_STATE_ID != 0 && pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_NEW) {
                            if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED)
                                && sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION)
                                && rsReq[0][0].tokenSN.equals(Definitions.CONFIG_TOKEN_UNASSIGN_SN))
                            {
                                if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)
                                    || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD))
                                {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                    if(!rsReq[0][0].activationCode.equals(sActiveCode)) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACTIVATION_CODE_INVALID;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                            }
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
                }
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CLOSE - CHECK BRANCH">
            /*if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
                }
            }*/
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                //<editor-fold defaultstate="collapsed" desc="### ISSUE CERT">
                if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                    sTOKEN_SN = Definitions.CONFIG_TOKEN_SN_FORMFACTOR_ESIGNCLOUD;
                } else {
                    sTOKEN_SN = EscapeUtils.CheckTextNull(raServiceReq.iccid);
                }
                String sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                String sExpandFutureParamXML = EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML);
                if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                    if("".equals(sCSR) || "".equals(sExpandFutureParamXML) || "".equals(sTOKEN_SN)) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                    }
                } else {
                    if("".equals(sCSR) || "".equals(sTOKEN_SN)) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                    }
                }
                
                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    //<editor-fold defaultstate="collapsed" desc="### GET USER-FULLNAME">
                    String raFullname = "";
                    UserInfo[][] userDetail = new UserInfo[1][];
                    db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                    if (userDetail[0].length > 0) {
                        raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                    }
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR">
                    ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(sVALUE_OLD, ATTRIBUTE_VALUES.class);
                    ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandFutureParamXML, ServiceRequestExpand.class);
                    String sRsspAgreementUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspAgreementUUID);
                    String sRsspRelyingParty = EscapeUtils.CheckTextNull(jsonReqExpand.rsspRelyingParty);
                    String sRsspCertificateUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspCertificateUUID);
                    String sRsspConnectWSMode = EscapeUtils.CheckTextNull(jsonReqExpand.rsspConnectWSMode);
                    if(!"".equals(sRsspAgreementUUID)) {
                        valueATTR_Frist.setRsspAgreementUUID(sRsspAgreementUUID);
                    }
                    if(!"".equals(sRsspRelyingParty)) {
                        valueATTR_Frist.setRsspRelyingParty(sRsspRelyingParty);
                    }
                    if(!"".equals(sRsspCertificateUUID)) {
                        valueATTR_Frist.setRsspCertificateUUID(sRsspCertificateUUID);
                    }
                    if(!"".equals(sRsspConnectWSMode)) {
                        valueATTR_Frist.setRsspConnectWSMode(sRsspConnectWSMode);
                    }
                    if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                        valueATTR_Frist.setTokenSn(sTOKEN_SN);
                    }
                    //</editor-fold>

                    int sUpdateCSR = db.S_BO_API_SIM_CERTIFICATION_GENERATED(requestId, sCSR,
                        CommonFunction.GenJSONTokenATTR(valueATTR_Frist), sTOKEN_SN, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                    if(sUpdateCSR == 0) {
                        raServiceResp.certificateID = raServiceReq.certificateID;
                        int[] intWSRes = new int[1];
                        String[] sWSRes = new String[1];
                        ConnectConnector.EnrollCertificate(sTOKEN_SN, "", String.valueOf(requestId), intWSRes, sWSRes);
                        if (intWSRes[0] == 0) {
                            CertificateInfo[][] certInfo = new CertificateInfo[1][];
                            db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", raServiceReq.certificateID, "", "",
                                raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                            if (certInfo[0].length > 0) {
                                raServiceResp.certificate = certInfo[0][0].certificate;
                                raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                            }
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                        }
                    } else {
                        raServiceResp.responseCode = sUpdateCSR;
                    }
                }
                //</editor-fold>
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### generateCertificateProcess">
    public void  generateCertificateProcess(String sCERT_POLICY_PROPERTIES, String pPARENT_ID, int pBRANCH_ID, String pBeneficiaryUserDefault,
        String pApproveCAUser, boolean  autoApproveCAServer, int[] System_Log_ID, String[] System_Log_BillCode,
        String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GENERATE_CERTIFICATION;
        String sTOKEN_SN = "";
        ObjectMapper objectMapper;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA,
            Definitions.CONFIG_LOG_SOURCE_API_RA, sTOKEN_SN, "", sFunctionWS, objectMapper.writeValueAsString(raReqTemp),
            pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE">
            int requestId = 0;
            int[] pRESPONSE_CODE = new int[1];
            String sVALUE_OLD = "";
            String sRequestStateCode = "";
            String sRequestTypeCode = "";
            String sPKIFormFactorCode = "";
            String sCertProfileCode = "";
            String valueATTR_Frist = "";
            String sEnterpriseID = "";
            String sPersonalID = "";
            String certificatePurposeCode = "";
            String emailContact = "";
            String sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                CertificateInfo[][] rsReq = new CertificateInfo[1][];
                if(raServiceReq.certificateID != 0 && !"".equals(sCSR)) {
                    db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", raServiceReq.certificateID, "", "", raServiceReq.language, pRESPONSE_CODE, rsReq, "", "", "", "");
                    if (rsReq[0].length > 0) {
                        requestId = rsReq[0][0].requestId;
                        emailContact = rsReq[0][0].emailContact;
                        sRequestStateCode = rsReq[0][0].requestStateCode;
                        sEnterpriseID = rsReq[0][0].enterpriseID;
                        sPersonalID = rsReq[0][0].personalID;
                        sRequestTypeCode = rsReq[0][0].requestTypeCode;
                        certificatePurposeCode = rsReq[0][0].certificatePurposeCode;
                        int pCERTIFICATE_STATE_ID = rsReq[0][0].certificateStateId;
                        sPKIFormFactorCode = rsReq[0][0].formFactorCode;
                        sCertProfileCode = rsReq[0][0].certificateProfileCode;
                        valueATTR_Frist = rsReq[0][0].value;
                        sVALUE_OLD = rsReq[0][0].value;
                        if (pCERTIFICATE_STATE_ID != 0 && pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_NEW) {
                            if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED)
                                && rsReq[0][0].tokenSN.equals(Definitions.CONFIG_TOKEN_SIGNSERVER_SN)
                                && sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN))
                            {
                                if(sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION)
                                    || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_RENEWAL)
                                    || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_CHANGEINFO)
                                    || sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REISSUE))
                                {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                            }
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
                }
            }
            //</editor-fold>
            
            //<editor-fold defaultstate="collapsed" desc="CSR CHECK">
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                String sKeySizeDB;
                boolean isValidCSR = false;
                CERTIFICATION[][] rsCert = new CERTIFICATION[1][];
                db.S_BO_API_GET_ALGORITHM_KEY_SIZE(sCertProfileCode, rsCert);
                if (rsCert[0].length > 0) {
                    sKeySizeDB = EscapeUtils.CheckTextNull(rsCert[0][0].KEY_SIZE);
                    String sKeySizeCSR = CommonFunction.getKeySizeFromCSR(sCSR);
                    isValidCSR = sKeySizeDB.equals(sKeySizeCSR);
                }
                if(isValidCSR == false) {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_KEYSIZE;
                }
                
                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    int pCERTIFICATION_OWNER_TYPE_ID=0;
                    if(!certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_PERSONAL_GOV)
                        && !certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV)
                        && !certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                        && !certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                        && !certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                        && !certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN)
                        && !certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)) {
                        if(!"".equals(sEnterpriseID) && "".equals(sPersonalID)) {
                            pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_ENTERPRISE;
                        }
                        if("".equals(sEnterpriseID) && !"".equals(sPersonalID)) {
                            pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_PERSONAL;
                        }
                        if(!"".equals(sEnterpriseID) && !"".equals(sPersonalID)) {
                            pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_PERSONAL;
                        }
                    } else {
                        if(certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV)) {
                            pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_ENTERPRISE_GOV;
                        } else {
                            pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_PERSONAL_GOV;
                        }
                    }
                    String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
                    int checkPublicKey = db.S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH(pCERTIFICATION_OWNER_TYPE_ID, sEnterpriseID,
                        sPersonalID, emailContact, sPublicKeyHard, 0);
                    if(checkPublicKey == 0) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EXISTS;
                    }
                }
                
            }
            //</editor-fold>
            
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                //<editor-fold defaultstate="collapsed" desc="### ISSUE CERT">
//                if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
//                    sTOKEN_SN = Definitions.CONFIG_TOKEN_SN_FORMFACTOR_ESIGNCLOUD;
//                } else {
//                    sTOKEN_SN = EscapeUtils.CheckTextNull(raServiceReq.iccid);
//                }
//                String sExpandFutureParamXML = EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML);
//                if("".equals(sCSR) || "".equals(sExpandFutureParamXML) || "".equals(sTOKEN_SN)) {
//                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
//                }
                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    //<editor-fold defaultstate="collapsed" desc="### GET USER-FULLNAME CLOSE">
//                    String raFullname = "";
//                    UserInfo[][] userDetail = new UserInfo[1][];
//                    db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
//                    if (userDetail[0].length > 0) {
//                        raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
//                    }
                    //</editor-fold>
                    
                    ConnectDbPhaseTwo dbTwo = new ConnectDbPhaseTwo();
                    int sUpdateCSR = dbTwo.S_BO_API_PARTNER_CERTIFICATION_GENERATED(requestId, sCSR,
                        valueATTR_Frist, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                    if(sUpdateCSR == 0) {
                        raServiceResp.certificateID = raServiceReq.certificateID;
                        int[] intWSRes = new int[1];
                        String[] sWSRes = new String[1];
                        ConnectConnector.EnrollCertificate(sTOKEN_SN, "", String.valueOf(requestId), intWSRes, sWSRes);
                        if (intWSRes[0] == 0) {
                            CertificateInfo[][] certInfo = new CertificateInfo[1][];
                            db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", raServiceReq.certificateID, "", "",
                                raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                            if (certInfo[0].length > 0) {
                                raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                if(EscapeUtils.CheckTextNull(raServiceReq.certificateFormatType).equals("CERT")){
                                    byte[] sXML = DatatypeConverter.parseBase64Binary(certInfo[0][0].certificate);
                                    raServiceResp.byteCertificate = sXML;
                                } else {
                                    raServiceResp.certificate = certInfo[0][0].certificate;
                                }
                            }
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                        }
                    } else {
                        raServiceResp.responseCode = sUpdateCSR;
                    }
                }
                //</editor-fold>
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### reissueCertificateProcess">
    public void reissueCertificateProcess(String sCERT_POLICY_PROPERTIES, String pPARENT_ID, int pBRANCH_ID, String pBeneficiaryUserDefault,
        String pApproveCAUser, boolean  autoApproveCAServer, int[] System_Log_ID, String[] System_Log_BillCode,
        String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_REISSUE_CERTIFICATION;
        boolean autoApproveCAClient = raServiceReq.approveEnabled;
        String sTOKEN_SN_NEW = Definitions.CONFIG_TOKEN_UNASSIGN_SN;
        ObjectMapper objectMapper;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", EscapeUtils.CheckTextNull(raReqTemp.certificateSN),
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN))) {
                String CheckCHANGE_KEY = "";
                String CheckPRIVATE_KEY = "";
                //<editor-fold defaultstate="collapsed" desc="### GET POLICY">
                GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
                db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
                // GEN OTP
                int intOTPNumn = 8;
                String sNoAllowTranferToken = "1";
                String setRevokeOldCertificateEnabled = "1";
                String checkChangeEffectiveDT = "0";
                if (rsPolicy[0].length > 0) {
                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_FO_DEFAULT_ACTIVATION_CODE_LENGTH)) {
                            intOTPNumn = Integer.parseInt(rsPolicy1.VALUE);
                        }
                        if(rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_OPTION_FOR_CHANGING_EFFECTIVE_DT)) {
                            checkChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_NO_AUTO_MOVE_TOKEN_FOR_RENEWAL_REVISION_CERTIFICATE_REQUEST)) {
                            sNoAllowTranferToken = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                    }
                }
                if(raServiceReq.revokeOldCertificateEnabled == false) {
                    setRevokeOldCertificateEnabled = "0";
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE">
                String sCERTIFICATION_SN = "";
                int createdUserID = 0;
                String sOLD_TOKEN_ID = "";
                String pCERTIFICATION_PROFILE_CODE = "";
                String pCERTIFICATE_PROFILE_ID = "0";
                String pDISCOUNT_RATE="0";
                String pCERTIFICATION_AUTHORITY_CODE = "";
                String sPHONE_CONTRACT = "";
                String sEMAIL_CONTRACT = "";
                String sCoreCASubject = "";
                String pEnterpriseDB = "";
                String pPersonalDB = "";
                String sDeviceUUID = "";
                String sCSR = "";
                String sPKIFormFactorCode = "";
                String sCertStateCode = "";
                String sDomainName = "";
                String sCompanyCompoment = "";
                String sPersonalCompoment = "";
                String sDNResult = "";
                String sProvinceCodeComponent = "";
                String pSHARED_MODE = "";
                String pPROPERTIES_SAN = "";
                String sTOKEN_SN_OLD = "";
                String sVALUE_OLD = "";
                boolean pPrivateKeyEnabled_Old = true;
                int sTokenId_Old = 0;
                int sBranchId_Cert = 0;
                int provinceId = 0;
                int pCERTIFICATE_STATE_ID = 0;
                int pCERTIFICATION_OWNER_ID = 0;
                int pPAST_CERTIFICATE_ID = 0;
                java.sql.Timestamp pEFFECTIVE_DT = null;
                String pCERTIFICATION_ATTR_TYPE_CODE = String.valueOf(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REISSUE);
                int pCERTIFICATION_ATTR_TYPE_ID = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_ID_REISSUE;
                String pPAST_CERTIFICATION_SN = EscapeUtils.CheckTextNull(raServiceReq.certificateSN);
                boolean isValidRequest = false;
                if(!"".equals(pPAST_CERTIFICATION_SN))
                {
                    int[] pRESPONSE_CODE = new int[1];
                    CertificateInfo[][] rsReq = new CertificateInfo[1][];
                    db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", pPAST_CERTIFICATION_SN, 0,
                        Definitions.CONFIG_CERTIFICATION_STATE_CODE_OPERATED, "", raServiceReq.language, pRESPONSE_CODE, rsReq, "", "", "", "");
                    if (rsReq[0].length > 0) {
                        isValidRequest = true;
                        sOLD_TOKEN_ID = String.valueOf(rsReq[0][0].tokenId);
                        sVALUE_OLD = rsReq[0][0].value;
                        sPHONE_CONTRACT = rsReq[0][0].phoneContact;
                        sEMAIL_CONTRACT = rsReq[0][0].emailContact;
                        sCoreCASubject = rsReq[0][0].coreCASubject;
                        sCompanyCompoment = rsReq[0][0].companyName;
                        sPersonalCompoment = rsReq[0][0].personalName;
			pEnterpriseDB = rsReq[0][0].enterpriseID;
                            pPersonalDB = rsReq[0][0].personalID;
                        sTOKEN_SN_OLD = rsReq[0][0].tokenSN;
                        sDeviceUUID = rsReq[0][0].deviceUUID;
                        pPROPERTIES_SAN = EscapeUtils.CheckTextNull(rsReq[0][0].subjectAlternativeName);
                        pCERTIFICATION_PROFILE_CODE = rsReq[0][0].certificateProfileCode;
                        pCERTIFICATION_AUTHORITY_CODE = rsReq[0][0].certificateAuthorityCode;
                        sDomainName = rsReq[0][0].domainName;
                        sDNResult = rsReq[0][0].certificateDN;
                        sPKIFormFactorCode = rsReq[0][0].formFactorCode;
                        createdUserID = rsReq[0][0].createdId;
                        provinceId = rsReq[0][0].provinceId;
                        pCERTIFICATE_STATE_ID = rsReq[0][0].certificateStateId;
                        pCERTIFICATE_PROFILE_ID = String.valueOf(rsReq[0][0].certificateProfileId);
                        pDISCOUNT_RATE = String.valueOf(rsReq[0][0].discountRate);
                        sCSR = rsReq[0][0].csr;
                        pPrivateKeyEnabled_Old = rsReq[0][0].backupKeyEnabled;
                        sTokenId_Old = rsReq[0][0].tokenId;
                        pPAST_CERTIFICATE_ID = rsReq[0][0].certificateID;
                        sBranchId_Cert = rsReq[0][0].raId;
                        pCERTIFICATION_OWNER_ID = rsReq[0][0].certificateOwnerID;
                        sCertStateCode = rsReq[0][0].certificateStateCode;
                        pSHARED_MODE = rsReq[0][0].shareMode ? "1" : "0";
                        if("1".equals(checkChangeEffectiveDT)) {
                            pEFFECTIVE_DT = CommonFunction.ConvertPatternToTimeStamp(EscapeUtils.CheckTextNull(rsReq[0][0].effectiveTime), Definitions.CONFIG_DATETIME_FORMAT_YYYYDDMMHHMMSS);
                        }
                    }
                }
                if(isValidRequest == false) {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
                String raFullnameCreate = "";
                String raFullname = "";
                int sBranchId_New = 0;
                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
                {
                    if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser))) {
                        BACKOFFICE_USER[][] rsUser = new BACKOFFICE_USER[1][];
                        db.S_BO_USER_DETAIL(String.valueOf(createdUserID), String.valueOf(raServiceReq.language), rsUser);
                        if (rsUser[0].length > 0) {
                            raServiceReq.beneficiaryUser = rsUser[0][0].USERNAME;
                            raFullnameCreate = EscapeUtils.CheckTextNull(rsUser[0][0].FULL_NAME);
                        }
                        sBranchId_New = sBranchId_Cert;
                    } else {
                        UserInfo[][] userInfo = new UserInfo[1][];
                        db.S_BO_API_USER_LIST(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", raServiceReq.language, userInfo);
                        if (userInfo[0].length > 0) {
                            raFullnameCreate = EscapeUtils.CheckTextNull(userInfo[0][0].fullName);
                            sBranchId_New = userInfo[0][0].raID;
                        }
                    }
                    if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                    {
                        boolean branchAccessOld = false;
                        BRANCH[][] rsBranch;
                        rsBranch = new BRANCH[1][];
                        db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                        if(rsBranch[0].length > 0) {
                            for(BRANCH item : rsBranch[0]) {
                                if(item.ID == sBranchId_New) {
                                    branchAccessOld = true;
                                    break;
                                }
                            }
                        }
                        if(branchAccessOld == false) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                        } else {
                            UserInfo[][] userDetail = new UserInfo[1][];
                            db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                            if (userDetail[0].length > 0) {
                                raServiceReq.approveUser = pApproveCAUser;
                                raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                            }
                        }
                    }
                }
                //</editor-fold>

                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    //<editor-fold defaultstate="collapsed" desc="### CHANGE_KEY, PRIVATE_KEY, REVOKE OLD CERT of CERT TYPE">
                    String strPasswordP12 = "";
                    String pushNoticeEmail = "0";
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                    if (pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_OPERATED) {
                        if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                            || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                            if (pPrivateKeyEnabled_Old == true) {
                                if (raServiceReq.changeKeyEnabled == true) {
                                    CheckCHANGE_KEY = "1";
                                } else {
                                    CheckCHANGE_KEY = "0";
                                    setRevokeOldCertificateEnabled = "0";
                                }
                                if (raServiceReq.backupKeyEnabled == true) {
                                    CheckPRIVATE_KEY = "1";
                                } else {
                                    CheckPRIVATE_KEY = "0";
                                }
                            } else {
                                CheckCHANGE_KEY = "1";
                                if (raServiceReq.backupKeyEnabled == true) {
                                    CheckPRIVATE_KEY = "1";
                                } else {
                                    CheckPRIVATE_KEY = "0";
                                }
                            }
                            boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                            if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                pushNoticeEmail = "1";
                            }
                        } else if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                            || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                            if (pPrivateKeyEnabled_Old == true) {
                                CheckPRIVATE_KEY = "1";
                                if (raServiceReq.changeKeyEnabled == true) {
                                    CheckCHANGE_KEY = "1";
                                } else {
                                    CheckCHANGE_KEY = "0";
                                }
                                boolean p12EmailCertServer = CommonFunction.getP12EmailEnabledCert(sCERT_POLICY_PROPERTIES);
                                if (raServiceReq.p12EmailEnabled == true && p12EmailCertServer == true) {
                                    pushNoticeEmail = "1";
                                }
                                if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                    strPasswordP12 = EscapeUtils.CheckTextNull(raServiceReq.p12Password);
                                } else {
                                    strPasswordP12 = CommonFunction.randomPasswordP12(8);
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
                            }
                        } else if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN)) {
                            if (raServiceReq.changeKeyEnabled == true) {
                                CheckCHANGE_KEY = "1";
                            } else {
                                CheckCHANGE_KEY = "0";
                            }
                            CheckPRIVATE_KEY = "0";
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_STATE_INVALID;
                    }
                    //</editor-fold>

                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                        // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                        int intLevelApprove = 0;
                        if (autoApproveCAServer == false && autoApproveCAClient == false) {
                            intLevelApprove = 0;
                        } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                            intLevelApprove = 1;
                        } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                            intLevelApprove = 0;
                        } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                            intLevelApprove = 2;
                        }
                        //</editor-fold>

                        int[] pCERTIFICATE_ATTR_ID = new int[1];
                        int[] pCERTIFICATION_ID = new int[1];
                        String[] pRESPONSE_CODE_NAME = new String[1];
                        CITY_PROVINCE[][] rsProvince = new CITY_PROVINCE[1][];
                        db.S_BO_PROVINCE_DETAIL(String.valueOf(provinceId), rsProvince);
                        if (rsProvince[0].length > 0) {
                            sProvinceCodeComponent = rsProvince[0][0].NAME;
                        }
                        
                        CommonFunction.LogDebugString(log, sFunctionWS, "REQUEST: " + "CERT_SN: " + EscapeUtils.CheckTextNull(raServiceReq.certificateSN)
                            + "; IS_PUSH_EMAIL: " + pushNoticeEmail + "; CERTE_STATE_ID: " + pCERTIFICATE_STATE_ID
                            + "; IS_CHANGE_KEY: " + CheckCHANGE_KEY + "; IS_BACKUP_KEY: " + CheckPRIVATE_KEY
                            + "; PRIVATE_KEY_OLD: " + pPrivateKeyEnabled_Old
                            + "; TOKEN_SN_Old: " + sTOKEN_SN_OLD + "; EMAIL_CONTRACT: " + sEMAIL_CONTRACT
                            + "; PHONE_CONTRACT: " + sPHONE_CONTRACT + "; AUTO_APPROVE_CLIENT: " + autoApproveCAClient
                            + "; IS_REVOKE_OLD_CERT: " + setRevokeOldCertificateEnabled
                            + "; BENEFICIARIES_USER: " + raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                        if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                            || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                            String sPromotionDuration = "";
                            if(!"".equals(sVALUE_OLD)) {
                                ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(sVALUE_OLD, ATTRIBUTE_VALUES.class);
                                sPromotionDuration = EscapeUtils.CheckTextNull(valueATTR_Frist.getPromotionDuration());
                            }
                            //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR">
                            CERTIFICATION_DATA_ATTR tempLogReq = new CERTIFICATION_DATA_ATTR();
                            tempLogReq.personalName = sPersonalCompoment;
                            tempLogReq.companyName = sCompanyCompoment;
                            tempLogReq.enterpriseID = pEnterpriseDB;
                            tempLogReq.personalID = pPersonalDB;
                            tempLogReq.deviceUUID = sDeviceUUID;
                            tempLogReq.phoneContract = sPHONE_CONTRACT;
                            tempLogReq.emailContract = sEMAIL_CONTRACT;
                            tempLogReq.issuerSubject = sCoreCASubject;
                            tempLogReq.subjectDn = sDNResult;
                            tempLogReq.tokenSn = sTOKEN_SN_NEW;
                            tempLogReq.provinceName = sProvinceCodeComponent;
                            tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                            tempLogReq.pkiFromFactorCode = sPKIFormFactorCode;
                            // VALUE ATTR
                            ATTRIBUTE_VALUES valueATTR;
                            ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                            dataATTR.setCertificationData(tempLogReq);
                            valueATTR = new ATTRIBUTE_VALUES();
                            valueATTR.setTokenSn(sTOKEN_SN_NEW);
                            boolean boChangeKeyEnabled = "1".equals(CheckCHANGE_KEY);
                            valueATTR.setChangeKeyEnabled(boChangeKeyEnabled);
                            boolean boRevokeOldCertificate = "1".equals(setRevokeOldCertificateEnabled);
                            valueATTR.setRevokeOldCertificateEnabled(boRevokeOldCertificate);
                            valueATTR.setPromotionDuration(sPromotionDuration);
                            if(boChangeKeyEnabled == false) {
                                valueATTR.setKeepCertificateSNEnabled(true);
                            } else {
                                valueATTR.setKeepCertificateSNEnabled(false);
                            }
                            valueATTR.setTypeName(pCERTIFICATION_ATTR_TYPE_CODE);
                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                            valueATTR.setCreateUser(raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                            valueATTR.setCreateDt(new Date());
                            valueATTR.setAttributeData(dataATTR);
                            //</editor-fold>
                            String strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                            pRESPONSE_CODE_NAME[0] = "10000";
                            //<editor-fold defaultstate="collapsed" desc="### INSERT CERT AND ACTIVATION CODE">
                            while ("10000".equals(pRESPONSE_CODE_NAME[0])) {
                                try {
                                    String sOTP = CommonFunction.getRandomOTP(intOTPNumn);
                                    if(raServiceReq.activationCodeEnabled == true) {
                                        raServiceResp.activationCode = sOTP;
                                    }
                                    db.S_BO_API_CERTIFICATION_INSERT(pCERTIFICATION_PROFILE_CODE, sTOKEN_SN_NEW,
                                        sCERTIFICATION_SN, sPersonalCompoment, sCompanyCompoment, sDomainName,
                                        sDNResult, sCoreCASubject, sPHONE_CONTRACT, sEMAIL_CONTRACT,
                                        sProvinceCodeComponent, pPAST_CERTIFICATION_SN, sOTP, pCERTIFICATION_ATTR_TYPE_CODE,
                                        strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser),
                                        EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), sCSR,
                                        pCERTIFICATION_AUTHORITY_CODE, CheckCHANGE_KEY, CheckPRIVATE_KEY, sPKIFormFactorCode,
                                        sDeviceUUID, sPromotionDuration, pRESPONSE_CODE_NAME, pCERTIFICATION_ID, pCERTIFICATE_ATTR_ID,
                                        pCERTIFICATION_OWNER_ID, pEFFECTIVE_DT, null, pEnterpriseDB, pPersonalDB);
                                    CommonFunction.LogDebugString(log, sTOKEN_SN_NEW + " - S_BO_API_CERTIFICATION_INSERT - RESULT", pRESPONSE_CODE_NAME[0]);
                                } catch (Exception e) {
                                    if (e.getMessage().contains(Definitions.CONFIG_MYSQL_UNIQUE_ACTIVATION_CODE)) {
                                        pRESPONSE_CODE_NAME[0] = "10000";
                                    } else {
                                        pRESPONSE_CODE_NAME[0] = String.valueOf(Definitions.CONFIG_WS_RESPONSE_CODE_EXCEPTION);
                                        CommonFunction.LogExceptionServlet(log, e.getMessage().trim(), e);
                                    }
                                }
                            }
                            //</editor-fold>

                            if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                raServiceResp.certificateID = pCERTIFICATION_ID[0];
                                raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                if(!"".equals(pPROPERTIES_SAN)) {
                                    db.S_BO_CERTIFICATION_UPDATE_PROPERTIES(String.valueOf(raServiceResp.certificateID), pPROPERTIES_SAN, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                }
                                db.S_BO_CERTIFICATION_UPDATE(raServiceResp.certificateID, pCERTIFICATE_PROFILE_ID, "", "", "",
                                    "", "", "", "", "", "", "", "", "",
                                    "", EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", "",
                                    pDISCOUNT_RATE, pSHARED_MODE, "", "", pEnterpriseDB, pPersonalDB);

                                //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                if (intLevelApprove == 1 || intLevelApprove == 2) {
                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                    valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    valueATTR.setApproveDt(new Date());
                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                    db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                }
                                if (intLevelApprove == 2) {
                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                    valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    valueATTR.setApproveCADt(new Date());
                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                    String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                    if ("0".equals(sApprove)) {
                                        String pushNoticeEnabled = "0";
                                        boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                        if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                            pushNoticeEnabled = "1";
                                        }
                                        db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                        if ("1".equals(pushNoticeEnabled)) {
                                            int[] intRes = new int[1];
                                            String[] sRes = new String[1];
                                            ConnectConnector.SendMailOTP(String.valueOf(pCERTIFICATION_ID[0]), intRes, sRes);
                                        }
                                        // Transfer token to agancy
                                        if("0".equals(sNoAllowTranferToken)) {
                                            if(sBranchId_New != sBranchId_Cert) {
                                                db.S_BO_TOKEN_UPDATE_BRANCH(String.valueOf(sTokenId_Old), String.valueOf(sBranchId_New), raServiceReq.approveUser);
                                            }
                                        }
                                        //<editor-fold defaultstate="collapsed" desc="### SET LOST STATE of TOKEN">
                                        if (!sTOKEN_SN_OLD.equals(Definitions.CONFIG_TOKEN_SN_LOST)) {
                                            TOKEN[][] rsToken_OLD = new TOKEN[1][];
                                            int sTOKEN_STATE_ID_OLD = 0;
//                                                        String sTOKEN_SN_OLD = "";
                                            db.S_BO_TOKEN_DETAIL(sOLD_TOKEN_ID, rsToken_OLD);
                                            if (rsToken_OLD[0].length > 0) {
                                                sTOKEN_STATE_ID_OLD = rsToken_OLD[0][0].TOKEN_STATE_ID;
//                                                            sTOKEN_SN_OLD = EscapeUtils.CheckTextNull(rsToken_OLD[0][0].TOKEN_SN);
                                            }
                                            if (sTOKEN_STATE_ID_OLD != Definitions.CONFIG_TOKEN_STATE_ID_LOST) {
                                                int[] System_Log_ID_Token = new int[1];
                                                System_Log_ID_Token[0] = 0;
                                                String[] System_Log_BillCode_Token = new String[1];
                                                TOKEN_CHANGE_LOG tempLogReqToken = new TOKEN_CHANGE_LOG();
                                                tempLogReqToken.setTOKEN_SN(sTOKEN_SN_OLD);
                                                tempLogReqToken.setIS_LOST("True");
                                                String strTokenReq = CommonFunction.GenJSONTokenLog(tempLogReqToken);
                                                db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA,
                                                        Definitions.CONFIG_LOG_SOURCE_API_RA, sTOKEN_SN_OLD, "",
                                                        Definitions.CONFIG_LOG_FUNCTIONALITY_PERMANENT_INITIALZED, strTokenReq,
                                                        EscapeUtils.CheckTextNull(raServiceReq.approveUser), System_Log_ID_Token,
                                                        sIP_Request, System_Log_BillCode_Token);
                                                // VALUE ATTR for TOKEN
                                                ATTRIBUTE_VALUES valueATTR_TOKEN;
                                                valueATTR_TOKEN = new ATTRIBUTE_VALUES();
                                                valueATTR_TOKEN.setTokenSn(sTOKEN_SN_OLD);
                                                valueATTR_TOKEN.setTypeName(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_PERMANENT_INITIALZED);
                                                valueATTR_TOKEN.setRequestState(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_APPROVED);
                                                valueATTR_TOKEN.setCreateUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                valueATTR_TOKEN.setCreateDt(new Date());
                                                valueATTR_TOKEN.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                valueATTR_TOKEN.setApproveDt(new Date());
                                                String strReqTokenATTR = CommonFunction.GenJSONTokenATTR(valueATTR_TOKEN);
                                                // VALUE ATTR
                                                int intTOKEN_ATTR_STATE = Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_APPROVED);
                                                db.S_BO_TOKEN_ATTR_INSERT(Integer.parseInt(sOLD_TOKEN_ID), Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_PERMANENT_INITIALZED,
                                                        intTOKEN_ATTR_STATE, strReqTokenATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                db.S_BO_TOKEN_UPDATE(Integer.parseInt(sOLD_TOKEN_ID),
                                                        String.valueOf(Definitions.CONFIG_TOKEN_STATE_ID_LOST), "", "", "", "",
                                                        EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                if (System_Log_ID_Token[0] != 0) {
                                                    RESPONSE_CODE[][] rsResponse = new RESPONSE_CODE[1][];
                                                    db.S_BO_RESPONSE_CODE_DETAIL(String.valueOf(Definitions.CONFIG_RESPONSE_CODE_ID_SUCCESS), rsResponse);
                                                    RESPONSE_LOG tempLogRes = new RESPONSE_LOG();
                                                    tempLogRes.ResponseCode = rsResponse[0][0].NAME;
                                                    tempLogRes.ResponseMessage = rsResponse[0][0].REMARK;
                                                    db.S_BO_SYSTEM_LOG_UPDATE(System_Log_ID_Token[0], rsResponse[0][0].NAME,
                                                            objectMapper.writeValueAsString(tempLogRes), "", EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                }
                                            }
                                        }
                                        //</editor-fold>

                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                }
                                //</editor-fold>
                            } else {
                                raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                            }
                        } else if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN)) {
                            String sPromotionDuration = "";
                            if(!"".equals(sVALUE_OLD)) {
                                ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(sVALUE_OLD, ATTRIBUTE_VALUES.class);
                                sPromotionDuration = EscapeUtils.CheckTextNull(valueATTR_Frist.getPromotionDuration());
                            }
                            //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR">
                            CERTIFICATION_DATA_ATTR tempLogReq = new CERTIFICATION_DATA_ATTR();
                            tempLogReq.personalName = sPersonalCompoment;
                            tempLogReq.companyName = sCompanyCompoment;
                            tempLogReq.enterpriseID = pEnterpriseDB;
                            tempLogReq.personalID = pPersonalDB;
                            tempLogReq.deviceUUID = sDeviceUUID;
                            tempLogReq.phoneContract = sPHONE_CONTRACT;
                            tempLogReq.emailContract = sEMAIL_CONTRACT;
                            tempLogReq.issuerSubject = sCoreCASubject;
                            tempLogReq.subjectDn = sDNResult;
                            tempLogReq.tokenSn = sTOKEN_SN_OLD;
                            tempLogReq.provinceName = sProvinceCodeComponent;
                            tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                            tempLogReq.pkiFromFactorCode = sPKIFormFactorCode;
                            // VALUE ATTR
                            ATTRIBUTE_VALUES valueATTR;
                            ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                            dataATTR.setCertificationData(tempLogReq);
                            valueATTR = new ATTRIBUTE_VALUES();
                            valueATTR.setTokenSn(sTOKEN_SN_OLD);
                            boolean boChangeKeyEnabled = "1".equals(CheckCHANGE_KEY);
                            valueATTR.setChangeKeyEnabled(boChangeKeyEnabled);
                            boolean boRevokeOldCertificate = "1".equals(setRevokeOldCertificateEnabled);
                            valueATTR.setRevokeOldCertificateEnabled(boRevokeOldCertificate);
                            valueATTR.setPromotionDuration(sPromotionDuration);
                            if(boChangeKeyEnabled == false) {
                                valueATTR.setKeepCertificateSNEnabled(true);
                            } else {
                                valueATTR.setKeepCertificateSNEnabled(false);
                            }
                            valueATTR.setTypeName(pCERTIFICATION_ATTR_TYPE_CODE);
                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                            valueATTR.setCreateUser(raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                            valueATTR.setCreateDt(new Date());
                            valueATTR.setAttributeData(dataATTR);
                            //</editor-fold>
                            
                            sCSR = ""; sTOKEN_SN_NEW = Definitions.CONFIG_TOKEN_SIGNSERVER_SN;
                            String strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                            db.S_BO_API_CERTIFICATION_INSERT(pCERTIFICATION_PROFILE_CODE, sTOKEN_SN_NEW,
                                sCERTIFICATION_SN, sPersonalCompoment, sCompanyCompoment, sDomainName,
                                sDNResult, sCoreCASubject, sPHONE_CONTRACT, sEMAIL_CONTRACT,
                                sProvinceCodeComponent, pPAST_CERTIFICATION_SN, "", pCERTIFICATION_ATTR_TYPE_CODE,
                                strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser),
                                EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), sCSR,
                                pCERTIFICATION_AUTHORITY_CODE, CheckCHANGE_KEY, CheckPRIVATE_KEY, sPKIFormFactorCode,
                                sDeviceUUID, sPromotionDuration, pRESPONSE_CODE_NAME, pCERTIFICATION_ID, pCERTIFICATE_ATTR_ID,
                                pCERTIFICATION_OWNER_ID, pEFFECTIVE_DT, null, pEnterpriseDB, pPersonalDB);
                            CommonFunction.LogDebugString(log, sTOKEN_SN_NEW + " - S_BO_API_CERTIFICATION_INSERT - RESULT", pRESPONSE_CODE_NAME[0]);

                            if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                raServiceResp.certificateID = pCERTIFICATION_ID[0];
                                raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                if(!"".equals(pPROPERTIES_SAN)) {
                                    db.S_BO_CERTIFICATION_UPDATE_PROPERTIES(String.valueOf(raServiceResp.certificateID), pPROPERTIES_SAN, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                }

                                db.S_BO_CERTIFICATION_UPDATE(raServiceResp.certificateID, pCERTIFICATE_PROFILE_ID, "", "", "",
                                    "", "", "", "", "", "", "", "", "",
                                    "", EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", "",
                                    pDISCOUNT_RATE, pSHARED_MODE, "", "", pEnterpriseDB, pPersonalDB);

                                //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                if (intLevelApprove == 1 || intLevelApprove == 2) {
                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                    valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    valueATTR.setApproveDt(new Date());
                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                    db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                }
                                if (intLevelApprove == 2) {
                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                    valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    valueATTR.setApproveCADt(new Date());
                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                    String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                    if ("0".equals(sApprove)) {
                                        String pushNoticeEnabled = "0";
                                        db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                        String urlCallback = "";
                                        String requestType = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REISSUE;
                                        BRANCH[][] rsBranch = new BRANCH[1][];
                                        db.S_BO_BRANCH_DETAIL(String.valueOf(sBranchId_New), rsBranch);
                                        if(rsBranch != null && rsBranch[0].length > 0) {
                                            urlCallback = rsBranch[0][0].CALLBACK_URL_APPROVED;
                                        }
                                        ThreadCallbackApproved thhreadLog = new ThreadCallbackApproved(String.valueOf(pCERTIFICATION_ID[0]),
                                            urlCallback, Definitions.CONFIG_OPERATION_TYPE_APPROVED, "", requestType);
                                        Thread t = new Thread(thhreadLog);
                                        t.start();
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                }
                                //</editor-fold>
                            } else {
                                raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                            }
                        } else {
                            //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR">
                            CERTIFICATION_DATA_ATTR tempLogReq = new CERTIFICATION_DATA_ATTR();
                            tempLogReq.personalName = sPersonalCompoment;
                            tempLogReq.companyName = sCompanyCompoment;
                            tempLogReq.enterpriseID = pEnterpriseDB;
                            tempLogReq.personalID = pPersonalDB;
                            tempLogReq.phoneContract = sPHONE_CONTRACT;
                            tempLogReq.emailContract = sEMAIL_CONTRACT;
                            tempLogReq.issuerSubject = sCoreCASubject;
                            tempLogReq.subjectDn = sDNResult;
                            tempLogReq.tokenSn = sTOKEN_SN_OLD;
                            tempLogReq.provinceName = sProvinceCodeComponent;
                            tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                            // VALUE ATTR
                            ATTRIBUTE_VALUES valueATTR;
                            ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                            dataATTR.setCertificationData(tempLogReq);
                            valueATTR = new ATTRIBUTE_VALUES();
                            valueATTR.setTokenSn(sTOKEN_SN_OLD);
                            valueATTR.setTypeName(pCERTIFICATION_ATTR_TYPE_CODE);
                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                            valueATTR.setCreateUser(raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                            valueATTR.setCreateDt(new Date());
                            valueATTR.setAttributeData(dataATTR);
                            //</editor-fold>

                            String strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                            db.S_BO_API_CERTIFICATION_ATTR_INSERT(pPAST_CERTIFICATION_SN, pCERTIFICATION_ATTR_TYPE_ID, strReqValueATTR,
                                EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pRESPONSE_CODE_NAME, pCERTIFICATE_ATTR_ID);
                            if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                raServiceResp.certificateID = pPAST_CERTIFICATE_ID;
                                raServiceResp.certificateStateCode = sCertStateCode;
                                //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                if (intLevelApprove == 1 || intLevelApprove == 2)
                                {
                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                    valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    valueATTR.setApproveDt(new Date());
                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                    db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                }
                                if (intLevelApprove == 2) {
                                    // Approve CA
                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                    valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    valueATTR.setApproveCADt(new Date());
                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                    String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                    if ("0".equals(sApprove)) {
                                        db.S_BO_CERTIFICATION_SOFTTOKEN_REISSUE(pCERTIFICATE_ATTR_ID[0], raServiceReq.approveUser);
                                        int[] intRes = new int[1];
                                        String[] sRes = new String[1];
                                        boolean isSendMailP12 = false;
                                        if("1".equals(pushNoticeEmail)) {
                                            isSendMailP12 = true;
                                        }
                                        byte[] sP12Return = ConnectConnector.generateKeystore(strPasswordP12, isSendMailP12,
                                            String.valueOf(raServiceResp.certificateID), intRes, sRes);
                                        raServiceResp.p12Certificate = sP12Return;
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                }
                                //</editor-fold>

                                if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                    if (!"".equals(strPasswordP12)) {
                                        raServiceResp.p12Password = strPasswordP12;
                                    }
                                }
                            } else {
                                raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                            }
                        }
                    }
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN_NEW;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### buyMoreCertificateProcess">
    public void buyMoreCertificateProcess(String sCERT_PROFILE_PROPERTIES, String sCERT_POLICY_PROPERTIES,
        String pApproveCAUser, boolean autoApproveCAServer, int[] System_Log_ID, String[] System_Log_BillCode,
        String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, String sISSUE_P12_ENABLED, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
    throws Exception {
        String sTOKEN_SN = "";
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_BUYMORE_CERTIFICATION;
        raServiceReq.certificateFormatType = EscapeUtils.CheckTextNull(raServiceReq.certificateFormatType);
        ObjectMapper objectMapper = new ObjectMapper();
        RAServiceReq raReqTemp = new RAServiceReq();
        raReqTemp.certificateComponentInfo = raServiceReq.certificateComponentInfo;
        raReqTemp.beneficiaryUser = raServiceReq.beneficiaryUser;
        raReqTemp.emailContact = raServiceReq.emailContact;
        raReqTemp.phoneContact = raServiceReq.phoneContact;
        raReqTemp.formFactorCode = raServiceReq.formFactorCode;
        raReqTemp.activationCodeEnabled = raServiceReq.activationCodeEnabled;
        raReqTemp.beneficiaryBranch = raServiceReq.beneficiaryBranch;
        raReqTemp.promotionDuration = raServiceReq.promotionDuration;
        raReqTemp.certificateOwnerID = raServiceReq.certificateOwnerID;
        raReqTemp.certificateProfileCode = raServiceReq.certificateProfileCode;
        raReqTemp.backupKeyEnabled = raServiceReq.backupKeyEnabled;
        raReqTemp.certificateNotificationEnabled = raServiceReq.certificateNotificationEnabled;
        raReqTemp.p12EmailEnabled = raServiceReq.p12EmailEnabled;
        raReqTemp.approveEnabled = raServiceReq.approveEnabled;
        raReqTemp.language = raServiceReq.language;
        raReqTemp.csr = raServiceReq.csr;
        raReqTemp.effectiveTime = raServiceReq.effectiveTime;
        raReqTemp.userName = raServiceReq.userName;
        raReqTemp.expandFutureParamXML = raServiceReq.expandFutureParamXML;
        raReqTemp.certificateFormatType = raServiceReq.certificateFormatType;
        raReqTemp.credentialData = raServiceReq.credentialData;
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, sTOKEN_SN, "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), raServiceReq.beneficiaryUser,
            System_Log_ID, sIP_Request, System_Log_BillCode);
        
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            String pCERTIFICATION_ATTR_TYPE_CODE = String.valueOf(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_BUY_MORE);
            boolean autoApproveCAClient = raServiceReq.approveEnabled;
            String strDNSName = "";
            GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
            db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
            ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList;
            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH and USER">
            if (!"".equals(raServiceReq.beneficiaryBranch)) {
                UserInfo[][] rsUserBranch;
                int[] pResonseUser;
                String sCreateAgencyDefault = "0";
                String sCreateUserDefault = "0";
                String sValueUserBranch = "";
                String sUserPassDefault = "";
                String sBranchPolicyProper = "";
                if (rsPolicy[0].length > 0) {
                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_API_AUTOCREATE_BENEFICIARY_BRANCH)) {
                            sCreateAgencyDefault = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_API_AUTOCREATE_BENEFICIARY_USER)) {
                            sCreateUserDefault = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_API_DEFAULT_INFO_BENEFICIARY_USER)) {
                            sValueUserBranch = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DEFAULT_CERTIFICATION_PROFILE_PROPERTIES_FOR_BRANCH_ROLE)) {
                            sBranchPolicyProper = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DEFAULT_PASSWORD_ACCOUNT)) {
                            sUserPassDefault = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                    }
                }
                rsUserBranch = new UserInfo[1][];
                pResonseUser = new int[1];
                db.S_BO_API_GET_USERNAME_BY_BRANCH_CODE(raServiceReq.beneficiaryBranch, pResonseUser, rsUserBranch);
                if(pResonseUser[0] == 0 && rsUserBranch[0].length > 0) {
                    if (!"".equals(raServiceReq.beneficiaryUser)) {
                        String sResponseCheckBranch = db.S_BO_API_CHECK_USERNAME_AND_BRANCH_CODE(raServiceReq.beneficiaryBranch, raServiceReq.beneficiaryUser);
                        if(!"0".equals(sResponseCheckBranch)) {
                            rsUserBranch = new UserInfo[1][];
                            db.S_BO_API_USER_DETAIL(raServiceReq.beneficiaryUser, raServiceReq.language, rsUserBranch);
                            if(rsUserBranch != null && rsUserBranch[0].length > 0) {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_USERNAME_BY_INVALID;
                            } else {
                                if("1".equals(sCreateUserDefault)) {
                                    String userPhone = "";
                                    String userEmail = "";
                                    String userRemark = "";
                                    String userRole = Definitions.CONFIG_ROLE_CODE_AGENT_ADMIN;
                                    JSON_USER_BRANCH_DEFAULT[][] rsCertType = new JSON_USER_BRANCH_DEFAULT[1][];
                                    CommonFunction.getJsonUserBranchDefault(sValueUserBranch, rsCertType);
                                    for(JSON_USER_BRANCH_DEFAULT rsCertType1 : rsCertType[0])
                                    {
                                        if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_USER_DEFAULT_INFO_TAG))
                                        {
                                            userPhone = rsCertType1.MSISDN;
                                            userEmail = rsCertType1.EMAIL;
                                            userRemark = rsCertType1.REMARK;
                                        }
                                    }
                                    String[] pRESPONSE_CODE = new String[1];
                                    int[] pUSER_ID = new int[1];
                                    db.S_BO_API_USER_INSERT(raServiceReq.beneficiaryUser, sUserPassDefault, userRemark, 
                                        userRole, raServiceReq.beneficiaryBranch,
                                        userEmail, userPhone, raServiceReq.approveUser, pRESPONSE_CODE, pUSER_ID);
                                    // tao user
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                                }
                            }
                        }
                    } else {
                        if(!"".equals(rsUserBranch[0][0].userName)) {
                            raServiceReq.beneficiaryUser = rsUserBranch[0][0].userName;
                        } else {
                            if("1".equals(sCreateUserDefault)) {
                                String userPhone = "";
                                String userEmail = "";
                                String userRemark = "";
                                String userRole = Definitions.CONFIG_ROLE_CODE_AGENT_ADMIN;
                                JSON_USER_BRANCH_DEFAULT[][] rsCertType = new JSON_USER_BRANCH_DEFAULT[1][];
                                CommonFunction.getJsonUserBranchDefault(sValueUserBranch, rsCertType);
                                for(JSON_USER_BRANCH_DEFAULT rsCertType1 : rsCertType[0]) {
                                    if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_USER_DEFAULT_INFO_TAG)) {
                                        userPhone = rsCertType1.MSISDN;
                                        userEmail = rsCertType1.EMAIL;
                                        userRemark = rsCertType1.REMARK;
                                    }
                                }
                                String[] pRESPONSE_CODE = new String[1];
                                int[] pUSER_ID = new int[1];
                                raServiceReq.beneficiaryUser = raServiceReq.beneficiaryBranch.toLowerCase() + "_admin";
                                db.S_BO_API_USER_INSERT(raServiceReq.beneficiaryUser, sUserPassDefault, userRemark, 
                                    userRole, raServiceReq.beneficiaryBranch,
                                    userEmail, userPhone, raServiceReq.approveUser, pRESPONSE_CODE, pUSER_ID);
                                // tao user
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                            }
                        }
                    }
                } else {
                    if("1".equals(sCreateAgencyDefault)) {
                        if (!"".equals(raServiceReq.beneficiaryUser)) {
                            rsUserBranch = new UserInfo[1][];
                            db.S_BO_API_USER_LIST(raServiceReq.beneficiaryUser, "", "", raServiceReq.language, rsUserBranch);
                            if(rsUserBranch[0].length > 0) {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                            } else {
                                if("1".equals(sCreateUserDefault)) {
                                    String branchPhone = "";
                                    String branchEmail = "";
                                    String branchRemark = "";
                                    String branchParentName = "";
                                    String branchProvince = "";
                                    String branchDISCOUNT_RATE_PROFILE = "FEDERAL";
                                    String branchRole = "FEDERAL";
                                    String userPhone = "";
                                    String userEmail = "";
                                    String userRemark = "";
                                    String userRole = Definitions.CONFIG_ROLE_CODE_AGENT_ADMIN;
                                    JSON_USER_BRANCH_DEFAULT[][] rsCertType = new JSON_USER_BRANCH_DEFAULT[1][];
                                    CommonFunction.getJsonUserBranchDefault(sValueUserBranch, rsCertType);
                                    for(JSON_USER_BRANCH_DEFAULT rsCertType1 : rsCertType[0])
                                    {
                                        if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_BRANCH_DEFAULT_INFO_TAG))
                                        {
                                            branchPhone = rsCertType1.MSISDN;
                                            branchEmail = rsCertType1.EMAIL;
                                            branchRemark = rsCertType1.REMARK;
                                            branchParentName = rsCertType1.PARENT_NAME;
                                            branchProvince = rsCertType1.PROVINCE_NAME;
                                        }
                                        if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_USER_DEFAULT_INFO_TAG))
                                        {
                                            userPhone = rsCertType1.MSISDN;
                                            userEmail = rsCertType1.EMAIL;
                                            userRemark = rsCertType1.REMARK;
                                        }
                                    }
                                    int[] pBRANCH_ID = new int[1];
                                    String sParam = db.S_BO_API_BRANCH_INSERT(raServiceReq.beneficiaryBranch, branchProvince,
                                        branchRemark, branchRemark, branchParentName, raServiceReq.approveUser,
                                        EscapeUtils.escapeHtml(branchPhone), "", EscapeUtils.escapeHtml(branchEmail),
                                        "", "", "", null, branchDISCOUNT_RATE_PROFILE, sBranchPolicyProper, branchRole, pBRANCH_ID);
                                    if("0".equals(sParam))
                                    {
                                        String[] pRESPONSE_CODE = new String[1];
                                        int[] pUSER_ID = new int[1];
                                        db.S_BO_API_USER_INSERT(raServiceReq.beneficiaryUser, sUserPassDefault, userRemark, 
                                            userRole, raServiceReq.beneficiaryBranch,
                                            userEmail, userPhone, raServiceReq.approveUser, pRESPONSE_CODE, pUSER_ID);
                                    }
                                    // tao branch (dc truyen vao)
                                    // tao user (dc truyen vao)
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_USERNAME_BY_INVALID;
                                }
                            }
                        } else {
                            if("1".equals(sCreateUserDefault)) {
                                String branchPhone = "";
                                String branchEmail = "";
                                String branchRemark = "";
                                String branchParentName = "";
                                String branchProvince = "";
                                String branchDISCOUNT_RATE_PROFILE = "FEDERAL";
                                String branchRole = "FEDERAL";
                                String userPhone = "";
                                String userEmail = "";
                                String userRemark = "";
                                String userRole = Definitions.CONFIG_ROLE_CODE_AGENT_ADMIN;
                                JSON_USER_BRANCH_DEFAULT[][] rsCertType = new JSON_USER_BRANCH_DEFAULT[1][];
                                CommonFunction.getJsonUserBranchDefault(sValueUserBranch, rsCertType);
                                for(JSON_USER_BRANCH_DEFAULT rsCertType1 : rsCertType[0])
                                {
                                    if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_BRANCH_DEFAULT_INFO_TAG))
                                    {
                                        branchPhone = rsCertType1.MSISDN;
                                        branchEmail = rsCertType1.EMAIL;
                                        branchRemark = rsCertType1.REMARK;
                                        branchParentName = rsCertType1.PARENT_NAME;
                                        branchProvince = rsCertType1.PROVINCE_NAME;
                                    }
                                    if(rsCertType1.ATTRIBUTE_TYPE.equals(Definitions.CONFIG_BRANCH_ATTRIBUTE_TYPE_USER_DEFAULT_INFO_TAG))
                                    {
                                        userPhone = rsCertType1.MSISDN;
                                        userEmail = rsCertType1.EMAIL;
                                        userRemark = rsCertType1.REMARK;
                                    }
                                }
                                int[] pBRANCH_ID = new int[1];
                                String sParam = db.S_BO_API_BRANCH_INSERT(raServiceReq.beneficiaryBranch, branchProvince,
                                    branchRemark, branchRemark, branchParentName, raServiceReq.approveUser,
                                    EscapeUtils.escapeHtml(branchPhone), "", EscapeUtils.escapeHtml(branchEmail),
                                    "", "", "", null, branchDISCOUNT_RATE_PROFILE, sBranchPolicyProper, branchRole, pBRANCH_ID);
                                if("0".equals(sParam))
                                {
                                    raServiceReq.beneficiaryUser = raServiceReq.beneficiaryBranch.toLowerCase() + "_admin";
                                    String[] pRESPONSE_CODE = new String[1];
                                    int[] pUSER_ID = new int[1];
                                    db.S_BO_API_USER_INSERT(raServiceReq.beneficiaryUser, sUserPassDefault, userRemark, 
                                        userRole, raServiceReq.beneficiaryBranch,
                                        userEmail, userPhone, raServiceReq.approveUser, pRESPONSE_CODE, pUSER_ID);
                                }
                                // tao branch (dc truyen vao)
                                // tao user (tu gen)
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_USERNAME_BY_INVALID;
                            }
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
                }
            } else {
                String sAgencyDefault = "";
                if (rsPolicy[0].length > 0) {
                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_API_DEFAULT_BENEFICIARY_BRANCH)) {
                            sAgencyDefault = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                            break;
                        }
                    }
                }
                if(!"".equals(sAgencyDefault)) {
                    raServiceReq.beneficiaryBranch = sAgencyDefault;
                    UserInfo[][] rsUserBranch = new UserInfo[1][];
                    int[] pResonseUser = new int[1];
                    db.S_BO_API_GET_USERNAME_BY_BRANCH_CODE(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryBranch), pResonseUser, rsUserBranch);
                    if(pResonseUser[0] == 0 && rsUserBranch[0].length > 0) {
                        raServiceReq.beneficiaryUser = rsUserBranch[0][0].userName;
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                }
            }
            //</editor-fold>

            CERTIFICATION_PROFILE[][] resProfileDB;
            //<editor-fold defaultstate="collapsed" desc="### CHECK PROFILE VALID">
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_PROFILE_INVALID;
                resProfileDB = new CERTIFICATION_PROFILE[1][];
                db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), resProfileDB);
                if(resProfileDB[0].length > 0) {
                    raServiceReq.certificateAuthorityCode = resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME;
                    raServiceReq.certificatePurposeCode = resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME;
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                }
            }
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_PROFILE_INVALID;
                boolean accessProfileAll = CommonFunction.checkAPIAccessProfileAll(sCERT_PROFILE_PROPERTIES);
                if (accessProfileAll == true) {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                } else {
                    tempProfileList = new ArrayList<>();
                    //<editor-fold defaultstate="collapsed" desc="### GET PROFILE LIST ACCESS">
                    CERTIFICATION_POLICY_DATA[][] resPolicyData_Old = new CERTIFICATION_POLICY_DATA[1][];
                    CommonFunction.getProfileCertList(sCERT_PROFILE_PROPERTIES, resPolicyData_Old);
                    for(CERTIFICATION_POLICY_DATA resPolicyCertData_Old1 : resPolicyData_Old[0])
                    {
                        if(resPolicyCertData_Old1.attributeType.equals(Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST))
                        {
                            resProfileDB = new CERTIFICATION_PROFILE[1][];
                            db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(resPolicyCertData_Old1.name), resProfileDB);
                            if(resProfileDB[0].length > 0)
                            {
                                CERTIFICATION_POLICY_DATA itemProfileAccess = new CERTIFICATION_POLICY_DATA();
                                itemProfileAccess.name = resProfileDB[0][0].NAME;
                                itemProfileAccess.certificateAuthority = resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME;
                                itemProfileAccess.certificatePurpose = resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME;
                                itemProfileAccess.remark = resPolicyCertData_Old1.remark;
                                itemProfileAccess.remarkEn = resPolicyCertData_Old1.remarkEn;
                                itemProfileAccess.attributeType = Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST;
                                tempProfileList.add(itemProfileAccess);
                            }
                        }
                    }
                    //</editor-fold>

                    if(tempProfileList.size() > 0)
                    {
                        for (CERTIFICATION_POLICY_DATA tempProfileList1 : tempProfileList)
                        {
                            if(tempProfileList1.certificateAuthority.equals(raServiceReq.certificateAuthorityCode)
                                && tempProfileList1.certificatePurpose.equals(raServiceReq.certificatePurposeCode)
                                && tempProfileList1.name.equals(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode)))
                            {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                break;
                            }
                        }
                    }
                }
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                String sRegexPolicy = "";
                String sDiscountRateOption = "0";
                String checkChangeEffectiveDT = "0";
                String dayChangeEffectiveDT = "0";
                if (rsPolicy[0].length > 0) {
                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_REGEX_FOR_PHONE_EMAIL)) {
                            sRegexPolicy = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_DISCOUNT_RATE_PROFILE_OPTION)) {
                            sDiscountRateOption = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if(rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_OPTION_FOR_CHANGING_EFFECTIVE_DT)) {
                            checkChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                        if(rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_MAX_NUMBERS_DAY_ISSUE_CERTIFICATE_FUTURE)) {
                            dayChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        }
                    }
                }
                //<editor-fold defaultstate="collapsed" desc="### POLICY CHECK PHONE, EMAIL CUSTORMER, DISCOUNT RATE">
                String sREGEX_PHONE = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_PHONE);
                if ("".equals(sREGEX_PHONE.trim())) {
                    sREGEX_PHONE = Definitions.CONFIG_DEFAULT_VALUE_REGEX_PHONE;
                }
                if (CommonFunction.regexPhoneValid(EscapeUtils.CheckTextNull(raServiceReq.phoneContact), sREGEX_PHONE) == false) {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CUSTOMER_PHONE_INVALID;
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                }
                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                    if ("".equals(sREGEX_EMAIL.trim())) {
                        sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                    }
                    if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(raServiceReq.emailContact), sREGEX_EMAIL) == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CUSTOMER_EMAIL_INVALID;
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                    }
                }
                //</editor-fold>

                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    java.sql.Timestamp pEFFECTIVE_DT = null;
                    //<editor-fold defaultstate="collapsed" desc="### CHECK EFFECCTIVE_DT">
                    if("1".equals(checkChangeEffectiveDT)) {
                        String sEffectiveTime = EscapeUtils.CheckTextNull(raServiceReq.effectiveTime);
                        if(!"".equals(sEffectiveTime)) {
                            if(CommonFunction.checkDatePatternValid(sEffectiveTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                if(CommonFunction.checkDateAddDayCurrent(sEffectiveTime, Integer.parseInt(dayChangeEffectiveDT), Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                    if(CommonFunction.checkDateBiggerCurrent(sEffectiveTime, Definitions.CONFIG_DATE_PATTERN_DATE_TIME_DDMMYYYY) == true) {
                                        pEFFECTIVE_DT = CommonFunction.ConvertStringToTimeStamp(sEffectiveTime);
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_EFFECTIVE_INVALID;
                            }
                        }
                    }
                    //</editor-fold>

                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        if (raServiceReq.certificateComponentInfo.length > 0) {
                            int intOUCheckClient = 0;
                            for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                if (EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                    intOUCheckClient = intOUCheckClient + 1;
                                }
                            }
                            CertificateProfileInfo[][] certProfileInfo = new CertificateProfileInfo[1][];
                            db.S_BO_API_CERTIFICATION_PROFILE_GET_PROPERTIES(EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode),
                                    EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode),
                                    EscapeUtils.CheckTextNull(raServiceReq.formFactorCode), certProfileInfo);
                            if (certProfileInfo[0].length > 0) {
                                boolean sCheckRequire = true;
                                //<editor-fold defaultstate="collapsed" desc="### Update isreqiure, commonname certificateComponentInfo">
                                String sPropertiesCert = EscapeUtils.CheckTextNull(certProfileInfo[0][0].certificateProfileProperties);
                                if (!"".equals(sPropertiesCert)) {
                                    CertificateComponentInfo[][] infoCompNew = new CertificateComponentInfo[1][];
                                    ArrayList<CertificateComponentInfo> listCompNew = new ArrayList<>();
                                    CERTIFICATION_TYPE_COMPONENT[][] resProfileData = new CERTIFICATION_TYPE_COMPONENT[1][];
                                    CommonFunction.getJsonComponentForCert(sPropertiesCert, resProfileData);
                                    int intCompOUSrv = 0;
                                    for(CERTIFICATION_TYPE_COMPONENT resProfileData1 : resProfileData[0])
                                    {
                                        if(EscapeUtils.CheckTextNull(resProfileData1.name).equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID))
                                        {
                                            boolean hasComponent = false;
                                            for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                String sCodeInfoOld = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                if (sCodeInfoOld.equals(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE)) {
                                                    sCodeInfoOld = sCodeInfoOld.replace(Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE, Definitions.CONFIG_COMPONENT_DN_TAG_UID);
                                                }
                                                if (EscapeUtils.CheckTextNull(resProfileData1.prefix).equals(EscapeUtils.CheckTextNull(certComponentInfo1.prefix)))
                                                {
                                                    hasComponent = true;
                                                    CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                    itemCompNew.code = sCodeInfoOld;
                                                    itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                    itemCompNew.requireEnabled = resProfileData1.require;
                                                    itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                    itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                    itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                    listCompNew.add(itemCompNew);
                                                    break;
                                                }
                                            }
                                            if(hasComponent == false)
                                            {
                                                CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                itemCompNew.requireEnabled = resProfileData1.require;
                                                itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                itemCompNew.value = "";
                                                itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                listCompNew.add(itemCompNew);
                                            }
                                        } else {
                                            if(!EscapeUtils.CheckTextNull(resProfileData1.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN))
                                            {
                                                if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                                    boolean hasComponent = false;
                                                    intCompOUSrv = intCompOUSrv + 1;
                                                    int intCompOUClient = 0;
                                                    for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo1.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_OU)) {
                                                            hasComponent = true;
                                                            intCompOUClient = intCompOUClient + 1;
                                                            if(intCompOUSrv == intCompOUClient) {
                                                                CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                                itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                                itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                                itemCompNew.requireEnabled = resProfileData1.require;
                                                                itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                                itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                                itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                                listCompNew.add(itemCompNew);
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    if(hasComponent == false) {
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                        itemCompNew.value = "";
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                    }
                                                } else {
                                                    boolean hasComponent = false;
                                                    for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                        if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(EscapeUtils.CheckTextNull(certComponentInfo1.code))) {
                                                            hasComponent = true;
                                                            CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                            itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                            itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                            itemCompNew.requireEnabled = resProfileData1.require;
                                                            itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                            itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                            itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                            listCompNew.add(itemCompNew);
                                                            break;
                                                        }
                                                    }
                                                    if(hasComponent == false)
                                                    {
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = EscapeUtils.CheckTextNull(resProfileData1.attributeType);
                                                        itemCompNew.value = "";
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                    }
                                                }
                                            } else {
                                                boolean hasComponent = false;
                                                for (CertificateComponentInfo certComponentInfo1 : raServiceReq.certificateComponentInfo) {
                                                    if (EscapeUtils.CheckTextNull(resProfileData1.name).equals(EscapeUtils.CheckTextNull(certComponentInfo1.code))) {
                                                        hasComponent = true;
                                                        CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                        itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                        itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                        itemCompNew.requireEnabled = resProfileData1.require;
                                                        itemCompNew.attributeType = Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN;
                                                        itemCompNew.value = EscapeUtils.CheckTextNull(certComponentInfo1.value);
                                                        itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                        listCompNew.add(itemCompNew);
                                                        break;
                                                    }
                                                }
                                                if(hasComponent == false)
                                                {
                                                    CertificateComponentInfo itemCompNew = new CertificateComponentInfo();
                                                    itemCompNew.code = EscapeUtils.CheckTextNull(resProfileData1.name);
                                                    itemCompNew.commomNameType = EscapeUtils.CheckTextNull(resProfileData1.commomNameType);
                                                    itemCompNew.requireEnabled = resProfileData1.require;
                                                    itemCompNew.attributeType = Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN;
                                                    itemCompNew.value = "";
                                                    itemCompNew.prefix = EscapeUtils.CheckTextNull(resProfileData1.prefix);
                                                    listCompNew.add(itemCompNew);
                                                }
                                            }
                                        }
                                    }
                                    infoCompNew[0] = new CertificateComponentInfo[listCompNew.size()];
                                    infoCompNew[0] = listCompNew.toArray(infoCompNew[0]);
                                    raServiceReq.certificateComponentInfo = infoCompNew[0];
                                    if(intOUCheckClient > intCompOUSrv) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_INVALID;
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_TEMPLATE_CERT_EMPTY;
                                }
                                //</editor-fold>

                                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                    String sCommomNameType = "";
                                    String sCompanyCompoment = "";
                                    String sDomainCompoment = "";
                                    String sPersonalCompoment = "";
                                    String sMSTCompoment = "";
                                    String sMSTCompomentCN = "";
                                    String sQDCompoment = "";
                                    String sBHXHCompoment = "";
                                    String sBHXHCompomentCN = "";
                                    String sMDVCompoment = "";
                                    String sMNSCompoment = "";
                                    String sCMNDCompoment = "";
                                    String sCCCDCompoment = "";
                                    String sDeviceUUID = "";
                                    String sHCCompoment = "";
                                    String sProvinceCodeComponent = "";
                                    String sProvinceNameComponent = "";
                                    String sDNResult = "";
                                    String sCoreCASubject = "";
                                    boolean isEmailCertValid = true;
                                    boolean checkCSRNotExists = true;
                                    //<editor-fold defaultstate="collapsed" desc="### Get info component from certificateComponentInfo">
                                    // CHECK REQUIRE FOR UID
                                    boolean hasCompanyUID = false;
                                    boolean hasPesonalUID = false;
                                    boolean hasCompanyValue = false;
                                    boolean hasPesonalValue = false;
                                    for (CertificateComponentInfo compCheckUID : raServiceReq.certificateComponentInfo) {
                                        if (EscapeUtils.CheckTextNull(compCheckUID.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY)) {
                                            hasCompanyUID = true;
                                            if (compCheckUID.requireEnabled == true) {
                                                if (!"".equals(EscapeUtils.CheckTextNull(compCheckUID.value))) {
                                                    hasCompanyValue = true;
                                                    break;
                                                } else {hasCompanyValue = false;}
                                            } else {hasCompanyValue = true;}
                                        }
                                    }
                                    for (CertificateComponentInfo compCheckUID : raServiceReq.certificateComponentInfo) {
                                        if (EscapeUtils.CheckTextNull(compCheckUID.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL)) {
                                            hasPesonalUID = true;
                                            if (compCheckUID.requireEnabled == true) {
                                                if (!"".equals(EscapeUtils.CheckTextNull(compCheckUID.value))) {
                                                    hasPesonalValue = true;
                                                    break;
                                                } else {hasPesonalValue = false;}
                                            } else {hasPesonalValue = true;}
                                        }
                                    }
                                    if(hasCompanyUID == true) {
                                        if(hasCompanyValue == false) {
                                            sCheckRequire = false;
                                        }
                                    }
                                    if(hasPesonalUID == true) {
                                        if(hasPesonalValue == false) {
                                            sCheckRequire = false;
                                        }
                                    }
                                    if (sCheckRequire == true) {
                                        String sSubjectEmail = "";
                                        String sSANEmail = "";
                                        boolean isHasSANEmail = false;
                                        List<CERTIFICATION_PROPERTIES_JSON.Attribute> attributesSan = new ArrayList<>();
                                        if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                            for (CertificateComponentInfo certComponentInfo2 : raServiceReq.certificateComponentInfo) {
                                                if (!EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_TEXTFIELD_SAN))
                                                {
                                                    // check require
                                                    if (certComponentInfo2.requireEnabled == true) {
                                                        if (!EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY)
                                                                && !EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL)) {
                                                            if ("".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value))) {
                                                                sCheckRequire = false;
                                                                break;
                                                            }
                                                        } else {
                                                        }
                                                    }
                                                    // get city province name
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_ST)) {
                                                        sProvinceCodeComponent = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        if("".equals(sProvinceCodeComponent) || Definitions.CONFIG_GRID_STRING_NA.equals(sProvinceCodeComponent)) {
                                                            sProvinceCodeComponent = "";
                                                        }
                                                        if(!"".equals(sProvinceCodeComponent)) {
                                                            CityProvinceInfo[][] cityInfo = new CityProvinceInfo[1][];
                                                            db.S_BO_API_PROVINCE_LIST(sProvinceCodeComponent, raServiceReq.language, cityInfo);
                                                            if (cityInfo[0].length > 0) {
                                                                certComponentInfo2.value = EscapeUtils.CheckTextNull(cityInfo[0][0].cityProvinceName);
                                                                sProvinceNameComponent = EscapeUtils.CheckTextNull(cityInfo[0][0].cityProvinceName);
                                                            }
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_L)) {
                                                        String sValueL = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        if("".equals(sValueL) || Definitions.CONFIG_GRID_STRING_NA.equals(sValueL)) {
                                                            certComponentInfo2.value = "";
                                                        }
                                                    }
                                                    // get company, personal name
                                                    if (!"".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value))) {
                                                        if(CommonFunction.checkCertCharacterSpecial(certComponentInfo2.value) == false) {
                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_COMPONENT_CHARACTER_SPECIAL;
                                                            break;
                                                        }
                                                        sDNResult += EscapeUtils.CheckTextNull(certComponentInfo2.code) + "=" + EscapeUtils.CheckTextNull(certComponentInfo2.prefix)
                                                            + CommonFunction.replaceStringCharaterSpecialDN(EscapeUtils.CheckTextNull(certComponentInfo2.value), true, false) + ", ";
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_CN)) {
                                                        sCommomNameType = EscapeUtils.CheckTextNull(certComponentInfo2.commomNameType);
                                                        if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_COMPANY)) {
                                                            sCompanyCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_PERSON)) {
                                                            sPersonalCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (sCommomNameType.equals(Definitions.CONFIG_COMPONENT_DN_COMMONNAME_DOMAIN_NAME)) {
                                                            sDomainCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBCLIENT + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBSERVER + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_AUTH + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CODE_SIGNING + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                        {
                                                            sDeviceUUID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_SIGN + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            sPersonalCompoment = "";
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_O)) {
                                                        if (!"".equals(sCommomNameType)) {
                                                            if (EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                                || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN)) {
                                                                sCompanyCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_COMPANY))
                                                    {
                                                        if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE))
                                                        {
                                                            if(!"".equals(EscapeUtils.CheckTextNull(certComponentInfo2.value)))
                                                            {
                                                                sDeviceUUID = EscapeUtils.CheckTextNull(certComponentInfo2.prefix) + EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                        } else {
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_TAX_CODE + ":")) {
                                                                sMSTCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_BUDGET_CODE + ":")) {
                                                                sMNSCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_DECISION + ":")) {
                                                                sQDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_SOCIAL_INSURANCE_CODE + ":")) {
                                                                sBHXHCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                            if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_UNIT_CODE + ":")) {
                                                                sMDVCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                            }
                                                        }
                                                    }
                                                    if(EscapeUtils.CheckTextNull(certComponentInfo2.attributeType).equals(Definitions.CONFIG_DN_ATTRIBUTE_TYPE_COMBOBOX_LIST_PERSONAL))
                                                    {
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_CODE + ":")) {
                                                            sCMNDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_PASSPORT_CODE + ":")) {
                                                            sHCCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_PERSONAL_CITIZEN_CODE + ":")) {
                                                            sCCCDCompoment = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_SOCIAL_INSURANCE_CODE + ":")) {
                                                            sBHXHCompomentCN = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                        if (EscapeUtils.CheckTextNull(certComponentInfo2.prefix).equals(Definitions.CONFIG_PREFIX_ENTERPRISE_TAX_CODE + ":")) {
                                                            sMSTCompomentCN = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                        }
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_DN_TAG_E)) {
                                                        sSubjectEmail = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    }
                                                } else {
                                                    // PROPERTIES SAN
                                                    String sValueSan = EscapeUtils.CheckTextNull(certComponentInfo2.value);
                                                    if (certComponentInfo2.requireEnabled == true) {
                                                        if ("".equals(sValueSan)) {
                                                            sCheckRequire = false;
                                                            break;
                                                        }
                                                    }
                                                    if(!"".equals(sValueSan)) {
                                                        String sCodeSan = EscapeUtils.CheckTextNull(certComponentInfo2.code);
                                                        String sKey = "";
                                                        if(!"".equals(sCodeSan)) {
                                                            sKey = sCodeSan;
                                                        }
                                                        CERTIFICATION_PROPERTIES_JSON.Attribute attribute = new CERTIFICATION_PROPERTIES_JSON.Attribute();
                                                        attribute.setKey(sKey);
                                                        attribute.setValue(sValueSan);
                                                        attributesSan.add(attribute);
                                                    }
                                                    if (EscapeUtils.CheckTextNull(certComponentInfo2.code).equals(Definitions.CONFIG_COMPONENT_SAN_TAG_rfc822Name)) {
                                                        sSANEmail = sValueSan;
                                                        isHasSANEmail = true;
                                                    }
                                                }
                                            }
                                        }
                                        if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                            //<editor-fold defaultstate="collapsed" desc="### CHECK EMAIL CERT VALID">
                                            if(!"".equals(sSubjectEmail)) {
                                                String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                                                if ("".equals(sREGEX_EMAIL.trim())) {
                                                    sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                                                }
                                                if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(sSubjectEmail), sREGEX_EMAIL) == false) {
                                                    isEmailCertValid = false;
                                                }
                                            }
                                            if(!"".equals(sSANEmail)) {
                                                String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                                                if ("".equals(sREGEX_EMAIL.trim())) {
                                                    sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                                                }
                                                if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(sSANEmail), sREGEX_EMAIL) == false) {
                                                    isEmailCertValid = false;
                                                }
                                            }
                                            //</editor-fold>

                                            if(isEmailCertValid == true) {
                                                if(attributesSan.size() > 0) {
                                                    strDNSName = "{\"attributes\":" + objectMapper.writeValueAsString(attributesSan) + "}";
                                                }
                                                CommonFunction.LogDebugString(log, "SAN_Properties", strDNSName);
                                                if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTTYPE_DESC_STAFF))
                                                {
                                                    if(!"".equals(sMSTCompoment) && !"".equals(sMNSCompoment) && !"".equals(sQDCompoment)
                                                        && !"".equals(sBHXHCompoment) && !"".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sMSTCompoment) && "".equals(sMNSCompoment) && "".equals(sQDCompoment)
                                                        && "".equals(sBHXHCompoment) && "".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if(!"".equals(sCMNDCompoment) && !"".equals(sHCCompoment) && !"".equals(sCCCDCompoment)
                                                        && !"".equals(sBHXHCompomentCN) && !"".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sCMNDCompoment) && "".equals(sHCCompoment) && "".equals(sCCCDCompoment)
                                                        && "".equals(sBHXHCompomentCN) && "".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTTYPE_DESC_ENTERPRISE)) {
                                                    if(!"".equals(sMSTCompoment) && !"".equals(sMNSCompoment) && !"".equals(sQDCompoment)
                                                        && !"".equals(sBHXHCompoment) && !"".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sMSTCompoment) && "".equals(sMNSCompoment) && "".equals(sQDCompoment)
                                                        && "".equals(sBHXHCompoment) && "".equals(sMDVCompoment))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTTYPE_DESC_PERSONAL))
                                                {
                                                    if(!"".equals(sCMNDCompoment) && !"".equals(sHCCompoment) && !"".equals(sCCCDCompoment)
                                                        && !"".equals(sBHXHCompomentCN) && !"".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                    if("".equals(sCMNDCompoment) && "".equals(sHCCompoment) && "".equals(sCCCDCompoment)
                                                        && "".equals(sBHXHCompomentCN) && "".equals(sMSTCompomentCN))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE))
                                                {
                                                    if("".equals(sDeviceUUID))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                } else if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_PERSONAL_GOV)
                                                    || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV))
                                                {

                                                } else if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                    || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                    || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                    || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV)
                                                    || EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                                                {
                                                    if("".equals(sDeviceUUID))
                                                    {
                                                        sCheckRequire = false;
                                                    }
                                                }
                                                sDNResult = CommonFunction.subLastCharater(sDNResult);
                                                CommonFunction.LogDebugString(log, sFunctionWS + " - Parser Cert Info", "sCommomNameType: " + sCommomNameType
                                                    + ";sCompanyCompoment: " + sCompanyCompoment + ";sDomainCompoment: " + sDomainCompoment
                                                    + ";sPersonalCompoment: " + sPersonalCompoment + ";sCMNDCompoment: " + sCMNDCompoment
                                                    + ";sCCCDCompoment: " + sCCCDCompoment + ";sHCCompoment: " + sHCCompoment
                                                    + ";sMSTCompoment: " + sMSTCompoment + ";sMNSCompoment: " + sMNSCompoment + ";sQDCompoment: " + sQDCompoment
                                                    + ";sDeviceUUID: " + sDeviceUUID+ ";sBHXHCompoment: " + sBHXHCompoment + ";sMDVCompoment: " + sMDVCompoment
                                                    + ";sMSTCompomentCN: " + sMSTCompomentCN+ ";sBHXHCompomentCN: " + sBHXHCompomentCN + ";sDNResult: " + sDNResult);
                                            }
                                        }
                                    }
                                    //</editor-fold>
                                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                        boolean isHasFileClient = false;
                                        if (sCheckRequire == true) {
                                            if (isEmailCertValid == true) {
                                                if (!"".equals(sDNResult)) {
                                                    //<editor-fold defaultstate="collapsed" desc="### GET FULLNAME">
                                                    String raFullnameCreate = "";
                                                    String raFullname = "";
                                                    UserInfo[][] userInfo = new UserInfo[1][];
                                                    db.S_BO_API_USER_LIST(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", raServiceReq.language, userInfo);
                                                    if (userInfo[0].length > 0) {
                                                        raFullnameCreate = EscapeUtils.CheckTextNull(userInfo[0][0].fullName);
                                                    }
                                                    UserInfo[][] userDetail = new UserInfo[1][];
                                                    db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                                                    if (userDetail[0].length > 0) {
                                                        raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                                                    }
                                                    //</editor-fold>

                                                    tempProfileList = new ArrayList<>();
                                                    String dnUniqueEnabled = "0";
                                                    CertificateAuthorityInfo[][] caInfo = new CertificateAuthorityInfo[1][];
                                                    db.S_BO_API_CERTIFICATION_AUTHORITY_LIST(EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode),
                                                            raServiceReq.language, caInfo, "", tempProfileList);
                                                    if (caInfo[0].length > 0) {
                                                        sCoreCASubject = EscapeUtils.CheckTextNull(caInfo[0][0].certificateAuthorityCoreCASubject);
                                                        dnUniqueEnabled = caInfo[0][0].dnUniqueEnabled;
                                                    }
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                    
                                                    String idenType="";
                                                    String identification = "";
                                                    String sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                                                    //<editor-fold defaultstate="collapsed" desc="### OWNER PROCESS">
                                                    if(raServiceReq.certificateOwnerID == 0)
                                                    {
                                                        String sEnterpriseID = "";
                                                        String sPersonalID = "";
                                                        int pCERTIFICATION_OWNER_TYPE_ID = 0;
                                                        String sCERTIFICATION_OWNER_TYPE = "";
                                                        if(!"".equals(sMSTCompoment)) {
                                                            sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE + sMSTCompoment;
                                                            idenType = Definitions.CONFIG_RSSP_REST_IDENTIFICATION_TYPE_TAXCODE;
                                                            identification = sMSTCompoment;
                                                        }
                                                        if(!"".equals(sMNSCompoment)) {
                                                            sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_BUDGETCODE + sMNSCompoment;
                                                            idenType = Definitions.CONFIG_RSSP_REST_IDENTIFICATION_TYPE_BUDGETCODE;
                                                            identification = sMNSCompoment;
                                                        }
                                                        if(!"".equals(sQDCompoment)) {
                                                            sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_DECISION + sQDCompoment;
                                                        }
                                                        if(!"".equals(sBHXHCompoment)) {
                                                            sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_SOCIAL_INSURANCE_CODE + sBHXHCompoment;
                                                        }
                                                        if(!"".equals(sMDVCompoment)) {
                                                            sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_UNIT_CODE + sMDVCompoment;
                                                        }
                                                        if(!"".equals(sCMNDCompoment)) {
                                                            sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CMND + sCMNDCompoment;
                                                            idenType = Definitions.CONFIG_RSSP_REST_IDENTIFICATION_TYPE_CMND;
                                                            identification = sCMNDCompoment;
                                                        }
                                                        if(!"".equals(sHCCompoment)) {
                                                            sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_PASSPORT + sHCCompoment;
                                                            idenType = Definitions.CONFIG_RSSP_REST_IDENTIFICATION_TYPE_PASSPORT;
                                                            identification = sHCCompoment;
                                                        }
                                                        if(!"".equals(sCCCDCompoment)) {
                                                            sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CITIZEN_ID + sCCCDCompoment;
                                                            idenType = Definitions.CONFIG_RSSP_REST_IDENTIFICATION_TYPE_CITIZEN_ID;
                                                            identification = sCCCDCompoment;
                                                        }
                                                        if(!"".equals(sMSTCompomentCN)) {
                                                            sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE + sMSTCompomentCN;
                                                        }
                                                        if(!"".equals(sBHXHCompomentCN)) {
                                                            sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_SOCIAL_INSURANCE_CODE + sBHXHCompomentCN;
                                                        }
                                                        if(!EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_PERSONAL_GOV)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN)
                                                            && !EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV))
                                                        {
                                                            if(!"".equals(sEnterpriseID) && "".equals(sPersonalID)) {
                                                                sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_ENTERPRISE;
                                                                pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_ENTERPRISE;
                                                            }
                                                            if("".equals(sEnterpriseID) && !"".equals(sPersonalID)) {
                                                                sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_PERSONAL;
                                                                pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_PERSONAL;
                                                            }
                                                            if(!"".equals(sEnterpriseID) && !"".equals(sPersonalID)) {
                                                                sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_PERSONAL;
                                                                pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_PERSONAL;
                                                            }
                                                        } else {
                                                            if(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_ENTERPRISE_GOV))
                                                            {
                                                                sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_ENTERPRISE_GOV;
                                                                pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_ENTERPRISE_GOV;
                                                            } else {
                                                                sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_PERSONAL_GOV;
                                                                pCERTIFICATION_OWNER_TYPE_ID = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_ID_PERSONAL_GOV;
                                                            }
                                                        }
                                                        if(pCERTIFICATION_OWNER_TYPE_ID != 0) {
                                                            if("1".equals(dnUniqueEnabled)) {
                                                                int isCheckUnique = db.S_BO_CHECK_ENFORCE_UNIQUE_DN(pCERTIFICATION_OWNER_TYPE_ID, sEnterpriseID,
                                                                    sPersonalID, EscapeUtils.CheckTextNull(raServiceReq.emailContact), sDNResult, 0);
                                                                if(isCheckUnique != 0) {
                                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_SUBJECT_DN_INVALID;
                                                                }
                                                            }
                                                            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                                if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN))
                                                                {
                                                                    if (!"".equals(sCSR)) {
                                                                        String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                                        int checkPublicKey = db.S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH(pCERTIFICATION_OWNER_TYPE_ID, sEnterpriseID,
                                                                            sPersonalID, EscapeUtils.CheckTextNull(raServiceReq.emailContact), sPublicKeyHard, 0);
                                                                        if(checkPublicKey == 0) {
                                                                            checkCSRNotExists = true;
                                                                        } else {
                                                                            checkCSRNotExists = false;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                            String sLocation = CommonFunction.getLocationInDN(sDNResult).trim();
                                                            String sAddress;
                                                            if(!"".equals(sLocation)) {
                                                                sAddress = CommonFunction.replaceStringCharaterSpecialDN(sLocation, true, true) + ", " + CommonFunction.getStateOrProvinceInDN(sDNResult);
                                                            } else {
                                                                sAddress = CommonFunction.getStateOrProvinceInDN(sDNResult).trim();
                                                            }
                                                            String pMESSAGE_QUEUE_TYPE_CODE = Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_CODE_REGISTRATION_OWNER;
                                                            String sOwnerUUID = CommonFunction.getUUIDV4();

                                                            //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR ">
                                                            CERTIFICATION_OWNER_DATA_ATTR tempLogReqOwner = new CERTIFICATION_OWNER_DATA_ATTR();
                                                            tempLogReqOwner.personalName = raServiceReq.personalName;
                                                            tempLogReqOwner.companyName = raServiceReq.companyName;
                                                            tempLogReqOwner.taxCode = sMSTCompoment;
                                                            tempLogReqOwner.budgetCode = sMNSCompoment;
                                                            tempLogReqOwner.decision = sQDCompoment;
                                                            tempLogReqOwner.personalCode = sCMNDCompoment;
                                                            tempLogReqOwner.passportCode = sHCCompoment;
                                                            tempLogReqOwner.enterpriseID = sEnterpriseID;
                                                            tempLogReqOwner.personalID = sPersonalID;
                                                            tempLogReqOwner.citizenID = sCCCDCompoment;
                                                            tempLogReqOwner.emailContract = raServiceReq.emailContact;
                                                            tempLogReqOwner.phoneContract = raServiceReq.phoneContact;
                                                            tempLogReqOwner.address = raServiceReq.address;
                                                            tempLogReqOwner.representative = "";
                                                            tempLogReqOwner.representativePosition = "";
                                                            tempLogReqOwner.typeName = pMESSAGE_QUEUE_TYPE_CODE;
                                                            tempLogReqOwner.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PENDING;
                                                            tempLogReqOwner.createUser = raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")";
                                                            tempLogReqOwner.createDt = new Date();
                                                            //</editor-fold>
                                                            int[] pCERTIFICATION_OWNER_ID = new int[1];
                                                            int[] pOWNER_ATTR_ID = new int[1];
                                                            String[] pRESPONSE_CODE = new String[1];
                                                            db.S_BO_API_CERTIFICATION_OWNER_INSERT(sPersonalCompoment, sCompanyCompoment, sEnterpriseID,
                                                                sPersonalID, sCERTIFICATION_OWNER_TYPE, raServiceReq.phoneContact, raServiceReq.emailContact,
                                                                raServiceReq.beneficiaryUser, sAddress, "", "", pMESSAGE_QUEUE_TYPE_CODE,
                                                                objectMapper.writeValueAsString(tempLogReqOwner), sOwnerUUID, pRESPONSE_CODE,
                                                                pCERTIFICATION_OWNER_ID, pOWNER_ATTR_ID);
                                                            if (!"0".equals(pRESPONSE_CODE[0])) {
                                                                if(pRESPONSE_CODE[0].trim().equals(String.valueOf(Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_EXISTS)))
                                                                {
                                                                    raServiceReq.certificateOwnerID = pCERTIFICATION_OWNER_ID[0];
                                                                } else {
                                                                    raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE[0]);
                                                                }
                                                            } else {
                                                                raServiceReq.certificateOwnerID = pCERTIFICATION_OWNER_ID[0];
                                                            }
                                                        }
                                                    } else {
                                                        if("1".equals(dnUniqueEnabled)) {
                                                            int isCheckUnique = db.S_BO_CHECK_ENFORCE_UNIQUE_DN(0, null, null, null, null, raServiceReq.certificateOwnerID);
                                                            if(isCheckUnique != 0) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_SUBJECT_DN_INVALID;
                                                            }
                                                        }
                                                        if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                            if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)) {
                                                                if (!"".equals(sCSR)) {
                                                                    String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                                    int checkPublicKey = db.S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH(0, null, null, null, sPublicKeyHard, raServiceReq.certificateOwnerID);
                                                                    if(checkPublicKey == 0) {
                                                                        checkCSRNotExists = true;
                                                                    } else {
                                                                        checkCSRNotExists = false;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    //</editor-fold>

                                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                        //<editor-fold defaultstate="collapsed" desc="### File manager Modules">
                                                        boolean isHasReqFile = false;
                                                        String sPropertiesFile = "";
                                                        CertificatePurposeInfo[][] certPurposeInfo = new CertificatePurposeInfo[1][];
                                                        db.S_BO_API_CERTIFICATION_PURPOSE_GET_FILE_PROPERTIES(EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode), certPurposeInfo);
                                                        if (certPurposeInfo[0].length > 0) {
                                                            sPropertiesFile = EscapeUtils.CheckTextNull(certPurposeInfo[0][0].certificatePurposeFileProperties);
                                                        }
                                                        if (raServiceReq.fileManagerInfo != null) {
                                                            if (raServiceReq.fileManagerInfo.length > 0) {
                                                                isHasFileClient = true;
                                                            }
                                                        }
                                                        if (isHasFileClient == true) {
                                                            if (!"".equals(sPropertiesFile)) {
                                                                objectMapper = new ObjectMapper();
                                                                FILE_PROFILE_JSON itemParsePush = objectMapper.readValue(sPropertiesFile, FILE_PROFILE_JSON.class);
                                                                for (FileManagerInfo fileManagerInfo1 : raServiceReq.fileManagerInfo) {
                                                                    for (FILE_PROFILE_JSON.Attribute attribute : itemParsePush.getAttributes()) {
                                                                        if (EscapeUtils.CheckTextNull(fileManagerInfo1.fileTypeCode).equals(attribute.getName())) {
                                                                            fileManagerInfo1.requireEnabled = attribute.getIsRequire();
                                                                        }
                                                                        if (attribute.getIsRequire() == true) {
                                                                            isHasReqFile = true;
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_TEMPLATE_FILE_EMPTY;
                                                            }
                                                        } else {
                                                            if (!"".equals(sPropertiesFile)) {
                                                                objectMapper = new ObjectMapper();
                                                                FILE_PROFILE_JSON itemParsePush = objectMapper.readValue(sPropertiesFile, FILE_PROFILE_JSON.class);
                                                                for (FILE_PROFILE_JSON.Attribute attribute : itemParsePush.getAttributes()) {
                                                                    if (attribute.getIsRequire() == true) {
                                                                        isHasReqFile = true;
                                                                    }
                                                                }
                                                            } else {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_TEMPLATE_FILE_EMPTY;
                                                            }
                                                        }
                                                        if (isHasFileClient == true) {
                                                            for (FileManagerInfo fileManagerCheck : raServiceReq.fileManagerInfo) {
                                                                // check require
                                                                if (fileManagerCheck.requireEnabled == true) {
                                                                    if (fileManagerCheck.fileByte == null) {
                                                                        sCheckRequire = false;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            if (sCheckRequire == true) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                            } else {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_FILE_EMPTY;
                                                            }
                                                        } else {
                                                            if (isHasReqFile == true) {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_TEMPLATE_FILE_EMPTY;
                                                            }
                                                        }
                                                        //</editor-fold>
                                                    }
                                                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                        if("".equals(sProvinceCodeComponent)) {
                                                            sProvinceCodeComponent = Definitions.CONFIG_GRID_STRING_NA;
                                                            sProvinceNameComponent = Definitions.CONFIG_GRID_STRING_NA;
                                                        }
                                                        String CheckCHANGE_KEY = "1";
                                                        String CheckPRIVATE_KEY;
                                                        String sCERTIFICATION_SN = "";
                                                        String pPAST_CERTIFICATION_SN = "";
                                                        if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)) {
                                                            if (EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_SSL)) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_SSL_SN;
                                                            } else if (EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING)) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_CODESIGNNING_SN;
                                                            } else if (EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode).equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_DEVICE)) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_DEVICE_SN;
                                                            } else {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_SIGNSERVER_SN;
                                                            }
                                                        } else if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                                                            if(raServiceReq.inHouseEnabled == true) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_SN_FORMFACTOR_ESIGNCLOUD;
                                                            } else {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_UNASSIGN_SN;
                                                            }
                                                        } else if (CommonFunction.checkHardTokenEnabled(EscapeUtils.CheckTextNull(raServiceReq.formFactorCode)) == true) {
                                                            if(raServiceReq.inHouseEnabled == true) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_SN_INHOUSE;
                                                            } else {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_UNASSIGN_SN;
                                                            }
                                                        } else if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                                            if(raServiceReq.inHouseEnabled == true) {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_SN_INHOUSE;
                                                            } else {
                                                                sTOKEN_SN = Definitions.CONFIG_TOKEN_UNASSIGN_SN;
                                                            }
                                                        } else if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN)) {
                                                            sTOKEN_SN = Definitions.CONFIG_TOKEN_SIGNSERVER_SN;
                                                        } else {
                                                            sTOKEN_SN = "";
                                                        }
                                                        String sPromotionDuration = "";
                                                        if(raServiceReq.promotionDuration != -1) {
                                                            sPromotionDuration = String.valueOf(raServiceReq.promotionDuration);
                                                        }
                                                        //<editor-fold defaultstate="collapsed" desc="### EXPAND PARAM PROCESS">
                                                        String sRsspRelyingParty = "";
                                                        String sRsspCertificateUUID = "";
                                                        String sRsspConnectWSMode = "";
                                                        String sRepresentative = "";
                                                        String sRepresentativePosition = "";
                                                        String sExpandParam = EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML);
                                                        if(!"".equals(sExpandParam)) {
                                                            ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                                            sRepresentative = EscapeUtils.CheckTextNull(jsonReqExpand.representative);
                                                            sRepresentativePosition = EscapeUtils.CheckTextNull(jsonReqExpand.representativePosition);
                                                        }
                                                        //</editor-fold>

                                                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                            String[] sUIDResult = new String[2];
                                                            CommonReferServlet.collectFieldToUIDAPI(sMSTCompoment, sMNSCompoment, sQDCompoment, sBHXHCompoment, sMDVCompoment, 
                                                                sCMNDCompoment, sHCCompoment, sCCCDCompoment, sMSTCompomentCN, sBHXHCompomentCN, sUIDResult);
                                                            String sEnterpriseCert = sUIDResult[0];
                                                            String sPersonalCert = sUIDResult[1];
                                                            //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR ">
                                                            CERTIFICATION_DATA_ATTR tempLogReq = new CERTIFICATION_DATA_ATTR();
                                                            tempLogReq.personalName = sPersonalCompoment;
                                                            tempLogReq.companyName = sCompanyCompoment;
                                                            tempLogReq.enterpriseID = sEnterpriseCert;
                                                            tempLogReq.personalID = sPersonalCert;
                                                            tempLogReq.emailContract = raServiceReq.emailContact;
                                                            tempLogReq.phoneContract = raServiceReq.phoneContact;
                                                            tempLogReq.issuerSubject = sCoreCASubject;
                                                            tempLogReq.subjectDn = sDNResult;
                                                            tempLogReq.tokenSn = sTOKEN_SN;
                                                            tempLogReq.provinceName = sProvinceNameComponent;
                                                            tempLogReq.pkiFromFactorCode = raServiceReq.formFactorCode;
                                                            tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                                                            ATTRIBUTE_VALUES valueATTR;
                                                            ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                                                            dataATTR.setCertificationData(tempLogReq);
                                                            valueATTR = new ATTRIBUTE_VALUES();
                                                            valueATTR.setTokenSn(sTOKEN_SN);
                                                            boolean sChangeKeyEnabled = "1".equals(CheckCHANGE_KEY);
                                                            valueATTR.setChangeKeyEnabled(sChangeKeyEnabled);
                                                            valueATTR.setKeepCertificateSNEnabled(false);
                                                            valueATTR.setTypeName(pCERTIFICATION_ATTR_TYPE_CODE);
                                                            valueATTR.setPromotionDuration(sPromotionDuration);
                                                            if(!"".equals(sRsspRelyingParty)) {
                                                                valueATTR.setRsspRelyingParty(sRsspRelyingParty);
                                                            }
                                                            if(!"".equals(sRsspCertificateUUID)) {
                                                                valueATTR.setRsspCertificateUUID(sRsspCertificateUUID);
                                                            }
                                                            if(!"".equals(sRsspConnectWSMode)) {
                                                                valueATTR.setRsspConnectWSMode(sRsspConnectWSMode);
                                                            }
                                                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                                            valueATTR.setCreateUser(raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                                                            valueATTR.setCreateDt(new Date());
                                                            valueATTR.setAttributeData(dataATTR);
                                                            //</editor-fold>

                                                            String strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                            //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                                                            // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                                                            int intLevelApprove = 0;
                                                            if (autoApproveCAServer == false && autoApproveCAClient == false) {
                                                                intLevelApprove = 0;
                                                            } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                                                                intLevelApprove = 1;
                                                            } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                                                                intLevelApprove = 0;
                                                            } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                                                                intLevelApprove = 2;
                                                            }
                                                            //</editor-fold>

                                                            int[] pCERTIFICATE_ATTR_ID = new int[1];
                                                            int[] pCERTIFICATION_ID = new int[1];
                                                            String[] pRESPONSE_CODE_NAME = new String[1];
                                                            if (CommonFunction.checkHardTokenEnabled(EscapeUtils.CheckTextNull(raServiceReq.formFactorCode)) == true) {
                                                                //<editor-fold defaultstate="collapsed" desc="### GET POLICY">
                                                                int intOTPNumn = 8;
                                                                if (rsPolicy[0].length > 0) {
                                                                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                                        if (EscapeUtils.CheckTextNull(rsPolicy1.NAME).equals(Definitions.CONFIG_POLICY_FO_DEFAULT_ACTIVATION_CODE_LENGTH)) {
                                                                            intOTPNumn = Integer.parseInt(rsPolicy1.VALUE);
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                                //</editor-fold>
                                                                if (raServiceReq.backupKeyEnabled == true) {
                                                                    CheckPRIVATE_KEY = "1";
                                                                } else {
                                                                    CheckPRIVATE_KEY = "0";
                                                                }
                                                                pRESPONSE_CODE_NAME[0] = "10000";
                                                                //<editor-fold defaultstate="collapsed" desc="### INSERT CERT AND ACTIVATION CODE">
                                                                while ("10000".equals(pRESPONSE_CODE_NAME[0])) {
                                                                    try {
                                                                        String sOTP = "";
                                                                        sOTP = CommonFunction.getRandomOTP(intOTPNumn);
                                                                        if(raServiceReq.activationCodeEnabled == true) {
                                                                            raServiceResp.activationCode = sOTP;
                                                                        }
                                                                        db.S_BO_API_CERTIFICATION_INSERT(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), sTOKEN_SN,
                                                                            sCERTIFICATION_SN, sPersonalCompoment, sCompanyCompoment, sDomainCompoment, sDNResult, sCoreCASubject,
                                                                            EscapeUtils.CheckTextNull(raServiceReq.phoneContact), EscapeUtils.CheckTextNull(raServiceReq.emailContact),
                                                                            sProvinceCodeComponent, pPAST_CERTIFICATION_SN, sOTP, pCERTIFICATION_ATTR_TYPE_CODE,
                                                                            strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser),
                                                                            EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), sCSR,
                                                                            EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode), CheckCHANGE_KEY, CheckPRIVATE_KEY,
                                                                            EscapeUtils.CheckTextNull(raServiceReq.formFactorCode), sDeviceUUID.trim(), sPromotionDuration, pRESPONSE_CODE_NAME, pCERTIFICATION_ID,
                                                                            pCERTIFICATE_ATTR_ID, raServiceReq.certificateOwnerID, pEFFECTIVE_DT, null, sEnterpriseCert, sPersonalCert);
                                                                        CommonFunction.LogDebugString(log, sTOKEN_SN + " - S_BO_API_CERTIFICATION_INSERT - RESULT", pRESPONSE_CODE_NAME[0]);
                                                                    } catch (Exception e) {
                                                                        if (e.getMessage().contains(Definitions.CONFIG_MYSQL_UNIQUE_ACTIVATION_CODE)) {
                                                                            pRESPONSE_CODE_NAME[0] = "10000";
                                                                        } else {
                                                                            pRESPONSE_CODE_NAME[0] = String.valueOf(Definitions.CONFIG_WS_RESPONSE_CODE_EXCEPTION);
                                                                            CommonFunction.LogExceptionServlet(log, e.getMessage().trim(), e);
                                                                        }
                                                                    }
                                                                }
                                                                //</editor-fold>

                                                                if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                                                    raServiceResp.certificateID = pCERTIFICATION_ID[0];
                                                                    raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                    if(!"".equals(strDNSName)) {
                                                                        db.S_BO_CERTIFICATION_UPDATE_PROPERTIES(String.valueOf(pCERTIFICATION_ID[0]), strDNSName, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                                    }
                                                                    if(!"".equals(sRepresentative) || !"".equals(sRepresentativePosition)){
                                                                        ProfileContactInfoJson profileContact = new ProfileContactInfoJson();
                                                                        profileContact.RepresentativeName = CommonFunction.replaceCharaterSpecialJson(sRepresentative, true);
                                                                        profileContact.Position = CommonFunction.replaceCharaterSpecialJson(sRepresentativePosition, true);
                                                                        objectMapper = new ObjectMapper();
                                                                        BACKOFFICE_USER[][] rsUserID = new BACKOFFICE_USER[1][0];
                                                                        db.S_BO_USER_GET_BY_USERNAME(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), rsUserID);
                                                                        if(rsUserID != null && rsUserID[0].length > 0){
                                                                            db.S_BO_CERTIFICATION_UPDATE_CONTACT_INFO(pCERTIFICATION_ID[0], objectMapper.writeValueAsString(profileContact), String.valueOf(rsUserID[0][0].ID));
                                                                        }
                                                                    }
                                                                    
                                                                    //<editor-fold defaultstate="collapsed" desc="### File Attach: Check Add to JRB">
                                                                    if (isHasFileClient == true) {
                                                                        String sJRBConfig = "";
                                                                        if (rsPolicy[0].length > 0) {
                                                                            for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                                                if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DMS_PROPERTIES_CURRENT)) {
                                                                                    sJRBConfig = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                        if (!"".equals(sJRBConfig)) {
                                                                            String sJRB_Source = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_SOURCE);
                                                                            if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_EFY)) {
                                                                                String sIP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_IP);
                                                                                String sHTTP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PROTOCOL);
                                                                                String sCONTEXT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_CONTEXT);
                                                                                String sPORT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PORT);
                                                                                String sDEFAULT_USER = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERNAME);
                                                                                String sDEFAULT_PASS = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PASSWORD);
                                                                                String sOWNERCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_OWNERCODE);
                                                                                String sAPPCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_APPCODE);
                                                                                String sFUNCTION_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_FUNCTION_UP);
                                                                                String idUUID_Temp = Definitions.CONFIG_JACK_RABBIT_UUID_SAMPLE;
                                                                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                    String sFileData = new String(Base64.encodeBase64(fileManagerInsert.fileByte), "UTF-8"); //EscapeUtils.CheckTextNull(mhIP.FILE_URL);//CommonFunction.encodeFileToBase64Binary(fileUp);
                                                                                    CloseableHttpResponse pHttpRes = ConnectFileToPartner.upFileParner(sIP_CONNECT, sHTTP_CONNECT,
                                                                                            sCONTEXT_CONNECT, Integer.parseInt(sPORT_CONNECT), sDEFAULT_USER,
                                                                                            sDEFAULT_PASS, sOWNERCODE_CONNECT, sAPPCODE_CONNECT, sFUNCTION_CONNECT, idUUID_Temp,
                                                                                            fileManagerInsert.fileName, sFileData);
                                                                                    InputStream isStr = pHttpRes.getEntity().getContent();
                                                                                    String resultUUID = IOUtils.toString(isStr);
                                                                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", resultUUID);
                                                                                    String sMimeType = fileManagerInsert.mimeType;
                                                                                    int[] pFILE_MANAGER_ID = new int[1];
                                                                                    db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, resultUUID, sJRBConfig,
                                                                                            sMimeType, fileManagerInsert.fileName, fileManagerInsert.fileByte.length,
                                                                                            pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                }
                                                                            } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_JRB)) {
                                                                                String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                    String sMimeType = fileManagerInsert.mimeType;
                                                                                    JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
                                                                                            Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                    InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
                                                                                    JCRFile jrbFile = JackRabbitCommon.getInstance(jcrConfig).uploadFile(fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                    if(jrbFile != null){
                                                                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", jrbFile.getUuid());
                                                                                    int[] pFILE_MANAGER_ID = new int[1];
                                                                                    db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, jrbFile.getUuid(), sJRBConfig,
                                                                                            jrbFile.getMimeType(), jrbFile.getFileName(), fileManagerInsert.fileByte.length,
                                                                                            pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                    }
                                                                                }
                                                                            } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_MID)) {
                                                                                String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                    String sMimeType = fileManagerInsert.mimeType;
        //                                                                            JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
        //                                                                                Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                    InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
        //                                                                            JCRFile jrbFile = JackRabbitCommon.uploadFile(jcrConfig, fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                    ConnectJackRabbitNew openJRB = new ConnectJackRabbitNew(sJRB_Host, sJRB_UserID, sJRB_UserPass,
                                                                                            Integer.parseInt(sJRB_MaxSession), Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                    String[] sReturnJRB = new String[2];
                                                                                    vn.mobileid.fms.client.JCRFile jrbFile = openJRB.uploadFile(EscapeUtils.CheckTextNull(fileManagerInsert.fileName),
                                                                                            EscapeUtils.CheckTextNull(sMimeType), isFILE_STREAM, sReturnJRB);
                                                                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", sReturnJRB[0].trim());
                                                                                    int[] pFILE_MANAGER_ID = new int[1];
                                                                                    db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, sReturnJRB[0].trim(), sJRBConfig,
                                                                                            sMimeType, sReturnJRB[1].trim(), fileManagerInsert.fileByte.length,
                                                                                            pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                }
                                                                            } else {
                                                                            }
                                                                        }
                                                                    }
                                                                    //</editor-fold>

                                                                    //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                                                    if (intLevelApprove == 1 || intLevelApprove == 2) {
                                                                        String sLevelBranch = db.S_BO_API_GET_LEVEL_BY_BRANCH_CODE(raServiceReq.beneficiaryBranch);
                                                                        if(!sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CA) && !sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CHILREN_ONE))
                                                                        {
                                                                            int approveChilrenID = 0;
                                                                            String approveChilrenUser = raServiceReq.approveUser;
                                                                            String approveChilrenFullname = raFullname;
                                                                            BRANCH[][] rsBranch = new BRANCH[1][];
                                                                            BACKOFFICE_USER[][] rsUserApprove;
                                                                            rsUserApprove = new BACKOFFICE_USER[1][];
                                                                            String roleUserID = "";
                                                                            db.S_BO_USER_GET_BY_USERNAME(raServiceReq.beneficiaryUser, rsUserApprove);
                                                                            if(rsUserApprove[0].length > 0){
                                                                                roleUserID = String.valueOf(rsUserApprove[0][0].ROLE_ID);
                                                                            }
                                                                            if(roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN) || roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                approveChilrenID = rsUserApprove[0][0].ID;
                                                                                approveChilrenUser = rsUserApprove[0][0].USERNAME;
                                                                                approveChilrenFullname = rsUserApprove[0][0].FULL_NAME;
                                                                            } else {
                                                                                rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                db.S_BO_USER_GET_BY_USERNAME(raServiceReq.approveUser, rsUserApprove);
                                                                                if(rsUserApprove[0].length > 0) {
                                                                                    approveChilrenID = rsUserApprove[0][0].ID;
                                                                                }
                                                                                db.S_BO_API_BRANCH_GET_INFO(raServiceReq.beneficiaryBranch, rsBranch);
                                                                                if(rsBranch[0].length > 0) {
                                                                                    rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                    db.S_BO_GET_USER_BRANCH_ALL(String.valueOf(rsBranch[0][0].ID), rsUserApprove);
                                                                                    if(rsUserApprove[0].length > 0) {
                                                                                        boolean isHasAdmin = false;
                                                                                        for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                            if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN)) {
                                                                                                isHasAdmin = true;
                                                                                                approveChilrenID = item.ID;
                                                                                                approveChilrenUser = item.USERNAME;
                                                                                                approveChilrenFullname = item.FULL_NAME;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        if(isHasAdmin == false){
                                                                                            for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                                if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                                    approveChilrenID = item.ID;
                                                                                                    approveChilrenUser = item.USERNAME;
                                                                                                    approveChilrenFullname = item.FULL_NAME;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                                                            valueATTR.setApproveUser(approveChilrenFullname + " (" + approveChilrenUser + ")");
                                                                            valueATTR.setApproveDt(new Date());
                                                                            strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                            db.S_BO_CERTIFICATION_PRE_APPROVED_BY_LOW_LEVEL_BRANCH(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, raServiceReq.approveUser, approveChilrenID);
                                                                        }

                                                                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                                                        valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                        valueATTR.setApproveDt(new Date());
                                                                        strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                        String sPRE_APPROVED = db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                        if("0".equals(sPRE_APPROVED)) {
                                                                            raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                        } else {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                        }
                                                                    }
                                                                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                                        if (intLevelApprove == 2) {
                                                                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                                                            valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                            valueATTR.setApproveCADt(new Date());
                                                                            strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                            String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                            if ("0".equals(sApprove)) {
                                                                                // DISCOUNT RATE
                                                                                if ("1".equals(sDiscountRateOption)) {
                                                                                    CommonReferServlet.updateDiscountRateImportCert(String.valueOf(raServiceResp.certificateID),
                                                                                        EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode),
                                                                                        "", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.approveUser),
                                                                                        "", "", sEnterpriseCert, sPersonalCert);
                                                                                }
                                                                                // SET COMMIT_ENABLED TRUE of FILE
                                                                                db.S_BO_API_CERTIFICATION_SUPPLEMENT_FILE(pCERTIFICATE_ATTR_ID[0], raServiceReq.approveUser, pRESPONSE_CODE_NAME);
                                                                                String pushNoticeEnabled = "0";
                                                                                boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                                                                if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                                                                    pushNoticeEnabled = "1";
                                                                                }
                                                                                db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                // select get cert with pCERTIFICATION_ID[0]
                                                                                int[] pRESPONSE_CODE = new int[1];
                                                                                CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                                                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0], "", "",
                                                                                        raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                                                if (certInfo[0].length > 0) {
                                                                                    raServiceResp.certificate = certInfo[0][0].certificate;
                                                                                }
                                                                                if ("1".equals(pushNoticeEnabled)) {
                                                                                    int[] intRes = new int[1];
                                                                                    String[] sRes = new String[1];
                                                                                    ConnectConnector.SendMailOTP(String.valueOf(pCERTIFICATION_ID[0]), intRes, sRes);
                                                                                }
                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                            } else {
                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                            }
                                                                        } else {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                        }
                                                                    }
                                                                    //</editor-fold>
                                                                } else {
                                                                    raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                                                }
                                                            } else if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)) {
                                                                String strPasswordP12 = "";
                                                                //// check if signserver cert
                                                                boolean isValidCSR = true;
                                                                //<editor-fold defaultstate="collapsed" desc="### CSR: check valid">
                                                                if (!"".equals(sCSR)) {
                                                                    CheckPRIVATE_KEY = "0";
                                                                    String sKeySizeDB;
                                                                    isValidCSR = false;
                                                                    CERTIFICATION[][] rsCert = new CERTIFICATION[1][];
                                                                    db.S_BO_API_GET_ALGORITHM_KEY_SIZE(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), rsCert);
                                                                    if (rsCert[0].length > 0) {
                                                                        sKeySizeDB = EscapeUtils.CheckTextNull(rsCert[0][0].KEY_SIZE);
                                                                        String sKeySizeCSR = CommonFunction.getKeySizeFromCSR(sCSR);
                                                                        isValidCSR = sKeySizeDB.equals(sKeySizeCSR);
                                                                    }
//                                                                    if(isValidCSR == true) {
//                                                                        String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
//                                                                        int checkPublicKey = db.S_BO_CHECK_OWNER_HAVE_EXISTS_PUBLIC_KEY_HASH("", "", sPublicKeyHard);
//                                                                        // call store cert Operation check exist sPublicKeyHard
//                                                                        if(checkPublicKey == 0) {
//                                                                            checkCSRNotExists = true;
//                                                                        } else {
//                                                                            checkCSRNotExists = false;
//                                                                        }
//                                                                    }
                                                                } else {
                                                                    CheckPRIVATE_KEY = "1";
                                                                    if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                                                        strPasswordP12 = EscapeUtils.CheckTextNull(raServiceReq.p12Password);
                                                                    } else {
                                                                        strPasswordP12 = CommonFunction.randomPasswordP12(8);
                                                                    }
                                                                }
                                                                if(EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)){
                                                                    if(sISSUE_P12_ENABLED.equals("0")) {
                                                                        if ("".equals(sCSR)) {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EMPTY;
                                                                        }
                                                                    }
                                                                }
                                                                //</editor-fold>
                                                                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                                    if (isValidCSR == true) {
                                                                        if (checkCSRNotExists == true) {
                                                                            db.S_BO_API_CERTIFICATION_INSERT(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), sTOKEN_SN,
                                                                                sCERTIFICATION_SN, sPersonalCompoment, sCompanyCompoment, sDomainCompoment,
                                                                                sDNResult, sCoreCASubject, EscapeUtils.CheckTextNull(raServiceReq.phoneContact), EscapeUtils.CheckTextNull(raServiceReq.emailContact),
                                                                                sProvinceCodeComponent, pPAST_CERTIFICATION_SN, "", pCERTIFICATION_ATTR_TYPE_CODE,
                                                                                strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), sCSR,
                                                                                EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode), CheckCHANGE_KEY, CheckPRIVATE_KEY,
                                                                                EscapeUtils.CheckTextNull(raServiceReq.formFactorCode), sDeviceUUID, sPromotionDuration,
                                                                                pRESPONSE_CODE_NAME, pCERTIFICATION_ID, pCERTIFICATE_ATTR_ID, raServiceReq.certificateOwnerID,
                                                                                pEFFECTIVE_DT, null, sEnterpriseCert, sPersonalCert);
                                                                            CommonFunction.LogDebugString(log, sTOKEN_SN + " - S_BO_API_CERTIFICATION_INSERT - RESULT", pRESPONSE_CODE_NAME[0]);
                                                                            if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                                                                // PROPERTIES SAN
                                                                                if(!"".equals(strDNSName)) {
                                                                                    db.S_BO_CERTIFICATION_UPDATE_PROPERTIES(String.valueOf(pCERTIFICATION_ID[0]), strDNSName, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                                                }
                                                                                if(!"".equals(sRepresentative) || !"".equals(sRepresentativePosition)){
                                                                                    ProfileContactInfoJson profileContact = new ProfileContactInfoJson();
                                                                                    profileContact.RepresentativeName = CommonFunction.replaceCharaterSpecialJson(sRepresentative, true);
                                                                                    profileContact.Position = CommonFunction.replaceCharaterSpecialJson(sRepresentativePosition, true);
                                                                                    objectMapper = new ObjectMapper();
                                                                                    BACKOFFICE_USER[][] rsUserID = new BACKOFFICE_USER[1][0];
                                                                                    db.S_BO_USER_GET_BY_USERNAME(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), rsUserID);
                                                                                    if(rsUserID != null && rsUserID[0].length > 0){
                                                                                        db.S_BO_CERTIFICATION_UPDATE_CONTACT_INFO(pCERTIFICATION_ID[0], objectMapper.writeValueAsString(profileContact), String.valueOf(rsUserID[0][0].ID));
                                                                                    }
                                                                                }

                                                                                //<editor-fold defaultstate="collapsed" desc="### PUBLIC KEY HASH">
                                                                                if(!"".equals(sCSR)) {
                                                                                    String sKeySizeCSR = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                                                                    db.S_BO_CERTIFICATION_UPDATE_CSR_INFO(pCERTIFICATION_ID[0], sKeySizeCSR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                                                }
                                                                                //</editor-fold>

                                                                                raServiceResp.certificateID = pCERTIFICATION_ID[0];
                                                                                raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                                //<editor-fold defaultstate="collapsed" desc="### File Attach: Check Add to JRB">
                                                                                if (isHasFileClient == true) {
                                                                                    String sJRBConfig = "";
                                                                                    if (rsPolicy[0].length > 0) {
                                                                                        for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                                                            if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DMS_PROPERTIES_CURRENT)) {
                                                                                                sJRBConfig = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if (!"".equals(sJRBConfig)) {
                                                                                        String sJRB_Source = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_SOURCE);
                                                                                        if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_EFY)) {
                                                                                            String sIP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_IP);
                                                                                            String sHTTP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PROTOCOL);
                                                                                            String sCONTEXT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_CONTEXT);
                                                                                            String sPORT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PORT);
                                                                                            String sDEFAULT_USER = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERNAME);
                                                                                            String sDEFAULT_PASS = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PASSWORD);
                                                                                            String sOWNERCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_OWNERCODE);
                                                                                            String sAPPCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_APPCODE);
                                                                                            String sFUNCTION_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_FUNCTION_UP);
                                                                                            String idUUID_Temp = Definitions.CONFIG_JACK_RABBIT_UUID_SAMPLE;
                                                                                            for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                                String sFileData = new String(Base64.encodeBase64(fileManagerInsert.fileByte), "UTF-8"); //EscapeUtils.CheckTextNull(mhIP.FILE_URL);//CommonFunction.encodeFileToBase64Binary(fileUp);
                                                                                                CloseableHttpResponse pHttpRes = ConnectFileToPartner.upFileParner(sIP_CONNECT, sHTTP_CONNECT,
                                                                                                        sCONTEXT_CONNECT, Integer.parseInt(sPORT_CONNECT), sDEFAULT_USER,
                                                                                                        sDEFAULT_PASS, sOWNERCODE_CONNECT, sAPPCODE_CONNECT, sFUNCTION_CONNECT, idUUID_Temp,
                                                                                                        fileManagerInsert.fileName, sFileData);
                                                                                                InputStream isStr = pHttpRes.getEntity().getContent();
                                                                                                String resultUUID = IOUtils.toString(isStr);
                                                                                                CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", resultUUID);
                                                                                                String sMimeType = fileManagerInsert.mimeType;
                                                                                                int[] pFILE_MANAGER_ID = new int[1];
                                                                                                db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, resultUUID, sJRBConfig,
                                                                                                        sMimeType, fileManagerInsert.fileName, fileManagerInsert.fileByte.length,
                                                                                                        pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                            }
                                                                                        } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_JRB)) {
                                                                                            String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                            String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                            String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                            String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                            String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                            String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                            String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                            for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                                String sMimeType = fileManagerInsert.mimeType;
                                                                                                JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
                                                                                                        Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                                InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
                                                                                                JCRFile jrbFile = JackRabbitCommon.getInstance(jcrConfig).uploadFile(fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                                if(jrbFile != null){
                                                                                                CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", jrbFile.getUuid());
                                                                                                int[] pFILE_MANAGER_ID = new int[1];
                                                                                                db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, jrbFile.getUuid(), sJRBConfig,
                                                                                                        jrbFile.getMimeType(), jrbFile.getFileName(), fileManagerInsert.fileByte.length,
                                                                                                        pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                                }
                                                                                            }
                                                                                        } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_MID)) {
                                                                                            String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                            String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                            String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                            String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                            String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                            String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                            String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                            for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                                String sMimeType = fileManagerInsert.mimeType;
                //                                                                                JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
                //                                                                                    Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                                InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
                //                                                                                JCRFile jrbFile = JackRabbitCommon.uploadFile(jcrConfig, fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                                ConnectJackRabbitNew openJRB = new ConnectJackRabbitNew(sJRB_Host, sJRB_UserID, sJRB_UserPass,
                                                                                                        Integer.parseInt(sJRB_MaxSession), Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                                String[] sReturnJRB = new String[2];
                                                                                                vn.mobileid.fms.client.JCRFile jrbFile = openJRB.uploadFile(EscapeUtils.CheckTextNull(fileManagerInsert.fileName),
                                                                                                        EscapeUtils.CheckTextNull(sMimeType), isFILE_STREAM, sReturnJRB);
                                                                                                CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", jrbFile.getUuid());
                                                                                                int[] pFILE_MANAGER_ID = new int[1];
                                                                                                db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, sReturnJRB[0].trim(), sJRBConfig,
                                                                                                        sMimeType, sReturnJRB[1].trim(), fileManagerInsert.fileByte.length,
                                                                                                        pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                            }
                                                                                        } else {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                //</editor-fold>

                                                                                //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                                                                if (intLevelApprove == 1 || intLevelApprove == 2) {
                                                                                    String sLevelBranch = db.S_BO_API_GET_LEVEL_BY_BRANCH_CODE(raServiceReq.beneficiaryBranch);
                                                                                    if(!sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CA) && !sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CHILREN_ONE))
                                                                                    {
                                                                                        int approveChilrenID = 0;
                                                                                        String approveChilrenUser = raServiceReq.approveUser;
                                                                                        String approveChilrenFullname = raFullname;
                                                                                        BRANCH[][] rsBranch = new BRANCH[1][];
                                                                                        BACKOFFICE_USER[][] rsUserApprove;
                                                                                        rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                        String roleUserID = "";
                                                                                        db.S_BO_USER_GET_BY_USERNAME(raServiceReq.beneficiaryUser, rsUserApprove);
                                                                                        if(rsUserApprove[0].length > 0){
                                                                                            roleUserID = String.valueOf(rsUserApprove[0][0].ROLE_ID);
                                                                                        }
                                                                                        if(roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN) || roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                            approveChilrenID = rsUserApprove[0][0].ID;
                                                                                            approveChilrenUser = rsUserApprove[0][0].USERNAME;
                                                                                            approveChilrenFullname = rsUserApprove[0][0].FULL_NAME;
                                                                                        } else {
                                                                                            rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                            db.S_BO_USER_GET_BY_USERNAME(raServiceReq.approveUser, rsUserApprove);
                                                                                            if(rsUserApprove[0].length > 0) {
                                                                                                approveChilrenID = rsUserApprove[0][0].ID;
                                                                                            }
                                                                                            db.S_BO_API_BRANCH_GET_INFO(raServiceReq.beneficiaryBranch, rsBranch);
                                                                                            if(rsBranch[0].length > 0) {
                                                                                                rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                                db.S_BO_GET_USER_BRANCH_ALL(String.valueOf(rsBranch[0][0].ID), rsUserApprove);
                                                                                                if(rsUserApprove[0].length > 0) {
                                                                                                    boolean isHasAdmin = false;
                                                                                                    for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                                        if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN)) {
                                                                                                            isHasAdmin = true;
                                                                                                            approveChilrenID = item.ID;
                                                                                                            approveChilrenUser = item.USERNAME;
                                                                                                            approveChilrenFullname = item.FULL_NAME;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    if(isHasAdmin == false){
                                                                                                        for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                                            if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                                                approveChilrenID = item.ID;
                                                                                                                approveChilrenUser = item.USERNAME;
                                                                                                                approveChilrenFullname = item.FULL_NAME;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                                                                        valueATTR.setApproveUser(approveChilrenFullname + " (" + approveChilrenUser + ")");
                                                                                        valueATTR.setApproveDt(new Date());
                                                                                        strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                                        db.S_BO_CERTIFICATION_PRE_APPROVED_BY_LOW_LEVEL_BRANCH(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, raServiceReq.approveUser, approveChilrenID);
                                                                                    }
                                                                                    valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                                                                    valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                                    valueATTR.setApproveDt(new Date());
                                                                                    strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                                    String sPRE_APPROVED = db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                    if("0".equals(sPRE_APPROVED)) {
                                                                                        raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                                    } else {
                                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                                    }
                                                                                }
                                                                                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                                                    if (intLevelApprove == 2) {
                                                                                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                                                                        valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                                        valueATTR.setApproveCADt(new Date());
                                                                                        strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                                        String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                        if ("0".equals(sApprove)) {
                                                                                            // DISCOUNT RATE
                                                                                            if ("1".equals(sDiscountRateOption)) {
                                                                                                CommonReferServlet.updateDiscountRateImportCert(String.valueOf(raServiceResp.certificateID),
                                                                                                    EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode),
                                                                                                    "", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.approveUser), "", "", sEnterpriseCert, sPersonalCert);
                                                                                            }
                                                                                            // SET COMMIT_ENABLED TRUE of FILE
                                                                                            db.S_BO_API_CERTIFICATION_SUPPLEMENT_FILE(pCERTIFICATE_ATTR_ID[0], raServiceReq.approveUser, pRESPONSE_CODE_NAME);

                                                                                            //<editor-fold defaultstate="collapsed" desc="### UPDATE SEND EMAIL CERT">
                                                                                            if (sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SIGNSERVER_SN) || sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SN_FORMFACTOR_ESIGNCLOUD)) {
                                                                                                if (!"".equals(sCSR)) {
                                                                                                    String pushNoticeEnabled = "0";
                                                                                                    boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                                                                                    if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                                                                                        pushNoticeEnabled = "1";
                                                                                                    }
                                                                                                    db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                                } else {
                                                                                                    String p12EmailEnabled = "0";
                                                                                                    boolean p12EmailCertServer = CommonFunction.getP12EmailEnabledCert(sCERT_POLICY_PROPERTIES);
                                                                                                    if (raServiceReq.p12EmailEnabled == true && p12EmailCertServer == true) {
                                                                                                        p12EmailEnabled = "1";
                                                                                                    }
                                                                                                    db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", p12EmailEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                                }
                                                                                            } else {
                                                                                                String pushNoticeEnabled = "0";
                                                                                                boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                                                                                if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                                                                                    pushNoticeEnabled = "1";
                                                                                                }
                                                                                                db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                            }
                                                                                            //</editor-fold>

                                                                                            ConnectDbPhaseTwo dbTwo = new ConnectDbPhaseTwo();
                                                                                            dbTwo.S_BO_CERTIFICATION_ATTR_UPDATE_ACTIVATED_ENABLED(pCERTIFICATE_ATTR_ID[0], 1);

                                                                                            int[] intWSRes = new int[1];
                                                                                            String[] sWSRes = new String[1];
                                                                                            ConnectConnector.EnrollCertificate(sTOKEN_SN, strPasswordP12, String.valueOf(pCERTIFICATE_ATTR_ID[0]), intWSRes, sWSRes);
                                                                                            if (intWSRes[0] == 0) {
                                                                                                // select get cert with pCERTIFICATION_ID[0]
                                                                                                int[] pRESPONSE_CODE = new int[1];
                                                                                                CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                                                                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0], "", "",
                                                                                                        raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                                                                if (certInfo[0].length > 0) {
                                                                                                    raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                                                                    raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                                                                    if(EscapeUtils.CheckTextNull(raServiceReq.certificateFormatType).equals("CERT")){
                                                                                                        byte[] sXML = DatatypeConverter.parseBase64Binary(certInfo[0][0].certificate);
                                                                                                        raServiceResp.byteCertificate = sXML;
                                                                                                    } else {
                                                                                                        raServiceResp.certificate = certInfo[0][0].certificate;
                                                                                                    }
                                                                                                }
                                                                                                if (!"".equals(strPasswordP12)) {
                                                                                                    int[] intRes = new int[1];
                                                                                                    String[] sRes = new String[1];
                                                                                                    byte[] sP12Return = ConnectConnector.generateKeystore(strPasswordP12, false, String.valueOf(pCERTIFICATION_ID[0]), intRes, sRes);
                                                                                                    raServiceResp.p12Certificate = sP12Return;
                                                                                                }
                                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                                            } else {
                                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                                                                            }
                                                                                        } else {
                                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                                        }
                                                                                    } else {
                                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                                    }
                                                                                }
                                                                                //</editor-fold>

                                                                                // return pass p12
                                                                                if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                                                                    if (!"".equals(strPasswordP12)) {
                                                                                        raServiceResp.p12Password = strPasswordP12;
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                                                            }
                                                                        } else {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EXISTS;
                                                                        }
                                                                    } else {
                                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_KEYSIZE;
                                                                    }
                                                                }
                                                            } else if (EscapeUtils.CheckTextNull(raServiceReq.formFactorCode).equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PARTNER_HARD_TOKEN)
                                                                && sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SIGNSERVER_SN))
                                                            {
                                                                if (raServiceReq.backupKeyEnabled == true) {
                                                                    CheckPRIVATE_KEY = "1";
                                                                } else {
                                                                    CheckPRIVATE_KEY = "0";
                                                                }
                                                                sCSR = "";
                                                                //<editor-fold defaultstate="collapsed" desc="### INSERT CERT">
                                                                db.S_BO_API_CERTIFICATION_INSERT(EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), sTOKEN_SN,
                                                                    sCERTIFICATION_SN, sPersonalCompoment, sCompanyCompoment, sDomainCompoment,
                                                                    sDNResult, sCoreCASubject, EscapeUtils.CheckTextNull(raServiceReq.phoneContact),
                                                                    EscapeUtils.CheckTextNull(raServiceReq.emailContact),
                                                                    sProvinceCodeComponent, pPAST_CERTIFICATION_SN, "", pCERTIFICATION_ATTR_TYPE_CODE,
                                                                    strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser),
                                                                    EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), sCSR,
                                                                    EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode), CheckCHANGE_KEY, CheckPRIVATE_KEY,
                                                                    EscapeUtils.CheckTextNull(raServiceReq.formFactorCode), sDeviceUUID.trim(), sPromotionDuration, pRESPONSE_CODE_NAME, pCERTIFICATION_ID,
                                                                    pCERTIFICATE_ATTR_ID, raServiceReq.certificateOwnerID, pEFFECTIVE_DT, null, sEnterpriseCert, sPersonalCert);
                                                                
                                                                //</editor-fold>

                                                                if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                                                    raServiceResp.certificateID = pCERTIFICATION_ID[0];
                                                                    raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                    if(!"".equals(strDNSName)) {
                                                                        db.S_BO_CERTIFICATION_UPDATE_PROPERTIES(String.valueOf(pCERTIFICATION_ID[0]), strDNSName, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                                                    }
                                                                    if(!"".equals(sRepresentative) || !"".equals(sRepresentativePosition)) {
                                                                        ProfileContactInfoJson profileContact = new ProfileContactInfoJson();
                                                                        profileContact.RepresentativeName = CommonFunction.replaceCharaterSpecialJson(sRepresentative, true);
                                                                        profileContact.Position = CommonFunction.replaceCharaterSpecialJson(sRepresentativePosition, true);
                                                                        objectMapper = new ObjectMapper();
                                                                        BACKOFFICE_USER[][] rsUserID = new BACKOFFICE_USER[1][0];
                                                                        db.S_BO_USER_GET_BY_USERNAME(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), rsUserID);
                                                                        if(rsUserID != null && rsUserID[0].length > 0){
                                                                            db.S_BO_CERTIFICATION_UPDATE_CONTACT_INFO(pCERTIFICATION_ID[0], objectMapper.writeValueAsString(profileContact), String.valueOf(rsUserID[0][0].ID));
                                                                        }
                                                                    }
                                                                    
                                                                    //<editor-fold defaultstate="collapsed" desc="### File Attach: Check Add to JRB">
                                                                    if (isHasFileClient == true) {
                                                                        String sJRBConfig = "";
                                                                        if (rsPolicy[0].length > 0) {
                                                                            for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                                                                if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DMS_PROPERTIES_CURRENT)) {
                                                                                    sJRBConfig = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                        if (!"".equals(sJRBConfig)) {
                                                                            String sJRB_Source = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_SOURCE);
                                                                            if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_EFY)) {
                                                                                String sIP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_IP);
                                                                                String sHTTP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PROTOCOL);
                                                                                String sCONTEXT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_CONTEXT);
                                                                                String sPORT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PORT);
                                                                                String sDEFAULT_USER = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERNAME);
                                                                                String sDEFAULT_PASS = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PASSWORD);
                                                                                String sOWNERCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_OWNERCODE);
                                                                                String sAPPCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_APPCODE);
                                                                                String sFUNCTION_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_FUNCTION_UP);
                                                                                String idUUID_Temp = Definitions.CONFIG_JACK_RABBIT_UUID_SAMPLE;
                                                                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                    String sFileData = new String(Base64.encodeBase64(fileManagerInsert.fileByte), "UTF-8"); //EscapeUtils.CheckTextNull(mhIP.FILE_URL);//CommonFunction.encodeFileToBase64Binary(fileUp);
                                                                                    CloseableHttpResponse pHttpRes = ConnectFileToPartner.upFileParner(sIP_CONNECT, sHTTP_CONNECT,
                                                                                            sCONTEXT_CONNECT, Integer.parseInt(sPORT_CONNECT), sDEFAULT_USER,
                                                                                            sDEFAULT_PASS, sOWNERCODE_CONNECT, sAPPCODE_CONNECT, sFUNCTION_CONNECT, idUUID_Temp,
                                                                                            fileManagerInsert.fileName, sFileData);
                                                                                    InputStream isStr = pHttpRes.getEntity().getContent();
                                                                                    String resultUUID = IOUtils.toString(isStr);
                                                                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", resultUUID);
                                                                                    String sMimeType = fileManagerInsert.mimeType;
                                                                                    int[] pFILE_MANAGER_ID = new int[1];
                                                                                    db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, resultUUID, sJRBConfig,
                                                                                            sMimeType, fileManagerInsert.fileName, fileManagerInsert.fileByte.length,
                                                                                            pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                }
                                                                            } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_JRB)) {
                                                                                String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                    String sMimeType = fileManagerInsert.mimeType;
                                                                                    JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
                                                                                            Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                    InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
                                                                                    JCRFile jrbFile = JackRabbitCommon.getInstance(jcrConfig).uploadFile(fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                    if(jrbFile != null){
                                                                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", jrbFile.getUuid());
                                                                                    int[] pFILE_MANAGER_ID = new int[1];
                                                                                    db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, jrbFile.getUuid(), sJRBConfig,
                                                                                            jrbFile.getMimeType(), jrbFile.getFileName(), fileManagerInsert.fileByte.length,
                                                                                            pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                    }
                                                                                }
                                                                            } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_MID)) {
                                                                                String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                                                                String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                                                                String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                                                                String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                                                                String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                                                                String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                                                                String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                                                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                                                                    String sMimeType = fileManagerInsert.mimeType;
        //                                                                            JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
        //                                                                                Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                    InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
        //                                                                            JCRFile jrbFile = JackRabbitCommon.uploadFile(jcrConfig, fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                                                                    ConnectJackRabbitNew openJRB = new ConnectJackRabbitNew(sJRB_Host, sJRB_UserID, sJRB_UserPass,
                                                                                            Integer.parseInt(sJRB_MaxSession), Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                                                                    String[] sReturnJRB = new String[2];
                                                                                    vn.mobileid.fms.client.JCRFile jrbFile = openJRB.uploadFile(EscapeUtils.CheckTextNull(fileManagerInsert.fileName),
                                                                                            EscapeUtils.CheckTextNull(sMimeType), isFILE_STREAM, sReturnJRB);
                                                                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", sReturnJRB[0].trim());
                                                                                    int[] pFILE_MANAGER_ID = new int[1];
                                                                                    db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, sReturnJRB[0].trim(), sJRBConfig,
                                                                                            sMimeType, sReturnJRB[1].trim(), fileManagerInsert.fileByte.length,
                                                                                            pCERTIFICATION_ID[0], raServiceReq.certificateOwnerID, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                                                                }
                                                                            } else {
                                                                            }
                                                                        }
                                                                    }
                                                                    //</editor-fold>

                                                                    //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                                                    if (intLevelApprove == 1 || intLevelApprove == 2) {
                                                                        String sLevelBranch = db.S_BO_API_GET_LEVEL_BY_BRANCH_CODE(raServiceReq.beneficiaryBranch);
                                                                        if(!sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CA) && !sLevelBranch.equals(Definitions.CONFIG_BRANCH_LEVEL_CHILREN_ONE)) {
                                                                            int approveChilrenID = 0;
                                                                            String approveChilrenUser = raServiceReq.approveUser;
                                                                            String approveChilrenFullname = raFullname;
                                                                            BRANCH[][] rsBranch = new BRANCH[1][];
                                                                            BACKOFFICE_USER[][] rsUserApprove;
                                                                            rsUserApprove = new BACKOFFICE_USER[1][];
                                                                            String roleUserID = "";
                                                                            db.S_BO_USER_GET_BY_USERNAME(raServiceReq.beneficiaryUser, rsUserApprove);
                                                                            if(rsUserApprove[0].length > 0){
                                                                                roleUserID = String.valueOf(rsUserApprove[0][0].ROLE_ID);
                                                                            }
                                                                            if(roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN) || roleUserID.equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                approveChilrenID = rsUserApprove[0][0].ID;
                                                                                approveChilrenUser = rsUserApprove[0][0].USERNAME;
                                                                                approveChilrenFullname = rsUserApprove[0][0].FULL_NAME;
                                                                            } else {
                                                                                rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                db.S_BO_USER_GET_BY_USERNAME(raServiceReq.approveUser, rsUserApprove);
                                                                                if(rsUserApprove[0].length > 0) {
                                                                                    approveChilrenID = rsUserApprove[0][0].ID;
                                                                                }
                                                                                db.S_BO_API_BRANCH_GET_INFO(raServiceReq.beneficiaryBranch, rsBranch);
                                                                                if(rsBranch[0].length > 0) {
                                                                                    rsUserApprove = new BACKOFFICE_USER[1][];
                                                                                    db.S_BO_GET_USER_BRANCH_ALL(String.valueOf(rsBranch[0][0].ID), rsUserApprove);
                                                                                    if(rsUserApprove[0].length > 0) {
                                                                                        boolean isHasAdmin = false;
                                                                                        for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                            if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_ADMIN)) {
                                                                                                isHasAdmin = true;
                                                                                                approveChilrenID = item.ID;
                                                                                                approveChilrenUser = item.USERNAME;
                                                                                                approveChilrenFullname = item.FULL_NAME;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        if(isHasAdmin == false){
                                                                                            for(BACKOFFICE_USER item : rsUserApprove[0]) {
                                                                                                if(String.valueOf(item.ROLE_ID).equals(Definitions.CONFIG_ROLE_ID_AGENT_SURVEYOR)) {
                                                                                                    approveChilrenID = item.ID;
                                                                                                    approveChilrenUser = item.USERNAME;
                                                                                                    approveChilrenFullname = item.FULL_NAME;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                                                            valueATTR.setApproveUser(approveChilrenFullname + " (" + approveChilrenUser + ")");
                                                                            valueATTR.setApproveDt(new Date());
                                                                            strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                            db.S_BO_CERTIFICATION_PRE_APPROVED_BY_LOW_LEVEL_BRANCH(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, raServiceReq.approveUser, approveChilrenID);
                                                                        }

                                                                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                                                        valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                        valueATTR.setApproveDt(new Date());
                                                                        strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                        String sPRE_APPROVED = db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                        if("0".equals(sPRE_APPROVED)) {
                                                                            raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                                                        } else {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                        }
                                                                    }
                                                                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                                                        if (intLevelApprove == 2) {
                                                                            valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                                                            valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                                                            valueATTR.setApproveCADt(new Date());
                                                                            strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                                                            String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                            if ("0".equals(sApprove)) {
                                                                                // DISCOUNT RATE
                                                                                if ("1".equals(sDiscountRateOption)) {
                                                                                    CommonReferServlet.updateDiscountRateImportCert(String.valueOf(raServiceResp.certificateID),
                                                                                        EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode),
                                                                                        "", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.approveUser),
                                                                                        "", "", sEnterpriseCert, sPersonalCert);
                                                                                }
                                                                                // SET COMMIT_ENABLED TRUE of FILE
                                                                                db.S_BO_API_CERTIFICATION_SUPPLEMENT_FILE(pCERTIFICATE_ATTR_ID[0], raServiceReq.approveUser, pRESPONSE_CODE_NAME);
                                                                                String pushNoticeEnabled = "0";
                                                                                db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEnabled, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                                String urlCallback = "";
                                                                                String requestType = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_REGISTRATION;
                                                                                BRANCH[][] rsBranch = new BRANCH[1][];
                                                                                db.S_BO_API_BRANCH_GET_INFO(raServiceReq.beneficiaryBranch, rsBranch);
                                                                                if(rsBranch != null && rsBranch[0].length > 0){
                                                                                    urlCallback = rsBranch[0][0].CALLBACK_URL_APPROVED;
                                                                                }
                                                                                ThreadCallbackApproved thhreadLog = new ThreadCallbackApproved(String.valueOf(pCERTIFICATION_ID[0]),
                                                                                    urlCallback, Definitions.CONFIG_OPERATION_TYPE_APPROVED, "", requestType);
                                                                                Thread t = new Thread(thhreadLog);
                                                                                t.start();
                                                                            } else {
                                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                                                            }
                                                                        } else {
                                                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                                        }
                                                                    }
                                                                    //</editor-fold>
                                                                } else {
                                                                    raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                                                }
                                                            } else {
                                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_NO_DN;
                                                }
                                            } else {
                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_EMAIL_INCERT_INVALID;
                                            }
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_CERT_EMPTY;
                                        }
                                    }
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CA_PROFILE_INVALID;
                            }
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_TEMPLATE_CERT_EMPTY;
                        }
                    }
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### reportCertificateNEACProcess">
    public void reportCertificateNEACProcess(String pPARENT_ID, String pBeneficiaryUserDefault,
        int[] System_Log_ID, String[] System_Log_BillCode, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_REPORT_CERTIFICATION_NEAC;
        ObjectMapper objectMapper;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);

        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT)) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            PeriodicReportInfo[][] periodicReportInfo = null;
            ReconciliationReportInfo[][] reconciliationReportInfo = null;
            if (raServiceReq.periodicReportEnabled == true) {
                periodicReportInfo = new PeriodicReportInfo[1][];
                db.S_BO_API_REPORT_PERIODIC_NEAC(raServiceReq.quarter, raServiceReq.year, raServiceReq.language, periodicReportInfo);
            }
            if (raServiceReq.reconciliationReportEnabled == true) {
                reconciliationReportInfo = new ReconciliationReportInfo[1][];
                db.S_BO_API_REPORT_RECONCILIATION_NEAC(raServiceReq.quarter, raServiceReq.year, reconciliationReportInfo);
            }
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            if (periodicReportInfo != null) {
                raServiceResp.periodicReportInfo = periodicReportInfo[0];
            }
            if (reconciliationReportInfo != null) {
                raServiceResp.reconciliationReportInfo = reconciliationReportInfo[0];
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### reportCertificateListNEACProcess">
    public void reportCertificateListNEACProcess(String pPARENT_ID, String pBeneficiaryUserDefault, String pApproveCAUser,
        int[] System_Log_ID, String[] System_Log_BillCode, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_REPORT_CERTIFICATION_LIST_NEAC;
        ObjectMapper objectMapper;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT)) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            Config confWs = new Config();
            Date currentDate = new Date();
            SimpleDateFormat df = new SimpleDateFormat(Definitions.CONFIG_DATE_PATTERN_DATE_DDMMYYYY);
            String[] pRESULT_ADD = new String[3];
            pRESULT_ADD[0] = df.format(currentDate);
            pRESULT_ADD[1] = pApproveCAUser;
            pRESULT_ADD[2] = confWs.GetPropertybyCode(Definitions.CONFIG_REPORT_NEAC_PREQUENCY_API);
            String sFromDate = EscapeUtils.CheckTextNull(raServiceReq.fromCreateDate);
            String sToDate = EscapeUtils.CheckTextNull(raServiceReq.toCreateDate);
            sFromDate = sFromDate.replace("-", "/");
            sToDate = sToDate.replace("-", "/");
            CertificateNEACReportInfo[][] certificateNEACReportInfo = new CertificateNEACReportInfo[1][];
            db.S_BO_API_REPORT_CERTIFICATE_NEAC(sFromDate, sToDate,
                EscapeUtils.CheckTextNull(raServiceReq.certificateStateCode), raServiceReq.language, certificateNEACReportInfo, pRESULT_ADD);
            if(certificateNEACReportInfo != null)
            {
                raServiceResp.certificateNEACReportInfo = certificateNEACReportInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### reportCertificateProcess">
    public void reportCertificateProcess(String pPARENT_ID, String pBRANCH_ID, String pBeneficiaryUserDefault,
        int[] System_Log_ID, String[] System_Log_BillCode, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_REPORT_CERTIFICATION;
        ObjectMapper objectMapper;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);

        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            String sFromDate = EscapeUtils.CheckTextNull(raServiceReq.fromCreateDate);
            String sToDate = EscapeUtils.CheckTextNull(raServiceReq.toCreateDate);
            //<editor-fold defaultstate="collapsed" desc="### CHECK DATE SEARCH">
            if (!"".equals(sFromDate) && !"".equals(sToDate)) {
                if (CommonFunction.compromiseDateValid(sFromDate) == false) {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SEARCH_TIME_INVALID;
                }
                if (CommonFunction.compromiseDateValid(sToDate) == false) {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SEARCH_TIME_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SEARCH_TIME_INVALID;
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                //<editor-fold defaultstate="collapsed" desc="### PROCESS">
                if(pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT)) {
                    pBRANCH_ID = "";
                }
                sFromDate = sFromDate.replace("-", "/");
                sToDate = sToDate.replace("-", "/");
                CertificateReportInfo[][] certificateReportInfo = new CertificateReportInfo[1][];
                db.S_BO_API_REPORT_CERTIFICATE(sFromDate, sToDate,
                    EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode), EscapeUtils.CheckTextNull(raServiceReq.certificatePurposeCode),
                    EscapeUtils.CheckTextNull(raServiceReq.certificateProfileCode), EscapeUtils.CheckTextNull(raServiceReq.formFactorCode),
                    EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pBRANCH_ID,
                    raServiceReq.certificateOwnerID, raServiceReq.language, certificateReportInfo);
                if(certificateReportInfo[0].length > 0)
                {
                    for(CertificateReportInfo certInfo1 : certificateReportInfo[0]) {
                        certInfo1.certificateDN = certInfo1.certificateDN.replace(Definitions.CONFIG_COMPONENT_DN_TAG_UID, Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE);
                        certInfo1.certificateDN = certInfo1.certificateDN.replace(Definitions.CONFIG_COMPONENT_DN_SUBSTRING_CN_VALUE, ",");
                        if(certInfo1.requestStateCode.equals(Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW))
                        {
                            if(!"".equals(certInfo1.value))
                            {
                                objectMapper = new ObjectMapper();
                                ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(certInfo1.value, ATTRIBUTE_VALUES.class);
                                String sReasonDeclineValue = EscapeUtils.CheckTextNull(valueATTR_Frist.getCerttificateDeclineReason());
                                if(!"".equals(sReasonDeclineValue))
                                {
                                    certInfo1.declineReason = sReasonDeclineValue;
                                }
                                String sReasonRevokeValue = EscapeUtils.CheckTextNull(valueATTR_Frist.getCerttificateRevokeReason());
                                if(!"".equals(sReasonRevokeValue))
                                {
                                    certInfo1.certificateRevocationReason = sReasonRevokeValue;
                                }
                                String sApproveUserValue = EscapeUtils.CheckTextNull(valueATTR_Frist.getApproveCAUser());
                                if(!"".equals(sApproveUserValue))
                                {
                                    certInfo1.approveUser = sApproveUserValue;
                                }
                            }
                        } else {
                            if(!"".equals(certInfo1.comment))
                            {
                                CERTIFICATION_COMMENT valueATTR_Frist = objectMapper.readValue(certInfo1.comment, CERTIFICATION_COMMENT.class);
                                certInfo1.declineReason = EscapeUtils.CheckTextNull(valueATTR_Frist.certificateDeclineReason);
                                //certInfo1.certificateRevocationReason = EscapeUtils.CheckTextNull(valueATTR_Frist.certificateRevokeReason);
                            }
                            if(!"".equals(certInfo1.value))
                            {
                                objectMapper = new ObjectMapper();
                                ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(certInfo1.value, ATTRIBUTE_VALUES.class);
                                String sApproveUserValue = EscapeUtils.CheckTextNull(valueATTR_Frist.getApproveCAUser());
                                if(!"".equals(sApproveUserValue))
                                {
                                    certInfo1.approveUser = sApproveUserValue;
                                }
                            }
                        }
                        if(certInfo1.certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT))
                        {
                            certInfo1.deviceUUID = certInfo1.deviceUUID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBCLIENT, "");
                        }
                        if(certInfo1.certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER))
                        {
                            certInfo1.deviceUUID = certInfo1.deviceUUID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBSERVER, "");
                        }
                        if(certInfo1.certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV))
                        {
                            certInfo1.deviceUUID = certInfo1.deviceUUID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CODE_SIGNING, "");
                        }
                        if(certInfo1.certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH))
                        {
                            certInfo1.deviceUUID = certInfo1.deviceUUID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_AUTH, "");
                        }
                        if(certInfo1.certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                        {
                            certInfo1.deviceUUID = certInfo1.deviceUUID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_SIGN, "");
                        }
                    }
                    raServiceResp.certificateReportInfo = certificateReportInfo[0];
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
                }
                //</editor-fold>
            }
        }
    }
    //</editor-fold>
 
    //<editor-fold defaultstate="collapsed" desc="### setCertificateAttachmentProcess">
    public void setCertificateAttachmentProcess(String pPARENT_ID, int pBRANCH_ID,
        String pApproveCAUser, boolean  autoApproveCAServer, int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG, Logger log,
        String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_SET_CERTIFICATION_ATTACHMENT;
        boolean autoApproveCAClient = raServiceReq.approveEnabled;
        ObjectMapper objectMapper;
        String sTOKEN_SN = "";
        RAServiceReq raReqTemp = new RAServiceReq();
        raReqTemp.certificateSN = raServiceReq.certificateSN;
        raReqTemp.approveEnabled = raServiceReq.approveEnabled;
        raReqTemp.language = raServiceReq.language;
        raReqTemp.credentialData = raServiceReq.credentialData;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE">
            int createdUserID = 0;
            String pCERTIFICATION_AUTHORITY_CODE = "";
            String pCERTIFICATION_PURPOSE_CODE = "";
            String sPHONE_CONTRACT = "";
            String sEMAIL_CONTRACT = "";
            String sCoreCASubject = "";
            String sDN = "";
            String pPERSONAL_NAME = "";
            String pCOMPANY_NAME = "";
            String pEnterpriseDB = "";
            String pPersonalDB = "";
            String pPROVINCE_ID = "";
            String sProvinceNameComponent = "";
            String pCERTIFICATION_ATTR_TYPE_CODE = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_SUPPLEMENT_FILE;
            int pCERTIFICATION_ATTR_TYPE_ID = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_ID_SUPPLEMENT_FILE;
            int pCertificateId = 0;
            int sBranchId_Cert = 0;
            int pCERTIFICATE_STATE_ID = 0;
            int[] pRESPONSE_CODE = new int[1];
            CertificateInfo[][] rsReq = new CertificateInfo[1][];
            if(raServiceReq.certificateID != 0)
            {
                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", raServiceReq.certificateID,
                        "", "", raServiceReq.language, pRESPONSE_CODE, rsReq, "", "", "", "");
                if (rsReq[0].length > 0) {
                    sPHONE_CONTRACT = rsReq[0][0].phoneContact;
                    sEMAIL_CONTRACT = rsReq[0][0].emailContact;
                    sCoreCASubject = rsReq[0][0].coreCASubject;
                    sDN = rsReq[0][0].certificateDN;
                    pPERSONAL_NAME = rsReq[0][0].personalName;
                    pCOMPANY_NAME = rsReq[0][0].companyName;
                    pEnterpriseDB = rsReq[0][0].enterpriseID;
                    pPersonalDB = rsReq[0][0].personalID;
                    sTOKEN_SN = rsReq[0][0].tokenSN;
                    pCERTIFICATION_AUTHORITY_CODE = rsReq[0][0].certificateAuthorityCode;
                    pCERTIFICATION_PURPOSE_CODE = rsReq[0][0].certificatePurposeCode;
                    pPROVINCE_ID = String.valueOf(rsReq[0][0].provinceId);
                    createdUserID = rsReq[0][0].createdId;
                    pCertificateId = rsReq[0][0].certificateID;
                    pCERTIFICATE_STATE_ID = rsReq[0][0].certificateStateId;
                    sBranchId_Cert = rsReq[0][0].raId;
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
//                                if(sBranchId_Cert != pBRANCH_ID)
//                                {
//                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
//                                }
                }
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                if (pCERTIFICATE_STATE_ID != 0 && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_DECLINED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVISED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REISSUED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVOKED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_OPERATED_PERMANENT_DISABLE
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_OPERATED_TEMPORARY_DISABLE
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWAL_PERMANENT_DISABLE
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWAL_TEMPORARY_DISABLE
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_STOPPED_OPERATION
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_AUTO_REVOKED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED_EXPIRED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVISED_KEEP_SN
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED_KEEP_SN)
                {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_STATE_INVALID;
                }
                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
                {
                    //<editor-fold defaultstate="collapsed" desc="### File manager Modules">
//                    boolean isHasReqFile = false;
                    boolean sCheckRequire = true;
                    String sPropertiesFile = "";
                    CertificatePurposeInfo[][] certPurposeInfo = new CertificatePurposeInfo[1][];
                    db.S_BO_API_CERTIFICATION_PURPOSE_GET_FILE_PROPERTIES(pCERTIFICATION_PURPOSE_CODE, certPurposeInfo);
                    if (certPurposeInfo[0].length > 0) {
                        sPropertiesFile = EscapeUtils.CheckTextNull(certPurposeInfo[0][0].certificatePurposeFileProperties);
                    }
                    if ("".equals(sPropertiesFile)) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_TEMPLATE_FILE_EMPTY;
                    }
                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
                    {
                        if (raServiceReq.fileManagerInfo != null) {
                            if (raServiceReq.fileManagerInfo.length <= 0) {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_FILE_NOSUPPORT;
                            }
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_FILE_NOSUPPORT;
                        }
                    }
                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
                    {
                        objectMapper = new ObjectMapper();
                        FILE_PROFILE_JSON itemParsePush = objectMapper.readValue(sPropertiesFile, FILE_PROFILE_JSON.class);
                        for (FileManagerInfo fileManagerInfo1 : raServiceReq.fileManagerInfo) {
                            for (FILE_PROFILE_JSON.Attribute attribute : itemParsePush.getAttributes()) {
                                if (EscapeUtils.CheckTextNull(fileManagerInfo1.fileTypeCode).equals(attribute.getName())) {
                                    fileManagerInfo1.requireEnabled = attribute.getIsRequire();
                                }
//                                if (attribute.getIsRequire() == true) {
//                                    isHasReqFile = true;
//                                }
                            }
                        }
                        for (FileManagerInfo fileManagerCheck : raServiceReq.fileManagerInfo) {
                            // check require
                            if (fileManagerCheck.requireEnabled == true) {
                                if (fileManagerCheck.fileByte == null) {
                                    sCheckRequire = false;
                                    break;
                                }
                            }
                        }
                        if (sCheckRequire == true) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_FILE_EMPTY;
                        }
                    }

                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="### GET PROVINCE and FULLNAME">
                    CITY_PROVINCE[][] rsProvince = new CITY_PROVINCE[1][];
                    db.S_BO_PROVINCE_DETAIL(pPROVINCE_ID, rsProvince);
                    if (rsProvince[0].length > 0) {
                        sProvinceNameComponent = rsProvince[0][0].REMARK;
                    }
                    String raFullnameCreate = "";
                    String raFullname = "";
                    BACKOFFICE_USER[][] rsUser = new BACKOFFICE_USER[1][];
                    db.S_BO_USER_DETAIL(String.valueOf(createdUserID), String.valueOf(raServiceReq.language), rsUser);
                    if (rsUser[0].length > 0) {
                        raServiceReq.beneficiaryUser = rsUser[0][0].USERNAME;
                        raFullnameCreate = EscapeUtils.CheckTextNull(rsUser[0][0].FULL_NAME);
                    }
                    UserInfo[][] userDetail = new UserInfo[1][];
                    db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                    if (userDetail[0].length > 0) {
                        raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                    }
                    //</editor-fold>

                    CERTIFICATION_DATA_ATTR tempLogReq = new CERTIFICATION_DATA_ATTR();
                    tempLogReq.personalName = pPERSONAL_NAME;
                    tempLogReq.companyName = pCOMPANY_NAME;
                    tempLogReq.enterpriseID = pEnterpriseDB;
                    tempLogReq.personalID = pPersonalDB;
                    tempLogReq.phoneContract = sPHONE_CONTRACT;
                    tempLogReq.emailContract = sEMAIL_CONTRACT;
                    tempLogReq.issuerSubject = sCoreCASubject;
                    tempLogReq.subjectDn = sDN;
                    tempLogReq.tokenSn = sTOKEN_SN;
                    tempLogReq.provinceName = sProvinceNameComponent;
                    tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                        // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                        int intLevelApprove = 0;
                        if (autoApproveCAServer == false && autoApproveCAClient == false) {
                            intLevelApprove = 0;
                        } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                            intLevelApprove = 1;
                        } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                            intLevelApprove = 0;
                        } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                            intLevelApprove = 2;
                        }
                        //</editor-fold>

                        CommonFunction.LogDebugString(log, sFunctionWS, "REQUEST: " + "CERT_SN: " + EscapeUtils.CheckTextNull(raServiceReq.certificateSN)
                            + "; CERTE_STATE_ID: " + pCERTIFICATE_STATE_ID + "; CERT_ID: " + pCertificateId + "; CERT_ATTR_TYPE_CODE: " + pCERTIFICATION_ATTR_TYPE_CODE
                            + "; CERTIF_AUTHORITY_CODE: " + pCERTIFICATION_AUTHORITY_CODE
                            + "; TOKEN_SN_Old: " + sTOKEN_SN + "; EMAIL_CONTRACT: " + sEMAIL_CONTRACT
                            + "; PHONE_CONTRACT: " + sPHONE_CONTRACT + "; AUTO_APPROVE_CLIENT: " + autoApproveCAClient
                            + "; AUTO_APPROVE_USER: " + raServiceReq.approveEnabled
                            + "; BENEFICIARIES_USER: " + raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                        // VALUE ATTR
                        ATTRIBUTE_VALUES valueATTR;
                        ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                        dataATTR.setCertificationData(tempLogReq);
                        valueATTR = new ATTRIBUTE_VALUES();
                        valueATTR.setTokenSn(sTOKEN_SN);
                        valueATTR.setTypeName(pCERTIFICATION_ATTR_TYPE_CODE);
                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                        valueATTR.setCreateUser(raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                        valueATTR.setCreateDt(new Date());
                        valueATTR.setAttributeData(dataATTR);
                        String strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                        // VALUE ATTR
                        int[] pCERTIFICATE_ATTR_ID = new int[1];
                        String[] pRESPONSE_CODE_NAME = new String[1];
                        GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
                        db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
                        //<editor-fold defaultstate="collapsed" desc="### File Attach: Check Add to JRB">
                        String sJRBConfig = "";
                        if (rsPolicy[0].length > 0) {
                            for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DMS_PROPERTIES_CURRENT)) {
                                    sJRBConfig = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                    break;
                                }
                            }
                        }
                        int[] pFILE_MANAGER_ID = new int[1];
                        if (!"".equals(sJRBConfig)) {
                            String sJRB_Source = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_SOURCE);
                            if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_EFY)) {
                                String sIP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_IP);
                                String sHTTP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PROTOCOL);
                                String sCONTEXT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_CONTEXT);
                                String sPORT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PORT);
                                String sDEFAULT_USER = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERNAME);
                                String sDEFAULT_PASS = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PASSWORD);
                                String sOWNERCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_OWNERCODE);
                                String sAPPCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_APPCODE);
                                String sFUNCTION_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_FUNCTION_UP);
                                String idUUID_Temp = Definitions.CONFIG_JACK_RABBIT_UUID_SAMPLE;
                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                    String sFileData = new String(Base64.encodeBase64(fileManagerInsert.fileByte), "UTF-8"); //EscapeUtils.CheckTextNull(mhIP.FILE_URL);//CommonFunction.encodeFileToBase64Binary(fileUp);
                                    CloseableHttpResponse pHttpRes = ConnectFileToPartner.upFileParner(sIP_CONNECT, sHTTP_CONNECT,
                                            sCONTEXT_CONNECT, Integer.parseInt(sPORT_CONNECT), sDEFAULT_USER,
                                            sDEFAULT_PASS, sOWNERCODE_CONNECT, sAPPCODE_CONNECT, sFUNCTION_CONNECT, idUUID_Temp,
                                            fileManagerInsert.fileName, sFileData);
                                    InputStream isStr = pHttpRes.getEntity().getContent();
                                    String resultUUID = IOUtils.toString(isStr);
                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", resultUUID);
                                    String sMimeType = EscapeUtils.CheckTextNull(fileManagerInsert.mimeType);
                                    db.S_BO_API_CERTIFICATION_ATTR_SUPPLEMENT_FILE(raServiceReq.certificateID,
                                        pCERTIFICATION_ATTR_TYPE_ID, strReqValueATTR, fileManagerInsert.fileTypeCode, resultUUID, sJRBConfig,
                                        sMimeType, fileManagerInsert.fileName, fileManagerInsert.fileByte.length, raServiceReq.beneficiaryUser,
                                        pRESPONSE_CODE_NAME, pCERTIFICATE_ATTR_ID, pFILE_MANAGER_ID);
                                    if(!"0".equals(pRESPONSE_CODE_NAME[0]))
                                    {
                                        raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                        break;
                                    }
                                }
                            } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_JRB)) {
                                String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                    String sMimeType = EscapeUtils.CheckTextNull(fileManagerInsert.mimeType);
                                    JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
                                            Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                    InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
                                    JCRFile jrbFile = JackRabbitCommon.getInstance(jcrConfig).uploadFile(fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                    if(jrbFile != null) {
                                        CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", jrbFile.getUuid());
    //                                                int[] pFILE_MANAGER_ID = new int[1];
    //                                                db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, jrbFile.getUuid(), sJRBConfig,
    //                                                        jrbFile.getMimeType(), jrbFile.getFileName(), fileManagerInsert.fileByte.length,
    //                                                        pCERTIFICATION_ID[0], EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                        db.S_BO_API_CERTIFICATION_ATTR_SUPPLEMENT_FILE(raServiceReq.certificateID,
                                            pCERTIFICATION_ATTR_TYPE_ID, strReqValueATTR, fileManagerInsert.fileTypeCode, jrbFile.getUuid(), sJRBConfig,
                                            sMimeType, fileManagerInsert.fileName, fileManagerInsert.fileByte.length, raServiceReq.beneficiaryUser,
                                            pRESPONSE_CODE_NAME, pCERTIFICATE_ATTR_ID, pFILE_MANAGER_ID);
                                        if(!"0".equals(pRESPONSE_CODE_NAME[0]))
                                        {
                                            raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                            break;
                                        }
                                    }
                                }
                            } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_MID)) {
                                String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                    String sMimeType = EscapeUtils.CheckTextNull(fileManagerInsert.mimeType);
                                    InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
                                    ConnectJackRabbitNew openJRB = new ConnectJackRabbitNew(sJRB_Host, sJRB_UserID, sJRB_UserPass,
                                        Integer.parseInt(sJRB_MaxSession), Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                    String[] sReturnJRB = new String[2];
                                    vn.mobileid.fms.client.JCRFile jrbFile = openJRB.uploadFile(EscapeUtils.CheckTextNull(fileManagerInsert.fileName),
                                        EscapeUtils.CheckTextNull(sMimeType), isFILE_STREAM, sReturnJRB);
                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", sReturnJRB[0].trim());
//                                                int[] pFILE_MANAGER_ID = new int[1];
//                                                db.S_BO_API_FILE_MANAGER_INSERT(fileManagerInsert.fileTypeCode, sReturnJRB[0].trim(), sJRBConfig,
//                                                        sMimeType, sReturnJRB[1].trim(), fileManagerInsert.fileByte.length,
//                                                        pCERTIFICATION_ID[0], EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pFILE_MANAGER_ID);
                                    db.S_BO_API_CERTIFICATION_ATTR_SUPPLEMENT_FILE(raServiceReq.certificateID,
                                        pCERTIFICATION_ATTR_TYPE_ID, strReqValueATTR, fileManagerInsert.fileTypeCode, sReturnJRB[0].trim(), sJRBConfig,
                                        sMimeType, sReturnJRB[1].trim(), fileManagerInsert.fileByte.length, raServiceReq.beneficiaryUser,
                                        pRESPONSE_CODE_NAME, pCERTIFICATE_ATTR_ID, pFILE_MANAGER_ID);
                                    if(!"0".equals(pRESPONSE_CODE_NAME[0]))
                                    {
                                        raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                        break;
                                    }
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_FILE_NOSUPPORT;
                            }
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_FILE_NOSUPPORT;
                        }
                        //</editor-fold>
                        if ( raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                            raServiceResp.certificateID = pCertificateId;
                            //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                            if (intLevelApprove == 1 || intLevelApprove == 2) {
                                valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                valueATTR.setApproveDt(new Date());
                                strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                            }
                            if (intLevelApprove == 2) {
                                // Approve CA
                                valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                valueATTR.setApproveCADt(new Date());
                                strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                if ("0".equals(sApprove)) {
                                    db.S_BO_API_CERTIFICATION_SUPPLEMENT_FILE(pCERTIFICATE_ATTR_ID[0], raServiceReq.approveUser, pRESPONSE_CODE_NAME);
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            }
                            //</editor-fold>
                        }
                    }
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### approveCertificateAttachmentProcess">
    public void approveCertificateAttachmentProcess(String pPARENT_ID, int pBRANCH_ID,
        String pApproveCAUser, boolean autoApproveCAServer, int[] System_Log_ID, String[] System_Log_BillCode,
        String[] sTOKEN_SN_LOG, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_APPROVAL_CERTIFICATION_ATTACHMENT;
        String sTOKEN_SN = "";
        boolean autoApproveCAClient = true;
        ObjectMapper objectMapper;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA,
            Definitions.CONFIG_LOG_SOURCE_API_RA, "", "", sFunctionWS, objectMapper.writeValueAsString(raReqTemp),
            raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);

        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE">
            int requestId = 0;
            String pCOMMENT = "";
            int pCERTIFICATE_STATE_ID = 0;
            int[] pRESPONSE_CODE = new int[1];
            String sVALUE_OLD = "";
            String sRequestStateCode = "";
            String sRequestTypeCode = "";
            int sBranchId_Cert = 0;
//                        boolean pPrivateKeyEnabled_Old = false;
            CertificateInfo[][] rsReq = new CertificateInfo[1][];
            if(raServiceReq.certificateID != 0)
            {
                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", raServiceReq.certificateID,
                        "", "", raServiceReq.language, pRESPONSE_CODE, rsReq, "", "", "", "");
                if (rsReq[0].length > 0) {
                    sTOKEN_SN = rsReq[0][0].tokenSN;
                    pCOMMENT = rsReq[0][0].comment;
                    requestId = rsReq[0][0].requestId;
                    sRequestStateCode = rsReq[0][0].requestStateCode;
                    sRequestTypeCode = rsReq[0][0].requestTypeCode;
                    pCERTIFICATE_STATE_ID = rsReq[0][0].certificateStateId;
                    sVALUE_OLD = rsReq[0][0].value;
                    sBranchId_Cert = rsReq[0][0].raId;
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
//                                if(sBranchId_Cert != pBRANCH_ID)
//                                {
//                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
//                                }
                }
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                //<editor-fold defaultstate="collapsed" desc="### CHECK STATE VALID">
                if (pCERTIFICATE_STATE_ID != 0 && pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_NEW
                    || pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_OPERATED) {
                    if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING)
                        || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED)
                        || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED))
                    {
                        if (sRequestTypeCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_SUPPLEMENT_FILE)) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### APPROVE CERT">
                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    String idCERT_APPROVE_REMARK = EscapeUtils.CheckTextNull(raServiceReq.remark);
                    //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                    // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                    int intLevelApprove = 0;
                    if (autoApproveCAServer == false && autoApproveCAClient == false) {
                        intLevelApprove = 0;
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                    } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                        intLevelApprove = 1;
                        if (!sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING)) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                        }
                    } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                        intLevelApprove = 0;
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
//                                    if (!sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING)) {
//                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
//                                    }
                    } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                        intLevelApprove = 2;
                        if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_COMMITED)
                                || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_DECLINED)
                                || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_GENERATED)
                                || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_ERROR_ISSUED)
                                || sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_ISSUED)) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_STATUS_REQUEST_APPROVE_INVALID;
                        }
                    }
                    //</editor-fold>

                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {

                        //<editor-fold defaultstate="collapsed" desc="### GET USER-FULLNAME">
                        String raFullname = "";
                        UserInfo[][] userDetail = new UserInfo[1][];
                        db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                        if (userDetail[0].length > 0) {
                            raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                        }
                        //</editor-fold>

                        //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR">
                        CERTIFICATION_DATA_ATTR tempLogReq;
                        ATTRIBUTE_VALUES valueATTR_Last;
                        // VALUE ATTR_FRIST
                        ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(sVALUE_OLD, ATTRIBUTE_VALUES.class);
                        tempLogReq = valueATTR_Frist.getAttributeData().getCertificationData();
                        String sToken_Frist = valueATTR_Frist.getTokenSn();
                        String sTypeName_Frist = valueATTR_Frist.getTypeName();
                        String sCreateUser_Frist = valueATTR_Frist.getCreateUser();
                        Date sCreateDt_Frist = valueATTR_Frist.getCreateDt();
                        String sApproveUser_Frist = EscapeUtils.CheckTextNull(valueATTR_Frist.getApproveUser());
                        Date sApproveDt_Frist = valueATTR_Frist.getApproveDt();
                        // VALUE ATTR_LAST
                        valueATTR_Last = new ATTRIBUTE_VALUES();
                        ATTRIBUTE_DATA dataATTR_Last = new ATTRIBUTE_DATA();
                        dataATTR_Last.setCertificationData(tempLogReq);
                        valueATTR_Last.setTokenSn(sToken_Frist);
                        valueATTR_Last.setTypeName(sTypeName_Frist);
                        valueATTR_Last.setCreateUser(sCreateUser_Frist);
                        valueATTR_Last.setCreateDt(sCreateDt_Frist);
                        if (!"".equals(sApproveUser_Frist)) {
                            valueATTR_Last.setApproveUser(sApproveUser_Frist);
                        } else {
                            valueATTR_Last.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                        }
                        if (sApproveDt_Frist != null) {
                            valueATTR_Last.setApproveDt(sApproveDt_Frist);
                        } else {
                            valueATTR_Last.setApproveDt(new Date());
                        }
                        valueATTR_Last.setAttributeData(dataATTR_Last);
                        //</editor-fold>

                        if (intLevelApprove == 1) {
                            if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING))
                            {
                                valueATTR_Last.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                if (!"".equals(sApproveUser_Frist)) {
                                    valueATTR_Last.setApproveUser(sApproveUser_Frist);
                                } else {
                                    valueATTR_Last.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                }
                                if (sApproveDt_Frist != null) {
                                    valueATTR_Last.setApproveDt(sApproveDt_Frist);
                                } else {
                                    valueATTR_Last.setApproveDt(new Date());
                                }
                                String sPRE_APPROVED = db.S_BO_CERTIFICATION_PRE_APPROVED(requestId, CommonFunction.GenJSONTokenATTR(valueATTR_Last),
                                        EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                if(!"0".equals(sPRE_APPROVED)) {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                }
                            }
                        }
                        if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                            if (intLevelApprove == 2) {
                                if (sRequestStateCode.equals(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING)) {
                                    valueATTR_Last.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                    if (!"".equals(sApproveUser_Frist)) {
                                        valueATTR_Last.setApproveUser(sApproveUser_Frist);
                                    } else {
                                        valueATTR_Last.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                    }
                                    if (sApproveDt_Frist != null) {
                                        valueATTR_Last.setApproveDt(sApproveDt_Frist);
                                    } else {
                                        valueATTR_Last.setApproveDt(new Date());
                                    }
                                    db.S_BO_CERTIFICATION_PRE_APPROVED(requestId, CommonFunction.GenJSONTokenATTR(valueATTR_Last),
                                        EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                }
                                //<editor-fold defaultstate="collapsed" desc="### PROCESS">
                                valueATTR_Last.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                valueATTR_Last.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                valueATTR_Last.setApproveCADt(new Date());
                                String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(requestId, CommonFunction.GenJSONTokenATTR(valueATTR_Last),
                                        EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                if ("0".equals(sApprove)) {
                                    String[] pRESPONSE_CODE_NAME = new String[1];
                                    //<editor-fold defaultstate="collapsed" desc="### REVOKE REASON UPDATE">
                                    /// EDIT_LATER
                                    objectMapper = new ObjectMapper();
                                    String sCertificateSuspendReasonOld = "";
                                    String sCertificateApproveRemarkOld = "";
                                    if(!"".equals(pCOMMENT))
                                    {
                                        try {
                                            CERTIFICATION_COMMENT jsonCertCommentOld = objectMapper.readValue(pCOMMENT, CERTIFICATION_COMMENT.class);
                                            sCertificateSuspendReasonOld = jsonCertCommentOld.certificateSuspendReason;
                                            sCertificateApproveRemarkOld = jsonCertCommentOld.certificateApproveRemark;
                                        } catch(IOException e) {}
                                    }
                                    CERTIFICATION_COMMENT jsonCertComment = new CERTIFICATION_COMMENT();
                                    jsonCertComment.certificateDeclineReason = "";
                                    jsonCertComment.certificateSuspendReason = sCertificateSuspendReasonOld;
                                    jsonCertComment.certificateRevokeReason = "";
                                    jsonCertComment.certificateApproveRemark = sCertificateApproveRemarkOld;
                                    jsonCertComment.certificateAttachmentApproveRemark = idCERT_APPROVE_REMARK;
//                                    idCERT_APPROVE_REMARK = objectMapper.writeValueAsString(jsonCertComment);
//                                    db.S_BO_CERTIFICATION_UPDATE_REVOKED_REASON(String.valueOf(raServiceReq.certificateID), idCERT_APPROVE_REMARK, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                    db.S_BO_API_CERTIFICATION_UPDATE_REVOCATION_REASON(raServiceReq.certificateID, idCERT_APPROVE_REMARK, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                    //</editor-fold>

                                    if(pCERTIFICATE_STATE_ID == Definitions.CONFIG_CERTIFICATION_STATE_OPERATED)
                                    {
                                        db.S_BO_API_CERTIFICATION_SUPPLEMENT_FILE(requestId, raServiceReq.approveUser, pRESPONSE_CODE_NAME);
                                    }
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                }
                                //</editor-fold>
                            }
                        }
                    }
                }
                //</editor-fold>
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### registerCertificateOwnerProcess">
    public void registerCertificateOwnerProcess(String pBeneficiaryUserDefault, String pApproveCAUser, boolean autoApproveCAServer,
        int[] System_Log_ID, String[] System_Log_BillCode, String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_REGISTRATION_CERTIFICATION_OWNER;
        boolean autoApproveCAClient = raServiceReq.approveEnabled;
        ObjectMapper objectMapper;
        String pCERTIFICATION_ATTR_TYPE_CODE = Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_CODE_REGISTRATION_OWNER;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp),
            pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.taxCode)) || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.pid))
                || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.budgetCode)) || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.passport)))
            {
                //<editor-fold defaultstate="collapsed" desc="### GET FULLNAME">
                String raFullnameCreate = "";
                String raFullname = "";
                UserInfo[][] userInfo = new UserInfo[1][];
                db.S_BO_API_USER_LIST(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", raServiceReq.language, userInfo);
                if (userInfo[0].length > 0) {
                    raFullnameCreate = EscapeUtils.CheckTextNull(userInfo[0][0].fullName);
                }
                UserInfo[][] userDetail = new UserInfo[1][];
                db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                if (userDetail[0].length > 0) {
                    raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                int intLevelApprove = 0;
                if (autoApproveCAServer == false && autoApproveCAClient == false) {
                    intLevelApprove = 0;
                } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                    intLevelApprove = 1;
                } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                    intLevelApprove = 0;
                } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                    intLevelApprove = 2;
                }
                //</editor-fold>

                String sEnterpriseID = "";
                String sPersonalID = "";
                if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.taxCode))) {
                    sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE + EscapeUtils.CheckTextNull(raServiceReq.taxCode);
                }
                if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.budgetCode))) {
                    sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_BUDGETCODE + EscapeUtils.CheckTextNull(raServiceReq.budgetCode);
                }
                if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.decision))) {
                    sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_DECISION + EscapeUtils.CheckTextNull(raServiceReq.decision);
                }
                if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.socialInsuranceCode))) {
                    sEnterpriseID = Definitions.CONFIG_CERTIFICATION_PREFIX_SOCIAL_INSURANCE_CODE + EscapeUtils.CheckTextNull(raServiceReq.socialInsuranceCode);
                }
                if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.unitCode))) {
                    sEnterpriseID = Definitions.CONFIG_CERTIFICATION_PREFIX_UNIT_CODE + EscapeUtils.CheckTextNull(raServiceReq.unitCode);
                }
                if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.pid))) {
                    sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CMND + EscapeUtils.CheckTextNull(raServiceReq.pid);
                }
                if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.passport))) {
                    sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_PASSPORT + EscapeUtils.CheckTextNull(raServiceReq.passport);
                }
                if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.citizenId))) {
                    sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CITIZEN_ID + EscapeUtils.CheckTextNull(raServiceReq.citizenId);
                }
                if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.personalTaxCode))) {
                    sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE + EscapeUtils.CheckTextNull(raServiceReq.personalTaxCode);
                }
                if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.personalSocialInsuranceCode))) {
                    sPersonalID = Definitions.CONFIG_CERTIFICATION_PREFIX_SOCIAL_INSURANCE_CODE + EscapeUtils.CheckTextNull(raServiceReq.personalSocialInsuranceCode);
                }
                String sCERTIFICATION_OWNER_TYPE = "";
                if(!"".equals(sEnterpriseID) && "".equals(sPersonalID)) {
                    sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_ENTERPRISE;
                }
                if("".equals(sEnterpriseID) && !"".equals(sPersonalID)) {
                    sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_PERSONAL;
                }
                if(!"".equals(sEnterpriseID) && !"".equals(sPersonalID)) {
                    sCERTIFICATION_OWNER_TYPE = Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_PERSONAL;
                }
                //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR ">
                CERTIFICATION_OWNER_DATA_ATTR tempLogReq = new CERTIFICATION_OWNER_DATA_ATTR();
                tempLogReq.personalName = raServiceReq.personalName;
                tempLogReq.companyName = raServiceReq.companyName;
                tempLogReq.enterpriseID = sEnterpriseID;
                tempLogReq.personalID = sPersonalID;
                tempLogReq.emailContract = raServiceReq.emailContact;
                tempLogReq.phoneContract = raServiceReq.phoneContact;
                tempLogReq.address = raServiceReq.address;
                tempLogReq.representative = raServiceReq.representative;
                tempLogReq.representativePosition = raServiceReq.representativePosition;
                tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PENDING;
                tempLogReq.createUser = raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")";
                tempLogReq.createDt = new Date();
                //</editor-fold>
                int[] pCERTIFICATION_OWNER_ID = new int[1];
                int[] pOWNER_ATTR_ID = new int[1];
                String[] pRESPONSE_CODE = new String[1];
                String sOwnerUUID = CommonFunction.getUUIDV4();
                db.S_BO_API_CERTIFICATION_OWNER_INSERT(raServiceReq.personalName, raServiceReq.companyName, sEnterpriseID, 
                    sPersonalID, sCERTIFICATION_OWNER_TYPE, raServiceReq.phoneContact, raServiceReq.emailContact,
                    raServiceReq.beneficiaryUser, raServiceReq.address, raServiceReq.representative, raServiceReq.representativePosition,
                    pCERTIFICATION_ATTR_TYPE_CODE, objectMapper.writeValueAsString(tempLogReq), sOwnerUUID, pRESPONSE_CODE,
                    pCERTIFICATION_OWNER_ID, pOWNER_ATTR_ID);
                if("0".equals(pRESPONSE_CODE[0])) {
                    raServiceResp.certificateOwnerID = pCERTIFICATION_OWNER_ID[0];
                    raServiceResp.certificateOwnerStateCode = Definitions.CONFIG_CERTIFICATION_OWNER_STATE_CODE_INITIALIZED;
                    //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                    if (intLevelApprove == 1 || intLevelApprove == 2) {
                        tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PRE_APPROVED;
                        tempLogReq.approveUser = raFullname + " (" + raServiceReq.approveUser + ")";
                        tempLogReq.approveDt =new Date();
                        String sPRE_APPROVED = db.S_BO_API_CERTIFICATION_OWNER_PRE_APPROVED(pOWNER_ATTR_ID[0], objectMapper.writeValueAsString(tempLogReq), raServiceReq.approveUser);
                        if("0".equals(sPRE_APPROVED)) {
                            raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                        }
                    }
                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        if (intLevelApprove == 2) {
                            tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_APPROVED;
                            tempLogReq.approveCAUser = raFullname + " (" + raServiceReq.approveUser + ")";
                            tempLogReq.approveCADt = new Date();
                            String sApprove = db.S_BO_API_CERTIFICATION_OWNER_APPROVED(pOWNER_ATTR_ID[0], objectMapper.writeValueAsString(tempLogReq), raServiceReq.approveUser);
                            if ("0".equals(sApprove)) {
                                String sInsert = db.S_BO_API_CERTIFICATION_OWNER_REGISTRATION(pOWNER_ATTR_ID[0], "", raServiceReq.approveUser);
                                if("0".equals(sInsert)) {
                                    raServiceResp.certificateOwnerStateCode = Definitions.CONFIG_CERTIFICATION_OWNER_STATE_CODE_OPERATED;
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                } else {
                                    raServiceResp.responseCode = Integer.parseInt(sInsert);
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                            }
                        }
                    }
                    //</editor-fold>
                } else {
                    raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE[0]);
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### changeCertificateOwnerInfoProcess">
    public void changeCertificateOwnerInfoProcess(String pBeneficiaryUserDefault, String pApproveCAUser, boolean autoApproveCAServer,
        int[] System_Log_ID, String[] System_Log_BillCode, String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_CHANGE_CERTIFICATION_OWNER_INFO;
        boolean autoApproveCAClient = raServiceReq.approveEnabled;
        ObjectMapper objectMapper;
        String pCERTIFICATION_ATTR_TYPE_CODE = Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_CHANGE_OWNER_INFO;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp),
            pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            String sOWNER_TYPE_NAME = "";
            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE OWNER">
            if(raServiceReq.certificateOwnerID != 0)
            {
                CertificateOwnerInfo[][] certOwnerInfo = new CertificateOwnerInfo[1][];
                db.S_BO_API_CERTIFICATION_OWNER_GET_INFO(raServiceReq.certificateOwnerID, "", "", "", "", "", "", "","", raServiceReq.language, certOwnerInfo);
                if (certOwnerInfo[0].length > 0) {
                    sOWNER_TYPE_NAME = certOwnerInfo[0][0].certificateOwnerTypeCode;
                    if(sOWNER_TYPE_NAME.equals(Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_PERSONAL_GOV)
                        || sOWNER_TYPE_NAME.equals(Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_ENTERPRISE_GOV))
                    {
                        raServiceReq.emailContact = certOwnerInfo[0][0].emailContact;
                    }
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                    if(!certOwnerInfo[0][0].certificateOwnerStateCode.equals(Definitions.CONFIG_CERTIFICATION_OWNER_STATE_CODE_OPERATED))
                    {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_STATE_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_REQUEST_INVALID;
            }
            //</editor-fold>

            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                //<editor-fold defaultstate="collapsed" desc="### GET FULLNAME">
                String raFullnameCreate = "";
                String raFullname = "";
                UserInfo[][] userInfo = new UserInfo[1][];
                db.S_BO_API_USER_LIST(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", raServiceReq.language, userInfo);
                if (userInfo[0].length > 0) {
                    raFullnameCreate = EscapeUtils.CheckTextNull(userInfo[0][0].fullName);
                }
                UserInfo[][] userDetail = new UserInfo[1][];
                db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                if (userDetail[0].length > 0) {
                    raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR ">
                CERTIFICATION_OWNER_DATA_ATTR tempLogReq = new CERTIFICATION_OWNER_DATA_ATTR();
                tempLogReq.personalName = raServiceReq.personalName;
                tempLogReq.companyName = raServiceReq.companyName;
                tempLogReq.emailContract = raServiceReq.emailContact;
                tempLogReq.phoneContract = raServiceReq.phoneContact;
                tempLogReq.representative = raServiceReq.representative;
                tempLogReq.representativePosition = raServiceReq.representativePosition;
                tempLogReq.address = raServiceReq.address;
                tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PENDING;
                tempLogReq.createUser = raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")";
                tempLogReq.createDt = new Date();
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                int intLevelApprove = 0;
                if (autoApproveCAServer == false && autoApproveCAClient == false) {
                    intLevelApprove = 0;
                } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                    intLevelApprove = 1;
                } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                    intLevelApprove = 0;
                } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                    intLevelApprove = 2;
                }
                //</editor-fold>

                int pMESSAGING_QUEUE_STATE_ID = Definitions.CONFIG_MESSAGING_QUEUE_STATE_ID_PENDING;
                int pMESSAGING_QUEUE_FUNCTION_ID = Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_ID_CHANGE_OWNER_INFO;
                int[] pOWNER_ATTR_ID = new int[1];
                String[] pRESPONSE_CODE = new String[1];
                db.S_BO_API_CERTIFICATION_OWNER_INSERT_MESSAGING_QUEUE(raServiceReq.certificateOwnerID, pMESSAGING_QUEUE_STATE_ID,
                    pMESSAGING_QUEUE_FUNCTION_ID, objectMapper.writeValueAsString(tempLogReq),"", raServiceReq.beneficiaryUser,
                    pRESPONSE_CODE, pOWNER_ATTR_ID);
                if("0".equals(pRESPONSE_CODE[0]))
                {
                    raServiceResp.certificateOwnerID = raServiceReq.certificateOwnerID;
                    raServiceResp.certificateOwnerStateCode = Definitions.CONFIG_CERTIFICATION_OWNER_STATE_CODE_OPERATED;
                    //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                    if (intLevelApprove == 1 || intLevelApprove == 2) {
                        tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PRE_APPROVED;
                        tempLogReq.approveUser = raFullname + " (" + raServiceReq.approveUser + ")";
                        tempLogReq.approveDt = new Date();
                        String sPRE_APPROVED = db.S_BO_API_CERTIFICATION_OWNER_PRE_APPROVED(pOWNER_ATTR_ID[0], objectMapper.writeValueAsString(tempLogReq), EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                        if("0".equals(sPRE_APPROVED)) {
                            raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                        }
                    }
                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        if (intLevelApprove == 2) {
                            tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_APPROVED;
                            tempLogReq.approveCAUser = raFullname + " (" + raServiceReq.approveUser + ")";
                            tempLogReq.approveCADt = new Date();
                            String sApprove = db.S_BO_API_CERTIFICATION_OWNER_APPROVED(pOWNER_ATTR_ID[0], objectMapper.writeValueAsString(tempLogReq), EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                            if ("0".equals(sApprove)) {
                                String sUpdate = db.S_BO_API_CERTIFICATION_OWNER_CHANGE_INFO(pOWNER_ATTR_ID[0], raServiceReq.address, raServiceReq.personalName,
                                    raServiceReq.companyName, raServiceReq.phoneContact, raServiceReq.emailContact, "", raServiceReq.representative,
                                    raServiceReq.representativePosition, raServiceReq.approveUser);
                                if("0".equals(sUpdate)) {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                } else {
                                    raServiceResp.responseCode = Integer.parseInt(sUpdate);
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                            }
                        }
                    }
                    //</editor-fold>
                } else {
                    raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE[0]);
                }
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### disposeCertificateOwnerProcess">
    public void disposeCertificateOwnerProcess(String pBeneficiaryUserDefault, String pApproveCAUser, boolean autoApproveCAServer,
        int[] System_Log_ID, String[] System_Log_BillCode, String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES,
        String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_DISPOSE_CERTIFICATION_OWNER;
        boolean autoApproveCAClient = raServiceReq.approveEnabled;
        ObjectMapper objectMapper;
        String pCERTIFICATION_ATTR_TYPE_CODE = Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_CODE_DISPOSE_OWNER;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp),
            pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE OWNER">
            String sCOMMENT_OLD = "";
            String sOwnerStateCode;
            String pEnterpriseDB = "";
            String pPersonalDB = "";
            String sPersonalName = "";
            String sCompanyName = "";
            String sEmailContact = "";
            String sPhoneContact = "";
            if(raServiceReq.certificateOwnerID != 0)
            {
                CertificateOwnerInfo[][] certOwnerInfo = new CertificateOwnerInfo[1][];
                db.S_BO_API_CERTIFICATION_OWNER_GET_INFO(raServiceReq.certificateOwnerID, "", "", "", "", "", "", "", "", raServiceReq.language, certOwnerInfo);
                if (certOwnerInfo[0].length > 0) {
                    sOwnerStateCode = certOwnerInfo[0][0].certificateOwnerStateCode;
                    if(!sOwnerStateCode.equals(Definitions.CONFIG_CERTIFICATION_OWNER_STATE_CODE_OPERATED))
                    {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_STATE_INVALID;
                    } else {
                        sCOMMENT_OLD = certOwnerInfo[0][0].comment;
                        pEnterpriseDB = certOwnerInfo[0][0].enterpriseUUID;
                        pPersonalDB = certOwnerInfo[0][0].personalUUID;
                        sPersonalName = certOwnerInfo[0][0].personalName;
                        sCompanyName = certOwnerInfo[0][0].companyName;
                        sEmailContact = certOwnerInfo[0][0].emailContact;
                        sPhoneContact = certOwnerInfo[0][0].phoneContact;
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_REQUEST_INVALID;
            }
            //</editor-fold>

            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                //<editor-fold defaultstate="collapsed" desc="### GET FULLNAME">
                String raFullnameCreate = "";
                String raFullname = "";
                UserInfo[][] userInfo = new UserInfo[1][];
                db.S_BO_API_USER_LIST(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", raServiceReq.language, userInfo);
                if (userInfo[0].length > 0) {
                    raFullnameCreate = EscapeUtils.CheckTextNull(userInfo[0][0].fullName);
                }
                UserInfo[][] userDetail = new UserInfo[1][];
                db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                if (userDetail[0].length > 0) {
                    raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR ">
                CERTIFICATION_OWNER_DATA_ATTR tempLogReq = new CERTIFICATION_OWNER_DATA_ATTR();
                tempLogReq.personalName = sPersonalName;
                tempLogReq.companyName = sCompanyName;
                tempLogReq.enterpriseID = pEnterpriseDB;
                tempLogReq.personalID = pPersonalDB;
                tempLogReq.emailContract = sEmailContact;
                tempLogReq.phoneContract = sPhoneContact;
                tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                tempLogReq.ownerDisposeReason = EscapeUtils.CheckTextNull(raServiceReq.remark);
                tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PENDING;
                tempLogReq.createUser = raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")";
                tempLogReq.createDt = new Date();
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                int intLevelApprove = 0;
                if (autoApproveCAServer == false && autoApproveCAClient == false) {
                    intLevelApprove = 0;
                } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                    intLevelApprove = 1;
                } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                    intLevelApprove = 0;
                } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                    intLevelApprove = 2;
                }
                //</editor-fold>

                int[] pOWNER_ATTR_ID = new int[1];
                String[] pRESPONSE_CODE = new String[1];
                int pMESSAGING_QUEUE_STATE_ID = Definitions.CONFIG_MESSAGING_QUEUE_STATE_ID_PENDING;
                int pMESSAGING_QUEUE_FUNCTION_ID = Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_ID_DISPOSE_OWNER;
                String sOwnerApproveRemark = "";
                if(!"".equals(sCOMMENT_OLD))
                {
                    try {
                        CERTIFICATION_OWNER_COMMENT jsonCertCommentOld = objectMapper.readValue(sCOMMENT_OLD, CERTIFICATION_OWNER_COMMENT.class);
                        sOwnerApproveRemark = jsonCertCommentOld.ownerApproveRemark;
                    } catch(IOException e) {}
                }
                CERTIFICATION_OWNER_COMMENT jsonCertComment = new CERTIFICATION_OWNER_COMMENT();
                jsonCertComment.ownerApproveRemark = sOwnerApproveRemark;
                jsonCertComment.ownerDisposeReason = EscapeUtils.CheckTextNull(raServiceReq.remark);
                String pCOMMENT = objectMapper.writeValueAsString(jsonCertComment);
                db.S_BO_API_CERTIFICATION_OWNER_INSERT_MESSAGING_QUEUE(raServiceReq.certificateOwnerID, pMESSAGING_QUEUE_STATE_ID,
                    pMESSAGING_QUEUE_FUNCTION_ID, objectMapper.writeValueAsString(tempLogReq), pCOMMENT,
                    pBeneficiaryUserDefault, pRESPONSE_CODE, pOWNER_ATTR_ID);
                if("0".equals(pRESPONSE_CODE[0]))
                {
                    raServiceResp.certificateOwnerID = raServiceReq.certificateOwnerID;
                    raServiceResp.certificateOwnerStateCode = Definitions.CONFIG_CERTIFICATION_OWNER_STATE_CODE_OPERATED;
                    //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                    if (intLevelApprove == 1 || intLevelApprove == 2) {
                        tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PRE_APPROVED;
                        tempLogReq.approveUser = raFullname + " (" + raServiceReq.approveUser + ")";
                        tempLogReq.approveDt =new Date();
                        String sPRE_APPROVED = db.S_BO_API_CERTIFICATION_OWNER_PRE_APPROVED(pOWNER_ATTR_ID[0], objectMapper.writeValueAsString(tempLogReq), raServiceReq.approveUser);
                        if("0".equals(sPRE_APPROVED)) {
                            raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                        }
                    }
                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        if (intLevelApprove == 2) {
                            tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_APPROVED;
                            tempLogReq.approveCAUser = raFullname + " (" + raServiceReq.approveUser + ")";
                            tempLogReq.approveCADt = new Date();
                            String sApprove = db.S_BO_API_CERTIFICATION_OWNER_APPROVED(pOWNER_ATTR_ID[0], objectMapper.writeValueAsString(tempLogReq), raServiceReq.approveUser);
                            if ("0".equals(sApprove)) {
                                db.S_BO_API_CERTIFICATION_OWNER_DISPOSE(pOWNER_ATTR_ID[0], pCOMMENT, raServiceReq.approveUser);
                                raServiceResp.certificateOwnerStateCode = Definitions.CONFIG_CERTIFICATION_OWNER_STATE_CODE_DISPOSED;
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                            }
                        }
                    }
                    //</editor-fold>
                } else {
                    raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE[0]);
                }
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### declineCertificateOwnerProcess">
    public void declineCertificateOwnerProcess(int[] System_Log_ID, String[] System_Log_BillCode, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_DECLINE_CERTIFICATION_OWNER;
        ObjectMapper objectMapper;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp),
            raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            int pMessagingQueueID = 0;
            String pQueueStateCode = "";
            String sCOMMENT_OLD = "";
            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE OWNER">
            if(raServiceReq.certificateOwnerID != 0)
            {
                CertificateOwnerInfo[][] certOwnerInfo = new CertificateOwnerInfo[1][];
                db.S_BO_API_CERTIFICATION_OWNER_GET_INFO(raServiceReq.certificateOwnerID, "", "", "", "", "", "", "", "", raServiceReq.language, certOwnerInfo);
                if (certOwnerInfo[0].length > 0) {
                    pMessagingQueueID = certOwnerInfo[0][0].messagingQueueID;
                    pQueueStateCode = certOwnerInfo[0][0].messagingQueueStateCode;
                    sCOMMENT_OLD = certOwnerInfo[0][0].comment;
                    if(pQueueStateCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_COMMITED)
                        || pQueueStateCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_DECLINED))
                    {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_STATE_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_REQUEST_INVALID;
            }
            //</editor-fold>

            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                //<editor-fold defaultstate="collapsed" desc="### PROCESS">
                String sOwnerDisposeReasonOld = "";
                String sOwnerApproveRemarkOld = "";
                if(!"".equals(sCOMMENT_OLD))
                {
                    try {
                        CERTIFICATION_OWNER_COMMENT jsonCertCommentOld = objectMapper.readValue(sCOMMENT_OLD, CERTIFICATION_OWNER_COMMENT.class);
                        sOwnerDisposeReasonOld = jsonCertCommentOld.ownerDisposeReason;
                        sOwnerApproveRemarkOld = jsonCertCommentOld.ownerApproveRemark;
                    } catch(IOException e) {}
                }
                CERTIFICATION_OWNER_COMMENT jsonCertComment = new CERTIFICATION_OWNER_COMMENT();
                jsonCertComment.ownerDisposeReason = sOwnerDisposeReasonOld;
                jsonCertComment.ownerApproveRemark = sOwnerApproveRemarkOld;
                jsonCertComment.ownerDeclineReason = raServiceReq.declineReason;
                String sParam = db.S_BO_API_CERTIFICATION_OWNER_DECLINED(pMessagingQueueID, objectMapper.writeValueAsString(jsonCertComment),
                    raServiceReq.approveUser);
                if("0".equals(sParam)) {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                } else {
                    raServiceResp.responseCode = Integer.parseInt(sParam);
                }
                //</editor-fold>
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### approveCertificateOwnerProcess">
    public void approveCertificateOwnerProcess(String pApproveCAUser, boolean autoApproveCAServer, int[] System_Log_ID,
        String[] System_Log_BillCode, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_APPROVAL_CERTIFICATION_OWNER;
        ObjectMapper objectMapper;
        RAServiceReq raReqTemp;
        boolean autoApproveCAClient = true;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp),
            raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            int pMessagingQueueID = 0;
            String sVALUE_OLD = "";
            String sCOMMENT_OLD = "";
            String pQueueStateCode = "";
            String pOwnerStateCode = "";
            String pQueueTypeCode = "";
            String pOwnerTypeCode = "";
            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE OWNER">
            if(raServiceReq.certificateOwnerID != 0)
            {
                CertificateOwnerInfo[][] certOwnerInfo = new CertificateOwnerInfo[1][];
                db.S_BO_API_CERTIFICATION_OWNER_GET_INFO(raServiceReq.certificateOwnerID, "", "", "", "", "", "", "", "", raServiceReq.language, certOwnerInfo);
                if (certOwnerInfo[0].length > 0) {
                    pQueueStateCode = certOwnerInfo[0][0].messagingQueueStateCode;
                    pQueueTypeCode = certOwnerInfo[0][0].messagingQueueTypeCode;
                    pOwnerStateCode = certOwnerInfo[0][0].certificateOwnerStateCode;
                    pMessagingQueueID = certOwnerInfo[0][0].messagingQueueID;
                    pOwnerTypeCode = certOwnerInfo[0][0].certificateOwnerTypeCode;
                    sVALUE_OLD = certOwnerInfo[0][0].value;
                    sCOMMENT_OLD = certOwnerInfo[0][0].comment;
                    if(pQueueTypeCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_CHANGE_OWNER_INFO)
                        || pQueueTypeCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_CODE_DISPOSE_OWNER))
                    {
                        if(!pOwnerStateCode.equals(Definitions.CONFIG_CERTIFICATION_OWNER_STATE_CODE_OPERATED))
                        {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_STATE_INVALID;
                        }
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_REQUEST_INVALID;
            }
            //</editor-fold>

            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                //<editor-fold defaultstate="collapsed" desc="### GET FULLNAME">
                String raFullname = "";
                UserInfo[][] userDetail = new UserInfo[1][];
                db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                if (userDetail[0].length > 0) {
                    raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                int intLevelApprove = 0;
                if (autoApproveCAServer == false && autoApproveCAClient == false) {
                    intLevelApprove = 0;
                } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                    intLevelApprove = 1;
                } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                    intLevelApprove = 0;
                } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                    intLevelApprove = 2;
                }
                //</editor-fold>
                switch (intLevelApprove) {
                    case 1:
                        if(!pQueueStateCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_INITIALIZED)
                                && !pQueueStateCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PENDING))
                        {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_STATE_INVALID;
                        }   break;
                    case 2:
                        if(!pQueueStateCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_INITIALIZED)
                                && !pQueueStateCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PRE_APPROVED)
                                && !pQueueStateCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PENDING))
                        {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_STATE_INVALID;
                        }   break;
                    default:
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_REQUEST_INVALID;
                        break;
                }
                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
                {
                    raServiceResp.certificateOwnerID = raServiceReq.certificateOwnerID;
                    raServiceResp.certificateOwnerStateCode = pOwnerStateCode;
                    CERTIFICATION_OWNER_DATA_ATTR tempLogReq;
                    if(!"".equals(sVALUE_OLD)) {
                        tempLogReq = objectMapper.readValue(sVALUE_OLD, CERTIFICATION_OWNER_DATA_ATTR.class);
                    } else {
                        tempLogReq = new CERTIFICATION_OWNER_DATA_ATTR();
                    }
                    //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                    String sOwnerDisposeReasonOld = "";
                    if(!"".equals(sCOMMENT_OLD))
                    {
                        try {
                            CERTIFICATION_OWNER_COMMENT jsonCertCommentOld = objectMapper.readValue(sCOMMENT_OLD, CERTIFICATION_OWNER_COMMENT.class);
                            sOwnerDisposeReasonOld = jsonCertCommentOld.ownerDisposeReason;
                        } catch(IOException e) {}
                    }
                    CERTIFICATION_OWNER_COMMENT jsonCertComment = new CERTIFICATION_OWNER_COMMENT();
                    jsonCertComment.ownerDisposeReason = sOwnerDisposeReasonOld;
                    jsonCertComment.ownerApproveRemark = EscapeUtils.CheckTextNull(raServiceReq.remark);
                    if (intLevelApprove == 1 || intLevelApprove == 2) {
                        tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PRE_APPROVED;
                        tempLogReq.approveUser = raFullname + " (" + raServiceReq.approveUser + ")";
                        tempLogReq.approveDt =new Date();
                        String sPRE_APPROVED = db.S_BO_API_CERTIFICATION_OWNER_PRE_APPROVED(pMessagingQueueID,
                            objectMapper.writeValueAsString(tempLogReq), raServiceReq.approveUser);
                        if("0".equals(sPRE_APPROVED)) {
                            raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                        }
                    }
                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        if (intLevelApprove == 2) {
                            tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_APPROVED;
                            tempLogReq.approveCAUser = raFullname + " (" + raServiceReq.approveUser + ")";
                            tempLogReq.approveCADt = new Date();
                            String sApprove = db.S_BO_API_CERTIFICATION_OWNER_APPROVED(pMessagingQueueID, objectMapper.writeValueAsString(tempLogReq), raServiceReq.approveUser);
                            if ("0".equals(sApprove)) {
                                if(pQueueTypeCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_CODE_REGISTRATION_OWNER))
                                {
                                    db.S_BO_API_CERTIFICATION_OWNER_REGISTRATION(pMessagingQueueID, objectMapper.writeValueAsString(jsonCertComment), raServiceReq.approveUser);
                                    raServiceResp.certificateOwnerStateCode = Definitions.CONFIG_CERTIFICATION_OWNER_STATE_CODE_OPERATED;
                                } else if(pQueueTypeCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_CHANGE_OWNER_INFO))
                                {
                                    String sPersonalNameChange = "";
                                    String sCompanyNameChange = "";
                                    String sAddressChange = "";
                                    String sPhoneChange = "";
                                    String sEmailChange = "";
                                    String sRepresentativeChange = "";
                                    String sRepresentativePositionChange = "";
                                    try{
                                        sPersonalNameChange = tempLogReq.personalName;
                                        sCompanyNameChange = tempLogReq.companyName;
                                        sAddressChange = tempLogReq.address;
                                        sPhoneChange = tempLogReq.phoneContract;
                                        sEmailChange = tempLogReq.emailContract;
                                        if(pOwnerTypeCode.equals(Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_ENTERPRISE_GOV)
                                            || pOwnerTypeCode.equals(Definitions.CONFIG_CERTIFICATION_OWNER_TYPE_CODE_PERSONAL_GOV))
                                        {
                                            sEmailChange = "";
                                        }
                                        sRepresentativeChange = tempLogReq.representative;
                                        sRepresentativePositionChange = tempLogReq.representativePosition;
                                    } catch (Exception e) {}
                                    db.S_BO_API_CERTIFICATION_OWNER_CHANGE_INFO(pMessagingQueueID, sAddressChange, sPersonalNameChange,
                                        sCompanyNameChange, sPhoneChange, sEmailChange, objectMapper.writeValueAsString(jsonCertComment),
                                        sRepresentativeChange, sRepresentativePositionChange, raServiceReq.approveUser);
                                } else if(pQueueTypeCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_CODE_DISPOSE_OWNER))
                                {
                                    String sReasonDispose = EscapeUtils.CheckTextNull(tempLogReq.ownerDisposeReason);
                                    jsonCertComment.ownerDeclineReason = sReasonDispose;
                                    db.S_BO_API_CERTIFICATION_OWNER_DISPOSE(pMessagingQueueID, objectMapper.writeValueAsString(jsonCertComment), raServiceReq.approveUser);
                                    raServiceResp.certificateOwnerStateCode = Definitions.CONFIG_CERTIFICATION_OWNER_STATE_CODE_DISPOSED;
                                }
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                            }
                        }
                    }
                    //</editor-fold>
                }
            }
        }
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### setCertificateOwnerAttachmentProcess">
    public void setCertificateOwnerAttachmentProcess(String pApproveCAUser, boolean autoApproveCAServer, Logger log,
        int[] System_Log_ID, String[] System_Log_BillCode, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        String sTOKEN_SN = "";
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_SET_CERTIFICATION_OWNER_ATTACHMENT;
        ObjectMapper objectMapper;
        boolean autoApproveCAClient = raServiceReq.approveEnabled;
        RAServiceReq raReqTemp = new RAServiceReq();
        raReqTemp.certificateSN = raServiceReq.certificateSN;
        raReqTemp.approveEnabled = raServiceReq.approveEnabled;
        raReqTemp.language = raServiceReq.language;
        raReqTemp.credentialData = raServiceReq.credentialData;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE OWNER">
            String pCERTIFICATION_ATTR_TYPE_CODE = Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_CODE_SUPPLEMENT_FILE;
            CertificateOwnerInfo[][] rsReq = new CertificateOwnerInfo[1][];
            if(raServiceReq.certificateOwnerID != 0)
            {
                db.S_BO_API_CERTIFICATION_OWNER_GET_INFO(raServiceReq.certificateOwnerID, "", "", "", "",
                    "", "", "", "", raServiceReq.language, rsReq);
                if (rsReq[0].length > 0) {
                    if(!rsReq[0][0].certificateOwnerStateCode.equals(Definitions.CONFIG_CERTIFICATION_OWNER_STATE_CODE_OPERATED)) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_STATE_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                //<editor-fold defaultstate="collapsed" desc="### File manager Modules">
                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
                {
                    if (raServiceReq.fileManagerInfo != null) {
                        if (raServiceReq.fileManagerInfo.length <= 0) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_FILE_EMPTY;
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_COMPONENT_FILE_EMPTY;
                    }
                }
                //</editor-fold>

                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                    // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                    int intLevelApprove = 0;
                    if (autoApproveCAServer == false && autoApproveCAClient == false) {
                        intLevelApprove = 0;
                    } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                        intLevelApprove = 1;
                    } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                        intLevelApprove = 0;
                    } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                        intLevelApprove = 2;
                    }
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="### GET FULLNAME">
                    String raFullnameCreate = "";
                    String raFullname = "";
                    UserInfo[][] userInfo = new UserInfo[1][];
                    db.S_BO_API_USER_LIST(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", raServiceReq.language, userInfo);
                    if (userInfo[0].length > 0) {
                        raFullnameCreate = EscapeUtils.CheckTextNull(userInfo[0][0].fullName);
                    }
                    UserInfo[][] userDetail = new UserInfo[1][];
                    db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                    if (userDetail[0].length > 0) {
                        raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                    }
                    //</editor-fold>

                    //<editor-fold defaultstate="collapsed" desc="### VALUE ATTR ">
                    CERTIFICATION_OWNER_DATA_ATTR tempLogReq = new CERTIFICATION_OWNER_DATA_ATTR();
                    tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                    tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PENDING;
                    tempLogReq.createUser = raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")";
                    tempLogReq.createDt = new Date();
                    //</editor-fold>

                    int pMESSAGING_QUEUE_STATE_ID = Definitions.CONFIG_MESSAGING_QUEUE_STATE_ID_PENDING;
                    int pMESSAGING_QUEUE_FUNCTION_ID = Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_ID_SUPPLEMENT_FILE;
                    int[] pOWNER_ATTR_ID = new int[1];
                    String[] pRESPONSE_CODE = new String[1];
                    db.S_BO_API_CERTIFICATION_OWNER_INSERT_MESSAGING_QUEUE(raServiceReq.certificateOwnerID, pMESSAGING_QUEUE_STATE_ID,
                        pMESSAGING_QUEUE_FUNCTION_ID, objectMapper.writeValueAsString(tempLogReq),"", raServiceReq.beneficiaryUser,
                        pRESPONSE_CODE, pOWNER_ATTR_ID);
                    if("0".equals(pRESPONSE_CODE[0]))
                    {
                        raServiceResp.certificateOwnerID = raServiceReq.certificateOwnerID;
                        String[] pRESPONSE_CODE_NAME = new String[1];
                        GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
                        db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
                        //<editor-fold defaultstate="collapsed" desc="### File Attach: Check Add to JRB">
                        String sJRBConfig = "";
                        if (rsPolicy[0].length > 0) {
                            for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_DMS_PROPERTIES_CURRENT)) {
                                    sJRBConfig = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                    break;
                                }
                            }
                        }
                        int[] pFILE_MANAGER_ID = new int[1];
                        if (!"".equals(sJRBConfig)) {
                            String sJRB_Source = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_SOURCE);
                            if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_EFY)) {
                                String sIP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_IP);
                                String sHTTP_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PROTOCOL);
                                String sCONTEXT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_CONTEXT);
                                String sPORT_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PORT);
                                String sDEFAULT_USER = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERNAME);
                                String sDEFAULT_PASS = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PASSWORD);
                                String sOWNERCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_OWNERCODE);
                                String sAPPCODE_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_APPCODE);
                                String sFUNCTION_CONNECT = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_FUNCTION_UP);
                                String idUUID_Temp = Definitions.CONFIG_JACK_RABBIT_UUID_SAMPLE;
                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                    String sFileData = new String(Base64.encodeBase64(fileManagerInsert.fileByte), "UTF-8"); //EscapeUtils.CheckTextNull(mhIP.FILE_URL);//CommonFunction.encodeFileToBase64Binary(fileUp);
                                    CloseableHttpResponse pHttpRes = ConnectFileToPartner.upFileParner(sIP_CONNECT, sHTTP_CONNECT,
                                            sCONTEXT_CONNECT, Integer.parseInt(sPORT_CONNECT), sDEFAULT_USER,
                                            sDEFAULT_PASS, sOWNERCODE_CONNECT, sAPPCODE_CONNECT, sFUNCTION_CONNECT, idUUID_Temp,
                                            fileManagerInsert.fileName, sFileData);
                                    InputStream isStr = pHttpRes.getEntity().getContent();
                                    String resultUUID = IOUtils.toString(isStr);
                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", resultUUID);
                                    String sMimeType = EscapeUtils.CheckTextNull(fileManagerInsert.mimeType);
                                    db.S_BO_API_CERTIFICATION_OWNER_INSERT_SUPPLEMENT_FILE(raServiceReq.certificateOwnerID,
                                        Definitions.CONFIG_FILE_PROFILE_CERTIFICATION_OWNER_FILE,
                                        resultUUID, sJRBConfig, sMimeType, fileManagerInsert.fileName, fileManagerInsert.fileByte.length,
                                        raServiceReq.beneficiaryUser, pRESPONSE_CODE_NAME, pFILE_MANAGER_ID);
                                    if(!"0".equals(pRESPONSE_CODE_NAME[0]))
                                    {
                                        raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                        break;
                                    }
                                }
                            } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_JRB)) {
                                String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                    String sMimeType = EscapeUtils.CheckTextNull(fileManagerInsert.mimeType);
                                    JCRConfig jcrConfig = JackRabbitCommon.getJCRConfig(sJRB_Host, sJRB_UserID, sJRB_UserPass, Integer.parseInt(sJRB_MaxSession),
                                            Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                    InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
                                    JCRFile jrbFile = JackRabbitCommon.getInstance(jcrConfig).uploadFile(fileManagerInsert.fileName, sMimeType, isFILE_STREAM);
                                    if(jrbFile != null){
                                        CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", jrbFile.getUuid());
                                        db.S_BO_API_CERTIFICATION_OWNER_INSERT_SUPPLEMENT_FILE(raServiceReq.certificateOwnerID,
                                            Definitions.CONFIG_FILE_PROFILE_CERTIFICATION_OWNER_FILE,
                                            jrbFile.getUuid(), sJRBConfig, sMimeType, fileManagerInsert.fileName, fileManagerInsert.fileByte.length,
                                            raServiceReq.beneficiaryUser, pRESPONSE_CODE_NAME, pFILE_MANAGER_ID);
                                        if(!"0".equals(pRESPONSE_CODE_NAME[0]))
                                        {
                                            raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                            break;
                                        }
                                    }
                                }
                            } else if (sJRB_Source.equals(Definitions.CONFIG_JACK_RABBIT_SOURCE_MID)) {
                                String sJRB_Host = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_HOST);
                                String sJRB_UserID = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USERID);
                                String sJRB_UserPass = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_USER_PASSWORD);
                                String sJRB_MaxSession = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAX_SESSION);
                                String sJRB_MaxFileFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_MAXFILE_INFOLDER);
                                String sJRB_PrefixFolder = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_PREFIX_FOLDER);
                                String sJRB_WorkSpace = PropertiesContent.getPropertiesContentKey(sJRBConfig, Definitions.CONFIG_JACK_RABBIT_WORKSPACE);
                                for (FileManagerInfo fileManagerInsert : raServiceReq.fileManagerInfo) {
                                    String sMimeType = EscapeUtils.CheckTextNull(fileManagerInsert.mimeType);
                                    InputStream isFILE_STREAM = new ByteArrayInputStream(fileManagerInsert.fileByte);
                                    ConnectJackRabbitNew openJRB = new ConnectJackRabbitNew(sJRB_Host, sJRB_UserID, sJRB_UserPass,
                                        Integer.parseInt(sJRB_MaxSession), Integer.parseInt(sJRB_MaxFileFolder), sJRB_WorkSpace, sJRB_PrefixFolder);
                                    String[] sReturnJRB = new String[2];
                                    vn.mobileid.fms.client.JCRFile jrbFile = openJRB.uploadFile(EscapeUtils.CheckTextNull(fileManagerInsert.fileName),
                                        EscapeUtils.CheckTextNull(sMimeType), isFILE_STREAM, sReturnJRB);
                                    CommonFunction.LogDebugString(log, sTOKEN_SN + " - FILE - " + sJRB_Source + " - sUUID", sReturnJRB[0].trim());
                                    db.S_BO_API_CERTIFICATION_OWNER_INSERT_SUPPLEMENT_FILE(raServiceReq.certificateOwnerID,
                                        Definitions.CONFIG_FILE_PROFILE_CERTIFICATION_OWNER_FILE,
                                        sReturnJRB[0].trim(), sJRBConfig, sMimeType, sReturnJRB[1].trim(), fileManagerInsert.fileByte.length,
                                        raServiceReq.beneficiaryUser, pRESPONSE_CODE_NAME, pFILE_MANAGER_ID);
                                    if(!"0".equals(pRESPONSE_CODE_NAME[0]))
                                    {
                                        raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                        break;
                                    }
                                }
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_FILE_NOSUPPORT;
                            }
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SERVER_FILE_NOSUPPORT;
                        }
                        //</editor-fold>

                        //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                        if (intLevelApprove == 1 || intLevelApprove == 2) {
                            tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PRE_APPROVED;
                            tempLogReq.approveUser = raFullname + " (" + raServiceReq.approveUser + ")";
                            tempLogReq.approveDt = new Date();
                            String sPRE_APPROVED = db.S_BO_API_CERTIFICATION_OWNER_PRE_APPROVED(pOWNER_ATTR_ID[0], objectMapper.writeValueAsString(tempLogReq), EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                            if("0".equals(sPRE_APPROVED)) {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            } else if("99".equals(sPRE_APPROVED)) {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_USERNAME_BY_INVALID;
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                            }
                        }
                        if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                            if (intLevelApprove == 2) {
                                tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_APPROVED;
                                tempLogReq.approveCAUser = raFullname + " (" + raServiceReq.approveUser + ")";
                                tempLogReq.approveCADt = new Date();
                                String sApprove = db.S_BO_API_CERTIFICATION_OWNER_APPROVED(pOWNER_ATTR_ID[0], objectMapper.writeValueAsString(tempLogReq), EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                if ("0".equals(sApprove)) {
                                    String sUpdate = db.S_BO_API_CERTIFICATION_OWNER_SUPPLEMENT_FILE(pOWNER_ATTR_ID[0],"" ,raServiceReq.approveUser);
                                    if("0".equals(sUpdate)) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                    } else {
                                        raServiceResp.responseCode = Integer.parseInt(sUpdate);
                                    }
                                } else {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                }
                            }
                        }
                        //</editor-fold>
                    } else {
                        raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE[0]);
                    }
                }
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### approveCertificateOwnerAttachmentProcess">
    public void approveCertificateOwnerAttachmentProcess(String pApproveCAUser, boolean autoApproveCAServer,
        int[] System_Log_ID, String[] System_Log_BillCode, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_APPROVAL_CERTIFICATION_OWNER_ATTACHMENT;
        ObjectMapper objectMapper;
        String sTOKEN_SN = "";
        boolean autoApproveCAClient = true;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA,
            Definitions.CONFIG_LOG_SOURCE_API_RA, "", "", sFunctionWS, objectMapper.writeValueAsString(raReqTemp),
            raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);

        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            int pMessagingQueueID = 0;
            String sVALUE_OLD = "";
            String sCOMMENT_OLD = "";
            String pQueueStateCode = "";
            String pOwnerStateCode = "";
            String pQueueTypeCode = "";
            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE OWNER">
            if(raServiceReq.certificateOwnerID != 0)
            {
                CertificateOwnerInfo[][] certOwnerInfo = new CertificateOwnerInfo[1][];
                db.S_BO_API_CERTIFICATION_OWNER_GET_INFO(raServiceReq.certificateOwnerID, "", "", "", "", "", "", "", "", raServiceReq.language, certOwnerInfo);
                if (certOwnerInfo[0].length > 0) {
                    pQueueStateCode = certOwnerInfo[0][0].messagingQueueStateCode;
                    pQueueTypeCode = certOwnerInfo[0][0].messagingQueueTypeCode;
                    pOwnerStateCode = certOwnerInfo[0][0].certificateOwnerStateCode;
                    pMessagingQueueID = certOwnerInfo[0][0].messagingQueueID;
                    sVALUE_OLD = certOwnerInfo[0][0].value;
                    sCOMMENT_OLD = certOwnerInfo[0][0].comment;
                    if(pQueueTypeCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_FUNCTION_CODE_SUPPLEMENT_FILE))
                    {
                        if(!pOwnerStateCode.equals(Definitions.CONFIG_CERTIFICATION_OWNER_STATE_CODE_OPERATED))
                        {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_STATE_INVALID;
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_TYPE_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_REQUEST_INVALID;
            }
            //</editor-fold>

            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                //<editor-fold defaultstate="collapsed" desc="### GET FULLNAME">
                String raFullname = "";
                UserInfo[][] userDetail = new UserInfo[1][];
                db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                if (userDetail[0].length > 0) {
                    raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                }
                //</editor-fold>

                //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                int intLevelApprove = 0;
                if (autoApproveCAServer == false && autoApproveCAClient == false) {
                    intLevelApprove = 0;
                } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                    intLevelApprove = 1;
                } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                    intLevelApprove = 0;
                } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                    intLevelApprove = 2;
                }
                //</editor-fold>
                switch (intLevelApprove) {
                    case 1:
                        if(!pQueueStateCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_INITIALIZED)
                                && !pQueueStateCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PENDING))
                        {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_STATE_INVALID;
                        }   break;
                    case 2:
                        if(!pQueueStateCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_INITIALIZED)
                                && !pQueueStateCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PRE_APPROVED)
                                && !pQueueStateCode.equals(Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PENDING))
                        {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_STATE_INVALID;
                        }   break;
                    default:
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_OWNER_REQUEST_INVALID;
                        break;
                }
                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
                {
                    raServiceResp.certificateOwnerID = raServiceReq.certificateOwnerID;
                    CERTIFICATION_OWNER_DATA_ATTR tempLogReq;
                    if(!"".equals(sVALUE_OLD)) {
                        tempLogReq = objectMapper.readValue(sVALUE_OLD, CERTIFICATION_OWNER_DATA_ATTR.class);
                    } else {
                        tempLogReq = new CERTIFICATION_OWNER_DATA_ATTR();
                    }
                    //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                    String sOwnerDisposeReasonOld = "";
                    if(!"".equals(sCOMMENT_OLD)) {
                        try {
                            CERTIFICATION_OWNER_COMMENT jsonCertCommentOld = objectMapper.readValue(sCOMMENT_OLD, CERTIFICATION_OWNER_COMMENT.class);
                            sOwnerDisposeReasonOld = jsonCertCommentOld.ownerDisposeReason;
                        } catch(IOException e) {}
                    }
                    CERTIFICATION_OWNER_COMMENT jsonCertComment = new CERTIFICATION_OWNER_COMMENT();
                    jsonCertComment.ownerDisposeReason = sOwnerDisposeReasonOld;
                    jsonCertComment.ownerApproveRemark = EscapeUtils.CheckTextNull(raServiceReq.remark);
                    if (intLevelApprove == 1 || intLevelApprove == 2) {
                        tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_PRE_APPROVED;
                        tempLogReq.approveUser = raFullname + " (" + raServiceReq.approveUser + ")";
                        tempLogReq.approveDt =new Date();
                        String sPRE_APPROVED = db.S_BO_API_CERTIFICATION_OWNER_PRE_APPROVED(pMessagingQueueID,
                            objectMapper.writeValueAsString(tempLogReq), raServiceReq.approveUser);
                        if("0".equals(sPRE_APPROVED)) {
                            raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                        }
                    }
                    if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        if (intLevelApprove == 2) {
                            tempLogReq.requestState = Definitions.CONFIG_MESSAGING_QUEUE_STATE_CODE_APPROVED;
                            tempLogReq.approveCAUser = raFullname + " (" + raServiceReq.approveUser + ")";
                            tempLogReq.approveCADt = new Date();
                            String sApprove = db.S_BO_API_CERTIFICATION_OWNER_APPROVED(pMessagingQueueID, objectMapper.writeValueAsString(tempLogReq), raServiceReq.approveUser);
                            if ("0".equals(sApprove)) {
                                db.S_BO_API_CERTIFICATION_OWNER_SUPPLEMENT_FILE(pMessagingQueueID,
                                    objectMapper.writeValueAsString(jsonCertComment) ,raServiceReq.approveUser);
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            } else {
                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                            }
                        }
                    }
                    //</editor-fold>
                }
            }
        }
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCertificateOwnerTypeProcess">
    public void getCertificateOwnerTypeProcess(String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTIFICATION_OWNER_TYPE;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
                    
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            CertificateOwnerTypeInfo[][] certInfo = new CertificateOwnerTypeInfo[1][];
            db.S_BO_API_CERTIFICATION_OWNER_TYPE_LIST(raServiceReq.language, certInfo);
            if (certInfo[0].length > 0) {
                raServiceResp.certificateOwnerTypeInfo = certInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCertificateOwnerStateProcess">
    public void getCertificateOwnerStateProcess(String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTIFICATION_OWNER_STATE;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
                    
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            CertificateOwnerStateInfo[][] certInfo = new CertificateOwnerStateInfo[1][];
            db.S_BO_API_CERTIFICATION_OWNER_STATE_LIST(raServiceReq.language, certInfo);
            if (certInfo[0].length > 0) {
                raServiceResp.certificateOwnerStateInfo = certInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCertificateOwnerInfoProcess">
    public void getCertificateOwnerInfoProcess(String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTICATION_OWNER_INFO;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        String sEnterpriseID = "";
        String sPersonalID = "";
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.taxCode))) {
                sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE + EscapeUtils.CheckTextNull(raServiceReq.taxCode);
            }
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.budgetCode))) {
                sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_BUDGETCODE + EscapeUtils.CheckTextNull(raServiceReq.budgetCode);
            }
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.decision))) {
                sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_DECISION + EscapeUtils.CheckTextNull(raServiceReq.decision);
            }
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.socialInsuranceCode))) {
                sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_SOCIAL_INSURANCE_CODE + EscapeUtils.CheckTextNull(raServiceReq.socialInsuranceCode);
            }
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.unitCode))) {
                sEnterpriseID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_UNIT_CODE + EscapeUtils.CheckTextNull(raServiceReq.unitCode);
            }
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.pid))) {
                sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CMND + EscapeUtils.CheckTextNull(raServiceReq.pid);
            }
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.passport))) {
                sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_PASSPORT + EscapeUtils.CheckTextNull(raServiceReq.passport);
            }
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.citizenId))) {
                sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CITIZEN_ID + EscapeUtils.CheckTextNull(raServiceReq.citizenId);
            }
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.personalTaxCode))) {
                sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_TAXCODE + EscapeUtils.CheckTextNull(raServiceReq.personalTaxCode);
            }
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.personalSocialInsuranceCode))) {
                sPersonalID = Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_SOCIAL_INSURANCE_CODE + EscapeUtils.CheckTextNull(raServiceReq.personalSocialInsuranceCode);
            }
            CertificateOwnerInfo[][] certOwnerInfo = new CertificateOwnerInfo[1][];
            db.S_BO_API_CERTIFICATION_OWNER_GET_INFO(raServiceReq.certificateOwnerID, raServiceReq.certificateOwnerStateCode,
                raServiceReq.certificateOwnerTypeCode, raServiceReq.companyName, sEnterpriseID, raServiceReq.personalName, sPersonalID,
                raServiceReq.phoneContact, raServiceReq.emailContact, raServiceReq.language, certOwnerInfo);
            if (certOwnerInfo[0].length > 0) {
                raServiceResp.certificateOwnerInfo = certOwnerInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCertificateOwnerAttachmentProcess">
    public void getCertificateOwnerAttachmentProcess(String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTIFICATION_OWNER_ATTACHMENT;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            if (raServiceReq.certificateOwnerID != 0) {
                CertificateOwnerInfo[][] certInfo = new CertificateOwnerInfo[1][];
                db.S_BO_API_CERTIFICATION_OWNER_GET_INFO(raServiceReq.certificateOwnerID, "", "", "", "", "", "", "", "", raServiceReq.language, certInfo);
                if (certInfo[0].length > 0) {
                    raServiceReq.fileTypeCode = Definitions.CONFIG_FILE_PROFILE_CERTIFICATION_OWNER_FILE;
                    int pCERTIFICATION_OWNER_ID = certInfo[0][0].certificateOwnerID;
                    if (pCERTIFICATION_OWNER_ID > 0) {
                        FILE_MANAGER[][] fileManager = new FILE_MANAGER[1][];
                        db.S_BO_API_FILE_MANAGER_BY_CERTIFICATION_OWNER_ID(pCERTIFICATION_OWNER_ID, EscapeUtils.CheckTextNull(raServiceReq.fileTypeCode),
                                raServiceReq.language, fileManager);
                        if (fileManager[0].length > 0) {
                            FileManagerInfo[][] response = new FileManagerInfo[1][];
                            ArrayList<FileManagerInfo> tempList = new ArrayList<>();
                            for (FILE_MANAGER fileTemp : fileManager[0]) {
                                String sJRBConfig = EscapeUtils.CheckTextNull(fileTemp.DMS_PROPERTIES);
                                String sUUID = EscapeUtils.CheckTextNull(fileTemp.UUID);
                                InputStream inStream = CommonFunction.getStreamFromServerFile(sUUID, sJRBConfig);
                                FileManagerInfo mh = new FileManagerInfo();
                                mh.fileTypeCode = EscapeUtils.CheckTextNull(fileTemp.FILE_PROFILE_NAME);
                                mh.fileTypeName = EscapeUtils.CheckTextNull(fileTemp.FILE_PROFILE_DESC);
                                mh.fileName = EscapeUtils.CheckTextNull(fileTemp.FILE_NAME);
                                mh.fileByte = IOUtils.toByteArray(inStream);
                                tempList.add(mh);
                            }
                            response[0] = new FileManagerInfo[tempList.size()];
                            response[0] = tempList.toArray(response[0]);
                            raServiceResp.fileManagerInfo = response[0];
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
                        }
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        } else {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
        }
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### setFormFactorUnblockProcess">
    public void setFormFactorUnblockProcess(String pPARENT_ID, int pBRANCH_ID, String pApproveCAUser,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG,
        Logger log, String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES, String sIP_Request,
        RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_SET_FORMFACTOR_UNBLOCK;
        ObjectMapper objectMapper;
        String sTokenSN = "";
        RAServiceReq raReqTemp = new RAServiceReq();
        raReqTemp.certificateSN = raServiceReq.certificateSN;
        raReqTemp.approveEnabled = raServiceReq.approveEnabled;
        raReqTemp.language = raServiceReq.language;
        raReqTemp.credentialData = raServiceReq.credentialData;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET TOKEN DETAIL">
            int sTokenID = 0;
            int sBranchId_Cert = 0;
            TOKEN[][] rsToken= new TOKEN[1][];
            raServiceReq.formFactorSN = EscapeUtils.CheckTextNull(raServiceReq.formFactorSN);
            if(!"".equals(raServiceReq.formFactorSN)) {
                db.S_BO_API_TOKEN_GET_INFO("", "", raServiceReq.formFactorSN, raServiceReq.language, rsToken);
                if(rsToken[0].length > 0) {
                    sTokenSN = rsToken[0][0].TOKEN_SN;
                    sTokenID = rsToken[0][0].ID;
                    sBranchId_Cert = rsToken[0][0].BRANCH_ID;
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
//                                if(sBranchId_Cert != pBRANCH_ID)
//                                {
//                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
//                                }
                }
            }
            //</editor-fold>
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                //<editor-fold defaultstate="collapsed" desc="### GET PROVINCE and FULLNAME">
                String raFullname = "";
                UserInfo[][] userDetail = new UserInfo[1][];
                db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                if (userDetail[0].length > 0) {
                    raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                }
                //</editor-fold>

                ATTRIBUTE_VALUES valueATTR;
                valueATTR = new ATTRIBUTE_VALUES();
                String sTokenAttrTypeCode = Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_UNLOCK;
                int sTokenAttrTypeID = Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_UNLOCK;
                if(raServiceReq.userPINEnabled == false)
                {
                    sTokenAttrTypeCode = Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_RESET_ACTIVATION_REMAINING_COUNTER;
                    sTokenAttrTypeID = Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_RESET_ACTIVATION_REMAINING_COUNTER;
                }
                valueATTR.setTokenSn(sTokenSN);
                valueATTR.setTypeName(sTokenAttrTypeCode);
                valueATTR.setRequestState(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_PENDING);
                valueATTR.setCreateUser(raFullname + " (" + pApproveCAUser + ")");
                valueATTR.setCreateDt(new Date());
                int intTOKEN_ATTR_STATE = Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_PENDING);
                String[] pRESPONSE_CODE_NAME = new String[1];
                if(raServiceReq.approveEnabled == true)
                {
                    valueATTR.setRequestState(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_APPROVED);
                    valueATTR.setApproveUser(raFullname + " (" + pApproveCAUser + ")");
                    valueATTR.setApproveDt(new Date());
                    if(raServiceReq.userPINEnabled == true) {
                        intTOKEN_ATTR_STATE = Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_APPROVED);
                    } else {
                        intTOKEN_ATTR_STATE = Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_COMMITED);
                    }
                    int[] pTOKEN_ATTR_ID = new int[1];
                    db.S_BO_API_TOKEN_ATTR_INSERT(sTokenSN, sTokenAttrTypeID, intTOKEN_ATTR_STATE,
                        CommonFunction.GenJSONTokenATTR(valueATTR), pApproveCAUser, pRESPONSE_CODE_NAME, pTOKEN_ATTR_ID);
                    if("0".equals(pRESPONSE_CODE_NAME[0])) {
                        raServiceResp.formFactorUnblockID = pTOKEN_ATTR_ID[0];
                        if(raServiceReq.userPINEnabled == false) {
                            String sACTIVATION_MAX_COUNTER = "5";
                            GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
                            db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
                            if (rsPolicy[0].length > 0) {
                                for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_FO_DEFAULT_ACTIVATION_MAX_COUNTER)) {
                                        sACTIVATION_MAX_COUNTER = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                        break;
                                    }
                                }
                            }
                            db.S_BO_TOKEN_UPDATE(sTokenID, "", "", "", "", sACTIVATION_MAX_COUNTER, pApproveCAUser);
                        }
                        TOKEN[][] rsTokenResult = new TOKEN[1][];
                        db.S_BO_TOKEN_ATTR_DETAIL(String.valueOf(pTOKEN_ATTR_ID[0]), String.valueOf(raServiceReq.language), rsTokenResult);
                        if(rsTokenResult[0].length > 0)
                        {
                            raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                            raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                        }
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                    } else {
                        raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                    }
                } else {
                    int[] pTOKEN_ATTR_ID = new int[1];
                    db.S_BO_API_TOKEN_ATTR_INSERT(sTokenSN, sTokenAttrTypeID, intTOKEN_ATTR_STATE,
                        CommonFunction.GenJSONTokenATTR(valueATTR), pApproveCAUser, pRESPONSE_CODE_NAME, pTOKEN_ATTR_ID);
                    if("0".equals(pRESPONSE_CODE_NAME[0])) {
                        raServiceResp.formFactorUnblockID = pTOKEN_ATTR_ID[0];
                        TOKEN[][] rsTokenResult = new TOKEN[1][];
                        db.S_BO_TOKEN_ATTR_DETAIL(String.valueOf(pTOKEN_ATTR_ID[0]), String.valueOf(raServiceReq.language), rsTokenResult);
                        if(rsTokenResult[0].length > 0)
                        {
                            raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                            raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                        }
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                    } else {
                        raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                    }
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTokenSN;
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### approveFormFactorUnblockProcess">
    public void approveFormFactorUnblockProcess(String pPARENT_ID, int pBRANCH_ID, String pApproveCAUser,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG,
        String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES, String sIP_Request,
        RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_APPROVAL_FORMFACTOR_UNBLOCK;
        ObjectMapper objectMapper;
        String sTokenSN = "";
        RAServiceReq raReqTemp = new RAServiceReq();
        raReqTemp.certificateSN = raServiceReq.certificateSN;
        raReqTemp.approveEnabled = raServiceReq.approveEnabled;
        raReqTemp.language = raServiceReq.language;
        raReqTemp.credentialData = raServiceReq.credentialData;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET TOKEN DETAIL">
            String sTokenAttrType = "";
            String sTokenAttrState = "";
            String sVALUE_OLD = "";
            int sTokenID = 0;
            int vTOKEN_ATTR_TYPE_ID = 0;
            int sBranchId_Cert = 0;
            if(raServiceReq.formFactorUnblockID != 0)
            {
                TOKEN[][] rsToken= new TOKEN[1][];
                db.S_BO_API_TOKEN_GET_INFO("", String.valueOf(raServiceReq.formFactorUnblockID), "", raServiceReq.language, rsToken);
                if(rsToken[0].length > 0) {
                    vTOKEN_ATTR_TYPE_ID = rsToken[0][0].TOKEN_ATTR_TYPE_ID;
                    sTokenAttrState = rsToken[0][0].TOKEN_ATTR_STATE_NAME;
                    sTokenAttrType = rsToken[0][0].TOKEN_ATTR_TYPE_NAME;
                    sTokenID = rsToken[0][0].ID;
                    sBranchId_Cert = rsToken[0][0].BRANCH_ID;
                    sVALUE_OLD = rsToken[0][0].VALUE;
                    sTokenSN = rsToken[0][0].TOKEN_SN;
                    if("".equals(sVALUE_OLD)) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
//                                if(sBranchId_Cert != pBRANCH_ID)
//                                {
//                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
//                                }
                }
            }
            //</editor-fold>

            if(sTokenAttrState.equals(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_PENDING))
            {
                if(!sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_UNLOCK)
                    && !sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_RESET_ACTIVATION_REMAINING_COUNTER))
                {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_TYPE_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_STATUS_INVALID;
            }

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                //<editor-fold defaultstate="collapsed" desc="### GET FULLNAME">
                String raFullname = "";
                UserInfo[][] userDetail = new UserInfo[1][];
                db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                if (userDetail[0].length > 0) {
                    raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                }
                //</editor-fold>

                // VALUE ATTR_FRIST
                ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(sVALUE_OLD, ATTRIBUTE_VALUES.class);
                String sToken_Frist = valueATTR_Frist.getTokenSn();
                String sTypeName_Frist = valueATTR_Frist.getTypeName();
                String sCreateUser_Frist = valueATTR_Frist.getCreateUser();
                Date sCreateDt_Frist = valueATTR_Frist.getCreateDt();
                // VALUE ATTR_LAST
                ATTRIBUTE_VALUES valueATTR_Last = new ATTRIBUTE_VALUES();
                valueATTR_Last.setTokenSn(sToken_Frist);
                valueATTR_Last.setTypeName(sTypeName_Frist);
                valueATTR_Last.setRequestState(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_APPROVED);
                valueATTR_Last.setCreateUser(sCreateUser_Frist);
                valueATTR_Last.setCreateDt(sCreateDt_Frist);
                valueATTR_Last.setApproveUser(raFullname + " (" + pApproveCAUser + ")");
                valueATTR_Last.setApproveDt(new Date());
                valueATTR_Last.setTokenApproveRemark(EscapeUtils.CheckTextNull(raServiceReq.remark));
                db.S_BO_TOKEN_ATTR_APPROVED(raServiceReq.formFactorUnblockID, sTokenID,
                    String.valueOf(vTOKEN_ATTR_TYPE_ID), CommonFunction.GenJSONTokenATTR(valueATTR_Last), pApproveCAUser);
                if (vTOKEN_ATTR_TYPE_ID == Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_RESET_ACTIVATION_REMAINING_COUNTER) {
                    String sACTIVATION_MAX_COUNTER = "5";
                    GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
                    db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
                    if (rsPolicy[0].length > 0) {
                        for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                            if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_FO_DEFAULT_ACTIVATION_MAX_COUNTER)) {
                                sACTIVATION_MAX_COUNTER = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                break;
                            }
                        }
                    }
                    db.S_BO_TOKEN_UPDATE(sTokenID, "", "", "", "", sACTIVATION_MAX_COUNTER, pApproveCAUser);
                }
                TOKEN[][] rsTokenResult = new TOKEN[1][];
                db.S_BO_TOKEN_ATTR_DETAIL(String.valueOf(raServiceReq.formFactorUnblockID),
                    String.valueOf(raServiceReq.language), rsTokenResult);
                if(rsTokenResult[0].length > 0)
                {
                    raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                    raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTokenSN;
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### declineFormFactorUnblockProcess">
    public void declineFormFactorUnblockProcess(String pPARENT_ID, int pBRANCH_ID, String pApproveCAUser,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG,
        String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES, String sIP_Request,
        RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_DECLINE_FORMFACTOR_UNBLOCK;
        ObjectMapper objectMapper;
        String sTokenSN = "";
        RAServiceReq raReqTemp = new RAServiceReq();
        raReqTemp.certificateSN = raServiceReq.certificateSN;
        raReqTemp.approveEnabled = raServiceReq.approveEnabled;
        raReqTemp.language = raServiceReq.language;
        raReqTemp.credentialData = raServiceReq.credentialData;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET TOKEN DETAIL">
            String sTokenAttrType = "";
            String sTokenAttrState = "";
            String sVALUE_OLD = "";
            int sBranchId_Cert = 0;
            if(raServiceReq.formFactorUnblockID != 0)
            {
                TOKEN[][] rsToken= new TOKEN[1][];
                db.S_BO_API_TOKEN_GET_INFO("", String.valueOf(raServiceReq.formFactorUnblockID), "", raServiceReq.language, rsToken);
                if(rsToken[0].length > 0) {
                    sTokenAttrState = rsToken[0][0].TOKEN_ATTR_STATE_NAME;
                    sTokenAttrType = rsToken[0][0].TOKEN_ATTR_TYPE_NAME;
                    sBranchId_Cert = rsToken[0][0].BRANCH_ID;
                    sVALUE_OLD = rsToken[0][0].VALUE;
                    if("".equals(sVALUE_OLD)) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
                }
            }
            //</editor-fold>

            if(sTokenAttrState.equals(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_PENDING)
                || sTokenAttrState.equals(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_APPROVED))
            {
                if(!sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_UNLOCK)
                    && !sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_RESET_ACTIVATION_REMAINING_COUNTER))
                {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_TYPE_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_STATUS_INVALID;
            }

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                ATTRIBUTE_VALUES valueATTR = objectMapper.readValue(sVALUE_OLD, ATTRIBUTE_VALUES.class);
                valueATTR.setTokenDeclineReason(EscapeUtils.CheckTextNull(raServiceReq.declineReason));
                db.S_BO_API_TOKEN_ATTR_DECLINED(raServiceReq.formFactorUnblockID, CommonFunction.GenJSONTokenATTR(valueATTR),
                    pApproveCAUser);
                TOKEN[][] rsTokenResult = new TOKEN[1][];
                db.S_BO_TOKEN_ATTR_DETAIL(String.valueOf(raServiceReq.formFactorUnblockID),
                    String.valueOf(raServiceReq.language), rsTokenResult);
                if(rsTokenResult[0].length > 0)
                {
                    raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                    raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTokenSN;
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getFormFactorUnblockProcess">
    public void getFormFactorUnblockProcess(String pPARENT_ID, int pBRANCH_ID, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_FORMFACTOR_UNBLOCK;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            String sBranchSearch = "";
            if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
            {
                sBranchSearch = String.valueOf(pBRANCH_ID);
            }
            FormFactorUnblockInfo[][] unblockInfo = new FormFactorUnblockInfo[1][];
            db.S_BO_API_TOKEN_ATTR_UNBLOCK_LIST(raServiceReq.formFactorUnblockID, sBranchSearch,
                EscapeUtils.CheckTextNull(raServiceReq.queueStateCode), raServiceReq.language, unblockInfo);
            if (unblockInfo[0].length > 0) {
                raServiceResp.formFactorUnblockInfo = unblockInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### setFormFactorTokenProcess">
    public void setFormFactorTokenProcess(String pPARENT_ID, int pBRANCH_ID, String pApproveCAUser,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG,
        String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES, String sIP_Request,
        RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_SET_FORMFACTOR_TOKEN;
        ObjectMapper objectMapper;
        String sTokenSN = "";
        RAServiceReq raReqTemp = new RAServiceReq();
        raReqTemp.formFactorSN = raServiceReq.formFactorSN;
        raReqTemp.formFactorCode = raServiceReq.formFactorCode;
        raReqTemp.queueTypeCode = raServiceReq.queueTypeCode;
        raReqTemp.remark = raServiceReq.remark;
        raReqTemp.approveEnabled = raServiceReq.approveEnabled;
        raReqTemp.language = raServiceReq.language;
        raReqTemp.credentialData = raServiceReq.credentialData;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET TOKEN DETAIL">
            int sTokenID = 0;
            int sBranchId_Cert = 0;
            TOKEN[][] rsToken= new TOKEN[1][];
            raServiceReq.formFactorSN = EscapeUtils.CheckTextNull(raServiceReq.formFactorSN);
            if(!"".equals(raServiceReq.formFactorSN)) {
                db.S_BO_API_TOKEN_GET_INFO("", "", raServiceReq.formFactorSN, raServiceReq.language, rsToken);
                if(rsToken[0].length > 0) {
                    sTokenSN = rsToken[0][0].TOKEN_SN;
                    sTokenID = rsToken[0][0].ID;
                    sBranchId_Cert = rsToken[0][0].BRANCH_ID;
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
//                                if(sBranchId_Cert != pBRANCH_ID)
//                                {
//                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
//                                }
                }
            }
            //</editor-fold>
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                //<editor-fold defaultstate="collapsed" desc="### GET PROVINCE and FULLNAME">
                String raFullname = "";
                UserInfo[][] userDetail = new UserInfo[1][];
                db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                if (userDetail[0].length > 0) {
                    raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                }
                //</editor-fold>

                ATTRIBUTE_VALUES valueATTR;
                valueATTR = new ATTRIBUTE_VALUES();
                String sTokenAttrTypeCode = "";
                int sTokenAttrTypeID = 0;
                valueATTR.setTokenSn(sTokenSN);
                if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_LOCK))
                {
                    sTokenAttrTypeCode = Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_LOCK;
                    sTokenAttrTypeID = Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_LOCK;
                    valueATTR.setActionReason(raServiceReq.remark);
                } else if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_UNLOCK))
                {
                    sTokenAttrTypeCode = Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_UNLOCK;
                    sTokenAttrTypeID = Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_UNLOCK;
                } else if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_RESET_ACTIVATION_REMAINING_COUNTER))
                {
                    sTokenAttrTypeCode = Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_RESET_ACTIVATION_REMAINING_COUNTER;
                    sTokenAttrTypeID = Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_RESET_ACTIVATION_REMAINING_COUNTER;
                }
                valueATTR.setTypeName(sTokenAttrTypeCode);
                valueATTR.setRequestState(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_PENDING);
                valueATTR.setCreateUser(raFullname + " (" + pApproveCAUser + ")");
                valueATTR.setCreateDt(new Date());
                int intTOKEN_ATTR_STATE = Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_PENDING);

                if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_LOCK))
                {
                    //<editor-fold defaultstate="collapsed" desc="### LOCK">
                    String[] pRESPONSE_CODE_NAME = new String[1];
                    if(raServiceReq.approveEnabled == true)
                    {
                        valueATTR.setRequestState(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_APPROVED);
                        valueATTR.setApproveUser(raFullname + " (" + pApproveCAUser + ")");
                        valueATTR.setApproveDt(new Date());
                        intTOKEN_ATTR_STATE = Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_APPROVED);
                        int[] pTOKEN_ATTR_ID = new int[1];
                        db.S_BO_API_TOKEN_ATTR_INSERT(sTokenSN, sTokenAttrTypeID, intTOKEN_ATTR_STATE,
                            CommonFunction.GenJSONTokenATTR(valueATTR), pApproveCAUser, pRESPONSE_CODE_NAME, pTOKEN_ATTR_ID);
                        if("0".equals(pRESPONSE_CODE_NAME[0])) {
                            raServiceResp.formFactorTokenID = pTOKEN_ATTR_ID[0];
                            TOKEN[][] rsTokenResult = new TOKEN[1][];
                            db.S_BO_TOKEN_ATTR_DETAIL(String.valueOf(pTOKEN_ATTR_ID[0]), String.valueOf(raServiceReq.language), rsTokenResult);
                            if(rsTokenResult[0].length > 0)
                            {
                                raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                                raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                            }
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                        }
                    } else {
                        int[] pTOKEN_ATTR_ID = new int[1];
                        db.S_BO_API_TOKEN_ATTR_INSERT(sTokenSN, sTokenAttrTypeID, intTOKEN_ATTR_STATE,
                            CommonFunction.GenJSONTokenATTR(valueATTR), pApproveCAUser, pRESPONSE_CODE_NAME, pTOKEN_ATTR_ID);
                        if("0".equals(pRESPONSE_CODE_NAME[0])) {
                            raServiceResp.formFactorTokenID = pTOKEN_ATTR_ID[0];
                            TOKEN[][] rsTokenResult = new TOKEN[1][];
                            db.S_BO_TOKEN_ATTR_DETAIL(String.valueOf(pTOKEN_ATTR_ID[0]), String.valueOf(raServiceReq.language), rsTokenResult);
                            if(rsTokenResult[0].length > 0)
                            {
                                raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                                raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                            }
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                        }
                    }
                    //</editor-fold>
                } else if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_UNLOCK)
                    || EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_RESET_ACTIVATION_REMAINING_COUNTER))
                {
                    //<editor-fold defaultstate="collapsed" desc="### UNLOCK - RESET_ACTIVATION_REMAINING_COUNTER">
                    String[] pRESPONSE_CODE_NAME = new String[1];
                    if(raServiceReq.approveEnabled == true)
                    {
                        valueATTR.setRequestState(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_APPROVED);
                        valueATTR.setApproveUser(raFullname + " (" + pApproveCAUser + ")");
                        valueATTR.setApproveDt(new Date());
                        if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_UNLOCK)) {
                            intTOKEN_ATTR_STATE = Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_APPROVED);
                        } else {
                            intTOKEN_ATTR_STATE = Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_COMMITED);
                        }
                        int[] pTOKEN_ATTR_ID = new int[1];
                        db.S_BO_API_TOKEN_ATTR_INSERT(sTokenSN, sTokenAttrTypeID, intTOKEN_ATTR_STATE,
                            CommonFunction.GenJSONTokenATTR(valueATTR), pApproveCAUser, pRESPONSE_CODE_NAME, pTOKEN_ATTR_ID);
                        if("0".equals(pRESPONSE_CODE_NAME[0])) {
                            raServiceResp.formFactorTokenID = pTOKEN_ATTR_ID[0];
                            if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_RESET_ACTIVATION_REMAINING_COUNTER))
                            {
                                String sACTIVATION_MAX_COUNTER = "5";
                                GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
                                db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
                                if (rsPolicy[0].length > 0) {
                                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_FO_DEFAULT_ACTIVATION_MAX_COUNTER)) {
                                            sACTIVATION_MAX_COUNTER = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                            break;
                                        }
                                    }
                                }
                                db.S_BO_TOKEN_UPDATE(sTokenID, "", "", "", "", sACTIVATION_MAX_COUNTER, pApproveCAUser);
                            }
                            TOKEN[][] rsTokenResult = new TOKEN[1][];
                            db.S_BO_TOKEN_ATTR_DETAIL(String.valueOf(pTOKEN_ATTR_ID[0]), String.valueOf(raServiceReq.language), rsTokenResult);
                            if(rsTokenResult[0].length > 0)
                            {
                                raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                                raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                            }
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                        }
                    } else {
                        int[] pTOKEN_ATTR_ID = new int[1];
                        db.S_BO_API_TOKEN_ATTR_INSERT(sTokenSN, sTokenAttrTypeID, intTOKEN_ATTR_STATE,
                            CommonFunction.GenJSONTokenATTR(valueATTR), pApproveCAUser, pRESPONSE_CODE_NAME, pTOKEN_ATTR_ID);
                        if("0".equals(pRESPONSE_CODE_NAME[0])) {
                            raServiceResp.formFactorTokenID = pTOKEN_ATTR_ID[0];
                            TOKEN[][] rsTokenResult = new TOKEN[1][];
                            db.S_BO_TOKEN_ATTR_DETAIL(String.valueOf(pTOKEN_ATTR_ID[0]), String.valueOf(raServiceReq.language), rsTokenResult);
                            if(rsTokenResult[0].length > 0) {
                                raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                                raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                            }
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                        }
                    }
                    //</editor-fold>
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_TYPE_INVALID;
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTokenSN;
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### approveFormFactorTokenProcess">
    public void approveFormFactorTokenProcess(String pPARENT_ID, int pBRANCH_ID, String pApproveCAUser,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG,
        String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES, String sIP_Request,
        RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_APPROVAL_FORMFACTOR_TOKEN;
        ObjectMapper objectMapper;
        String sTokenSN = "";
        RAServiceReq raReqTemp = new RAServiceReq();
        raReqTemp.formFactorTokenID = raServiceReq.formFactorTokenID;
        raReqTemp.approveEnabled = raServiceReq.approveEnabled;
        raReqTemp.remark = raServiceReq.remark;
        raReqTemp.language = raServiceReq.language;
        raReqTemp.credentialData = raServiceReq.credentialData;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET TOKEN DETAIL">
            String sTokenAttrType = "";
            String sTokenAttrState = "";
            String sVALUE_OLD = "";
            int sTokenID = 0;
            int vTOKEN_ATTR_TYPE_ID = 0;
            int sBranchId_Cert = 0;
            if(raServiceReq.formFactorTokenID != 0)
            {
                TOKEN[][] rsToken= new TOKEN[1][];
                db.S_BO_API_TOKEN_GET_INFO("", String.valueOf(raServiceReq.formFactorTokenID), "", raServiceReq.language, rsToken);
                if(rsToken[0].length > 0) {
                    vTOKEN_ATTR_TYPE_ID = rsToken[0][0].TOKEN_ATTR_TYPE_ID;
                    sTokenAttrState = rsToken[0][0].TOKEN_ATTR_STATE_NAME;
                    sTokenAttrType = rsToken[0][0].TOKEN_ATTR_TYPE_NAME;
                    sTokenID = rsToken[0][0].ID;
                    sBranchId_Cert = rsToken[0][0].BRANCH_ID;
                    sVALUE_OLD = rsToken[0][0].VALUE;
                    if("".equals(sVALUE_OLD)) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
//                                if(sBranchId_Cert != pBRANCH_ID)
//                                {
//                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
//                                }
                }
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### REQUEST CHECK VALID">
            if(sTokenAttrState.equals(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_PENDING))
            {
                if(!sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_UNLOCK)
                    && !sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_RESET_ACTIVATION_REMAINING_COUNTER)
                    && !sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_LOCK))
                {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_TYPE_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_STATUS_INVALID;
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                //<editor-fold defaultstate="collapsed" desc="### GET FULLNAME">
                String raFullname = "";
                UserInfo[][] userDetail = new UserInfo[1][];
                db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                if (userDetail[0].length > 0) {
                    raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                }
                //</editor-fold>

                // VALUE ATTR_FRIST
                ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(sVALUE_OLD, ATTRIBUTE_VALUES.class);
                String sToken_Frist = valueATTR_Frist.getTokenSn();
                String sTypeName_Frist = valueATTR_Frist.getTypeName();
                String sCreateUser_Frist = valueATTR_Frist.getCreateUser();
                Date sCreateDt_Frist = valueATTR_Frist.getCreateDt();
                // VALUE ATTR_LAST
                ATTRIBUTE_VALUES valueATTR_Last = new ATTRIBUTE_VALUES();
                valueATTR_Last.setTokenSn(sToken_Frist);
                valueATTR_Last.setTypeName(sTypeName_Frist);
                valueATTR_Last.setRequestState(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_APPROVED);
                valueATTR_Last.setCreateUser(sCreateUser_Frist);
                valueATTR_Last.setCreateDt(sCreateDt_Frist);
                valueATTR_Last.setApproveUser(raFullname + " (" + pApproveCAUser + ")");
                valueATTR_Last.setApproveDt(new Date());
                valueATTR_Last.setTokenApproveRemark(EscapeUtils.CheckTextNull(raServiceReq.remark));
                db.S_BO_TOKEN_ATTR_APPROVED(raServiceReq.formFactorTokenID, sTokenID,
                    String.valueOf(vTOKEN_ATTR_TYPE_ID), CommonFunction.GenJSONTokenATTR(valueATTR_Last), pApproveCAUser);
                if (vTOKEN_ATTR_TYPE_ID == Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_RESET_ACTIVATION_REMAINING_COUNTER) {
                    String sACTIVATION_MAX_COUNTER = "5";
                    GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
                    db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
                    if (rsPolicy[0].length > 0) {
                        for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                            if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_FO_DEFAULT_ACTIVATION_MAX_COUNTER)) {
                                sACTIVATION_MAX_COUNTER = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                break;
                            }
                        }
                    }
                    db.S_BO_TOKEN_UPDATE(sTokenID, "", "", "", "", sACTIVATION_MAX_COUNTER, pApproveCAUser);
                }
                TOKEN[][] rsTokenResult = new TOKEN[1][];
                db.S_BO_TOKEN_ATTR_DETAIL(String.valueOf(raServiceReq.formFactorTokenID),
                    String.valueOf(raServiceReq.language), rsTokenResult);
                if(rsTokenResult[0].length > 0)
                {
                    raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                    raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTokenSN;
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### declineFormFactorTokenProcess">
    public void declineFormFactorTokenProcess(String pPARENT_ID, int pBRANCH_ID, String pApproveCAUser,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG,
        String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES, String sIP_Request,
        RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_DECLINE_FORMFACTOR_TOKEN;
        ObjectMapper objectMapper;
        String sTokenSN = "";
        RAServiceReq raReqTemp = new RAServiceReq();
        raReqTemp.formFactorTokenID = raServiceReq.formFactorTokenID;
        raReqTemp.declineReason = raServiceReq.declineReason;
        raReqTemp.language = raServiceReq.language;
        raReqTemp.credentialData = raServiceReq.credentialData;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET TOKEN DETAIL">
            String sTokenAttrType = "";
            String sTokenAttrState = "";
            String sVALUE_OLD = "";
            int sBranchId_Cert = 0;
            if(raServiceReq.formFactorTokenID != 0)
            {
                TOKEN[][] rsToken= new TOKEN[1][];
                db.S_BO_API_TOKEN_GET_INFO("", String.valueOf(raServiceReq.formFactorTokenID), "", raServiceReq.language, rsToken);
                if(rsToken[0].length > 0) {
                    sTokenAttrState = rsToken[0][0].TOKEN_ATTR_STATE_NAME;
                    sTokenAttrType = rsToken[0][0].TOKEN_ATTR_TYPE_NAME;
                    sBranchId_Cert = rsToken[0][0].BRANCH_ID;
                    sVALUE_OLD = rsToken[0][0].VALUE;
                    sTokenSN = rsToken[0][0].TOKEN_SN;
                    if("".equals(sVALUE_OLD)) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
//                                if(sBranchId_Cert != pBRANCH_ID)
//                                {
//                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_REQUEST_NOT_SUPPORT;
//                                }
                }
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### REQUEST CHECK VALID">
            if(sTokenAttrState.equals(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_PENDING)
                || sTokenAttrState.equals(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_APPROVED))
            {
                if(!sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_UNLOCK)
                    && !sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_RESET_ACTIVATION_REMAINING_COUNTER)
                    && !sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_LOCK))
                {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_TYPE_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_STATUS_INVALID;
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                // VALUE ATTR
                ATTRIBUTE_VALUES valueATTR = objectMapper.readValue(sVALUE_OLD, ATTRIBUTE_VALUES.class);
                valueATTR.setTokenDeclineReason(EscapeUtils.CheckTextNull(raServiceReq.declineReason));
                db.S_BO_API_TOKEN_ATTR_DECLINED(raServiceReq.formFactorTokenID, CommonFunction.GenJSONTokenATTR(valueATTR), pApproveCAUser);
                TOKEN[][] rsTokenResult = new TOKEN[1][];
                db.S_BO_API_TOKEN_GET_INFO("", String.valueOf(raServiceReq.formFactorTokenID), "", raServiceReq.language, rsTokenResult);
                if(rsTokenResult[0].length > 0)
                {
                    raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                    raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTokenSN;
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getFormFactorTokenProcess">
    public void getFormFactorTokenProcess(String pPARENT_ID, int pBRANCH_ID, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_FORMFACTOR_TOKEN;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            String sBranchSearch = "";
            if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
            {
                sBranchSearch = String.valueOf(pBRANCH_ID);
            }
            FormFactorTokenInfo[][] formFactorTokenInfo = new FormFactorTokenInfo[1][];
            db.S_BO_API_TOKEN_ATTR_TOKEN_LIST(raServiceReq.formFactorTokenID, sBranchSearch,
                EscapeUtils.CheckTextNull(raServiceReq.queueStateCode), EscapeUtils.CheckTextNull(raServiceReq.formFactorSN),
                EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode), raServiceReq.language, formFactorTokenInfo);
            if (formFactorTokenInfo[0].length > 0) {
                raServiceResp.formFactorTokenInfo = formFactorTokenInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getQueueStateProcess">
    public void getQueueStateProcess(String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_QUEUE_STATE;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>
                    
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            QueueStateInfo[][] queueStateInfo = new QueueStateInfo[1][];
            db.S_BO_API_TOKEN_ATTR_STATE_LIST(EscapeUtils.CheckTextNull(raServiceReq.queueStateCode),
                raServiceReq.language, queueStateInfo);
            if (queueStateInfo[0].length > 0) {
                raServiceResp.queueStateInfo = queueStateInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getQueueTypeProcess">
    public void getQueueTypeProcess(String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_QUEUE_TYPE;
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            QueueTypeInfo[][] queueTypeInfo = new QueueTypeInfo[1][];
            db.S_BO_API_TOKEN_ATTR_TYPE_LIST(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode),
                raServiceReq.language, queueTypeInfo);
            if (queueTypeInfo[0].length > 0) {
                raServiceResp.queueTypeInfo = queueTypeInfo[0];
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### registerBeneficiaryUserProcess">
    public void registerBeneficiaryUserProcess(String pPARENT_ID, int pBRANCH_ID,
        int[] System_Log_ID, String[] System_Log_BillCode,
        String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES, String sIP_Request,
        RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_REGISTRATION_BENEFICIARY_USER;
        ObjectMapper objectMapper;
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp),
            raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            if("".equals(raServiceReq.userName.trim()) || "".equals(raServiceReq.fullName.trim())
                || "".equals(raServiceReq.userRoleCode.trim()) || "".equals(raServiceReq.branchCode.trim())
                || "".equals(raServiceReq.emailAddress.trim()) || "".equals(raServiceReq.phoneNumber.trim()))
            {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_BENEFICIARY_USER_INFO_EMPTY;
            }
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT)) {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.NAME.equals(raServiceReq.branchCode.trim())) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
                }
                //</editor-fold>
            }
            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                String sUserPassDefault = CommonFunction.getRandomOTP(8);
                //<editor-fold defaultstate="collapsed" desc="### POLICY REGEX">
                GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
                db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
                String sRegexPolicy = "";
                if (rsPolicy[0].length > 0) {
                    for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                        if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_REGEX_FOR_PHONE_EMAIL)) {
                            sRegexPolicy = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                            break;
                        }
                    }
                }
                String sREGEX_PHONE = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_PHONE);
                if ("".equals(sREGEX_PHONE.trim())) {
                    sREGEX_PHONE = Definitions.CONFIG_DEFAULT_VALUE_REGEX_PHONE;
                }
                if (CommonFunction.regexPhoneValid(EscapeUtils.CheckTextNull(raServiceReq.phoneNumber), sREGEX_PHONE) == false) {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CUSTOMER_PHONE_INVALID;
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                }
                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    String sREGEX_EMAIL = PropertiesContent.getPropertiesContentKey(sRegexPolicy, Definitions.CONFIG_REGEX_EMAIL);
                    if ("".equals(sREGEX_EMAIL.trim())) {
                        sREGEX_EMAIL = Definitions.CONFIG_DEFAULT_VALUE_REGEX_EMAIL;
                    }
                    if (CommonFunction.regexEmailValid(EscapeUtils.CheckTextNull(raServiceReq.emailAddress), sREGEX_EMAIL) == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CUSTOMER_EMAIL_INVALID;
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                    }
                }
                //</editor-fold>

                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
                {
                    int[] pUSER_ID = new int[1];
                    String[] pRESPONSE_CODE = new String[1];
                    db.S_BO_API_USER_INSERT(raServiceReq.userName, sUserPassDefault, raServiceReq.fullName,
                        raServiceReq.userRoleCode, raServiceReq.branchCode, raServiceReq.emailAddress, raServiceReq.phoneNumber,
                        raServiceReq.approveUser, pRESPONSE_CODE, pUSER_ID);
                    if("0".equals(pRESPONSE_CODE[0])) {
                        if(raServiceReq.passwordEmailEnabled == true) {
                            int[] psResCode = new int[1];
                            String[] sResMess = new String[1];
                            ConnectConnector.SendMailCreateUser(String.valueOf(pUSER_ID[0]),
                                sUserPassDefault, psResCode, sResMess);
                        }
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                    } else {
                        raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE[0]);
                    }
                }
            }
        }        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCertificateBriefInfoProcess">
    public void getCertificateBriefInfoProcess(String pPARENT_ID, int pBRANCH_ID, String pBeneficiaryUserDefault, int[] System_Log_ID,
        String[] System_Log_BillCode, String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES, String sIP_Request,
        RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTIFICATION_BRIEF_INFO;
        RAServiceReq raReqTemp;
        ObjectMapper objectMapper;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp),
            pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.taxCode)) || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.pid))
                || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.budgetCode)) || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.passport))
                || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.citizenId)) || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.decision))
                || !"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN)))
            {
                String[] sUIDResult = new String[2];
                CommonReferServlet.collectFieldToUID(EscapeUtils.CheckTextNull(raServiceReq.taxCode), EscapeUtils.CheckTextNull(raServiceReq.budgetCode),
                    EscapeUtils.CheckTextNull(raServiceReq.decision), EscapeUtils.CheckTextNull(raServiceReq.pid),
                    EscapeUtils.CheckTextNull(raServiceReq.passport), EscapeUtils.CheckTextNull(raServiceReq.citizenId), sUIDResult);
                String sEnterpriseCert = sUIDResult[0];
                String sPersonalCert = sUIDResult[1];
                int[] pRESPONSE_CODE = new int[1];
                CertificateBriefInfo[][] certInfo = new CertificateBriefInfo[1][];
                db.S_BO_API_CERTIFICATION_BRIEF_LIST_EXPORT("", "", "", "", "", raServiceReq.language, "", "",
                    EscapeUtils.CheckTextNull(raServiceReq.certificateSN), certInfo, pRESPONSE_CODE, sEnterpriseCert, sPersonalCert);
                if(pRESPONSE_CODE[0] == 0) {
                    if (certInfo[0].length > 0) {
                        raServiceResp.certificateBriefInfo = certInfo[0];
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
                    }
                } else {
                    raServiceResp.responseCode = pRESPONSE_CODE[0];
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getCertificateExpireSoonInfoProcess">
    public void getCertificateExpireSoonInfoProcess(String pPARENT_ID, int pBRANCH_ID, String pBeneficiaryUserDefault, int[] System_Log_ID,
        String[] System_Log_BillCode, String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES, String sIP_Request,
        RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_CERTIFICATION_EXPIRE_SOON_INFO;
        RAServiceReq raReqTemp;
        ObjectMapper objectMapper;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        raReqTemp.certificateComponentInfo = null;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp),
            pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            int[] pRESPONSE_CODE = new int[1];
            CertificateExpireSoonInfo[][] certInfo = new CertificateExpireSoonInfo[1][];
            db.S_BO_API_CERTIFICATION_EXPIRE_SOON_LIST(raServiceReq.expireDateNumber, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryBranch),
                EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), raServiceReq.language, certInfo, pRESPONSE_CODE);
            if(pRESPONSE_CODE[0] == 0) {
                if (certInfo[0].length > 0) {
                    for(CertificateExpireSoonInfo certInfo1 : certInfo[0])
                    {
                        certInfo1.certificateDN = certInfo1.certificateDN.replace(Definitions.CONFIG_COMPONENT_DN_TAG_UID, Definitions.CONFIG_COMPONENT_DN_TAG_UID_BEFORE);
                        certInfo1.certificateDN = certInfo1.certificateDN.replace(Definitions.CONFIG_COMPONENT_DN_SUBSTRING_CN_VALUE, ",");
                        if(!"".equals(certInfo1.subjectAlternativeName))
                        {
                            objectMapper = new ObjectMapper();
                            String strDNSArray = "";
                            CERTIFICATION_PROPERTIES_JSON itemParsePush = objectMapper.readValue(certInfo1.subjectAlternativeName, CERTIFICATION_PROPERTIES_JSON.class);
                            if(itemParsePush.getAttributes().size() > 0) {
                                for (int i = 0; i < itemParsePush.getAttributes().size(); i++) {
                                    strDNSArray += EscapeUtils.CheckTextNull(itemParsePush.getAttributes().get(i).getKey()) + "=" + EscapeUtils.CheckTextNull(itemParsePush.getAttributes().get(i).getValue()).replace(",", "\\,") + ", ";
                                }
                                strDNSArray = CommonFunction.subLastCharater(strDNSArray);
                            }
                            certInfo1.subjectAlternativeName = strDNSArray;
                        }
                        if(certInfo1.certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_CLIENT))
                        {
                            certInfo1.deviceUUID = certInfo1.deviceUUID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBCLIENT, "");
                        }
                        if(certInfo1.certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_WEB_SERVER))
                        {
                            certInfo1.deviceUUID = certInfo1.deviceUUID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_WEBSERVER, "");
                        }
                        if(certInfo1.certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_CODE_SIGNING_GOV))
                        {
                            certInfo1.deviceUUID = certInfo1.deviceUUID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_CODE_SIGNING, "");
                        }
                        if(certInfo1.certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_AUTH))
                        {
                            certInfo1.deviceUUID = certInfo1.deviceUUID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_AUTH, "");
                        }
                        if(certInfo1.certificatePurposeCode.equals(Definitions.CONFIG_CERTIFICATION_PURPOSE_CODE_X_ROAD_SIGN))
                        {
                            certInfo1.deviceUUID = certInfo1.deviceUUID.replace(Definitions.CONFIG_CERTIFICATION_OWNER_PREFIX_X_ROAD_SIGN, "");
                        }
                    }
                    raServiceResp.certificateExpireSoonInfo = certInfo[0];
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
                }
            } else {
                raServiceResp.responseCode = pRESPONSE_CODE[0];
            }
        }
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### compensateCertificateProcess">
    public void compensateCertificateProcess(String sCERT_PROFILE_PROPERTIES, String sCERT_POLICY_PROPERTIES,
        String pPARENT_ID, int pBRANCH_ID, String pBeneficiaryUserDefault, String pApproveCAUser, boolean  autoApproveCAServer,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG, Logger log, String sFUNCTIONALTITY_PROPERTIES,
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
        throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_COMPENSATION_CERTIFICATION;
        String sTOKEN_SN = "";
        
        RAServiceReq raReqTemp;
        raReqTemp = raServiceReq;
        raReqTemp.fileManagerInfo = null;
        ObjectMapper objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", EscapeUtils.CheckTextNull(raReqTemp.certificateSN),
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), pBeneficiaryUserDefault, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean autoApproveCAClient = raServiceReq.approveEnabled;
            String CheckCHANGE_KEY;
            String CheckPRIVATE_KEY;
            //<editor-fold defaultstate="collapsed" desc="### GET POLICY">
            GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
            db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
            String setDeleteOldCertificateEnabled = "1";
            String setRevokeOldCertificateEnabled = "0";
            String sNoAllowTranferToken = "1";
            String sDiscountRateOption = "0";
            String checkChangeEffectiveDT = "0";
            String dayChangeEffectiveDT = "0";
            if (rsPolicy[0].length > 0) {
                for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_DISCOUNT_RATE_PROFILE_OPTION)) {
                        sDiscountRateOption = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_SYS_NO_AUTO_MOVE_TOKEN_FOR_RENEWAL_REVISION_CERTIFICATE_REQUEST)) {
                        sNoAllowTranferToken = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                    if(rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_OPTION_FOR_CHANGING_EFFECTIVE_DT)) {
                        checkChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                    if(rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_BO_MAX_NUMBERS_DAY_ISSUE_CERTIFICATE_FUTURE)) {
                        dayChangeEffectiveDT = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                    }
                }
            }
            if(raServiceReq.deleteCertificateEnabled == false) {
                setDeleteOldCertificateEnabled = "0";
            }
//            if(raServiceReq.revokeOldCertificateEnabled == false) {
//                setRevokeOldCertificateEnabled = "0";
//            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### GET CERTIFICATE">
            int createdUserID = 0;
            String pCERTIFICATION_SN = "";
            String pCERTIFICATION_PROFILE_CODE = "";
            String pCERTIFICATION_AUTHORITY_CODE = "";
            String pCERTIFICATION_PURPOSE_CODE = "";
            String sPHONE_CONTRACT = "";
            String sEMAIL_CONTRACT = "";
            String sCoreCASubject = "";
            String sDN_DB = "";
            String pPERSONAL_NAME = "";
            String pCOMPANY_NAME = "";
            String pDOMAIN_NAME = "";
            String pPROPERTIES_SAN = "";
            String pEnterpriseDB = "";
            String pPersonalDB = "";
            String pDeviceUUID = "";
            String pPROVINCE_ID = "";
            String sCSR = "";
            String sProvinceNameComponent = "";
            String sProvinceCodeComponent = "";
            String pCERTIFICATE_PROFILE_ID = "0";
            String sPKIFormFactorCode = "";
            String pSHARED_MODE = "";
            String pEXPIRATION_DT = "";
            String pEXPIRATION_CONTRACT_DT = "";
            java.sql.Timestamp pEFFECTIVE_DT = null;
            int pPAST_CERTIFICATE_ID = 0;
            int pCERTIFICATION_OWNER_ID = 0;
            int sTokenId_Old = 0;
            int sBranchId_Cert = 0;
            boolean pPrivateKeyEnabled_Old = true;
            String pCERTIFICATION_ATTR_TYPE_CODE = Definitions.CONFIG_CERTIFICATION_ATTR_TYPE_CODE_COMPENSATION;
            String pPAST_CERTIFICATE_SN = "";
            int pCERTIFICATE_STATE_ID = 0;
            int sBranchId_New = 0;
            int[] pRESPONSE_CODE = new int[1];
            boolean isValidRequest = false;
            if(!"".equals(EscapeUtils.CheckTextNull(raServiceReq.certificateSN))) {
                CertificateInfo[][] rsReq = new CertificateInfo[1][];
                db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.certificateSN), 0,
                    "", "", raServiceReq.language, pRESPONSE_CODE, rsReq, "", "", "", "");
                if (rsReq[0].length > 0) {
                    for(CertificateInfo rsReqItem : rsReq[0]) {
                        if(rsReqItem.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_OPERATED
                            || rsReqItem.certificateStateId == Definitions.CONFIG_CERTIFICATION_STATE_EXPIRED)
                        {
                            isValidRequest = true;
                            sPHONE_CONTRACT = rsReqItem.phoneContact;
                            sEMAIL_CONTRACT = rsReqItem.emailContact;
                            sCoreCASubject = rsReqItem.coreCASubject;
                            sDN_DB = rsReqItem.certificateDN;
                            pPERSONAL_NAME = rsReqItem.personalName;
                            pCOMPANY_NAME = rsReqItem.companyName;
                            pPROPERTIES_SAN = EscapeUtils.CheckTextNull(rsReqItem.subjectAlternativeName);
                            pEnterpriseDB = rsReqItem.enterpriseID;
                            pPersonalDB = rsReqItem.personalID;
                            pDeviceUUID = rsReqItem.deviceUUID;
                            sTOKEN_SN = rsReqItem.tokenSN;
                            pCERTIFICATION_AUTHORITY_CODE = rsReqItem.certificateAuthorityCode;
                            pCERTIFICATION_PURPOSE_CODE = rsReqItem.certificatePurposeCode;
                            pCERTIFICATE_PROFILE_ID = String.valueOf(rsReqItem.certificateProfileId);
                            pDOMAIN_NAME = rsReqItem.domainName;
                            pPROVINCE_ID = String.valueOf(rsReqItem.provinceId);
                            pPAST_CERTIFICATE_SN = rsReqItem.certificateSN;
                            sPKIFormFactorCode = rsReqItem.formFactorCode;
                            createdUserID = rsReqItem.createdId;
                            pCERTIFICATION_OWNER_ID = rsReqItem.certificateOwnerID;
                            sCSR = rsReqItem.csr;
                            pCERTIFICATION_PROFILE_CODE = rsReqItem.certificateProfileCode;
                            pEXPIRATION_DT = EscapeUtils.CheckTextNull(rsReqItem.expirationTime);
                            pEXPIRATION_CONTRACT_DT = EscapeUtils.CheckTextNull(rsReqItem.expirationContractTime);
                            pCERTIFICATE_STATE_ID = rsReqItem.certificateStateId;
                            pPrivateKeyEnabled_Old = rsReqItem.backupKeyEnabled;
                            sTokenId_Old = rsReqItem.tokenId;
                            pPAST_CERTIFICATE_ID = rsReqItem.certificateID;
                            sBranchId_Cert = rsReqItem.raId;
                            pSHARED_MODE = rsReqItem.shareMode ? "1" : "0";
                            if("1".equals(checkChangeEffectiveDT)) {
                                pEFFECTIVE_DT = CommonFunction.ConvertPatternToTimeStamp(EscapeUtils.CheckTextNull(rsReq[0][0].effectiveTime), Definitions.CONFIG_DATETIME_FORMAT_YYYYDDMMHHMMSS);
                            }
                            break;
                        }
                    }
                }
            }
            if(isValidRequest == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_REQUEST_INVALID;
            } else {
                if(CommonFunction.checkDateBiggerCurrent(pEXPIRATION_CONTRACT_DT, Definitions.CONFIG_DATETIME_FORMAT_YYYYDDMMHHMMSS) == true) {
                    if(CommonFunction.checkDateBiggerContract(pEXPIRATION_DT, pEXPIRATION_CONTRACT_DT, Definitions.CONFIG_DATETIME_FORMAT_YYYYDDMMHHMMSS) == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_COMPENSATE_TIME_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_COMPENSATE_TIME_INVALID;
                }
            }
            //</editor-fold>
            
            //<editor-fold defaultstate="collapsed" desc="### CHECK CA - PROFILE CHANGE">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                String sCACodeClient = EscapeUtils.CheckTextNull(raServiceReq.certificateAuthorityCode);
                if(!"".equals(sCACodeClient)) {
                    if(!sCACodeClient.equals(pCERTIFICATION_AUTHORITY_CODE)) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATE_CA_CHANGE_INVALID;
                        ArrayList<CERTIFICATION_POLICY_DATA> tempProfileList = new ArrayList<>();
                        //<editor-fold defaultstate="collapsed" desc="### GET PROFILE LIST ACCESS">
                        CERTIFICATION_POLICY_DATA[][] resPolicyData_Old = new CERTIFICATION_POLICY_DATA[1][];
                        CommonFunction.getProfileCertList(sCERT_PROFILE_PROPERTIES, resPolicyData_Old);
                        for(CERTIFICATION_POLICY_DATA resPolicyCertData_Old1 : resPolicyData_Old[0])
                        {
                            if(resPolicyCertData_Old1.attributeType.equals(Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST))
                            {
                                CERTIFICATION_PROFILE[][] resProfileDB = new CERTIFICATION_PROFILE[1][];
                                db.S_BO_API_CERTIFICATION_PROFILE_GET_INFO(EscapeUtils.CheckTextNull(resPolicyCertData_Old1.name), resProfileDB);
                                if(resProfileDB[0].length > 0)
                                {
                                    CERTIFICATION_POLICY_DATA itemProfileAccess = new CERTIFICATION_POLICY_DATA();
                                    itemProfileAccess.name = resProfileDB[0][0].NAME;
                                    itemProfileAccess.certificateAuthority = resProfileDB[0][0].CERTIFICATION_AUTHORITY_NAME;
                                    itemProfileAccess.certificatePurpose = resProfileDB[0][0].CERTIFICATION_PURPOSE_NAME;
                                    itemProfileAccess.remark = resPolicyCertData_Old1.remark;
                                    itemProfileAccess.remarkEn = resPolicyCertData_Old1.remarkEn;
                                    itemProfileAccess.attributeType = Definitions.CONFIG_ROLE_ATTRIBUTE_CERT_POLICY_ITEM_PROFILE_LIST;
                                    tempProfileList.add(itemProfileAccess);
                                }
                            }
                        }
                        //</editor-fold>

                        CERTIFICATION_PROFILE[][] rsProfileCheck = new CERTIFICATION_PROFILE[1][];
                        db.S_BO_API_CERTIFICATION_PROFILE_LIST_HASID(sCACodeClient, pCERTIFICATION_PURPOSE_CODE,
                            sPKIFormFactorCode, 0, raServiceReq.language, rsProfileCheck, sCERT_PROFILE_PROPERTIES, tempProfileList);
                        if(rsProfileCheck[0].length > 0) {
                            int durationProfileOld = 0;
                            CERTIFICATION_PROFILE[][] rsDurationOld = new CERTIFICATION_PROFILE[1][];
                            db.S_BO_CERTIFICATION_PROFILE_DETAIL(pCERTIFICATE_PROFILE_ID, rsDurationOld);
                            if(rsDurationOld[0].length > 0) {
                                durationProfileOld = rsDurationOld[0][0].DURATION;
                            }
                            for(CERTIFICATION_PROFILE rsProfileCheck1 : rsProfileCheck[0]) {
                                if(rsProfileCheck1.DURATION == durationProfileOld) {
                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                    pCERTIFICATION_AUTHORITY_CODE = sCACodeClient;
                                    pCERTIFICATION_PROFILE_CODE = rsProfileCheck1.NAME;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### BRANCH VALID">
            String raFullnameCreate = "";
            String raFullname = "";
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser))) {
                    BACKOFFICE_USER[][] rsUser = new BACKOFFICE_USER[1][];
                    db.S_BO_USER_DETAIL(String.valueOf(createdUserID), String.valueOf(raServiceReq.language), rsUser);
                    if (rsUser[0].length > 0) {
                        raServiceReq.beneficiaryUser = rsUser[0][0].USERNAME;
                        raFullnameCreate = EscapeUtils.CheckTextNull(rsUser[0][0].FULL_NAME);
                    }
                    sBranchId_New = sBranchId_Cert;
                } else {
                    UserInfo[][] userInfo = new UserInfo[1][];
                    db.S_BO_API_USER_LIST(EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", raServiceReq.language, userInfo);
                    if (userInfo[0].length > 0) {
                        raFullnameCreate = EscapeUtils.CheckTextNull(userInfo[0][0].fullName);
                        sBranchId_New = userInfo[0][0].raID;
                    }
                }
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT)) {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_New) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    } else {
                        UserInfo[][] userDetail = new UserInfo[1][];
                        db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                        if (userDetail[0].length > 0) {
                            raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                        }
                    }
                }
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                if (pCERTIFICATE_STATE_ID != 0 && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_NEW
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_DECLINED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVOKED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED_EXPIRED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_STOPPED_OPERATION
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_AUTO_REVOKED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVISED_KEEP_SN
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED_KEEP_SN
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_RENEWED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REVISED
                    && pCERTIFICATE_STATE_ID != Definitions.CONFIG_CERTIFICATION_STATE_REISSUED
                    && !sTOKEN_SN.equals(Definitions.CONFIG_TOKEN_SN_LOST)) {
                    if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                        //<editor-fold defaultstate="collapsed" desc="### GET PROVINCE">
                        CITY_PROVINCE[][] rsProvince = new CITY_PROVINCE[1][];
                        db.S_BO_PROVINCE_DETAIL(pPROVINCE_ID, rsProvince);
                        if (rsProvince[0].length > 0) {
                            sProvinceNameComponent = rsProvince[0][0].REMARK;
                            sProvinceCodeComponent = rsProvince[0][0].NAME;
                        }
                        //</editor-fold>
                        
                        //<editor-fold defaultstate="collapsed" desc="### CHANGE_KEY, PRIVATE_KEY, DELETE IN TOKEN of CERT TYPE">
                        String strPasswordP12 = "";
                        String pushNoticeEmail = "0";
                        if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                            || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                            if (pPrivateKeyEnabled_Old == true) {
                                if (raServiceReq.changeKeyEnabled == true) {
                                    CheckCHANGE_KEY = "1";
                                } else {
                                    CheckCHANGE_KEY = "0";
                                    setDeleteOldCertificateEnabled = "0";
//                                    setRevokeOldCertificateEnabled = "0";
                                }
                                if (raServiceReq.backupKeyEnabled == true) {
                                    CheckPRIVATE_KEY = "1";
                                } else {
                                    CheckPRIVATE_KEY = "0";
                                }
                            } else {
                                if (raServiceReq.changeKeyEnabled == true) {
                                    CheckCHANGE_KEY = "1";
                                    if (raServiceReq.backupKeyEnabled == true) {
                                        CheckPRIVATE_KEY = "1";
                                    } else {
                                        CheckPRIVATE_KEY = "0";
                                    }
                                } else {
                                    CheckCHANGE_KEY = "0";
                                    CheckPRIVATE_KEY = "0";
                                    setDeleteOldCertificateEnabled = "0";
//                                    setRevokeOldCertificateEnabled = "0";
                                }
                            }
                            boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                            if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                pushNoticeEmail = "1";
                            }
                        } else if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                            || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                            if (pPrivateKeyEnabled_Old == true) {
                                CheckPRIVATE_KEY = "1";
                                if (raServiceReq.changeKeyEnabled == true) {
                                    CheckCHANGE_KEY = "1";
                                } else {
                                    CheckCHANGE_KEY = "0";
//                                    setRevokeOldCertificateEnabled = "0";
                                }
                                boolean p12EmailCertServer = CommonFunction.getP12EmailEnabledCert(sCERT_POLICY_PROPERTIES);
                                if (raServiceReq.p12EmailEnabled == true && p12EmailCertServer == true) {
                                    pushNoticeEmail = "1";
                                }
                                if (!"".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                    strPasswordP12 = EscapeUtils.CheckTextNull(raServiceReq.p12Password);
                                } else {
                                    strPasswordP12 = CommonFunction.randomPasswordP12(8);
                                }
                            } else {
                                if (raServiceReq.changeKeyEnabled == true) {
                                    CheckCHANGE_KEY = "1";
                                    sCSR = EscapeUtils.CheckTextNull(raServiceReq.csr);
                                    if ("".equals(sCSR)) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EMPTY;
                                    } else {
                                        String sKeySizeDB;
                                        boolean isValidCSR = false;
                                        boolean checkCSRNotExists = true;
                                        CERTIFICATION[][] rsCert = new CERTIFICATION[1][];
                                        db.S_BO_API_GET_ALGORITHM_KEY_SIZE(pCERTIFICATION_PROFILE_CODE, rsCert);
                                        if (rsCert[0].length > 0) {
                                            sKeySizeDB = EscapeUtils.CheckTextNull(rsCert[0][0].KEY_SIZE);
                                            String sKeySizeCSR = CommonFunction.getKeySizeFromCSR(sCSR);
                                            isValidCSR = sKeySizeDB.equals(sKeySizeCSR);
                                        }
                                        if(isValidCSR == false) {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_KEYSIZE;
                                        } else {
                                            String sPublicKeyHard = CommonFunction.getPublicKeyHasrCSR(sCSR);
                                            // call store cert Operation check exist sPublicKeyHard
                                            checkCSRNotExists = true;
                                            if(checkCSRNotExists == false) {
                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CLIENT_CSR_EXISTS;
                                            }
                                        }
                                    }
                                } else {
                                    CheckCHANGE_KEY = "0";
//                                    setRevokeOldCertificateEnabled = "0";
                                }
                                CheckPRIVATE_KEY = "0";
                                boolean pushNoticeCertServer = CommonFunction.getPushNoticeEnabledCert(sCERT_POLICY_PROPERTIES);
                                if (raServiceReq.certificateNotificationEnabled == true && pushNoticeCertServer == true) {
                                    pushNoticeEmail = "1";
                                }
                            }
//                                    }
                        } else {
                            CheckCHANGE_KEY = "1";
                            CheckPRIVATE_KEY = "1";
                        }
                        //</editor-fold>
                        
//                        if(raServiceReq.keepCertificateSNEnabled = true) {
//                            setRevokeOldCertificateEnabled = "0";
//                        }
                        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                            //<editor-fold defaultstate="collapsed" desc="### LEVEL APPROVE">
                            // intLevelApprove - new : 0, agency approve : 1, CA approve : 2
                            int intLevelApprove = 0;
                            if (autoApproveCAServer == false && autoApproveCAClient == false) {
                                intLevelApprove = 0;
                            } else if (autoApproveCAServer == false && autoApproveCAClient == true) {
                                intLevelApprove = 1;
                            } else if (autoApproveCAServer == true && autoApproveCAClient == false) {
                                intLevelApprove = 0;
                            } else if (autoApproveCAServer == true && autoApproveCAClient == true) {
                                intLevelApprove = 2;
                            }
                            //</editor-fold>
                            String sPromotionDuration = "";
                            //<editor-fold defaultstate="collapsed" desc="### EXPAND PARAM PROCESS">
                            String sRsspAgreementUUID = "";
                            String sRsspRelyingParty = "";
                            String sRsspCertificateUUID = "";
                            String sRsspConnectWSMode = "";
                            if(sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD)) {
                                String sExpandParam = EscapeUtils.CheckTextNull(raServiceReq.expandFutureParamXML);
                                if(!"".equals(sExpandParam)) {
                                    ServiceRequestExpand jsonReqExpand = objectMapper.readValue(sExpandParam, ServiceRequestExpand.class);
                                    sRsspAgreementUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspAgreementUUID);
                                    sRsspRelyingParty = EscapeUtils.CheckTextNull(jsonReqExpand.rsspRelyingParty);
                                    sRsspCertificateUUID = EscapeUtils.CheckTextNull(jsonReqExpand.rsspCertificateUUID);
                                    sRsspConnectWSMode = EscapeUtils.CheckTextNull(jsonReqExpand.rsspConnectWSMode);
                                }
                                if(!"".equals(sRsspConnectWSMode)) {
                                    if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_REST)) {
                                        if("".equals(sRsspCertificateUUID) || "".equals(sRsspRelyingParty)) {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                        }
                                    } else if(sRsspConnectWSMode.equals(Definitions.CONFIG_RSSP_CONNECT_MODE_SOAP)) {
                                        if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                        }
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                    }
                                } else {
                                    if("".equals(sRsspAgreementUUID) || "".equals(sRsspRelyingParty)) {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_RSSP_RP_AUUID_EMPTY;
                                    }
                                }
                            }
                            //</editor-fold>

                            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                                //<editor-fold defaultstate="collapsed" desc="### LOG VALUE">
                                CERTIFICATION_DATA_ATTR tempLogReq = new CERTIFICATION_DATA_ATTR();
                                tempLogReq.personalName = pPERSONAL_NAME;
                                tempLogReq.companyName = pCOMPANY_NAME;
                                tempLogReq.domainName = pDOMAIN_NAME;
                                tempLogReq.enterpriseID = pEnterpriseDB;
                                tempLogReq.personalID = pPersonalDB;
                                tempLogReq.deviceUUID = pDeviceUUID;
                                tempLogReq.phoneContract = sPHONE_CONTRACT;
                                tempLogReq.emailContract = sEMAIL_CONTRACT;
                                tempLogReq.issuerSubject = sCoreCASubject;
                                tempLogReq.subjectDn = sDN_DB;
                                tempLogReq.tokenSn = sTOKEN_SN;
                                tempLogReq.provinceName = sProvinceNameComponent;
                                tempLogReq.typeName = pCERTIFICATION_ATTR_TYPE_CODE;
                                CommonFunction.LogDebugString(log, sFunctionWS, "REQUEST: " + "CERT_SN: " + EscapeUtils.CheckTextNull(raServiceReq.certificateSN)
                                    + "SUBJECT: " + sDN_DB + "; PERSONAL_NAME: " + pPERSONAL_NAME + "; COMPANY_NAME: " + pCOMPANY_NAME + "; pEnterpriseDB: " + pEnterpriseDB
                                    + "; personalID: " + pPersonalDB + "; PAST_CERT_ID: " + pPAST_CERTIFICATE_ID + "; DOMAIN_NAME: " + pDOMAIN_NAME + "; DeviceUUID: " + pDeviceUUID
                                    + "; PKIFormFactorCode: " + sPKIFormFactorCode
                                    + "; CERT_ATTR_TYPE_CODE: " + pCERTIFICATION_ATTR_TYPE_CODE
                                    + "; CERTIF_AUTHORITY_CODE: " + pCERTIFICATION_AUTHORITY_CODE
                                    + "; TOKEN_SN_Old: " + sTOKEN_SN + "; TOKE_ID_Old: " + sTokenId_Old + "; EMAIL_CONTRACT: " + sEMAIL_CONTRACT
                                    + "; PHONE_CONTRACT: " + sPHONE_CONTRACT + "; IS_CHANGE_KEY: " + CheckCHANGE_KEY
                                    + "; KEEP_CERT_SN: " + String.valueOf(raServiceReq.keepCertificateSNEnabled)
                                    + "; IS_BACKUP_KEY: " + CheckPRIVATE_KEY + "; IS_DELETE_OLD_CERTIFICATE: " + setDeleteOldCertificateEnabled
                                    + "; IS_REVOKE_OLD_CERTIFICATE: " + setRevokeOldCertificateEnabled
                                    + "; BENEFICIARIES_USER: " + raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                                ATTRIBUTE_VALUES valueATTR;
                                ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                                dataATTR.setCertificationData(tempLogReq);
                                valueATTR = new ATTRIBUTE_VALUES();
                                valueATTR.setTokenSn(sTOKEN_SN);
                                if(!"".equals(sRsspAgreementUUID)) {
                                    valueATTR.setRsspAgreementUUID(sRsspAgreementUUID);
                                }
                                if(!"".equals(sRsspRelyingParty)) {
                                    valueATTR.setRsspRelyingParty(sRsspRelyingParty);
                                }
                                if(!"".equals(sRsspCertificateUUID)) {
                                    valueATTR.setRsspCertificateUUID(sRsspCertificateUUID);
                                }
                                if(!"".equals(sRsspConnectWSMode)) {
                                    valueATTR.setRsspConnectWSMode(sRsspConnectWSMode);
                                }
                                boolean boChangeKeyEnabled = "1".equals(CheckCHANGE_KEY);
                                valueATTR.setChangeKeyEnabled(boChangeKeyEnabled);
                                valueATTR.setKeepCertificateSNEnabled(raServiceReq.keepCertificateSNEnabled);
                                boolean boDeleteOldCertificate = "1".equals(setDeleteOldCertificateEnabled);
                                valueATTR.setDeleteOldCertificateEnabled(boDeleteOldCertificate);
                                boolean boRevokeOldCertificate = "1".equals(setRevokeOldCertificateEnabled);
                                valueATTR.setRevokeOldCertificateEnabled(boRevokeOldCertificate);
                                valueATTR.setTypeName(pCERTIFICATION_ATTR_TYPE_CODE);
                                //valueATTR.setPromotionDuration(sPromotionDuration);
                                valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PENDING);
                                valueATTR.setCreateUser(raFullnameCreate + " (" + raServiceReq.beneficiaryUser + ")");
                                valueATTR.setCreateDt(new Date());
                                valueATTR.setAttributeData(dataATTR);
                                String strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                //</editor-fold>
                                
                                int[] pCERTIFICATE_ATTR_ID = new int[1];
                                int[] pCERTIFICATION_ID = new int[1];
                                String[] pRESPONSE_CODE_NAME = new String[1];
                                db.S_BO_API_CERTIFICATION_INSERT(pCERTIFICATION_PROFILE_CODE, sTOKEN_SN,
                                        pCERTIFICATION_SN, pPERSONAL_NAME, pCOMPANY_NAME, pDOMAIN_NAME,
                                        sDN_DB, sCoreCASubject, sPHONE_CONTRACT, sEMAIL_CONTRACT,
                                        sProvinceCodeComponent, pPAST_CERTIFICATE_SN, "", pCERTIFICATION_ATTR_TYPE_CODE,
                                        strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser),
                                        EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), sCSR, pCERTIFICATION_AUTHORITY_CODE,
                                        CheckCHANGE_KEY, CheckPRIVATE_KEY, sPKIFormFactorCode, pDeviceUUID, sPromotionDuration,
                                        pRESPONSE_CODE_NAME, pCERTIFICATION_ID, pCERTIFICATE_ATTR_ID, pCERTIFICATION_OWNER_ID,
                                        pEFFECTIVE_DT, null, pEnterpriseDB, pPersonalDB);
                                if ("0".equals(pRESPONSE_CODE_NAME[0])) {
                                    if(!"".equals(pPROPERTIES_SAN)) {
                                        db.S_BO_CERTIFICATION_UPDATE_PROPERTIES(String.valueOf(pCERTIFICATION_ID[0]),
                                            pPROPERTIES_SAN, EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser));
                                    }

                                    raServiceResp.certificateID = pCERTIFICATION_ID[0];
                                    raServiceResp.certificateStateCode = Definitions.CONFIG_CERTIFICATION_STATE_CODE_NEW;
                                    db.S_BO_CERTIFICATION_UPDATE(raServiceResp.certificateID, "", "", "", "",
                                        "", "", "", "", "", "", "", "", "",
                                        "", EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), "", "", "", "",
                                        pSHARED_MODE, "", "", pEnterpriseDB, pPersonalDB);
                                    //<editor-fold defaultstate="collapsed" desc="### Approve request -> PRE_APPROVED, APPROVED">
                                    if (intLevelApprove == 1 || intLevelApprove == 2) {
                                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_PRE_APPROVED);
                                        valueATTR.setApproveUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                        valueATTR.setApproveDt(new Date());
                                        strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                        db.S_BO_CERTIFICATION_PRE_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                    }
                                    if (intLevelApprove == 2) {
                                        valueATTR.setRequestState(Definitions.CONFIG_CERTIFICATION_ATTR_STATE_CODE_APPROVED);
                                        valueATTR.setApproveCAUser(raFullname + " (" + raServiceReq.approveUser + ")");
                                        valueATTR.setApproveCADt(new Date());
                                        strReqValueATTR = CommonFunction.GenJSONTokenATTR(valueATTR);
                                        String sApprove = db.S_BO_API_CERTIFICATION_APPROVED(pCERTIFICATE_ATTR_ID[0], strReqValueATTR, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                        if ("0".equals(sApprove)) {
                                            // DISCOUNT RATE
                                            if ("1".equals(sDiscountRateOption)) {
                                                CommonReferServlet.updateDiscountRateImportCert(String.valueOf(raServiceResp.certificateID),
                                                    EscapeUtils.CheckTextNull(raServiceReq.beneficiaryUser), pCERTIFICATION_PROFILE_CODE,
                                                    "", "", "", "", EscapeUtils.CheckTextNull(raServiceReq.approveUser), "", "", pEnterpriseDB, pPersonalDB);
                                            }
                                            // Transfer token to agancy
                                            if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                                                || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                                if("0".equals(sNoAllowTranferToken)) {
                                                    if(sBranchId_New != sBranchId_Cert) {
                                                        db.S_BO_TOKEN_UPDATE_BRANCH(String.valueOf(sTokenId_Old), String.valueOf(sBranchId_New), raServiceReq.approveUser);
                                                    }
                                                }
                                            }
                                            db.S_BO_CERTIFICATION_UPDATE_AMOUNT(pCERTIFICATION_ID[0], "", pushNoticeEmail, EscapeUtils.CheckTextNull(raServiceReq.approveUser));
                                            if (sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_SOFT_TOKEN)
                                                 || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_ESIGNCLOUD))
                                            {
                                                int[] intWSRes = new int[1];
                                                String[] sWSRes = new String[1];
                                                ConnectConnector.EnrollCertificate(sTOKEN_SN, strPasswordP12, String.valueOf(pCERTIFICATE_ATTR_ID[0]), intWSRes, sWSRes);
                                                if (intWSRes[0] == 0) {
                                                    CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                    db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0], "", "",
                                                        raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                    if (certInfo[0].length > 0) {
                                                        raServiceResp.certificate = certInfo[0][0].certificate;
                                                        raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                        raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                                        raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                    }
                                                    if(!"".equals(strPasswordP12)) {
                                                        int[] intRes = new int[1];
                                                        String[] sRes = new String[1];
                                                        byte[] sP12Return = ConnectConnector.generateKeystore(strPasswordP12, false, String.valueOf(raServiceResp.certificateID), intRes, sRes);
                                                        raServiceResp.p12Certificate = sP12Return;
                                                    }
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                } else {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                                }
                                            } else if (CommonFunction.checkHardTokenEnabled(sPKIFormFactorCode) == true
                                                || sPKIFormFactorCode.equals(Definitions.CONFIG_PKI_FORMFACTOR_CODE_PKI_USIM)) {
                                                if("0".equals(CheckCHANGE_KEY)) {
                                                    int[] intWSRes = new int[1];
                                                    String[] sWSRes = new String[1];
                                                    ConnectConnector.EnrollCertificate(sTOKEN_SN, "", String.valueOf(pCERTIFICATE_ATTR_ID[0]), intWSRes, sWSRes);
                                                    if (intWSRes[0] == 0) {
                                                        CertificateInfo[][] certInfo = new CertificateInfo[1][];
                                                        db.S_BO_API_CERTIFICATION_GET_INFO("", "", "", "", "", pCERTIFICATION_ID[0], "", "",
                                                            raServiceReq.language, pRESPONSE_CODE, certInfo, "", "", "", "");
                                                        if (certInfo[0].length > 0) {
                                                            raServiceResp.certificate = certInfo[0][0].certificate;
                                                            raServiceResp.certificateStateCode = certInfo[0][0].certificateStateCode;
                                                            raServiceResp.certificateStateName = certInfo[0][0].certificateStateName;
                                                            raServiceResp.certificateSN = certInfo[0][0].certificateSN;
                                                        }
                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                    } else {
                                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_ISSUE;
                                                    }
                                                } else {
                                                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                                }
                                            } else {
                                                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                            }
                                        } else {
                                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_ERROR_APPROVE;
                                        }
                                    } else {
                                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                                    }
                                    //</editor-fold>
                                    if ("".equals(EscapeUtils.CheckTextNull(raServiceReq.p12Password))) {
                                        if (!"".equals(strPasswordP12)) {
                                            raServiceResp.p12Password = strPasswordP12;
                                        }
                                    }
                                } else {
                                    raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                                }
                            }
                        }
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERT_STATE_INVALID;
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTOKEN_SN;
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### setFormFactorTokenBundleProcess">
    public void setFormFactorTokenBundleProcess(String pPARENT_ID, int pBRANCH_ID, String pApproveCAUser,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG,
        String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES, String sIP_Request,
        RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_SET_FORMFACTOR_TOKEN_BUNDLE;
        ObjectMapper objectMapper;
        String sTokenSN = Definitions.CONFIG_TOKEN_SN_BULK_TOKEN;
        RAServiceReq raReqTemp = new RAServiceReq();
        raReqTemp.formFactorSN = raServiceReq.formFactorSN;
        raReqTemp.formFactorCode = raServiceReq.formFactorCode;
        raReqTemp.queueTypeCode = raServiceReq.queueTypeCode;
        raReqTemp.remark = raServiceReq.remark;
        raReqTemp.menuLink = raServiceReq.menuLink;
        raReqTemp.pushNotification = raServiceReq.pushNotification;
        raReqTemp.approveEnabled = raServiceReq.approveEnabled;
        raReqTemp.asyncModeEnabled = raServiceReq.asyncModeEnabled;
        raReqTemp.language = raServiceReq.language;
        raReqTemp.credentialData = raServiceReq.credentialData;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
            db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
            String maxTokenSNList = "10000";
            if (rsPolicy[0].length > 0) {
                for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_API_MAX_AMOUNT_TOKEN_THROUGH_BUNDLE_API)) {
                        maxTokenSNList = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                        break;
                    }
                }
            }
            String sTokenIdList = "";
            //<editor-fold defaultstate="collapsed" desc="### TOKEN CHECK">
            if(raServiceReq.formFactorSNInfo.length > 0) {
                maxTokenSNList = "".equals(maxTokenSNList) ? "10000" : maxTokenSNList;
                System.out.println("maxTokenSNList: " + maxTokenSNList);
                if(raServiceReq.formFactorSNInfo.length < Integer.parseInt(maxTokenSNList)) {
                    FormFactorSNError[][] rsTokenError = new FormFactorSNError[1][];
                    ArrayList<FormFactorSNError> tempList = new ArrayList<>();
                    boolean isCheckList = true;
                    RESPONSE_CODE[][] rsResponseCode;
                    for(FormFactorSNInfo itemSN : raServiceReq.formFactorSNInfo) {
                        FormFactorSNError tempItem = new FormFactorSNError();
                        TOKEN[][] rsToken= new TOKEN[1][];
                        String sTokenSNFor = EscapeUtils.CheckTextNull(itemSN.formFactorSN);
                        if(!"".equals(sTokenSNFor)) {
                            db.S_BO_API_TOKEN_GET_INFO("", "", sTokenSNFor, raServiceReq.language, rsToken);
                            if(rsToken[0].length > 0) {
                                if(rsToken[0][0].TOKEN_STATE_ID != Definitions.CONFIG_TOKEN_STATE_ID_LOST) {
                                    if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT)) {
                                        boolean branchAccessOld = false;
                                        BRANCH[][] rsBranch;
                                        rsBranch = new BRANCH[1][];
                                        db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                                        if(rsBranch[0].length > 0) {
                                            for(BRANCH item : rsBranch[0]) {
                                                if(item.ID == rsToken[0][0].BRANCH_ID) {
                                                    branchAccessOld = true;
                                                    break;
                                                }
                                            }
                                        }
                                        if(branchAccessOld == false) {
                                            tempItem.formFactorSN = sTokenSNFor;
                                            tempItem.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                                            rsResponseCode = new RESPONSE_CODE[1][];
                                            db.S_BO_API_RESPONSE_CODE_GET_INFO(String.valueOf(Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID), raServiceReq.language, rsResponseCode);
                                            if (rsResponseCode[0].length > 0) {
                                                tempItem.responseMessage = rsResponseCode[0][0].REMARK;
                                            }
                                            tempList.add(tempItem);
                                            isCheckList = false;
                                        } else {
                                            sTokenIdList = sTokenIdList + String.valueOf(rsToken[0][0].ID) + ",";
                                        }
                                    } else {
                                        sTokenIdList = sTokenIdList + String.valueOf(rsToken[0][0].ID) + ",";
                                    }
                                } else {
                                    tempItem.formFactorSN = sTokenSNFor;
                                    tempItem.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                                    rsResponseCode = new RESPONSE_CODE[1][];
                                    db.S_BO_API_RESPONSE_CODE_GET_INFO(String.valueOf(Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID), raServiceReq.language, rsResponseCode);
                                    if (rsResponseCode[0].length > 0) {
                                        tempItem.responseMessage = rsResponseCode[0][0].REMARK;
                                    }
                                    tempList.add(tempItem);
                                    isCheckList = false;
                                }
                            } else {
                                tempItem.formFactorSN = sTokenSNFor;
                                tempItem.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
                                rsResponseCode = new RESPONSE_CODE[1][];
                                db.S_BO_API_RESPONSE_CODE_GET_INFO(String.valueOf(Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA), raServiceReq.language, rsResponseCode);
                                if (rsResponseCode[0].length > 0) {
                                    tempItem.responseMessage = rsResponseCode[0][0].REMARK;
                                }
                                tempList.add(tempItem);
                                isCheckList = false;
                            }
                        } else {
                            tempItem.formFactorSN = sTokenSNFor;
                            tempItem.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA;
                            rsResponseCode = new RESPONSE_CODE[1][];
                            db.S_BO_API_RESPONSE_CODE_GET_INFO(String.valueOf(Definitions.CONFIG_WS_RESPONSE_CODE_NO_DATA), raServiceReq.language, rsResponseCode);
                            if (rsResponseCode[0].length > 0) {
                                tempItem.responseMessage = rsResponseCode[0][0].REMARK;
                            }
                            tempList.add(tempItem);
                            isCheckList = false;
                        }
                    }
                    if(isCheckList == false) {
                        rsTokenError[0] = new FormFactorSNError[tempList.size()];
                        rsTokenError[0] = tempList.toArray(rsTokenError[0]);
                        raServiceResp.formFactorTokenError = rsTokenError[0];
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                    }
                    System.out.println("formFactorTokenError: " + objectMapper.writeValueAsString(raServiceResp.formFactorTokenError));
                    System.out.println("sTokenIdList: " + sTokenIdList);
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_NUMBER_TOKEN_BUNDLE_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH CLOSE">
//            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
//            {
//                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
//                {
//                    boolean branchAccessOld = false;
//                    BRANCH[][] rsBranch;
//                    rsBranch = new BRANCH[1][];
//                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
//                    if(rsBranch[0].length > 0) {
//                        for(BRANCH item : rsBranch[0]) {
//                            if(item.ID == sBranchId_Cert) {
//                                branchAccessOld = true;
//                                break;
//                            }
//                        }
//                    }
//                    if(branchAccessOld == false) {
//                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
//                    }
//                }
//            }
            //</editor-fold>
            
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                raServiceResp.requestExecutionProcess = Definitions.CONFIG_API_RESULT_PROCESS_PENDDING;
                if(raServiceReq.asyncModeEnabled == true) {
                    FormFactorTokenThread thhreadLog = new FormFactorTokenThread(raServiceReq, raServiceResp, pApproveCAUser,
                        sTokenIdList, System_Log_ID[0], System_Log_BillCode[0], sTOKEN_SN_LOG[0]);
                    Thread t = new Thread(thhreadLog);
                    t.start();
                } else {
                    //<editor-fold defaultstate="collapsed" desc="### GET PROVINCE and FULLNAME">
                    String raFullname = "";
                    UserInfo[][] userDetail = new UserInfo[1][];
                    db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                    if (userDetail[0].length > 0) {
                        raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                    }
                    //</editor-fold>

                    ObjectMapper oMapperParse;
                    ATTRIBUTE_VALUES valueATTR;
                    valueATTR = new ATTRIBUTE_VALUES();
                    String sTokenAttrTypeCode = "";
                    valueATTR.setTokenSn(sTokenSN);
                    valueATTR.setTokenIdOfBundleList(sTokenIdList);
                    int sTokenAttrTypeID = 0;
                    if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_LOCK))
                    {
                        sTokenAttrTypeCode = Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_LOCK;
                        sTokenAttrTypeID = Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_LOCK;
                        valueATTR.setActionReason(raServiceReq.remark);
                    } else if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_UNLOCK))
                    {
                        sTokenAttrTypeCode = Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_UNLOCK;
                        sTokenAttrTypeID = Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_UNLOCK;
                    } else if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_RESET_ACTIVATION_REMAINING_COUNTER))
                    {
                        sTokenAttrTypeCode = Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_RESET_ACTIVATION_REMAINING_COUNTER;
                        sTokenAttrTypeID = Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_RESET_ACTIVATION_REMAINING_COUNTER;
                    } else if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_PUSH_NOTFICATION))
                    {
                        oMapperParse = new ObjectMapper();
                        sTokenAttrTypeCode = Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_PUSH_NOTFICATION;
                        sTokenAttrTypeID = Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_PUSH_NOTFICATION;
                        PushNotificationAPI itemParse = oMapperParse.readValue(raServiceReq.pushNotification, PushNotificationAPI.class);
                        PUSH_TOKEN itemParsePush = new PUSH_TOKEN();
                        itemParsePush.PUSH_NOTICE_CONTENT = EscapeUtils.CheckTextNull(itemParse.notificationContent);
                        itemParsePush.PUSH_NOTICE_URL = EscapeUtils.CheckTextNull(itemParse.popupUrl);
                        itemParsePush.PUSH_NOTICE_TEXT_COLOR = EscapeUtils.CheckTextNull(itemParse.textColor);
                        itemParsePush.PUSH_NOTICE_BGR_COLOR = EscapeUtils.CheckTextNull(itemParse.backgroundColor);
                        ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                        dataATTR.setSticker(itemParsePush);
                        valueATTR.setAttributeData(dataATTR);
                    } else if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_MENU_LINK))
                    {
                        oMapperParse = new ObjectMapper();
                        sTokenAttrTypeCode = Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_MENU_LINK;
                        sTokenAttrTypeID = Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_MENU_LINK;
                        MenuLinkAPI itemParse = oMapperParse.readValue(raServiceReq.menuLink, MenuLinkAPI.class);
                        MENULINK_TOKEN itemParseMenu = new MENULINK_TOKEN();
                        itemParseMenu.MENU_LINK_NAME = EscapeUtils.CheckTextNull(itemParse.menuName);
                        itemParseMenu.MENU_LINK_URL = EscapeUtils.CheckTextNull(itemParse.menuUrl);
                        ATTRIBUTE_DATA dataATTR = new ATTRIBUTE_DATA();
                        dataATTR.setMenulink(itemParseMenu);
                        valueATTR.setAttributeData(dataATTR);
                    }
                    valueATTR.setTypeName(sTokenAttrTypeCode);
                    valueATTR.setRequestState(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_PENDING);
                    valueATTR.setCreateUser(raFullname + " (" + pApproveCAUser + ")");
                    valueATTR.setCreateDt(new Date());
                    int intTOKEN_ATTR_STATE = Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_PENDING);
                    if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_LOCK))
                    {
                        //<editor-fold defaultstate="collapsed" desc="### LOCK">
                        String[] pRESPONSE_CODE_NAME = new String[1];
                        if(raServiceReq.approveEnabled == true) {
                            valueATTR.setRequestState(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_APPROVED);
                            valueATTR.setApproveUser(raFullname + " (" + pApproveCAUser + ")");
                            valueATTR.setApproveDt(new Date());
                            intTOKEN_ATTR_STATE = Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_COMMITED);
                        }
                        int[] pTOKEN_ATTR_ID = new int[1];
                        db.S_BO_API_TOKEN_ATTR_INSERT(sTokenSN, sTokenAttrTypeID, intTOKEN_ATTR_STATE,
                            CommonFunction.GenJSONTokenATTR(valueATTR), pApproveCAUser, pRESPONSE_CODE_NAME, pTOKEN_ATTR_ID);
                        if("0".equals(pRESPONSE_CODE_NAME[0])) {
                            raServiceResp.formFactorTokenID = pTOKEN_ATTR_ID[0];
//                            String sBillCode = System_Log_BillCode[0];
//                            int sizeBill = sBillCode.split("-").length;
//                            System_Log_BillCode[0] = sBillCode.replace(sBillCode.split("-")[sizeBill-1], "") + pTOKEN_ATTR_ID[0];
                            if(raServiceReq.approveEnabled == true) {
                                int[] pTOKEN_ATTR_ID_INNER = new int[1];
                                String[] pRESPONSE_CODE_NAME_INNER = new String[1];
                                for(FormFactorSNInfo itemSN : raServiceReq.formFactorSNInfo) {
                                    String tokenSNInner = EscapeUtils.CheckTextNull(itemSN.formFactorSN);
                                    if(!"".equals(tokenSNInner)) {
                                        valueATTR.setTokenIdOfBundleList(null);
                                        valueATTR.setTokenSn(tokenSNInner);
                                        db.S_BO_API_TOKEN_ATTR_INSERT(tokenSNInner, sTokenAttrTypeID, Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_APPROVED),
                                            CommonFunction.GenJSONTokenATTR(valueATTR), pApproveCAUser, pRESPONSE_CODE_NAME_INNER, pTOKEN_ATTR_ID_INNER);
                                    }
                                }
                            }
                            TOKEN[][] rsTokenResult = new TOKEN[1][];
                            db.S_BO_TOKEN_ATTR_DETAIL(String.valueOf(pTOKEN_ATTR_ID[0]), String.valueOf(raServiceReq.language), rsTokenResult);
                            if(rsTokenResult[0].length > 0)
                            {
                                raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                                raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                            }
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                        }
                        //</editor-fold>
                    } else if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_UNLOCK)
                        || EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_RESET_ACTIVATION_REMAINING_COUNTER))
                    {
                        //<editor-fold defaultstate="collapsed" desc="### UNLOCK - RESET_ACTIVATION_REMAINING_COUNTER">
                        String[] pRESPONSE_CODE_NAME = new String[1];
                        int[] pTOKEN_ATTR_ID = new int[1];
                        if(raServiceReq.approveEnabled == true) {
                            valueATTR.setRequestState(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_APPROVED);
                            valueATTR.setApproveUser(raFullname + " (" + pApproveCAUser + ")");
                            valueATTR.setApproveDt(new Date());
                            if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_UNLOCK)) {
                                intTOKEN_ATTR_STATE = Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_COMMITED);
                            } else {
                                intTOKEN_ATTR_STATE = Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_COMMITED);
                            }
                        }
                        db.S_BO_API_TOKEN_ATTR_INSERT(sTokenSN, sTokenAttrTypeID, intTOKEN_ATTR_STATE,
                            CommonFunction.GenJSONTokenATTR(valueATTR), pApproveCAUser, pRESPONSE_CODE_NAME, pTOKEN_ATTR_ID);
                        if("0".equals(pRESPONSE_CODE_NAME[0])) {
                            raServiceResp.formFactorTokenID = pTOKEN_ATTR_ID[0];
//                            String sBillCode = System_Log_BillCode[0];
//                            int sizeBill = sBillCode.split("-").length;
//                            System_Log_BillCode[0] = sBillCode.replace(sBillCode.split("-")[sizeBill-1], "") + pTOKEN_ATTR_ID[0];
                            if(raServiceReq.approveEnabled == true) {
                                if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_RESET_ACTIVATION_REMAINING_COUNTER)) {
                                    String sACTIVATION_MAX_COUNTER = "5";
                                    if (rsPolicy[0].length > 0) {
                                        for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                            if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_FO_DEFAULT_ACTIVATION_MAX_COUNTER)) {
                                                sACTIVATION_MAX_COUNTER = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                                break;
                                            }
                                        }
                                    }
                                    for (String split : sTokenIdList.split(",")) {
                                        if(!"".equals(split)) {
                                            db.S_BO_TOKEN_UPDATE(Integer.parseInt(split), "", "", "", "", sACTIVATION_MAX_COUNTER, pApproveCAUser);
                                        }
                                    }
                                } else {
                                    int[] pTOKEN_ATTR_ID_INNER = new int[1];
                                    String[] pRESPONSE_CODE_NAME_INNER = new String[1];
                                    for(FormFactorSNInfo itemSN : raServiceReq.formFactorSNInfo) {
                                        String tokenSNInner = EscapeUtils.CheckTextNull(itemSN.formFactorSN);
                                        if(!"".equals(tokenSNInner)) {
                                            valueATTR.setTokenIdOfBundleList(null);
                                            valueATTR.setTokenSn(tokenSNInner);
                                            db.S_BO_API_TOKEN_ATTR_INSERT(tokenSNInner, sTokenAttrTypeID, Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_APPROVED),
                                                CommonFunction.GenJSONTokenATTR(valueATTR), pApproveCAUser, pRESPONSE_CODE_NAME_INNER, pTOKEN_ATTR_ID_INNER);
                                        }
                                    }
                                }
                            }
                            TOKEN[][] rsTokenResult = new TOKEN[1][];
                            db.S_BO_TOKEN_ATTR_DETAIL(String.valueOf(pTOKEN_ATTR_ID[0]), String.valueOf(raServiceReq.language), rsTokenResult);
                            if(rsTokenResult[0].length > 0) {
                                raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                                raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                            }
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                        }
                        //</editor-fold>
                    } else if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_PUSH_NOTFICATION))
                    {
                        //<editor-fold defaultstate="collapsed" desc="### PUSH_NOTFICATION">
                        String[] pRESPONSE_CODE_NAME = new String[1];
                        int[] pTOKEN_ATTR_ID = new int[1];
                        if(raServiceReq.approveEnabled == true) {
                            valueATTR.setRequestState(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_APPROVED);
                            valueATTR.setApproveUser(raFullname + " (" + pApproveCAUser + ")");
                            valueATTR.setApproveDt(new Date());
                            intTOKEN_ATTR_STATE = Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_COMMITED);
                        }
                        db.S_BO_API_TOKEN_ATTR_INSERT(sTokenSN, sTokenAttrTypeID, intTOKEN_ATTR_STATE,
                            CommonFunction.GenJSONTokenATTR(valueATTR), pApproveCAUser, pRESPONSE_CODE_NAME, pTOKEN_ATTR_ID);
                        if("0".equals(pRESPONSE_CODE_NAME[0])) {
                            raServiceResp.formFactorTokenID = pTOKEN_ATTR_ID[0];
//                            String sBillCode = System_Log_BillCode[0];
//                            int sizeBill = sBillCode.split("-").length;
//                            System_Log_BillCode[0] = sBillCode.replace(sBillCode.split("-")[sizeBill-1], "") + pTOKEN_ATTR_ID[0];
                            if(raServiceReq.approveEnabled == true) {
                                oMapperParse = new ObjectMapper();
                                PushNotificationAPI itemParse = oMapperParse.readValue(raServiceReq.pushNotification, PushNotificationAPI.class);
                                PUSH_TOKEN itemParsePush = new PUSH_TOKEN();
                                itemParsePush.PUSH_NOTICE_CONTENT = EscapeUtils.CheckTextNull(itemParse.notificationContent);
                                itemParsePush.PUSH_NOTICE_URL = EscapeUtils.CheckTextNull(itemParse.popupUrl);
                                itemParsePush.PUSH_NOTICE_TEXT_COLOR = EscapeUtils.CheckTextNull(itemParse.textColor);
                                itemParsePush.PUSH_NOTICE_BGR_COLOR = EscapeUtils.CheckTextNull(itemParse.backgroundColor);
                                for (String split : sTokenIdList.split(",")) {
                                    if(!"".equals(split)) {
                                        db.S_BO_TOKEN_UPDATE(Integer.parseInt(split), "", "", objectMapper.writeValueAsString(itemParsePush),"", "", pApproveCAUser);
                                    }
                                }
                            }
                            TOKEN[][] rsTokenResult = new TOKEN[1][];
                            db.S_BO_TOKEN_ATTR_DETAIL(String.valueOf(pTOKEN_ATTR_ID[0]), String.valueOf(raServiceReq.language), rsTokenResult);
                            if(rsTokenResult[0].length > 0) {
                                raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                                raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                            }
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                        }
                        //</editor-fold>
                    } else if(EscapeUtils.CheckTextNull(raServiceReq.queueTypeCode).equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_MENU_LINK))
                    {
                        //<editor-fold defaultstate="collapsed" desc="### MENU_LINK">
                        String[] pRESPONSE_CODE_NAME = new String[1];
                        int[] pTOKEN_ATTR_ID = new int[1];
                        if(raServiceReq.approveEnabled == true) {
                            valueATTR.setRequestState(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_APPROVED);
                            valueATTR.setApproveUser(raFullname + " (" + pApproveCAUser + ")");
                            valueATTR.setApproveDt(new Date());
                            intTOKEN_ATTR_STATE = Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_COMMITED);
                        }
                        db.S_BO_API_TOKEN_ATTR_INSERT(sTokenSN, sTokenAttrTypeID, intTOKEN_ATTR_STATE,
                            CommonFunction.GenJSONTokenATTR(valueATTR), pApproveCAUser, pRESPONSE_CODE_NAME, pTOKEN_ATTR_ID);
                        if("0".equals(pRESPONSE_CODE_NAME[0])) {
                            raServiceResp.formFactorTokenID = pTOKEN_ATTR_ID[0];
//                            String sBillCode = System_Log_BillCode[0];
//                            int sizeBill = sBillCode.split("-").length;
//                            System_Log_BillCode[0] = sBillCode.replace(sBillCode.split("-")[sizeBill-1], "") + pTOKEN_ATTR_ID[0];
                            if(raServiceReq.approveEnabled == true) {
                                oMapperParse = new ObjectMapper();
                                MenuLinkAPI itemParse = oMapperParse.readValue(raServiceReq.menuLink, MenuLinkAPI.class);
                                MENULINK_TOKEN itemParseMenu = new MENULINK_TOKEN();
                                itemParseMenu.MENU_LINK_NAME = EscapeUtils.CheckTextNull(itemParse.menuName);
                                itemParseMenu.MENU_LINK_URL = EscapeUtils.CheckTextNull(itemParse.menuUrl);
                                for (String split : sTokenIdList.split(",")) {
                                    if(!"".equals(split)) {
                                        db.S_BO_TOKEN_UPDATE(Integer.parseInt(split), "", objectMapper.writeValueAsString(itemParseMenu), "", "", "", pApproveCAUser);
                                    }
                                }
                            }
                            TOKEN[][] rsTokenResult = new TOKEN[1][];
                            db.S_BO_TOKEN_ATTR_DETAIL(String.valueOf(pTOKEN_ATTR_ID[0]), String.valueOf(raServiceReq.language), rsTokenResult);
                            if(rsTokenResult[0].length > 0) {
                                raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                                raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                            }
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        } else {
                            raServiceResp.responseCode = Integer.parseInt(pRESPONSE_CODE_NAME[0]);
                        }
                        //</editor-fold>
                    } else {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_TYPE_INVALID;
                    }
                    raServiceResp.requestExecutionProcess = Definitions.CONFIG_API_RESULT_PROCESS_COMPLETE;
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTokenSN;
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### approveFormFactorTokenBundleProcess">
    public void approveFormFactorTokenBundleProcess(String pPARENT_ID, int pBRANCH_ID, String pApproveCAUser,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG,
        String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES, String sIP_Request,
        RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_APPROVAL_FORMFACTOR_TOKEN_BUNDLE;
        ObjectMapper objectMapper;
        String sTokenSN = "";
        RAServiceReq raReqTemp = new RAServiceReq();
        raReqTemp.billCode = raServiceReq.billCode;
        raReqTemp.remark = raServiceReq.remark;
        raReqTemp.language = raServiceReq.language;
        raReqTemp.credentialData = raServiceReq.credentialData;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### CHECK BILLCODE">
            String sTokenAttrType = "";
            String sTokenAttrState = "";
            String sVALUE_OLD = "";
            int vTOKEN_ATTR_TYPE_ID = 0;
            int sBranchId_Cert = 0;
            String sBillCode = EscapeUtils.CheckTextNull(raServiceReq.billCode); 
            if(!"".equals(sBillCode)){
                SYSTEM_LOG[][] rsPgin = new SYSTEM_LOG[1][];
                db.S_BO_SYSTEM_LOG_BY_BILLCODE(sBillCode, raServiceReq.language, rsPgin);
                if(rsPgin[0].length > 0) {
                    String sVALUE = EscapeUtils.CheckTextNull(rsPgin[0][0].RESPONSE_DATA);
                    ObjectMapper oMapperParse = new ObjectMapper();
                    RAServiceResp itemParse = oMapperParse.readValue(sVALUE, RAServiceResp.class);
                    raServiceReq.formFactorTokenID = itemParse.formFactorTokenID;
                }
            }
            if(raServiceReq.formFactorTokenID != 0) {
                TOKEN[][] rsToken= new TOKEN[1][];
                db.S_BO_API_TOKEN_GET_INFO("", String.valueOf(raServiceReq.formFactorTokenID), "", raServiceReq.language, rsToken);
                if(rsToken[0].length > 0) {
                    vTOKEN_ATTR_TYPE_ID = rsToken[0][0].TOKEN_ATTR_TYPE_ID;
                    sTokenAttrState = rsToken[0][0].TOKEN_ATTR_STATE_NAME;
                    sTokenAttrType = rsToken[0][0].TOKEN_ATTR_TYPE_NAME;
                    sBranchId_Cert = rsToken[0][0].BRANCH_ID;
                    sVALUE_OLD = rsToken[0][0].VALUE;
                    if("".equals(sVALUE_OLD)) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
                }
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### REQUEST CHECK VALID">
            if(sTokenAttrState.equals(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_PENDING))
            {
                if(!sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_UNLOCK)
                    && !sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_RESET_ACTIVATION_REMAINING_COUNTER)
                    && !sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_LOCK)
                    && !sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_MENU_LINK)
                    && !sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_PUSH_NOTFICATION))
                {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_TYPE_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_STATUS_INVALID;
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                //<editor-fold defaultstate="collapsed" desc="### GET FULLNAME">
                String raFullname = "";
                UserInfo[][] userDetail = new UserInfo[1][];
                db.S_BO_API_USER_DETAIL(pApproveCAUser, raServiceReq.language, userDetail);
                if (userDetail[0].length > 0) {
                    raFullname = EscapeUtils.CheckTextNull(userDetail[0][0].fullName);
                }
                //</editor-fold>

                // VALUE ATTR_FRIST
                ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(sVALUE_OLD, ATTRIBUTE_VALUES.class);
//                String sToken_Frist = valueATTR_Frist.getTokenSn();
//                String sTypeName_Frist = valueATTR_Frist.getTypeName();
//                String sCreateUser_Frist = valueATTR_Frist.getCreateUser();
//                Date sCreateDt_Frist = valueATTR_Frist.getCreateDt();
                String sTokenIdList = EscapeUtils.CheckTextNull(valueATTR_Frist.getTokenIdOfBundleList());
                // VALUE ATTR_LAST
//                ATTRIBUTE_VALUES valueATTR_Last = new ATTRIBUTE_VALUES();
//                valueATTR_Last.setTokenSn(sToken_Frist);
//                valueATTR_Last.setTypeName(sTypeName_Frist);
                valueATTR_Frist.setRequestState(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_APPROVED);
//                valueATTR_Last.setCreateUser(sCreateUser_Frist);
//                valueATTR_Last.setCreateDt(sCreateDt_Frist);
                valueATTR_Frist.setApproveUser(raFullname + " (" + pApproveCAUser + ")");
                valueATTR_Frist.setApproveDt(new Date());
                valueATTR_Frist.setTokenApproveRemark(EscapeUtils.CheckTextNull(raServiceReq.remark));
                String sParamSQL = db.S_BO_API_TOKEN_ATTR_BUNDLE_APPROVED(raServiceReq.formFactorTokenID, Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_COMMITED),
                    CommonFunction.GenJSONTokenATTR(valueATTR_Frist), pApproveCAUser);
                if("0".equals(sParamSQL)){
                    if(!"".equals(sTokenIdList)) {
                        //<editor-fold defaultstate="collapsed" desc="### COMMITED REQUEST">
                        if (vTOKEN_ATTR_TYPE_ID == Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_LOCK) {
                            int[] pTOKEN_ATTR_ID_INNER = new int[1];
                            String[] pRESPONSE_CODE_NAME_INNER = new String[1];
                            for (String split : sTokenIdList.split(",")) {
                                if (!"".equals(split.trim())) {
                                    TOKEN[][] rsTokenInsert = new TOKEN[1][];
                                    db.S_BO_TOKEN_DETAIL(split.trim(), rsTokenInsert);
                                    if(rsTokenInsert[0].length > 0) {
                                        String tokenSNInner = EscapeUtils.CheckTextNull(rsTokenInsert[0][0].TOKEN_SN);
                                        valueATTR_Frist.setTokenIdOfBundleList(null);
                                        valueATTR_Frist.setTokenSn(tokenSNInner);
                                        db.S_BO_API_TOKEN_ATTR_INSERT(tokenSNInner, Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_LOCK, Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_APPROVED),
                                            CommonFunction.GenJSONTokenATTR(valueATTR_Frist), pApproveCAUser, pRESPONSE_CODE_NAME_INNER, pTOKEN_ATTR_ID_INNER);
                                    }
                                }
                            }
                        } else if (vTOKEN_ATTR_TYPE_ID == Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_UNLOCK) {
                            int[] pTOKEN_ATTR_ID_INNER = new int[1];
                            String[] pRESPONSE_CODE_NAME_INNER = new String[1];
                            for (String split : sTokenIdList.split(",")) {
                                if (!"".equals(split.trim())) {
                                    TOKEN[][] rsTokenInsert = new TOKEN[1][];
                                    db.S_BO_TOKEN_DETAIL(split.trim(), rsTokenInsert);
                                    if(rsTokenInsert[0].length > 0) {
                                        String tokenSNInner = EscapeUtils.CheckTextNull(rsTokenInsert[0][0].TOKEN_SN);
                                        valueATTR_Frist.setTokenIdOfBundleList(null);
                                        valueATTR_Frist.setTokenSn(tokenSNInner);
                                        db.S_BO_API_TOKEN_ATTR_INSERT(tokenSNInner, Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_UNLOCK, Integer.parseInt(Definitions.CONFIG_TOKEN_ATTR_STATE_ID_APPROVED),
                                            CommonFunction.GenJSONTokenATTR(valueATTR_Frist), pApproveCAUser, pRESPONSE_CODE_NAME_INNER, pTOKEN_ATTR_ID_INNER);
                                    }
                                }
                            }
                        } else if (vTOKEN_ATTR_TYPE_ID == Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_RESET_ACTIVATION_REMAINING_COUNTER) {
                            String sACTIVATION_MAX_COUNTER = "5";
                            GENERAL_POLICY[][] rsPolicy = new GENERAL_POLICY[1][];
                            db.S_BO_GENERAL_POLICY_LIST(String.valueOf(raServiceReq.language), rsPolicy);
                            if (rsPolicy[0].length > 0) {
                                for (GENERAL_POLICY rsPolicy1 : rsPolicy[0]) {
                                    if (rsPolicy1.NAME.equals(Definitions.CONFIG_POLICY_FO_DEFAULT_ACTIVATION_MAX_COUNTER)) {
                                        sACTIVATION_MAX_COUNTER = EscapeUtils.CheckTextNull(rsPolicy1.VALUE);
                                        break;
                                    }
                                }
                            }
                            for (String split : sTokenIdList.split(",")) {
                                if (!"".equals(split)) {
                                    db.S_BO_TOKEN_UPDATE(Integer.parseInt(split), "", "", "", "", sACTIVATION_MAX_COUNTER, pApproveCAUser);
                                }
                            }
                        } else if (vTOKEN_ATTR_TYPE_ID == Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_PUSH_NOTFICATION) {
                            String sJSONPush = Definitions.CONFIG_UPDATE_DEFAULT_VALUE_NULL;
                            ATTRIBUTE_DATA dataATTR = valueATTR_Frist.getAttributeData();
                            PUSH_TOKEN sPushValue = dataATTR.getSticker();
                            if(!"".equals(sPushValue.PUSH_NOTICE_BGR_COLOR) || !"".equals(sPushValue.PUSH_NOTICE_CONTENT)
                                || !"".equals(sPushValue.PUSH_NOTICE_TEXT_COLOR) || !"".equals(sPushValue.PUSH_NOTICE_URL))
                            {
                                PUSH_TOKEN itemPUSH_TOKEN = new PUSH_TOKEN();
                                itemPUSH_TOKEN.PUSH_NOTICE_CONTENT = sPushValue.PUSH_NOTICE_CONTENT;
                                itemPUSH_TOKEN.PUSH_NOTICE_URL = sPushValue.PUSH_NOTICE_URL;
                                itemPUSH_TOKEN.PUSH_NOTICE_TEXT_COLOR = sPushValue.PUSH_NOTICE_TEXT_COLOR;
                                itemPUSH_TOKEN.PUSH_NOTICE_BGR_COLOR = sPushValue.PUSH_NOTICE_BGR_COLOR;
                                sJSONPush = objectMapper.writeValueAsString(itemPUSH_TOKEN);
                            }
                            for (String split : sTokenIdList.split(",")) {
                                if (!"".equals(split)) {
                                    db.S_BO_TOKEN_UPDATE(Integer.parseInt(split), "", "", sJSONPush, "", "", pApproveCAUser);
                                }
                            }
                        } else if (vTOKEN_ATTR_TYPE_ID == Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_MENU_LINK) {
                            ATTRIBUTE_DATA dataATTR = valueATTR_Frist.getAttributeData();
                            MENULINK_TOKEN sMenuValue = dataATTR.getMenulink();
                            String sJSONMenu = "";
                            if(!"".equals(sMenuValue.MENU_LINK_NAME) || !"".equals(sMenuValue.MENU_LINK_URL))
                            {
                                MENULINK_TOKEN itemMENULINK_TOKEN = new MENULINK_TOKEN();
                                itemMENULINK_TOKEN.MENU_LINK_NAME = sMenuValue.MENU_LINK_NAME;
                                itemMENULINK_TOKEN.MENU_LINK_URL = sMenuValue.MENU_LINK_URL;
                                sJSONMenu = objectMapper.writeValueAsString(itemMENULINK_TOKEN);
                            }
                            for (String split : sTokenIdList.split(",")) {
                                if (!"".equals(split)) {
                                    db.S_BO_TOKEN_UPDATE(Integer.parseInt(split), "", sJSONMenu, "", "", "", pApproveCAUser);
                                }
                            }
                        }
                        //</editor-fold>
                    }
                    TOKEN[][] rsTokenResult = new TOKEN[1][];
                    db.S_BO_TOKEN_ATTR_DETAIL(String.valueOf(raServiceReq.formFactorTokenID),
                        String.valueOf(raServiceReq.language), rsTokenResult);
                    if(rsTokenResult[0].length > 0)
                    {
                        raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                        raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                    }
                } else {
                    raServiceResp.responseCode = Integer.parseInt(sParamSQL);
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTokenSN;   
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### declineFormFactorTokenBundleProcess">
    public void declineFormFactorTokenBundleProcess(String pPARENT_ID, int pBRANCH_ID, String pApproveCAUser,
        int[] System_Log_ID, String[] System_Log_BillCode, String[] sTOKEN_SN_LOG,
        String sFUNCTIONALTITY_PROPERTIES, String sIP_ADDRESS_PROPERTIES, String sIP_Request,
        RAServiceReq raServiceReq, RAServiceResp raServiceResp) throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_DECLINE_FORMFACTOR_TOKEN_BUNDLE;
        ObjectMapper objectMapper;
        String sTokenSN = "";
        RAServiceReq raReqTemp = new RAServiceReq();
        raReqTemp.formFactorTokenID = raServiceReq.formFactorTokenID;
        raReqTemp.declineReason = raServiceReq.declineReason;
        raReqTemp.language = raServiceReq.language;
        raReqTemp.credentialData = raServiceReq.credentialData;
        objectMapper = new ObjectMapper();
        db.S_BO_SYSTEM_LOG_INSERT(Definitions.CONFIG_LOG_SOURCE_API_RA, Definitions.CONFIG_LOG_SOURCE_API_RA, "", "",
            sFunctionWS, objectMapper.writeValueAsString(raReqTemp), raServiceReq.approveUser, System_Log_ID, sIP_Request, System_Log_BillCode);
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET TOKEN DETAIL">
            String sTokenAttrType = "";
            String sTokenAttrState = "";
            String sVALUE_OLD = "";
            int sBranchId_Cert = 0;
            String sBillCode = EscapeUtils.CheckTextNull(raServiceReq.billCode); 
            if(!"".equals(sBillCode)){
                SYSTEM_LOG[][] rsPgin = new SYSTEM_LOG[1][];
                db.S_BO_SYSTEM_LOG_BY_BILLCODE(sBillCode, raServiceReq.language, rsPgin);
                if(rsPgin[0].length > 0) {
                    String sVALUE = EscapeUtils.CheckTextNull(rsPgin[0][0].RESPONSE_DATA);
                    ObjectMapper oMapperParse = new ObjectMapper();
                    RAServiceResp itemParse = oMapperParse.readValue(sVALUE, RAServiceResp.class);
                    raServiceReq.formFactorTokenID = itemParse.formFactorTokenID;
                }
            }
            if(raServiceReq.formFactorTokenID != 0)
            {
                TOKEN[][] rsToken= new TOKEN[1][];
                db.S_BO_API_TOKEN_GET_INFO("", String.valueOf(raServiceReq.formFactorTokenID), "", raServiceReq.language, rsToken);
                if(rsToken[0].length > 0) {
                    sTokenAttrState = rsToken[0][0].TOKEN_ATTR_STATE_NAME;
                    sTokenAttrType = rsToken[0][0].TOKEN_ATTR_TYPE_NAME;
                    sBranchId_Cert = rsToken[0][0].BRANCH_ID;
                    sVALUE_OLD = rsToken[0][0].VALUE;
                    sTokenSN = rsToken[0][0].TOKEN_SN;
                    if("".equals(sVALUE_OLD)) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
            if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
            {
                if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                {
                    boolean branchAccessOld = false;
                    BRANCH[][] rsBranch;
                    rsBranch = new BRANCH[1][];
                    db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                    if(rsBranch[0].length > 0) {
                        for(BRANCH item : rsBranch[0]) {
                            if(item.ID == sBranchId_Cert) {
                                branchAccessOld = true;
                                break;
                            }
                        }
                    }
                    if(branchAccessOld == false) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                    }
                }
            }
            //</editor-fold>

            //<editor-fold defaultstate="collapsed" desc="### REQUEST CHECK VALID">
            if(sTokenAttrState.equals(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_PENDING)
                || sTokenAttrState.equals(Definitions.CONFIG_TOKEN_ATTR_STATE_CODE_APPROVED))
            {
                if(!sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_UNLOCK)
                    && !sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_RESET_ACTIVATION_REMAINING_COUNTER)
                    && !sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_LOCK)
                    && !sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_MENU_LINK)
                    && !sTokenAttrType.equals(Definitions.CONFIG_TOKEN_ATTR_TYPE_CODE_PUSH_NOTFICATION))
                {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_TYPE_INVALID;
                }
            } else {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_STATUS_INVALID;
            }
            //</editor-fold>

            if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                // VALUE ATTR
                ATTRIBUTE_VALUES valueATTR = objectMapper.readValue(sVALUE_OLD, ATTRIBUTE_VALUES.class);
                valueATTR.setTokenDeclineReason(EscapeUtils.CheckTextNull(raServiceReq.declineReason));
                db.S_BO_API_TOKEN_ATTR_DECLINED(raServiceReq.formFactorTokenID, CommonFunction.GenJSONTokenATTR(valueATTR), pApproveCAUser);
                TOKEN[][] rsTokenResult = new TOKEN[1][];
                db.S_BO_API_TOKEN_GET_INFO("", String.valueOf(raServiceReq.formFactorTokenID), "", raServiceReq.language, rsTokenResult);
                if(rsTokenResult[0].length > 0)
                {
                    raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                    raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                }
            }
        }
        sTOKEN_SN_LOG[0] = sTokenSN;
        
    }
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="### getFormFactorTokenBundleProcess">
    public void getFormFactorTokenBundleProcess(String pPARENT_ID, int pBRANCH_ID, String sFUNCTIONALTITY_PROPERTIES, 
        String sIP_ADDRESS_PROPERTIES, String sIP_Request, RAServiceReq raServiceReq, RAServiceResp raServiceResp)
    throws Exception {
        ConnectDatabase db = new ConnectDatabase();
        String sFunctionWS = Definitions.CONFIG_LOG_FUNCTIONALITY_API_GET_FORMFACTOR_TOKEN_BUNDLE;
        ObjectMapper objectMapper = new ObjectMapper();
        //<editor-fold defaultstate="collapsed" desc="### CHECK IP - FUNCTION ACCESS">
        CERTIFICATION_POLICY_DATA[][] resPolicyData;
        boolean checkFunctionAccessAll = CommonFunction.checkAPIAccessFunctionAll(sFUNCTIONALTITY_PROPERTIES);
        if (checkFunctionAccessAll == false) {
            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_FUNCTION_INVALID;
            resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
            CommonFunction.getFunctionAccessList(sFUNCTIONALTITY_PROPERTIES, resPolicyData);
            if (resPolicyData[0].length > 0) {
                for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                    if (sFunctionWS.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                        break;
                    }
                }
            }
        }
        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            boolean checkIPAccessAll = CommonFunction.checkAPIAccessIPAll(sIP_ADDRESS_PROPERTIES);
            if (checkIPAccessAll == false) {
                raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_ACCESS_IP_INVALID;
                resPolicyData = new CERTIFICATION_POLICY_DATA[1][];
                CommonFunction.getIPAccessList(sIP_ADDRESS_PROPERTIES, resPolicyData);
                if (resPolicyData[0].length > 0) {
                    for (CERTIFICATION_POLICY_DATA rsPolicyProperties : resPolicyData[0]) {
                        if (sIP_Request.equals(EscapeUtils.CheckTextNull(rsPolicyProperties.name))) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS;
                            break;
                        }
                    }
                }
            }
        }
        //</editor-fold>

        if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
            //<editor-fold defaultstate="collapsed" desc="### GET TOKEN DETAIL">
            String sBillCode = EscapeUtils.CheckTextNull(raServiceReq.billCode);
            String sRequestExecProcess = Definitions.CONFIG_API_RESULT_PROCESS_PENDDING;
            if(!"".equals(sBillCode)) {
                SYSTEM_LOG[][] rsPgin = new SYSTEM_LOG[1][];
                db.S_BO_SYSTEM_LOG_BY_BILLCODE(sBillCode, raServiceReq.language, rsPgin);
                if(rsPgin[0].length > 0) {
                    String sRESPONSE_DATA = EscapeUtils.CheckTextNull(rsPgin[0][0].RESPONSE_DATA);
                    ObjectMapper oMapperParse = new ObjectMapper();
                    RAServiceResp itemParse = oMapperParse.readValue(sRESPONSE_DATA, RAServiceResp.class);
                    raServiceReq.formFactorTokenID = itemParse.formFactorTokenID;
                    sRequestExecProcess = EscapeUtils.CheckTextNull(itemParse.requestExecutionProcess);
                    raServiceResp.billCode = sBillCode;
                }
            }
            String sTokenAttrType = "";
            int vTOKEN_ATTR_TYPE_ID = 0;
            int sBranchId_Cert = 0;
            String sVALUE_OLD = "";
            if(raServiceReq.formFactorTokenID != 0) {
                TOKEN[][] rsToken= new TOKEN[1][];
                db.S_BO_API_TOKEN_GET_INFO("", String.valueOf(raServiceReq.formFactorTokenID), "", raServiceReq.language, rsToken);
                if(rsToken[0].length > 0) {
                    vTOKEN_ATTR_TYPE_ID = rsToken[0][0].TOKEN_ATTR_TYPE_ID;
                    sTokenAttrType = rsToken[0][0].TOKEN_ATTR_TYPE_NAME;
                    sBranchId_Cert = rsToken[0][0].BRANCH_ID;
                    sVALUE_OLD = rsToken[0][0].VALUE;
                    if("".equals(sVALUE_OLD)) {
                        raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                    }
                } else {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                }
            }
            //</editor-fold>
            if(raServiceReq.formFactorTokenID != 0) {
                //<editor-fold defaultstate="collapsed" desc="### CHECK BRANCH">
                if(raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS)
                {
                    if(!pPARENT_ID.equals(Definitions.CONFIG_AGENT_ROOT))
                    {
                        boolean branchAccessOld = false;
                        BRANCH[][] rsBranch;
                        rsBranch = new BRANCH[1][];
                        db.S_BO_BRANCH_GET_TREE_BRANCH(pBRANCH_ID, 1, rsBranch);
                        if(rsBranch[0].length > 0) {
                            for(BRANCH item : rsBranch[0]) {
                                if(item.ID == sBranchId_Cert) {
                                    branchAccessOld = true;
                                    break;
                                }
                            }
                        }
                        if(branchAccessOld == false) {
                            raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_CERTIFICATION_BENEFICIARY_BRANCH_INVALID;
                        }
                    }
                }
                //</editor-fold>

                if (raServiceResp.responseCode == Definitions.CONFIG_WS_RESPONSE_CODE_SUCCESS) {
                    ATTRIBUTE_VALUES valueATTR_Frist = objectMapper.readValue(sVALUE_OLD, ATTRIBUTE_VALUES.class);
                    if (vTOKEN_ATTR_TYPE_ID == Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_PUSH_NOTFICATION) {
                        ATTRIBUTE_DATA dataATTR = valueATTR_Frist.getAttributeData();
                        PUSH_TOKEN sPushValue = dataATTR.getSticker();
                        PushNotificationAPI newPush = new PushNotificationAPI();
                        newPush.notificationContent = sPushValue.PUSH_NOTICE_CONTENT;
                        newPush.popupUrl = sPushValue.PUSH_NOTICE_URL;
                        newPush.textColor = sPushValue.PUSH_NOTICE_TEXT_COLOR;
                        newPush.backgroundColor = sPushValue.PUSH_NOTICE_BGR_COLOR;
                        raServiceResp.pushNotification = objectMapper.writeValueAsString(newPush);
                    } else if (vTOKEN_ATTR_TYPE_ID == Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_MENU_LINK) {
                        ATTRIBUTE_DATA dataATTR = valueATTR_Frist.getAttributeData();
                        MENULINK_TOKEN sMenuValue = dataATTR.getMenulink();
                        MenuLinkAPI newMenu = new MenuLinkAPI();
                        newMenu.menuName = sMenuValue.MENU_LINK_NAME;
                        newMenu.menuUrl = sMenuValue.MENU_LINK_URL;
                        raServiceResp.menuLink = objectMapper.writeValueAsString(newMenu);
                    } else if (vTOKEN_ATTR_TYPE_ID == Definitions.CONFIG_TOKEN_ATTR_TYPE_ID_LOCK) {
                        raServiceResp.remark = valueATTR_Frist.getActionReason();
                    }
                    raServiceResp.queueTypeCode = sTokenAttrType;
                    String sTokenIdList = EscapeUtils.CheckTextNull(valueATTR_Frist.getTokenIdOfBundleList());
                    if(!"".equals(sTokenIdList)){
                        FormFactorSNInfo[][] rsTokenSN = new FormFactorSNInfo[1][];
                        ArrayList<FormFactorSNInfo> tokenList = new ArrayList<>();
                        for (String split : sTokenIdList.split(",")) {
                            if(!"".equals(split.trim())) {
                                TOKEN[][] rsTokenInsert = new TOKEN[1][];
                                db.S_BO_TOKEN_DETAIL(split.trim(), rsTokenInsert);
                                if(rsTokenInsert[0].length > 0) {
                                    FormFactorSNInfo item = new FormFactorSNInfo();
                                    item.formFactorSN = EscapeUtils.CheckTextNull(rsTokenInsert[0][0].TOKEN_SN);
                                    tokenList.add(item);
                                }
                            }
                        }
                        rsTokenSN[0] = new FormFactorSNInfo[tokenList.size()];
                        rsTokenSN[0] = tokenList.toArray(rsTokenSN[0]);
                        raServiceResp.formFactorSNInfo = rsTokenSN[0];
                    }
                    raServiceResp.requestExecutionProcess = sRequestExecProcess;
                    TOKEN[][] rsTokenResult = new TOKEN[1][];
                    db.S_BO_API_TOKEN_GET_INFO("", String.valueOf(raServiceReq.formFactorTokenID), "", raServiceReq.language, rsTokenResult);
                    if(rsTokenResult[0].length > 0)
                    {
                        raServiceResp.queueStateCode = rsTokenResult[0][0].TOKEN_ATTR_STATE_NAME;
                        raServiceResp.queueStateName = rsTokenResult[0][0].TOKEN_ATTR_STATE_DESC;
                    }
                }
            } else {
                if(sRequestExecProcess.equals(Definitions.CONFIG_API_RESULT_PROCESS_COMPLETE)) {
                    raServiceResp.responseCode = Definitions.CONFIG_WS_RESPONSE_CODE_TOKEN_REQUEST_INVALID;
                } else {
                    raServiceResp.requestExecutionProcess = sRequestExecProcess;
                }
            }
        }        
    }
    //</editor-fold>
    
    
}
